
Practica3_Emma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001820  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019e4  080019e4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080019e4  080019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019ec  080019ec  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019ec  080019ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080019f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000028  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005252  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000132f  00000000  00000000  000252aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  000265e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000460  00000000  00000000  00026af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250ec  00000000  00000000  00026f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000081e8  00000000  00000000  0004c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e11d6  00000000  00000000  0005422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001210  00000000  00000000  00135454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080019b4 	.word	0x080019b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080019b4 	.word	0x080019b4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <delayInit>:

// Entrada: Puntero al delay y su duración en ms
// Salida: Ninguna
// Función: Inicializa los parámetros internos del delay
void delayInit( delay_t * delay, tick_t duration )
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	if((delay != NULL) && (duration > 0))			// Verifica que el puntero sea valido y que la duracion sea un valor positivo
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <delayInit+0x28>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <delayInit+0x28>
	{
		delay->startTime = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
		delay->duration = duration;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	605a      	str	r2, [r3, #4]
		delay->running = false;						// Inicializa el delay detenido
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	721a      	strb	r2, [r3, #8]
	}
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <delayRead>:

// Entrada: Puntero al delay
// Salida: Bool que indica si ya transcurrió el tiempo del delay o no.
// Función: Comprueba si ya transcurrio el tiempo del delay
bool_t delayRead( delay_t * delay )
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if((delay != NULL) && (delay > 0))			// Verifica que el puntero sea válido y que la duración sea un valor positivo
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d021      	beq.n	8000576 <delayRead+0x52>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d01e      	beq.n	8000576 <delayRead+0x52>
	{
		if(delay->running)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7a1b      	ldrb	r3, [r3, #8]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d010      	beq.n	8000562 <delayRead+0x3e>
		{
			if(HAL_GetTick() >= (delay->startTime + delay->duration))
 8000540:	f000 fb46 	bl	8000bd0 <HAL_GetTick>
 8000544:	4601      	mov	r1, r0
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	4413      	add	r3, r2
 8000550:	4299      	cmp	r1, r3
 8000552:	d304      	bcc.n	800055e <delayRead+0x3a>
			{
				delay->running = false;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	721a      	strb	r2, [r3, #8]
				return true;
 800055a:	2301      	movs	r3, #1
 800055c:	e00c      	b.n	8000578 <delayRead+0x54>
			}
			else
			{
				return false;
 800055e:	2300      	movs	r3, #0
 8000560:	e00a      	b.n	8000578 <delayRead+0x54>
			}
		}
		else
		{
			delay->startTime = HAL_GetTick();
 8000562:	f000 fb35 	bl	8000bd0 <HAL_GetTick>
 8000566:	4602      	mov	r2, r0
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	601a      	str	r2, [r3, #0]
			delay->running   = true;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2201      	movs	r2, #1
 8000570:	721a      	strb	r2, [r3, #8]
			return false;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <delayRead+0x54>
		}
	}
	else
	{
		return false;
 8000576:	2300      	movs	r3, #0
	}
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <delayWrite>:

// Entrada: Puntero al delay y su duraciónen ms
// Salida: Ninguna
// Función: Cambia la duración del delay, sin importar si está corriendo o no
void delayWrite( delay_t * delay, tick_t duration )
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	if((delay != NULL) && (duration > 0))			// Verifica que el puntero sea válido y que la duración sea un valor positivo
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d005      	beq.n	800059c <delayWrite+0x1c>
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <delayWrite+0x1c>
	{
		delay->duration = duration;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	605a      	str	r2, [r3, #4]
	}
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <miToggleLed>:

// Entrada: Número de led
// Salida: Ninguna
// Función: Cambio de estado de led de entrada
void miToggleLed(uint8_t led)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	if (led == 1)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d126      	bne.n	8000606 <miToggleLed+0x5e>
	{
		if(ON_1==0)
 80005b8:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <miToggleLed+0x140>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d10e      	bne.n	80005de <miToggleLed+0x36>
		{
			ON_1=1;
 80005c0:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <miToggleLed+0x140>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
			GPIOB->BSRR |= (1<<miLed1);
 80005c6:	4b49      	ldr	r3, [pc, #292]	; (80006ec <miToggleLed+0x144>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a49      	ldr	r2, [pc, #292]	; (80006f0 <miToggleLed+0x148>)
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	2101      	movs	r1, #1
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a45      	ldr	r2, [pc, #276]	; (80006ec <miToggleLed+0x144>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	6193      	str	r3, [r2, #24]
			ON_3=0;
			GPIOB->BSRR |= (1<<(16+miLed3));
			GPIOB->BSRR |= (1<<(16+miLed3bis));
		}
	}
}
 80005dc:	e07d      	b.n	80006da <miToggleLed+0x132>
		else if(ON_1==1)
 80005de:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <miToggleLed+0x140>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d179      	bne.n	80006da <miToggleLed+0x132>
			ON_1=0;
 80005e6:	4b40      	ldr	r3, [pc, #256]	; (80006e8 <miToggleLed+0x140>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
			GPIOB->BSRR |= (1<<(16+miLed1));
 80005ec:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <miToggleLed+0x144>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a3f      	ldr	r2, [pc, #252]	; (80006f0 <miToggleLed+0x148>)
 80005f2:	6812      	ldr	r2, [r2, #0]
 80005f4:	3210      	adds	r2, #16
 80005f6:	2101      	movs	r1, #1
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a3b      	ldr	r2, [pc, #236]	; (80006ec <miToggleLed+0x144>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6193      	str	r3, [r2, #24]
}
 8000604:	e069      	b.n	80006da <miToggleLed+0x132>
	else if (led == 2) //led verde
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d126      	bne.n	800065a <miToggleLed+0xb2>
		if(ON_2==0)
 800060c:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <miToggleLed+0x14c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10e      	bne.n	8000632 <miToggleLed+0x8a>
			ON_2=1;
 8000614:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <miToggleLed+0x14c>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
			GPIOB->BSRR |= (1<<miLed2);
 800061a:	4b34      	ldr	r3, [pc, #208]	; (80006ec <miToggleLed+0x144>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a36      	ldr	r2, [pc, #216]	; (80006f8 <miToggleLed+0x150>)
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <miToggleLed+0x144>)
 800062c:	430b      	orrs	r3, r1
 800062e:	6193      	str	r3, [r2, #24]
}
 8000630:	e053      	b.n	80006da <miToggleLed+0x132>
		else if(ON_2==1)
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <miToggleLed+0x14c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d14f      	bne.n	80006da <miToggleLed+0x132>
			ON_2=0;
 800063a:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <miToggleLed+0x14c>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
			GPIOB->BSRR |= (1<<(16+miLed2));
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <miToggleLed+0x144>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <miToggleLed+0x150>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	3210      	adds	r2, #16
 800064a:	2101      	movs	r1, #1
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	4611      	mov	r1, r2
 8000652:	4a26      	ldr	r2, [pc, #152]	; (80006ec <miToggleLed+0x144>)
 8000654:	430b      	orrs	r3, r1
 8000656:	6193      	str	r3, [r2, #24]
}
 8000658:	e03f      	b.n	80006da <miToggleLed+0x132>
	else if (led == 3) //led rojo
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d13c      	bne.n	80006da <miToggleLed+0x132>
		if(ON_3==0)
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <miToggleLed+0x154>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d119      	bne.n	800069c <miToggleLed+0xf4>
			ON_3=1;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <miToggleLed+0x154>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
			GPIOB->BSRR |= (1<<miLed3);
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <miToggleLed+0x144>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a23      	ldr	r2, [pc, #140]	; (8000700 <miToggleLed+0x158>)
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	2101      	movs	r1, #1
 8000678:	fa01 f202 	lsl.w	r2, r1, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <miToggleLed+0x144>)
 8000680:	430b      	orrs	r3, r1
 8000682:	6193      	str	r3, [r2, #24]
			GPIOB->BSRR |= (1<<miLed3bis);
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <miToggleLed+0x144>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <miToggleLed+0x15c>)
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	2101      	movs	r1, #1
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a15      	ldr	r2, [pc, #84]	; (80006ec <miToggleLed+0x144>)
 8000696:	430b      	orrs	r3, r1
 8000698:	6193      	str	r3, [r2, #24]
}
 800069a:	e01e      	b.n	80006da <miToggleLed+0x132>
		else if(ON_3==1)
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <miToggleLed+0x154>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d11a      	bne.n	80006da <miToggleLed+0x132>
			ON_3=0;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <miToggleLed+0x154>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			GPIOB->BSRR |= (1<<(16+miLed3));
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <miToggleLed+0x144>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <miToggleLed+0x158>)
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	3210      	adds	r2, #16
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <miToggleLed+0x144>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6193      	str	r3, [r2, #24]
			GPIOB->BSRR |= (1<<(16+miLed3bis));
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <miToggleLed+0x144>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <miToggleLed+0x15c>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	3210      	adds	r2, #16
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a05      	ldr	r2, [pc, #20]	; (80006ec <miToggleLed+0x144>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6193      	str	r3, [r2, #24]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000048 	.word	0x20000048
 80006ec:	40020400 	.word	0x40020400
 80006f0:	20000044 	.word	0x20000044
 80006f4:	20000049 	.word	0x20000049
 80006f8:	20000000 	.word	0x20000000
 80006fc:	2000004a 	.word	0x2000004a
 8000700:	20000008 	.word	0x20000008
 8000704:	2000000c 	.word	0x2000000c

08000708 <misLeds_Init>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de los leds de mi placa (diferente a Nucleo)
void misLeds_Init()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0); //Habilita puerto A <-- para user Button PA0
 800070c:	4bab      	ldr	r3, [pc, #684]	; (80009bc <misLeds_Init+0x2b4>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4aaa      	ldr	r2, [pc, #680]	; (80009bc <misLeds_Init+0x2b4>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<1); //Habilita puerto B <-- para leds externos
 8000718:	4ba8      	ldr	r3, [pc, #672]	; (80009bc <misLeds_Init+0x2b4>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	4aa7      	ldr	r2, [pc, #668]	; (80009bc <misLeds_Init+0x2b4>)
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<6); //Habilita puerto G <-- para leds 3 y 4 (PG13 y PG14)
 8000724:	4ba5      	ldr	r3, [pc, #660]	; (80009bc <misLeds_Init+0x2b4>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4aa4      	ldr	r2, [pc, #656]	; (80009bc <misLeds_Init+0x2b4>)
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER   &=~ (3<<0);   			//00 --> entrada
 8000730:	4ba3      	ldr	r3, [pc, #652]	; (80009c0 <misLeds_Init+0x2b8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4aa2      	ldr	r2, [pc, #648]	; (80009c0 <misLeds_Init+0x2b8>)
 8000736:	f023 0303 	bic.w	r3, r3, #3
 800073a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR   &=~ (1<<0);				//10 --> pull down
 800073c:	4ba0      	ldr	r3, [pc, #640]	; (80009c0 <misLeds_Init+0x2b8>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a9f      	ldr	r2, [pc, #636]	; (80009c0 <misLeds_Init+0x2b8>)
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR   |=  (1<<1);
 8000748:	4b9d      	ldr	r3, [pc, #628]	; (80009c0 <misLeds_Init+0x2b8>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a9c      	ldr	r2, [pc, #624]	; (80009c0 <misLeds_Init+0x2b8>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLed1*2+1));
 8000754:	4b9b      	ldr	r3, [pc, #620]	; (80009c4 <misLeds_Init+0x2bc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a9b      	ldr	r2, [pc, #620]	; (80009c8 <misLeds_Init+0x2c0>)
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	0052      	lsls	r2, r2, #1
 800075e:	3201      	adds	r2, #1
 8000760:	2101      	movs	r1, #1
 8000762:	fa01 f202 	lsl.w	r2, r1, r2
 8000766:	43d2      	mvns	r2, r2
 8000768:	4611      	mov	r1, r2
 800076a:	4a96      	ldr	r2, [pc, #600]	; (80009c4 <misLeds_Init+0x2bc>)
 800076c:	400b      	ands	r3, r1
 800076e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLed1*2);
 8000770:	4b94      	ldr	r3, [pc, #592]	; (80009c4 <misLeds_Init+0x2bc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a94      	ldr	r2, [pc, #592]	; (80009c8 <misLeds_Init+0x2c0>)
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a90      	ldr	r2, [pc, #576]	; (80009c4 <misLeds_Init+0x2bc>)
 8000784:	430b      	orrs	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLed1);
 8000788:	4b8e      	ldr	r3, [pc, #568]	; (80009c4 <misLeds_Init+0x2bc>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	4a8e      	ldr	r2, [pc, #568]	; (80009c8 <misLeds_Init+0x2c0>)
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	43d2      	mvns	r2, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a8a      	ldr	r2, [pc, #552]	; (80009c4 <misLeds_Init+0x2bc>)
 800079c:	400b      	ands	r3, r1
 800079e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLed1*3);
 80007a0:	4b88      	ldr	r3, [pc, #544]	; (80009c4 <misLeds_Init+0x2bc>)
 80007a2:	6899      	ldr	r1, [r3, #8]
 80007a4:	4b88      	ldr	r3, [pc, #544]	; (80009c8 <misLeds_Init+0x2c0>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	2203      	movs	r2, #3
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4a83      	ldr	r2, [pc, #524]	; (80009c4 <misLeds_Init+0x2bc>)
 80007b8:	400b      	ands	r3, r1
 80007ba:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLed1*3);
 80007bc:	4b81      	ldr	r3, [pc, #516]	; (80009c4 <misLeds_Init+0x2bc>)
 80007be:	68d9      	ldr	r1, [r3, #12]
 80007c0:	4b81      	ldr	r3, [pc, #516]	; (80009c8 <misLeds_Init+0x2c0>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	2203      	movs	r2, #3
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	4a7c      	ldr	r2, [pc, #496]	; (80009c4 <misLeds_Init+0x2bc>)
 80007d4:	400b      	ands	r3, r1
 80007d6:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLed2*2+1));
 80007d8:	4b7a      	ldr	r3, [pc, #488]	; (80009c4 <misLeds_Init+0x2bc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a7b      	ldr	r2, [pc, #492]	; (80009cc <misLeds_Init+0x2c4>)
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	3201      	adds	r2, #1
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	43d2      	mvns	r2, r2
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a75      	ldr	r2, [pc, #468]	; (80009c4 <misLeds_Init+0x2bc>)
 80007f0:	400b      	ands	r3, r1
 80007f2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLed2*2);
 80007f4:	4b73      	ldr	r3, [pc, #460]	; (80009c4 <misLeds_Init+0x2bc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a74      	ldr	r2, [pc, #464]	; (80009cc <misLeds_Init+0x2c4>)
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	4611      	mov	r1, r2
 8000806:	4a6f      	ldr	r2, [pc, #444]	; (80009c4 <misLeds_Init+0x2bc>)
 8000808:	430b      	orrs	r3, r1
 800080a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLed2);
 800080c:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <misLeds_Init+0x2bc>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a6e      	ldr	r2, [pc, #440]	; (80009cc <misLeds_Init+0x2c4>)
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	43d2      	mvns	r2, r2
 800081c:	4611      	mov	r1, r2
 800081e:	4a69      	ldr	r2, [pc, #420]	; (80009c4 <misLeds_Init+0x2bc>)
 8000820:	400b      	ands	r3, r1
 8000822:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLed2*2);
 8000824:	4b67      	ldr	r3, [pc, #412]	; (80009c4 <misLeds_Init+0x2bc>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a68      	ldr	r2, [pc, #416]	; (80009cc <misLeds_Init+0x2c4>)
 800082a:	6812      	ldr	r2, [r2, #0]
 800082c:	0052      	lsls	r2, r2, #1
 800082e:	2103      	movs	r1, #3
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	43d2      	mvns	r2, r2
 8000836:	4611      	mov	r1, r2
 8000838:	4a62      	ldr	r2, [pc, #392]	; (80009c4 <misLeds_Init+0x2bc>)
 800083a:	400b      	ands	r3, r1
 800083c:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLed2*2);
 800083e:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <misLeds_Init+0x2bc>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	4a62      	ldr	r2, [pc, #392]	; (80009cc <misLeds_Init+0x2c4>)
 8000844:	6812      	ldr	r2, [r2, #0]
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	2103      	movs	r1, #3
 800084a:	fa01 f202 	lsl.w	r2, r1, r2
 800084e:	43d2      	mvns	r2, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a5c      	ldr	r2, [pc, #368]	; (80009c4 <misLeds_Init+0x2bc>)
 8000854:	400b      	ands	r3, r1
 8000856:	60d3      	str	r3, [r2, #12]

	GPIOG->MODER   &=~ (1<<(miLed2bis*2+1));
 8000858:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <misLeds_Init+0x2c8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a5d      	ldr	r2, [pc, #372]	; (80009d4 <misLeds_Init+0x2cc>)
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	0052      	lsls	r2, r2, #1
 8000862:	3201      	adds	r2, #1
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	43d2      	mvns	r2, r2
 800086c:	4611      	mov	r1, r2
 800086e:	4a58      	ldr	r2, [pc, #352]	; (80009d0 <misLeds_Init+0x2c8>)
 8000870:	400b      	ands	r3, r1
 8000872:	6013      	str	r3, [r2, #0]
	GPIOG->MODER   |=  (1<<miLed2bis*2);
 8000874:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <misLeds_Init+0x2c8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a56      	ldr	r2, [pc, #344]	; (80009d4 <misLeds_Init+0x2cc>)
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <misLeds_Init+0x2c8>)
 8000888:	430b      	orrs	r3, r1
 800088a:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER  &=~ (1<<miLed2bis);
 800088c:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <misLeds_Init+0x2c8>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	4a50      	ldr	r2, [pc, #320]	; (80009d4 <misLeds_Init+0x2cc>)
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	2101      	movs	r1, #1
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	43d2      	mvns	r2, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a4c      	ldr	r2, [pc, #304]	; (80009d0 <misLeds_Init+0x2c8>)
 80008a0:	400b      	ands	r3, r1
 80008a2:	6053      	str	r3, [r2, #4]
	GPIOG->OSPEEDR &=~ (3<<miLed2bis*2);
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <misLeds_Init+0x2c8>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	4a4a      	ldr	r2, [pc, #296]	; (80009d4 <misLeds_Init+0x2cc>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	0052      	lsls	r2, r2, #1
 80008ae:	2103      	movs	r1, #3
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a45      	ldr	r2, [pc, #276]	; (80009d0 <misLeds_Init+0x2c8>)
 80008ba:	400b      	ands	r3, r1
 80008bc:	6093      	str	r3, [r2, #8]
	GPIOG->PUPDR   &=~ (3<<miLed2bis*2);
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <misLeds_Init+0x2c8>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	4a44      	ldr	r2, [pc, #272]	; (80009d4 <misLeds_Init+0x2cc>)
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	2103      	movs	r1, #3
 80008ca:	fa01 f202 	lsl.w	r2, r1, r2
 80008ce:	43d2      	mvns	r2, r2
 80008d0:	4611      	mov	r1, r2
 80008d2:	4a3f      	ldr	r2, [pc, #252]	; (80009d0 <misLeds_Init+0x2c8>)
 80008d4:	400b      	ands	r3, r1
 80008d6:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLed3*2+1));
 80008d8:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <misLeds_Init+0x2bc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a3e      	ldr	r2, [pc, #248]	; (80009d8 <misLeds_Init+0x2d0>)
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	0052      	lsls	r2, r2, #1
 80008e2:	3201      	adds	r2, #1
 80008e4:	2101      	movs	r1, #1
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	43d2      	mvns	r2, r2
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a35      	ldr	r2, [pc, #212]	; (80009c4 <misLeds_Init+0x2bc>)
 80008f0:	400b      	ands	r3, r1
 80008f2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLed3*2);
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <misLeds_Init+0x2bc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a37      	ldr	r2, [pc, #220]	; (80009d8 <misLeds_Init+0x2d0>)
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	0052      	lsls	r2, r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	4611      	mov	r1, r2
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <misLeds_Init+0x2bc>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLed3);
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <misLeds_Init+0x2bc>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	4a31      	ldr	r2, [pc, #196]	; (80009d8 <misLeds_Init+0x2d0>)
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	43d2      	mvns	r2, r2
 800091c:	4611      	mov	r1, r2
 800091e:	4a29      	ldr	r2, [pc, #164]	; (80009c4 <misLeds_Init+0x2bc>)
 8000920:	400b      	ands	r3, r1
 8000922:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLed3*2);
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <misLeds_Init+0x2bc>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <misLeds_Init+0x2d0>)
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	0052      	lsls	r2, r2, #1
 800092e:	2103      	movs	r1, #3
 8000930:	fa01 f202 	lsl.w	r2, r1, r2
 8000934:	43d2      	mvns	r2, r2
 8000936:	4611      	mov	r1, r2
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <misLeds_Init+0x2bc>)
 800093a:	400b      	ands	r3, r1
 800093c:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLed3*2);
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <misLeds_Init+0x2bc>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <misLeds_Init+0x2d0>)
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	0052      	lsls	r2, r2, #1
 8000948:	2103      	movs	r1, #3
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	43d2      	mvns	r2, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <misLeds_Init+0x2bc>)
 8000954:	400b      	ands	r3, r1
 8000956:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLed3bis*2+1));
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <misLeds_Init+0x2bc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <misLeds_Init+0x2d4>)
 800095e:	6812      	ldr	r2, [r2, #0]
 8000960:	0052      	lsls	r2, r2, #1
 8000962:	3201      	adds	r2, #1
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	43d2      	mvns	r2, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <misLeds_Init+0x2bc>)
 8000970:	400b      	ands	r3, r1
 8000972:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLed3bis*2);
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <misLeds_Init+0x2bc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a18      	ldr	r2, [pc, #96]	; (80009dc <misLeds_Init+0x2d4>)
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <misLeds_Init+0x2bc>)
 8000988:	430b      	orrs	r3, r1
 800098a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLed3bis);
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <misLeds_Init+0x2bc>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	4a12      	ldr	r2, [pc, #72]	; (80009dc <misLeds_Init+0x2d4>)
 8000992:	6812      	ldr	r2, [r2, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	43d2      	mvns	r2, r2
 800099c:	4611      	mov	r1, r2
 800099e:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <misLeds_Init+0x2bc>)
 80009a0:	400b      	ands	r3, r1
 80009a2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLed3bis*2);
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <misLeds_Init+0x2bc>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <misLeds_Init+0x2d4>)
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	2103      	movs	r1, #3
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	4611      	mov	r1, r2
 80009b8:	e012      	b.n	80009e0 <misLeds_Init+0x2d8>
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400
 80009c8:	20000044 	.word	0x20000044
 80009cc:	20000000 	.word	0x20000000
 80009d0:	40021800 	.word	0x40021800
 80009d4:	20000004 	.word	0x20000004
 80009d8:	20000008 	.word	0x20000008
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <misLeds_Init+0x304>)
 80009e2:	400b      	ands	r3, r1
 80009e4:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLed3bis*2);
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <misLeds_Init+0x304>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <misLeds_Init+0x308>)
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	2103      	movs	r1, #3
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	43d2      	mvns	r2, r2
 80009f8:	4611      	mov	r1, r2
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <misLeds_Init+0x304>)
 80009fc:	400b      	ands	r3, r1
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	2000000c 	.word	0x2000000c

08000a14 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <BSP_LED_On+0x2c>)
 8000a22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <BSP_LED_On+0x30>)
 8000a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4619      	mov	r1, r3
 8000a32:	f000 f9be 	bl	8000db2 <HAL_GPIO_WritePin>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000010 	.word	0x20000010
 8000a44:	080019cc 	.word	0x080019cc

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <SystemInit+0x60>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <SystemInit+0x60>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <SystemInit+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <SystemInit+0x64>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <SystemInit+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <SystemInit+0x64>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <SystemInit+0x64>)
 8000a74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <SystemInit+0x64>)
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <SystemInit+0x68>)
 8000a82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <SystemInit+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a08      	ldr	r2, [pc, #32]	; (8000aac <SystemInit+0x64>)
 8000a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SystemInit+0x60>)
 8000a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	24003010 	.word	0x24003010

08000ab4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b08:	f000 f84e 	bl	8000ba8 <HAL_IncTick>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x34>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_Init+0x34>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x34>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x34>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f90d 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f000 f954 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f917 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f8ed 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000001c 	.word	0x2000001c
 8000ba0:	20000024 	.word	0x20000024
 8000ba4:	20000020 	.word	0x20000020

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000024 	.word	0x20000024
 8000bcc:	2000004c 	.word	0x2000004c

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000004c 	.word	0x2000004c

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff47 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff5c 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb0 	bl	8000d08 <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	807b      	strh	r3, [r7, #2]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc2:	787b      	ldrb	r3, [r7, #1]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc8:	887a      	ldrh	r2, [r7, #2]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dce:	e003      	b.n	8000dd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	041a      	lsls	r2, r3, #16
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	619a      	str	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_PWREx_EnableOverDrive+0x94>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e20:	f7ff fed6 	bl	8000bd0 <HAL_GetTick>
 8000e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e26:	e009      	b.n	8000e3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e28:	f7ff fed2 	bl	8000bd0 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e36:	d901      	bls.n	8000e3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e01f      	b.n	8000e7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_PWREx_EnableOverDrive+0x98>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d1ee      	bne.n	8000e28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e50:	f7ff febe 	bl	8000bd0 <HAL_GetTick>
 8000e54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e56:	e009      	b.n	8000e6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e58:	f7ff feba 	bl	8000bd0 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e66:	d901      	bls.n	8000e6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e007      	b.n	8000e7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_PWREx_EnableOverDrive+0x98>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e78:	d1ee      	bne.n	8000e58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	420e0040 	.word	0x420e0040
 8000e8c:	40007000 	.word	0x40007000
 8000e90:	420e0044 	.word	0x420e0044

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e267      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d075      	beq.n	8000f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eb2:	4b88      	ldr	r3, [pc, #544]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ebe:	4b85      	ldr	r3, [pc, #532]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d112      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eca:	4b82      	ldr	r3, [pc, #520]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ed6:	d10b      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	4b7e      	ldr	r3, [pc, #504]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d05b      	beq.n	8000f9c <HAL_RCC_OscConfig+0x108>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d157      	bne.n	8000f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e242      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef8:	d106      	bne.n	8000f08 <HAL_RCC_OscConfig+0x74>
 8000efa:	4b76      	ldr	r3, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a75      	ldr	r2, [pc, #468]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xb0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x98>
 8000f12:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a6f      	ldr	r2, [pc, #444]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6c      	ldr	r2, [pc, #432]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xb0>
 8000f2c:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a68      	ldr	r2, [pc, #416]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b66      	ldr	r3, [pc, #408]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a65      	ldr	r2, [pc, #404]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fe40 	bl	8000bd0 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fe3c 	bl	8000bd0 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e207      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xc0>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fe2c 	bl	8000bd0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fe28 	bl	8000bd0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1f3      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b51      	ldr	r3, [pc, #324]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0xe8>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d063      	beq.n	8001072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x152>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1c7      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4937      	ldr	r1, [pc, #220]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e03a      	b.n	8001072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <HAL_RCC_OscConfig+0x244>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100a:	f7ff fde1 	bl	8000bd0 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fddd 	bl	8000bd0 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1a8      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4925      	ldr	r1, [pc, #148]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_RCC_OscConfig+0x244>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104c:	f7ff fdc0 	bl	8000bd0 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fdbc 	bl	8000bd0 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e187      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d036      	beq.n	80010ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d016      	beq.n	80010b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_RCC_OscConfig+0x248>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108c:	f7ff fda0 	bl	8000bd0 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fd9c 	bl	8000bd0 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e167      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_OscConfig+0x240>)
 80010a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x200>
 80010b2:	e01b      	b.n	80010ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_RCC_OscConfig+0x248>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fd89 	bl	8000bd0 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c0:	e00e      	b.n	80010e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c2:	f7ff fd85 	bl	8000bd0 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d907      	bls.n	80010e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e150      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
 80010d4:	40023800 	.word	0x40023800
 80010d8:	42470000 	.word	0x42470000
 80010dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e0:	4b88      	ldr	r3, [pc, #544]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80010e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1ea      	bne.n	80010c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8097 	beq.w	8001228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fe:	4b81      	ldr	r3, [pc, #516]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10f      	bne.n	800112a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b7d      	ldr	r3, [pc, #500]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a7c      	ldr	r2, [pc, #496]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001126:	2301      	movs	r3, #1
 8001128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112a:	4b77      	ldr	r3, [pc, #476]	; (8001308 <HAL_RCC_OscConfig+0x474>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	2b00      	cmp	r3, #0
 8001134:	d118      	bne.n	8001168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001136:	4b74      	ldr	r3, [pc, #464]	; (8001308 <HAL_RCC_OscConfig+0x474>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a73      	ldr	r2, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x474>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001142:	f7ff fd45 	bl	8000bd0 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114a:	f7ff fd41 	bl	8000bd0 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e10c      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x474>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f0      	beq.n	800114a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d106      	bne.n	800117e <HAL_RCC_OscConfig+0x2ea>
 8001170:	4b64      	ldr	r3, [pc, #400]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001174:	4a63      	ldr	r2, [pc, #396]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6713      	str	r3, [r2, #112]	; 0x70
 800117c:	e01c      	b.n	80011b8 <HAL_RCC_OscConfig+0x324>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x30c>
 8001186:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118a:	4a5e      	ldr	r2, [pc, #376]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6713      	str	r3, [r2, #112]	; 0x70
 8001192:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001196:	4a5b      	ldr	r2, [pc, #364]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6713      	str	r3, [r2, #112]	; 0x70
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0x324>
 80011a0:	4b58      	ldr	r3, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	6713      	str	r3, [r2, #112]	; 0x70
 80011ac:	4b55      	ldr	r3, [pc, #340]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80011ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b0:	4a54      	ldr	r2, [pc, #336]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80011b2:	f023 0304 	bic.w	r3, r3, #4
 80011b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d015      	beq.n	80011ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c0:	f7ff fd06 	bl	8000bd0 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c8:	f7ff fd02 	bl	8000bd0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e0cb      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011de:	4b49      	ldr	r3, [pc, #292]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0ee      	beq.n	80011c8 <HAL_RCC_OscConfig+0x334>
 80011ea:	e014      	b.n	8001216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fcf0 	bl	8000bd0 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f2:	e00a      	b.n	800120a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f4:	f7ff fcec 	bl	8000bd0 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e0b5      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120a:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1ee      	bne.n	80011f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d105      	bne.n	8001228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a1 	beq.w	8001374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b08      	cmp	r3, #8
 800123c:	d05c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d141      	bne.n	80012ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_RCC_OscConfig+0x478>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fcc0 	bl	8000bd0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fcbc 	bl	8000bd0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e087      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69da      	ldr	r2, [r3, #28]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	3b01      	subs	r3, #1
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	491b      	ldr	r1, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x478>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc95 	bl	8000bd0 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fc91 	bl	8000bd0 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e05c      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x416>
 80012c8:	e054      	b.n	8001374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_RCC_OscConfig+0x478>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc7e 	bl	8000bd0 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff fc7a 	bl	8000bd0 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e045      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_RCC_OscConfig+0x470>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x444>
 80012f6:	e03d      	b.n	8001374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d107      	bne.n	8001310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e038      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000
 800130c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_RCC_OscConfig+0x4ec>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d028      	beq.n	8001370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d121      	bne.n	8001370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d11a      	bne.n	8001370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001340:	4013      	ands	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001348:	4293      	cmp	r3, r2
 800134a:	d111      	bne.n	8001370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	085b      	lsrs	r3, r3, #1
 8001358:	3b01      	subs	r3, #1
 800135a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0cc      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d90c      	bls.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0b8      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f0:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	494d      	ldr	r1, [pc, #308]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	4313      	orrs	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d044      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d119      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e07f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d003      	beq.n	8001442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143e:	2b03      	cmp	r3, #3
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e067      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001462:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f023 0203 	bic.w	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4934      	ldr	r1, [pc, #208]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff fbac 	bl	8000bd0 <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	e00a      	b.n	8001492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147c:	f7ff fba8 	bl	8000bd0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	; 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e04f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 020c 	and.w	r2, r3, #12
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1eb      	bne.n	800147c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b25      	ldr	r3, [pc, #148]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d20c      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e032      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4916      	ldr	r1, [pc, #88]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	490e      	ldr	r1, [pc, #56]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150a:	f000 f821 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 800150e:	4602      	mov	r2, r0
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	490a      	ldr	r1, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	5ccb      	ldrb	r3, [r1, r3]
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fb0c 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00
 8001540:	40023800 	.word	0x40023800
 8001544:	080019d4 	.word	0x080019d4
 8001548:	2000001c 	.word	0x2000001c
 800154c:	20000020 	.word	0x20000020

08001550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001554:	b094      	sub	sp, #80	; 0x50
 8001556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
 800155c:	2300      	movs	r3, #0
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001568:	4b79      	ldr	r3, [pc, #484]	; (8001750 <HAL_RCC_GetSysClockFreq+0x200>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d00d      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x40>
 8001574:	2b08      	cmp	r3, #8
 8001576:	f200 80e1 	bhi.w	800173c <HAL_RCC_GetSysClockFreq+0x1ec>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x34>
 800157e:	2b04      	cmp	r3, #4
 8001580:	d003      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x3a>
 8001582:	e0db      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001584:	4b73      	ldr	r3, [pc, #460]	; (8001754 <HAL_RCC_GetSysClockFreq+0x204>)
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001588:	e0db      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800158a:	4b73      	ldr	r3, [pc, #460]	; (8001758 <HAL_RCC_GetSysClockFreq+0x208>)
 800158c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800158e:	e0d8      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001590:	4b6f      	ldr	r3, [pc, #444]	; (8001750 <HAL_RCC_GetSysClockFreq+0x200>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001598:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800159a:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <HAL_RCC_GetSysClockFreq+0x200>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d063      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a6:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <HAL_RCC_GetSysClockFreq+0x200>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	099b      	lsrs	r3, r3, #6
 80015ac:	2200      	movs	r2, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80015b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
 80015be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015c2:	4622      	mov	r2, r4
 80015c4:	462b      	mov	r3, r5
 80015c6:	f04f 0000 	mov.w	r0, #0
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	0159      	lsls	r1, r3, #5
 80015d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d4:	0150      	lsls	r0, r2, #5
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4621      	mov	r1, r4
 80015dc:	1a51      	subs	r1, r2, r1
 80015de:	6139      	str	r1, [r7, #16]
 80015e0:	4629      	mov	r1, r5
 80015e2:	eb63 0301 	sbc.w	r3, r3, r1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015f4:	4659      	mov	r1, fp
 80015f6:	018b      	lsls	r3, r1, #6
 80015f8:	4651      	mov	r1, sl
 80015fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fe:	4651      	mov	r1, sl
 8001600:	018a      	lsls	r2, r1, #6
 8001602:	4651      	mov	r1, sl
 8001604:	ebb2 0801 	subs.w	r8, r2, r1
 8001608:	4659      	mov	r1, fp
 800160a:	eb63 0901 	sbc.w	r9, r3, r1
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800161a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800161e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001622:	4690      	mov	r8, r2
 8001624:	4699      	mov	r9, r3
 8001626:	4623      	mov	r3, r4
 8001628:	eb18 0303 	adds.w	r3, r8, r3
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	462b      	mov	r3, r5
 8001630:	eb49 0303 	adc.w	r3, r9, r3
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001642:	4629      	mov	r1, r5
 8001644:	024b      	lsls	r3, r1, #9
 8001646:	4621      	mov	r1, r4
 8001648:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800164c:	4621      	mov	r1, r4
 800164e:	024a      	lsls	r2, r1, #9
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001656:	2200      	movs	r2, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
 800165a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800165c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001660:	f7fe fdc4 	bl	80001ec <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800166c:	e058      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_RCC_GetSysClockFreq+0x200>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	2200      	movs	r2, #0
 8001676:	4618      	mov	r0, r3
 8001678:	4611      	mov	r1, r2
 800167a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
 8001684:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001688:	4642      	mov	r2, r8
 800168a:	464b      	mov	r3, r9
 800168c:	f04f 0000 	mov.w	r0, #0
 8001690:	f04f 0100 	mov.w	r1, #0
 8001694:	0159      	lsls	r1, r3, #5
 8001696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800169a:	0150      	lsls	r0, r2, #5
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4641      	mov	r1, r8
 80016a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80016a6:	4649      	mov	r1, r9
 80016a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016c0:	ebb2 040a 	subs.w	r4, r2, sl
 80016c4:	eb63 050b 	sbc.w	r5, r3, fp
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	00eb      	lsls	r3, r5, #3
 80016d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016d6:	00e2      	lsls	r2, r4, #3
 80016d8:	4614      	mov	r4, r2
 80016da:	461d      	mov	r5, r3
 80016dc:	4643      	mov	r3, r8
 80016de:	18e3      	adds	r3, r4, r3
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	464b      	mov	r3, r9
 80016e4:	eb45 0303 	adc.w	r3, r5, r3
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016f6:	4629      	mov	r1, r5
 80016f8:	028b      	lsls	r3, r1, #10
 80016fa:	4621      	mov	r1, r4
 80016fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001700:	4621      	mov	r1, r4
 8001702:	028a      	lsls	r2, r1, #10
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800170a:	2200      	movs	r2, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	61fa      	str	r2, [r7, #28]
 8001710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001714:	f7fe fd6a 	bl	80001ec <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_GetSysClockFreq+0x200>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800173a:	e002      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetSysClockFreq+0x204>)
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001744:	4618      	mov	r0, r3
 8001746:	3750      	adds	r7, #80	; 0x50
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	00f42400 	.word	0x00f42400
 8001758:	007a1200 	.word	0x007a1200

0800175c <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
    HAL_Init();
 8001762:	f7ff f9d5 	bl	8000b10 <HAL_Init>

    /* Configure the system clock to 180 MHz */
    SystemClock_Config();
 8001766:	f000 f86f 	bl	8001848 <SystemClock_Config>

    /* Initialize BSP Led for LED2 */
    misLeds_Init();
 800176a:	f7fe ffcd 	bl	8000708 <misLeds_Init>

    delay_t delay1;
    delay_t delay2;
    delay_t delay3;

    tick_t tON  = 200;
 800176e:	23c8      	movs	r3, #200	; 0xc8
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
    tick_t tOFF = 400;
 8001772:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28

    delayInit(&delay1, 1);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe feb6 	bl	80004f0 <delayInit>
	delayInit(&delay2, tON+1);
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe feae 	bl	80004f0 <delayInit>
	delayInit(&delay3, tOFF+1);
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fea7 	bl	80004f0 <delayInit>

	while (1)
	{
		if(delayRead(&delay1))
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe febc 	bl	8000524 <delayRead>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d013      	beq.n	80017da <main+0x7e>
		{
			miToggleLed(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7fe fef8 	bl	80005a8 <miToggleLed>
			if(delay1.duration==tON) 	delayWrite(&delay1,tOFF);
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017bc:	429a      	cmp	r2, r3
 80017be:	d106      	bne.n	80017ce <main+0x72>
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feda 	bl	8000580 <delayWrite>
 80017cc:	e005      	b.n	80017da <main+0x7e>
			else 						delayWrite(&delay1,tON);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fed3 	bl	8000580 <delayWrite>
		}
		if(delayRead(&delay2))
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fea0 	bl	8000524 <delayRead>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d013      	beq.n	8001812 <main+0xb6>
		{
			miToggleLed(2);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f7fe fedc 	bl	80005a8 <miToggleLed>
			if(delay2.duration==tON) 	delayWrite(&delay2,tOFF);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d106      	bne.n	8001806 <main+0xaa>
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe febe 	bl	8000580 <delayWrite>
 8001804:	e005      	b.n	8001812 <main+0xb6>
			else 						delayWrite(&delay2,tON);
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe feb7 	bl	8000580 <delayWrite>
		}
		if(delayRead(&delay3))
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe85 	bl	8000524 <delayRead>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0c0      	beq.n	80017a2 <main+0x46>
		{
			miToggleLed(3);
 8001820:	2003      	movs	r0, #3
 8001822:	f7fe fec1 	bl	80005a8 <miToggleLed>
			if(delay3.duration==tON) 	delayWrite(&delay3,tOFF);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182a:	429a      	cmp	r2, r3
 800182c:	d105      	bne.n	800183a <main+0xde>
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fea4 	bl	8000580 <delayWrite>
 8001838:	e7b3      	b.n	80017a2 <main+0x46>
			else						delayWrite(&delay3,tON);
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe9e 	bl	8000580 <delayWrite>
		if(delayRead(&delay1))
 8001844:	e7ad      	b.n	80017a2 <main+0x46>
	...

08001848 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b094      	sub	sp, #80	; 0x50
 800184c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <SystemClock_Config+0xbc>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a2b      	ldr	r2, [pc, #172]	; (8001904 <SystemClock_Config+0xbc>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <SystemClock_Config+0xbc>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <SystemClock_Config+0xc0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a25      	ldr	r2, [pc, #148]	; (8001908 <SystemClock_Config+0xc0>)
 8001874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <SystemClock_Config+0xc0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001886:	2301      	movs	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800188a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800188e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800189a:	2308      	movs	r3, #8
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800189e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018a8:	2307      	movs	r3, #7
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff faef 	bl	8000e94 <HAL_RCC_OscConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 80018bc:	f000 f826 	bl	800190c <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018c0:	f7ff fa98 	bl	8000df4 <HAL_PWREx_EnableOverDrive>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80018ca:	f000 f81f 	bl	800190c <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80018ce:	230f      	movs	r3, #15
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2302      	movs	r3, #2
 80018d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80018da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80018e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ea:	2105      	movs	r1, #5
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fd49 	bl	8001384 <HAL_RCC_ClockConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80018f8:	f000 f808 	bl	800190c <Error_Handler>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3750      	adds	r7, #80	; 0x50
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000

0800190c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff f87f 	bl	8000a14 <BSP_LED_On>
  while (1)
 8001916:	e7fe      	b.n	8001916 <Error_Handler+0xa>

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800191c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191e:	e003      	b.n	8001928 <LoopCopyDataInit>

08001920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001926:	3104      	adds	r1, #4

08001928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800192c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001930:	d3f6      	bcc.n	8001920 <CopyDataInit>
  ldr  r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001934:	e002      	b.n	800193c <LoopFillZerobss>

08001936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001938:	f842 3b04 	str.w	r3, [r2], #4

0800193c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001940:	d3f9      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001942:	f7ff f881 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f000 f811 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff ff07 	bl	800175c <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001950:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001954:	080019f4 	.word	0x080019f4
  ldr  r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800195c:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8001960:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8001964:	20000050 	.word	0x20000050

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	4d0d      	ldr	r5, [pc, #52]	; (80019a4 <__libc_init_array+0x38>)
 8001970:	4c0d      	ldr	r4, [pc, #52]	; (80019a8 <__libc_init_array+0x3c>)
 8001972:	1b64      	subs	r4, r4, r5
 8001974:	10a4      	asrs	r4, r4, #2
 8001976:	2600      	movs	r6, #0
 8001978:	42a6      	cmp	r6, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	4d0b      	ldr	r5, [pc, #44]	; (80019ac <__libc_init_array+0x40>)
 800197e:	4c0c      	ldr	r4, [pc, #48]	; (80019b0 <__libc_init_array+0x44>)
 8001980:	f000 f818 	bl	80019b4 <_init>
 8001984:	1b64      	subs	r4, r4, r5
 8001986:	10a4      	asrs	r4, r4, #2
 8001988:	2600      	movs	r6, #0
 800198a:	42a6      	cmp	r6, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f855 3b04 	ldr.w	r3, [r5], #4
 8001994:	4798      	blx	r3
 8001996:	3601      	adds	r6, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f855 3b04 	ldr.w	r3, [r5], #4
 800199e:	4798      	blx	r3
 80019a0:	3601      	adds	r6, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	080019ec 	.word	0x080019ec
 80019a8:	080019ec 	.word	0x080019ec
 80019ac:	080019ec 	.word	0x080019ec
 80019b0:	080019f0 	.word	0x080019f0

080019b4 <_init>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr

080019c0 <_fini>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	bf00      	nop
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr
