
TP_PdM_Emma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f14  08003f14  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f1c  08003f1c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000000d4  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c358  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002367  00000000  00000000  0002c414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000918  00000000  00000000  0002f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028259  00000000  00000000  0002fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103a1  00000000  00000000  00057d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0065  00000000  00000000  000680b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158117  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002edc  00000000  00000000  00158168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d08 	.word	0x08003d08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08003d08 	.word	0x08003d08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <debounceFSM_init>:
//Función: carga el estado inicial
//Entrada: ninguna
//Salida:  ninguna
//Nota: es una función pública porque se llama desde fuera del módulo (main)
void debounceFSM_init()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	delayInit(&delayAntiRebote, TIME_ANTIREBOTE);
 8000598:	2128      	movs	r1, #40	; 0x28
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <debounceFSM_init+0x18>)
 800059c:	f000 f80a 	bl	80005b4 <delayInit>
	actualState = BUTTON_UP;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <debounceFSM_init+0x1c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000a8 	.word	0x200000a8
 80005b0:	200000b4 	.word	0x200000b4

080005b4 <delayInit>:

// Entrada: Puntero al delay y su duración en ms
// Salida: Ninguna
// Función: Inicializa los parámetros internos del delay
void delayInit( delay_t * delay, tick_t duration )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	if((delay != NULL) && (duration > 0))			// Verifica que el puntero sea valido y que la duracion sea un valor positivo
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00b      	beq.n	80005dc <delayInit+0x28>
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d008      	beq.n	80005dc <delayInit+0x28>
	{
		delay->startTime = 0;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		delay->duration = duration;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	605a      	str	r2, [r3, #4]
		delay->running = false;						// Inicializa el delay detenido
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	721a      	strb	r2, [r3, #8]
	}
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <inputsInit>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de los leds de mi placa (diferente a Nucleo)
void inputsInit()
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0); //Habilita puerto A <-- para user Button PA0 (EMMA)
 80005ec:	4ba9      	ldr	r3, [pc, #676]	; (8000894 <inputsInit+0x2ac>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4aa8      	ldr	r2, [pc, #672]	; (8000894 <inputsInit+0x2ac>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<1); //Habilita puerto B <-- para leds externos
 80005f8:	4ba6      	ldr	r3, [pc, #664]	; (8000894 <inputsInit+0x2ac>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4aa5      	ldr	r2, [pc, #660]	; (8000894 <inputsInit+0x2ac>)
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<2); //Habilita puerto C <-- para user Button PC13 (CESE)
 8000604:	4ba3      	ldr	r3, [pc, #652]	; (8000894 <inputsInit+0x2ac>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <inputsInit+0x2ac>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<6); //Habilita puerto G <-- para leds 3 y 4 (PG13 y PG14)
 8000610:	4ba0      	ldr	r3, [pc, #640]	; (8000894 <inputsInit+0x2ac>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a9f      	ldr	r2, [pc, #636]	; (8000894 <inputsInit+0x2ac>)
 8000616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800061a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER   &=~ (3<<0);   			//00 --> entrada
 800061c:	4b9e      	ldr	r3, [pc, #632]	; (8000898 <inputsInit+0x2b0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a9d      	ldr	r2, [pc, #628]	; (8000898 <inputsInit+0x2b0>)
 8000622:	f023 0303 	bic.w	r3, r3, #3
 8000626:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR   &=~ (1<<0);				//10 --> pull down
 8000628:	4b9b      	ldr	r3, [pc, #620]	; (8000898 <inputsInit+0x2b0>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4a9a      	ldr	r2, [pc, #616]	; (8000898 <inputsInit+0x2b0>)
 800062e:	f023 0301 	bic.w	r3, r3, #1
 8000632:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR   |=  (1<<1);
 8000634:	4b98      	ldr	r3, [pc, #608]	; (8000898 <inputsInit+0x2b0>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	4a97      	ldr	r2, [pc, #604]	; (8000898 <inputsInit+0x2b0>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	60d3      	str	r3, [r2, #12]

	GPIOC->MODER   &=~ (3<<0);   			//00 --> entrada
 8000640:	4b96      	ldr	r3, [pc, #600]	; (800089c <inputsInit+0x2b4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a95      	ldr	r2, [pc, #596]	; (800089c <inputsInit+0x2b4>)
 8000646:	f023 0303 	bic.w	r3, r3, #3
 800064a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR   &=~ (1<<0);				//10 --> pull down
 800064c:	4b93      	ldr	r3, [pc, #588]	; (800089c <inputsInit+0x2b4>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a92      	ldr	r2, [pc, #584]	; (800089c <inputsInit+0x2b4>)
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR   |=  (1<<1);
 8000658:	4b90      	ldr	r3, [pc, #576]	; (800089c <inputsInit+0x2b4>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	4a8f      	ldr	r2, [pc, #572]	; (800089c <inputsInit+0x2b4>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLD1*2+1));
 8000664:	4b8e      	ldr	r3, [pc, #568]	; (80008a0 <inputsInit+0x2b8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a8e      	ldr	r2, [pc, #568]	; (80008a4 <inputsInit+0x2bc>)
 800066a:	6812      	ldr	r2, [r2, #0]
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	3201      	adds	r2, #1
 8000670:	2101      	movs	r1, #1
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	43d2      	mvns	r2, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a89      	ldr	r2, [pc, #548]	; (80008a0 <inputsInit+0x2b8>)
 800067c:	400b      	ands	r3, r1
 800067e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLD1*2);
 8000680:	4b87      	ldr	r3, [pc, #540]	; (80008a0 <inputsInit+0x2b8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a87      	ldr	r2, [pc, #540]	; (80008a4 <inputsInit+0x2bc>)
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	2101      	movs	r1, #1
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a83      	ldr	r2, [pc, #524]	; (80008a0 <inputsInit+0x2b8>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLD1);
 8000698:	4b81      	ldr	r3, [pc, #516]	; (80008a0 <inputsInit+0x2b8>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4a81      	ldr	r2, [pc, #516]	; (80008a4 <inputsInit+0x2bc>)
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	2101      	movs	r1, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a7d      	ldr	r2, [pc, #500]	; (80008a0 <inputsInit+0x2b8>)
 80006ac:	400b      	ands	r3, r1
 80006ae:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLD1*3);
 80006b0:	4b7b      	ldr	r3, [pc, #492]	; (80008a0 <inputsInit+0x2b8>)
 80006b2:	6899      	ldr	r1, [r3, #8]
 80006b4:	4b7b      	ldr	r3, [pc, #492]	; (80008a4 <inputsInit+0x2bc>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	2203      	movs	r2, #3
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4a76      	ldr	r2, [pc, #472]	; (80008a0 <inputsInit+0x2b8>)
 80006c8:	400b      	ands	r3, r1
 80006ca:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLD1*3);
 80006cc:	4b74      	ldr	r3, [pc, #464]	; (80008a0 <inputsInit+0x2b8>)
 80006ce:	68d9      	ldr	r1, [r3, #12]
 80006d0:	4b74      	ldr	r3, [pc, #464]	; (80008a4 <inputsInit+0x2bc>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	2203      	movs	r2, #3
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4a6f      	ldr	r2, [pc, #444]	; (80008a0 <inputsInit+0x2b8>)
 80006e4:	400b      	ands	r3, r1
 80006e6:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLD2*2+1));
 80006e8:	4b6d      	ldr	r3, [pc, #436]	; (80008a0 <inputsInit+0x2b8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a6e      	ldr	r2, [pc, #440]	; (80008a8 <inputsInit+0x2c0>)
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	3201      	adds	r2, #1
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	43d2      	mvns	r2, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a68      	ldr	r2, [pc, #416]	; (80008a0 <inputsInit+0x2b8>)
 8000700:	400b      	ands	r3, r1
 8000702:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLD2*2);
 8000704:	4b66      	ldr	r3, [pc, #408]	; (80008a0 <inputsInit+0x2b8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a67      	ldr	r2, [pc, #412]	; (80008a8 <inputsInit+0x2c0>)
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	4611      	mov	r1, r2
 8000716:	4a62      	ldr	r2, [pc, #392]	; (80008a0 <inputsInit+0x2b8>)
 8000718:	430b      	orrs	r3, r1
 800071a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLD2);
 800071c:	4b60      	ldr	r3, [pc, #384]	; (80008a0 <inputsInit+0x2b8>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a61      	ldr	r2, [pc, #388]	; (80008a8 <inputsInit+0x2c0>)
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	43d2      	mvns	r2, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a5c      	ldr	r2, [pc, #368]	; (80008a0 <inputsInit+0x2b8>)
 8000730:	400b      	ands	r3, r1
 8000732:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLD2*2);
 8000734:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <inputsInit+0x2b8>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	4a5b      	ldr	r2, [pc, #364]	; (80008a8 <inputsInit+0x2c0>)
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	0052      	lsls	r2, r2, #1
 800073e:	2103      	movs	r1, #3
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	43d2      	mvns	r2, r2
 8000746:	4611      	mov	r1, r2
 8000748:	4a55      	ldr	r2, [pc, #340]	; (80008a0 <inputsInit+0x2b8>)
 800074a:	400b      	ands	r3, r1
 800074c:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLD2*2);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <inputsInit+0x2b8>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a55      	ldr	r2, [pc, #340]	; (80008a8 <inputsInit+0x2c0>)
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	2103      	movs	r1, #3
 800075a:	fa01 f202 	lsl.w	r2, r1, r2
 800075e:	43d2      	mvns	r2, r2
 8000760:	4611      	mov	r1, r2
 8000762:	4a4f      	ldr	r2, [pc, #316]	; (80008a0 <inputsInit+0x2b8>)
 8000764:	400b      	ands	r3, r1
 8000766:	60d3      	str	r3, [r2, #12]

	GPIOG->MODER   &=~ (1<<(miLD2bis*2+1));
 8000768:	4b50      	ldr	r3, [pc, #320]	; (80008ac <inputsInit+0x2c4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a50      	ldr	r2, [pc, #320]	; (80008b0 <inputsInit+0x2c8>)
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	3201      	adds	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	43d2      	mvns	r2, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a4b      	ldr	r2, [pc, #300]	; (80008ac <inputsInit+0x2c4>)
 8000780:	400b      	ands	r3, r1
 8000782:	6013      	str	r3, [r2, #0]
	GPIOG->MODER   |=  (1<<miLD2bis*2);
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <inputsInit+0x2c4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a49      	ldr	r2, [pc, #292]	; (80008b0 <inputsInit+0x2c8>)
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a45      	ldr	r2, [pc, #276]	; (80008ac <inputsInit+0x2c4>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER  &=~ (1<<miLD2bis);
 800079c:	4b43      	ldr	r3, [pc, #268]	; (80008ac <inputsInit+0x2c4>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a43      	ldr	r2, [pc, #268]	; (80008b0 <inputsInit+0x2c8>)
 80007a2:	6812      	ldr	r2, [r2, #0]
 80007a4:	2101      	movs	r1, #1
 80007a6:	fa01 f202 	lsl.w	r2, r1, r2
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <inputsInit+0x2c4>)
 80007b0:	400b      	ands	r3, r1
 80007b2:	6053      	str	r3, [r2, #4]
	GPIOG->OSPEEDR &=~ (3<<miLD2bis*2);
 80007b4:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <inputsInit+0x2c4>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <inputsInit+0x2c8>)
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	0052      	lsls	r2, r2, #1
 80007be:	2103      	movs	r1, #3
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a38      	ldr	r2, [pc, #224]	; (80008ac <inputsInit+0x2c4>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	6093      	str	r3, [r2, #8]
	GPIOG->PUPDR   &=~ (3<<miLD2bis*2);
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <inputsInit+0x2c4>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <inputsInit+0x2c8>)
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	2103      	movs	r1, #3
 80007da:	fa01 f202 	lsl.w	r2, r1, r2
 80007de:	43d2      	mvns	r2, r2
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a32      	ldr	r2, [pc, #200]	; (80008ac <inputsInit+0x2c4>)
 80007e4:	400b      	ands	r3, r1
 80007e6:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLD3*2+1));
 80007e8:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <inputsInit+0x2b8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <inputsInit+0x2cc>)
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	0052      	lsls	r2, r2, #1
 80007f2:	3201      	adds	r2, #1
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	43d2      	mvns	r2, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <inputsInit+0x2b8>)
 8000800:	400b      	ands	r3, r1
 8000802:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLD3*2);
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <inputsInit+0x2b8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <inputsInit+0x2cc>)
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	0052      	lsls	r2, r2, #1
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	4611      	mov	r1, r2
 8000816:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <inputsInit+0x2b8>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLD3);
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <inputsInit+0x2b8>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	4a24      	ldr	r2, [pc, #144]	; (80008b4 <inputsInit+0x2cc>)
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	43d2      	mvns	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <inputsInit+0x2b8>)
 8000830:	400b      	ands	r3, r1
 8000832:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLD3*2);
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <inputsInit+0x2b8>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <inputsInit+0x2cc>)
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	0052      	lsls	r2, r2, #1
 800083e:	2103      	movs	r1, #3
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	43d2      	mvns	r2, r2
 8000846:	4611      	mov	r1, r2
 8000848:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <inputsInit+0x2b8>)
 800084a:	400b      	ands	r3, r1
 800084c:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLD3*2);
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <inputsInit+0x2b8>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <inputsInit+0x2cc>)
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	2103      	movs	r1, #3
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	43d2      	mvns	r2, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <inputsInit+0x2b8>)
 8000864:	400b      	ands	r3, r1
 8000866:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &=~ (1<<(miLD3bis*2+1));
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <inputsInit+0x2b8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <inputsInit+0x2d0>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	3201      	adds	r2, #1
 8000874:	2101      	movs	r1, #1
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	43d2      	mvns	r2, r2
 800087c:	4611      	mov	r1, r2
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <inputsInit+0x2b8>)
 8000880:	400b      	ands	r3, r1
 8000882:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1<<miLD3bis*2);
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <inputsInit+0x2b8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <inputsInit+0x2d0>)
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	e014      	b.n	80008bc <inputsInit+0x2d4>
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	200000b8 	.word	0x200000b8
 80008a8:	20000000 	.word	0x20000000
 80008ac:	40021800 	.word	0x40021800
 80008b0:	20000004 	.word	0x20000004
 80008b4:	20000008 	.word	0x20000008
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <inputsInit+0x338>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &=~ (1<<miLD3bis);
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <inputsInit+0x338>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a15      	ldr	r2, [pc, #84]	; (8000924 <inputsInit+0x33c>)
 80008ce:	6812      	ldr	r2, [r2, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	43d2      	mvns	r2, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <inputsInit+0x338>)
 80008dc:	400b      	ands	r3, r1
 80008de:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &=~ (3<<miLD3bis*2);
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <inputsInit+0x338>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <inputsInit+0x33c>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	2103      	movs	r1, #3
 80008ec:	fa01 f202 	lsl.w	r2, r1, r2
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <inputsInit+0x338>)
 80008f6:	400b      	ands	r3, r1
 80008f8:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &=~ (3<<miLD3bis*2);
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <inputsInit+0x338>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <inputsInit+0x33c>)
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	2103      	movs	r1, #3
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <inputsInit+0x338>)
 8000910:	400b      	ands	r3, r1
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40020400 	.word	0x40020400
 8000924:	2000000c 	.word	0x2000000c

08000928 <uartinit>:
 	 Salida: booleando TRUE si se inicializó correctamente, FALSE si falló
*/
#define myBaudRate 9600
#define UARTn 3
bool_t uartinit()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	UartHandle.Instance        = USART1; //uart 1 para placa discovery
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <uartinit+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <uartinit+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = myBaudRate;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <uartinit+0x74>)
 8000934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000938:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <uartinit+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <uartinit+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <uartinit+0x74>)
 8000948:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800094c:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <uartinit+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <uartinit+0x74>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <uartinit+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000960:	480e      	ldr	r0, [pc, #56]	; (800099c <uartinit+0x74>)
 8000962:	f001 fd0f 	bl	8002384 <HAL_UART_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <uartinit+0x4e>
	{
		/* Initialization Error */
		//Error_Handler();
		printf("Error en la inicializacion de la UART\n\r");
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <uartinit+0x7c>)
 800096e:	f002 f9c7 	bl	8002d00 <iprintf>
		return false;
 8000972:	2300      	movs	r3, #0
 8000974:	e00f      	b.n	8000996 <uartinit+0x6e>
	}
	printf("UART inicializada correctamente\n\r");
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <uartinit+0x80>)
 8000978:	f002 f9c2 	bl	8002d00 <iprintf>
	printf("Parametros de configuracion:\n\r");
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <uartinit+0x84>)
 800097e:	f002 f9bf 	bl	8002d00 <iprintf>
	printf("Instancia: USART%d\n\r",UARTn);
 8000982:	2103      	movs	r1, #3
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <uartinit+0x88>)
 8000986:	f002 f9bb 	bl	8002d00 <iprintf>
	printf("Baudrate: %d\n\r",myBaudRate);
 800098a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <uartinit+0x8c>)
 8000990:	f002 f9b6 	bl	8002d00 <iprintf>

	return true;
 8000994:	2301      	movs	r3, #1
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000bc 	.word	0x200000bc
 80009a0:	40011000 	.word	0x40011000
 80009a4:	08003d20 	.word	0x08003d20
 80009a8:	08003d48 	.word	0x08003d48
 80009ac:	08003d6c 	.word	0x08003d6c
 80009b0:	08003d8c 	.word	0x08003d8c
 80009b4:	08003da4 	.word	0x08003da4

080009b8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  // Place your implementation of fputc here
  // e.g. write a character to the USART3 and Loop until the end of transmission
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 80009c0:	1d39      	adds	r1, r7, #4
 80009c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c6:	2201      	movs	r2, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <__io_putchar+0x20>)
 80009ca:	f001 fd28 	bl	800241e <HAL_UART_Transmit>

  return ch;
 80009ce:	687b      	ldr	r3, [r7, #4]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000bc 	.word	0x200000bc

080009dc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <BSP_LED_On+0x2c>)
 80009ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <BSP_LED_On+0x30>)
 80009f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	f000 ff67 	bl	80018cc <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000010 	.word	0x20000010
 8000a0c:	08003e5c 	.word	0x08003e5c

08000a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <SystemInit+0x60>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <SystemInit+0x60>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <SystemInit+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <SystemInit+0x64>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <SystemInit+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <SystemInit+0x64>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <SystemInit+0x64>)
 8000a3c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <SystemInit+0x64>)
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <SystemInit+0x68>)
 8000a4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <SystemInit+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <SystemInit+0x64>)
 8000a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SystemInit+0x60>)
 8000a60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a64:	609a      	str	r2, [r3, #8]
#endif
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	40023800 	.word	0x40023800
 8000a78:	24003010 	.word	0x24003010

08000a7c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000ad0:	f000 f8fe 	bl	8000cd0 <HAL_IncTick>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <DMA2_Stream0_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <DMA2_Stream0_IRQHandler+0x14>)
 8000ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fbbd 	bl	8001260 <HAL_DMA_IRQHandler>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000108 	.word	0x20000108

08000af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
	}

return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e009      	b.n	8000b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff37 	bl	80009b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf1      	blt.n	8000b3c <_write+0x12>
	}
	return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_close>:

int _close(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_isatty>:

int _isatty(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f002 f84e 	bl	8002c9c <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20030000 	.word	0x20030000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000100 	.word	0x20000100
 8000c34:	20000160 	.word	0x20000160

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x34>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x34>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x34>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x34>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 facf 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f000 fea0 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fad9 	bl	8001246 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 faaf 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000001c 	.word	0x2000001c
 8000cc8:	20000024 	.word	0x20000024
 8000ccc:	20000020 	.word	0x20000020

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000024 	.word	0x20000024
 8000cf4:	20000104 	.word	0x20000104

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000104 	.word	0x20000104

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000024 	.word	0x20000024

08000d58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_ADC_Start+0x1a>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e0b2      	b.n	8000ed8 <HAL_ADC_Start+0x180>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d018      	beq.n	8000dba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0201 	orr.w	r2, r2, #1
 8000d96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d98:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <HAL_ADC_Start+0x18c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a52      	ldr	r2, [pc, #328]	; (8000ee8 <HAL_ADC_Start+0x190>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	0c9a      	lsrs	r2, r3, #18
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dac:	e002      	b.n	8000db4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f9      	bne.n	8000dae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d17a      	bne.n	8000ebe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e06:	d106      	bne.n	8000e16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f023 0206 	bic.w	r2, r3, #6
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	645a      	str	r2, [r3, #68]	; 0x44
 8000e14:	e002      	b.n	8000e1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_ADC_Start+0x194>)
 8000e26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d12a      	bne.n	8000e94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a2b      	ldr	r2, [pc, #172]	; (8000ef0 <HAL_ADC_Start+0x198>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d015      	beq.n	8000e74 <HAL_ADC_Start+0x11c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <HAL_ADC_Start+0x19c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d105      	bne.n	8000e5e <HAL_ADC_Start+0x106>
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_ADC_Start+0x194>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00a      	beq.n	8000e74 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <HAL_ADC_Start+0x1a0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d136      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_ADC_Start+0x194>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d130      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d129      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	e020      	b.n	8000ed6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <HAL_ADC_Start+0x198>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d11b      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d114      	bne.n	8000ed6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f043 0210 	orr.w	r2, r3, #16
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	2000001c 	.word	0x2000001c
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	40012300 	.word	0x40012300
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	40012100 	.word	0x40012100
 8000ef8:	40012200 	.word	0x40012200

08000efc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <HAL_ADC_Stop+0x16>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e021      	b.n	8000f56 <HAL_ADC_Stop+0x5a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d109      	bne.n	8000f4c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	f043 0201 	orr.w	r2, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d113      	bne.n	8000fa8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f043 0220 	orr.w	r2, r3, #32
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e063      	b.n	8001070 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000fa8:	f7ff fea6 	bl	8000cf8 <HAL_GetTick>
 8000fac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fae:	e021      	b.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb6:	d01d      	beq.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_PollForConversion+0x6c>
 8000fbe:	f7ff fe9b 	bl	8000cf8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d212      	bcs.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d00b      	beq.n	8000ff4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f043 0204 	orr.w	r2, r3, #4
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e03d      	b.n	8001070 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d1d6      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f06f 0212 	mvn.w	r2, #18
 800100a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d123      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11f      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001046:	2b00      	cmp	r3, #0
 8001048:	d111      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d105      	bne.n	800106e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff47 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff5c 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff8e 	bl	800114c <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffb0 	bl	80011b4 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800126c:	4b8e      	ldr	r3, [pc, #568]	; (80014a8 <HAL_DMA_IRQHandler+0x248>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a8e      	ldr	r2, [pc, #568]	; (80014ac <HAL_DMA_IRQHandler+0x24c>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	0a9b      	lsrs	r3, r3, #10
 8001278:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128a:	2208      	movs	r2, #8
 800128c:	409a      	lsls	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d01a      	beq.n	80012cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0204 	bic.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	2208      	movs	r2, #8
 80012ba:	409a      	lsls	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c4:	f043 0201 	orr.w	r2, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d012      	beq.n	8001302 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ee:	2201      	movs	r2, #1
 80012f0:	409a      	lsls	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fa:	f043 0202 	orr.w	r2, r3, #2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	2204      	movs	r2, #4
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d012      	beq.n	8001338 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	2204      	movs	r2, #4
 8001326:	409a      	lsls	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	f043 0204 	orr.w	r2, r3, #4
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133c:	2210      	movs	r2, #16
 800133e:	409a      	lsls	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d043      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d03c      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	2210      	movs	r2, #16
 800135c:	409a      	lsls	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d018      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d108      	bne.n	8001390 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	2b00      	cmp	r3, #0
 8001384:	d024      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
 800138e:	e01f      	b.n	80013d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01b      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
 80013a0:	e016      	b.n	80013d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d107      	bne.n	80013c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0208 	bic.w	r2, r2, #8
 80013be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2220      	movs	r2, #32
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 808f 	beq.w	8001500 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8087 	beq.w	8001500 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	2220      	movs	r2, #32
 80013f8:	409a      	lsls	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b05      	cmp	r3, #5
 8001408:	d136      	bne.n	8001478 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0216 	bic.w	r2, r2, #22
 8001418:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001428:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d103      	bne.n	800143a <HAL_DMA_IRQHandler+0x1da>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0208 	bic.w	r2, r2, #8
 8001448:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144e:	223f      	movs	r2, #63	; 0x3f
 8001450:	409a      	lsls	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146a:	2b00      	cmp	r3, #0
 800146c:	d07e      	beq.n	800156c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
        }
        return;
 8001476:	e079      	b.n	800156c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01d      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10d      	bne.n	80014b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	2b00      	cmp	r3, #0
 800149a:	d031      	beq.n	8001500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
 80014a4:	e02c      	b.n	8001500 <HAL_DMA_IRQHandler+0x2a0>
 80014a6:	bf00      	nop
 80014a8:	2000001c 	.word	0x2000001c
 80014ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d023      	beq.n	8001500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	4798      	blx	r3
 80014c0:	e01e      	b.n	8001500 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10f      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0210 	bic.w	r2, r2, #16
 80014de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001504:	2b00      	cmp	r3, #0
 8001506:	d032      	beq.n	800156e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d022      	beq.n	800155a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2205      	movs	r2, #5
 8001518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	d307      	bcc.n	8001548 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f2      	bne.n	800152c <HAL_DMA_IRQHandler+0x2cc>
 8001546:	e000      	b.n	800154a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001548:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	4798      	blx	r3
 800156a:	e000      	b.n	800156e <HAL_DMA_IRQHandler+0x30e>
        return;
 800156c:	bf00      	nop
    }
  }
}
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e177      	b.n	8001880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8166 	bne.w	800187a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80c0 	beq.w	800187a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b66      	ldr	r3, [pc, #408]	; (8001898 <HAL_GPIO_Init+0x324>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a65      	ldr	r2, [pc, #404]	; (8001898 <HAL_GPIO_Init+0x324>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_GPIO_Init+0x324>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001716:	4a61      	ldr	r2, [pc, #388]	; (800189c <HAL_GPIO_Init+0x328>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_GPIO_Init+0x32c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d037      	beq.n	80017b2 <HAL_GPIO_Init+0x23e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <HAL_GPIO_Init+0x330>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d031      	beq.n	80017ae <HAL_GPIO_Init+0x23a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a56      	ldr	r2, [pc, #344]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02b      	beq.n	80017aa <HAL_GPIO_Init+0x236>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a55      	ldr	r2, [pc, #340]	; (80018ac <HAL_GPIO_Init+0x338>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d025      	beq.n	80017a6 <HAL_GPIO_Init+0x232>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_GPIO_Init+0x33c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01f      	beq.n	80017a2 <HAL_GPIO_Init+0x22e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a53      	ldr	r2, [pc, #332]	; (80018b4 <HAL_GPIO_Init+0x340>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x22a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_GPIO_Init+0x344>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x226>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a51      	ldr	r2, [pc, #324]	; (80018bc <HAL_GPIO_Init+0x348>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x222>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a50      	ldr	r2, [pc, #320]	; (80018c0 <HAL_GPIO_Init+0x34c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x21e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_GPIO_Init+0x350>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x21a>
 800178a:	2309      	movs	r3, #9
 800178c:	e012      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 800178e:	230a      	movs	r3, #10
 8001790:	e010      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 8001792:	2308      	movs	r3, #8
 8001794:	e00e      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 8001796:	2307      	movs	r3, #7
 8001798:	e00c      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 800179a:	2306      	movs	r3, #6
 800179c:	e00a      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 800179e:	2305      	movs	r3, #5
 80017a0:	e008      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017b2:	2300      	movs	r3, #0
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c4:	4935      	ldr	r1, [pc, #212]	; (800189c <HAL_GPIO_Init+0x328>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_GPIO_Init+0x354>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f6:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <HAL_GPIO_Init+0x354>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_GPIO_Init+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001820:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_GPIO_Init+0x354>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3301      	adds	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	f67f ae84 	bls.w	8001590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40022400 	.word	0x40022400
 80018c8:	40013c00 	.word	0x40013c00

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_UART_MspInit+0x9c>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_UART_MspInit+0x9c>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_UART_MspInit+0x9c>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a1b      	ldr	r2, [pc, #108]	; (800199c <HAL_UART_MspInit+0x9c>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_UART_MspInit+0x9c>)
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	6453      	str	r3, [r2, #68]	; 0x44
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800195c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001966:	2301      	movs	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800196e:	2307      	movs	r3, #7
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <HAL_UART_MspInit+0xa0>)
 800197a:	f7ff fdfb 	bl	8001574 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800197e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001984:	2307      	movs	r3, #7
 8001986:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <HAL_UART_MspInit+0xa0>)
 8001990:	f7ff fdf0 	bl	8001574 <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x94>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e0:	f7ff f98a 	bl	8000cf8 <HAL_GetTick>
 80019e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019e6:	e009      	b.n	80019fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019e8:	f7ff f986 	bl	8000cf8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f6:	d901      	bls.n	80019fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e01f      	b.n	8001a3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d1ee      	bne.n	80019e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff f972 	bl	8000cf8 <HAL_GetTick>
 8001a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a16:	e009      	b.n	8001a2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a18:	f7ff f96e 	bl	8000cf8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a26:	d901      	bls.n	8001a2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e007      	b.n	8001a3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a38:	d1ee      	bne.n	8001a18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	420e0040 	.word	0x420e0040
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	420e0044 	.word	0x420e0044

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e267      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d075      	beq.n	8001b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a72:	4b88      	ldr	r3, [pc, #544]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d00c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7e:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8a:	4b82      	ldr	r3, [pc, #520]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	4b7e      	ldr	r3, [pc, #504]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05b      	beq.n	8001b5c <HAL_RCC_OscConfig+0x108>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d157      	bne.n	8001b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e242      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x74>
 8001aba:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a75      	ldr	r2, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4b70      	ldr	r3, [pc, #448]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6f      	ldr	r2, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a68      	ldr	r2, [pc, #416]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a65      	ldr	r2, [pc, #404]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f8f4 	bl	8000cf8 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff f8f0 	bl	8000cf8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e207      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xc0>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f8e0 	bl	8000cf8 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f8dc 	bl	8000cf8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1f3      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	4b51      	ldr	r3, [pc, #324]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0xe8>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d063      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d11c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b82:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d116      	bne.n	8001bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x152>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1c7      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4937      	ldr	r1, [pc, #220]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	e03a      	b.n	8001c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f895 	bl	8000cf8 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f891 	bl	8000cf8 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1a8      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4925      	ldr	r1, [pc, #148]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f874 	bl	8000cf8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff f870 	bl	8000cf8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e187      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d036      	beq.n	8001cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d016      	beq.n	8001c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_RCC_OscConfig+0x248>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f854 	bl	8000cf8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff f850 	bl	8000cf8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e167      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x240>)
 8001c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x200>
 8001c72:	e01b      	b.n	8001cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_OscConfig+0x248>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f83d 	bl	8000cf8 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	e00e      	b.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c82:	f7ff f839 	bl	8000cf8 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d907      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e150      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
 8001c94:	40023800 	.word	0x40023800
 8001c98:	42470000 	.word	0x42470000
 8001c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ea      	bne.n	8001c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 8097 	beq.w	8001de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a7c      	ldr	r2, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b7a      	ldr	r3, [pc, #488]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	4b77      	ldr	r3, [pc, #476]	; (8001ec8 <HAL_RCC_OscConfig+0x474>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d118      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf6:	4b74      	ldr	r3, [pc, #464]	; (8001ec8 <HAL_RCC_OscConfig+0x474>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a73      	ldr	r2, [pc, #460]	; (8001ec8 <HAL_RCC_OscConfig+0x474>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d02:	f7fe fff9 	bl	8000cf8 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7fe fff5 	bl	8000cf8 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e10c      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0x474>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2ea>
 8001d30:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	4a63      	ldr	r2, [pc, #396]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3c:	e01c      	b.n	8001d78 <HAL_RCC_OscConfig+0x324>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x30c>
 8001d46:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	4a5e      	ldr	r2, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70
 8001d52:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0x324>
 8001d60:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d015      	beq.n	8001dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7fe ffba 	bl	8000cf8 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7fe ffb6 	bl	8000cf8 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0cb      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ee      	beq.n	8001d88 <HAL_RCC_OscConfig+0x334>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7fe ffa4 	bl	8000cf8 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7fe ffa0 	bl	8000cf8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0b5      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dca:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ee      	bne.n	8001db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a1 	beq.w	8001f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d05c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d141      	bne.n	8001e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <HAL_RCC_OscConfig+0x478>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff74 	bl	8000cf8 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e14:	f7fe ff70 	bl	8000cf8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e087      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	019b      	lsls	r3, r3, #6
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x478>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe ff49 	bl	8000cf8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe ff45 	bl	8000cf8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e05c      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x416>
 8001e88:	e054      	b.n	8001f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x478>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7fe ff32 	bl	8000cf8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe ff2e 	bl	8000cf8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e045      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x470>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x444>
 8001eb6:	e03d      	b.n	8001f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e038      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x4ec>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d028      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d121      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d11a      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d111      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0cc      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b68      	ldr	r3, [pc, #416]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d90c      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b65      	ldr	r3, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	494d      	ldr	r1, [pc, #308]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d044      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d119      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e067      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4934      	ldr	r1, [pc, #208]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7fe fe60 	bl	8000cf8 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe fe5c 	bl	8000cf8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e04f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d20c      	bcs.n	800208c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f821 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	490a      	ldr	r1, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	5ccb      	ldrb	r3, [r1, r3]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fdc0 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00
 8002100:	40023800 	.word	0x40023800
 8002104:	08003e64 	.word	0x08003e64
 8002108:	2000001c 	.word	0x2000001c
 800210c:	20000020 	.word	0x20000020

08002110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002114:	b094      	sub	sp, #80	; 0x50
 8002116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
 800211c:	2300      	movs	r3, #0
 800211e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002120:	2300      	movs	r3, #0
 8002122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002128:	4b79      	ldr	r3, [pc, #484]	; (8002310 <HAL_RCC_GetSysClockFreq+0x200>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d00d      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x40>
 8002134:	2b08      	cmp	r3, #8
 8002136:	f200 80e1 	bhi.w	80022fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x34>
 800213e:	2b04      	cmp	r3, #4
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x3a>
 8002142:	e0db      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_RCC_GetSysClockFreq+0x204>)
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002148:	e0db      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800214a:	4b73      	ldr	r3, [pc, #460]	; (8002318 <HAL_RCC_GetSysClockFreq+0x208>)
 800214c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800214e:	e0d8      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_GetSysClockFreq+0x200>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002158:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800215a:	4b6d      	ldr	r3, [pc, #436]	; (8002310 <HAL_RCC_GetSysClockFreq+0x200>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002166:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_GetSysClockFreq+0x200>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	099b      	lsrs	r3, r3, #6
 800216c:	2200      	movs	r2, #0
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002170:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
 800217a:	2300      	movs	r3, #0
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
 800217e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002182:	4622      	mov	r2, r4
 8002184:	462b      	mov	r3, r5
 8002186:	f04f 0000 	mov.w	r0, #0
 800218a:	f04f 0100 	mov.w	r1, #0
 800218e:	0159      	lsls	r1, r3, #5
 8002190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002194:	0150      	lsls	r0, r2, #5
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4621      	mov	r1, r4
 800219c:	1a51      	subs	r1, r2, r1
 800219e:	6139      	str	r1, [r7, #16]
 80021a0:	4629      	mov	r1, r5
 80021a2:	eb63 0301 	sbc.w	r3, r3, r1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021b4:	4659      	mov	r1, fp
 80021b6:	018b      	lsls	r3, r1, #6
 80021b8:	4651      	mov	r1, sl
 80021ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021be:	4651      	mov	r1, sl
 80021c0:	018a      	lsls	r2, r1, #6
 80021c2:	4651      	mov	r1, sl
 80021c4:	ebb2 0801 	subs.w	r8, r2, r1
 80021c8:	4659      	mov	r1, fp
 80021ca:	eb63 0901 	sbc.w	r9, r3, r1
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021e2:	4690      	mov	r8, r2
 80021e4:	4699      	mov	r9, r3
 80021e6:	4623      	mov	r3, r4
 80021e8:	eb18 0303 	adds.w	r3, r8, r3
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	462b      	mov	r3, r5
 80021f0:	eb49 0303 	adc.w	r3, r9, r3
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002202:	4629      	mov	r1, r5
 8002204:	024b      	lsls	r3, r1, #9
 8002206:	4621      	mov	r1, r4
 8002208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800220c:	4621      	mov	r1, r4
 800220e:	024a      	lsls	r2, r1, #9
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002216:	2200      	movs	r2, #0
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
 800221a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800221c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002220:	f7fe f836 	bl	8000290 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800222c:	e058      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_RCC_GetSysClockFreq+0x200>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	2200      	movs	r2, #0
 8002236:	4618      	mov	r0, r3
 8002238:	4611      	mov	r1, r2
 800223a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
 8002244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002248:	4642      	mov	r2, r8
 800224a:	464b      	mov	r3, r9
 800224c:	f04f 0000 	mov.w	r0, #0
 8002250:	f04f 0100 	mov.w	r1, #0
 8002254:	0159      	lsls	r1, r3, #5
 8002256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800225a:	0150      	lsls	r0, r2, #5
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4641      	mov	r1, r8
 8002262:	ebb2 0a01 	subs.w	sl, r2, r1
 8002266:	4649      	mov	r1, r9
 8002268:	eb63 0b01 	sbc.w	fp, r3, r1
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800227c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002280:	ebb2 040a 	subs.w	r4, r2, sl
 8002284:	eb63 050b 	sbc.w	r5, r3, fp
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	00eb      	lsls	r3, r5, #3
 8002292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002296:	00e2      	lsls	r2, r4, #3
 8002298:	4614      	mov	r4, r2
 800229a:	461d      	mov	r5, r3
 800229c:	4643      	mov	r3, r8
 800229e:	18e3      	adds	r3, r4, r3
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	464b      	mov	r3, r9
 80022a4:	eb45 0303 	adc.w	r3, r5, r3
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022b6:	4629      	mov	r1, r5
 80022b8:	028b      	lsls	r3, r1, #10
 80022ba:	4621      	mov	r1, r4
 80022bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022c0:	4621      	mov	r1, r4
 80022c2:	028a      	lsls	r2, r1, #10
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ca:	2200      	movs	r2, #0
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	61fa      	str	r2, [r7, #28]
 80022d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022d4:	f7fd ffdc 	bl	8000290 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4613      	mov	r3, r2
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	3301      	adds	r3, #1
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetSysClockFreq+0x204>)
 80022fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002304:	4618      	mov	r0, r3
 8002306:	3750      	adds	r7, #80	; 0x50
 8002308:	46bd      	mov	sp, r7
 800230a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	00f42400 	.word	0x00f42400
 8002318:	007a1200 	.word	0x007a1200

0800231c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_GetHCLKFreq+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000001c 	.word	0x2000001c

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002338:	f7ff fff0 	bl	800231c <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	0a9b      	lsrs	r3, r3, #10
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	08003e74 	.word	0x08003e74

0800235c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002360:	f7ff ffdc 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	0b5b      	lsrs	r3, r3, #13
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	08003e74 	.word	0x08003e74

08002384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e03f      	b.n	8002416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff faa8 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	; 0x24
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f929 	bl	8002620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b08a      	sub	sp, #40	; 0x28
 8002422:	af02      	add	r7, sp, #8
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b20      	cmp	r3, #32
 800243c:	d17c      	bne.n	8002538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_UART_Transmit+0x2c>
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e075      	b.n	800253a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_UART_Transmit+0x3e>
 8002458:	2302      	movs	r3, #2
 800245a:	e06e      	b.n	800253a <HAL_UART_Transmit+0x11c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2221      	movs	r2, #33	; 0x21
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002472:	f7fe fc41 	bl	8000cf8 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	88fa      	ldrh	r2, [r7, #6]
 800247c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248c:	d108      	bne.n	80024a0 <HAL_UART_Transmit+0x82>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d104      	bne.n	80024a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	e003      	b.n	80024a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024b0:	e02a      	b.n	8002508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f840 	bl	8002542 <UART_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e036      	b.n	800253a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10b      	bne.n	80024ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	3302      	adds	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	e007      	b.n	80024fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	3301      	adds	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1cf      	bne.n	80024b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	2140      	movs	r1, #64	; 0x40
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f810 	bl	8002542 <UART_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e006      	b.n	800253a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	e000      	b.n	800253a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002538:	2302      	movs	r3, #2
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b090      	sub	sp, #64	; 0x40
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002552:	e050      	b.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255a:	d04c      	beq.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800255c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0x30>
 8002562:	f7fe fbc9 	bl	8000cf8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800256e:	429a      	cmp	r2, r3
 8002570:	d241      	bcs.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	330c      	adds	r3, #12
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	e853 3f00 	ldrex	r3, [r3]
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002592:	637a      	str	r2, [r7, #52]	; 0x34
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800259a:	e841 2300 	strex	r3, r2, [r1]
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e5      	bne.n	8002572 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3314      	adds	r3, #20
 80025ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	e853 3f00 	ldrex	r3, [r3]
 80025b4:	613b      	str	r3, [r7, #16]
   return(result);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3314      	adds	r3, #20
 80025c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c6:	623a      	str	r2, [r7, #32]
 80025c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ca:	69f9      	ldr	r1, [r7, #28]
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	e841 2300 	strex	r3, r2, [r1]
 80025d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1e5      	bne.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e00f      	b.n	8002616 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4013      	ands	r3, r2
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	429a      	cmp	r2, r3
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	429a      	cmp	r2, r3
 8002612:	d09f      	beq.n	8002554 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3740      	adds	r7, #64	; 0x40
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b0c0      	sub	sp, #256	; 0x100
 8002626:	af00      	add	r7, sp, #0
 8002628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	ea40 0301 	orr.w	r3, r0, r1
 8002648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	431a      	orrs	r2, r3
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	431a      	orrs	r2, r3
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002678:	f021 010c 	bic.w	r1, r1, #12
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800268a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269a:	6999      	ldr	r1, [r3, #24]
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	ea40 0301 	orr.w	r3, r0, r1
 80026a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b8f      	ldr	r3, [pc, #572]	; (80028ec <UART_SetConfig+0x2cc>)
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d005      	beq.n	80026c0 <UART_SetConfig+0xa0>
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <UART_SetConfig+0x2d0>)
 80026bc:	429a      	cmp	r2, r3
 80026be:	d104      	bne.n	80026ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c0:	f7ff fe4c 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 80026c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026c8:	e003      	b.n	80026d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ca:	f7ff fe33 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 80026ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	f040 810c 	bne.w	80028f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026f2:	4622      	mov	r2, r4
 80026f4:	462b      	mov	r3, r5
 80026f6:	1891      	adds	r1, r2, r2
 80026f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80026fa:	415b      	adcs	r3, r3
 80026fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002702:	4621      	mov	r1, r4
 8002704:	eb12 0801 	adds.w	r8, r2, r1
 8002708:	4629      	mov	r1, r5
 800270a:	eb43 0901 	adc.w	r9, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002722:	4690      	mov	r8, r2
 8002724:	4699      	mov	r9, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb18 0303 	adds.w	r3, r8, r3
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002730:	462b      	mov	r3, r5
 8002732:	eb49 0303 	adc.w	r3, r9, r3
 8002736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800274a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800274e:	460b      	mov	r3, r1
 8002750:	18db      	adds	r3, r3, r3
 8002752:	653b      	str	r3, [r7, #80]	; 0x50
 8002754:	4613      	mov	r3, r2
 8002756:	eb42 0303 	adc.w	r3, r2, r3
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
 800275c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002764:	f7fd fd94 	bl	8000290 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <UART_SetConfig+0x2d4>)
 800276e:	fba3 2302 	umull	r2, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	011c      	lsls	r4, r3, #4
 8002776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800277a:	2200      	movs	r2, #0
 800277c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	1891      	adds	r1, r2, r2
 800278e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002790:	415b      	adcs	r3, r3
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002798:	4641      	mov	r1, r8
 800279a:	eb12 0a01 	adds.w	sl, r2, r1
 800279e:	4649      	mov	r1, r9
 80027a0:	eb43 0b01 	adc.w	fp, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027b8:	4692      	mov	sl, r2
 80027ba:	469b      	mov	fp, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	eb1a 0303 	adds.w	r3, sl, r3
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027c6:	464b      	mov	r3, r9
 80027c8:	eb4b 0303 	adc.w	r3, fp, r3
 80027cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027e4:	460b      	mov	r3, r1
 80027e6:	18db      	adds	r3, r3, r3
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
 80027ea:	4613      	mov	r3, r2
 80027ec:	eb42 0303 	adc.w	r3, r2, r3
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
 80027f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027fa:	f7fd fd49 	bl	8000290 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4611      	mov	r1, r2
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <UART_SetConfig+0x2d4>)
 8002806:	fba3 2301 	umull	r2, r3, r3, r1
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2264      	movs	r2, #100	; 0x64
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	1acb      	subs	r3, r1, r3
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <UART_SetConfig+0x2d4>)
 800281c:	fba3 2302 	umull	r2, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002828:	441c      	add	r4, r3
 800282a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800283c:	4642      	mov	r2, r8
 800283e:	464b      	mov	r3, r9
 8002840:	1891      	adds	r1, r2, r2
 8002842:	63b9      	str	r1, [r7, #56]	; 0x38
 8002844:	415b      	adcs	r3, r3
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800284c:	4641      	mov	r1, r8
 800284e:	1851      	adds	r1, r2, r1
 8002850:	6339      	str	r1, [r7, #48]	; 0x30
 8002852:	4649      	mov	r1, r9
 8002854:	414b      	adcs	r3, r1
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002864:	4659      	mov	r1, fp
 8002866:	00cb      	lsls	r3, r1, #3
 8002868:	4651      	mov	r1, sl
 800286a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800286e:	4651      	mov	r1, sl
 8002870:	00ca      	lsls	r2, r1, #3
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	4603      	mov	r3, r0
 8002878:	4642      	mov	r2, r8
 800287a:	189b      	adds	r3, r3, r2
 800287c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002880:	464b      	mov	r3, r9
 8002882:	460a      	mov	r2, r1
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800289c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028a0:	460b      	mov	r3, r1
 80028a2:	18db      	adds	r3, r3, r3
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a6:	4613      	mov	r3, r2
 80028a8:	eb42 0303 	adc.w	r3, r2, r3
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028b6:	f7fd fceb 	bl	8000290 <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <UART_SetConfig+0x2d4>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	f003 0207 	and.w	r2, r3, #7
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4422      	add	r2, r4
 80028e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028e8:	e105      	b.n	8002af6 <UART_SetConfig+0x4d6>
 80028ea:	bf00      	nop
 80028ec:	40011000 	.word	0x40011000
 80028f0:	40011400 	.word	0x40011400
 80028f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800290a:	4642      	mov	r2, r8
 800290c:	464b      	mov	r3, r9
 800290e:	1891      	adds	r1, r2, r2
 8002910:	6239      	str	r1, [r7, #32]
 8002912:	415b      	adcs	r3, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800291a:	4641      	mov	r1, r8
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4649      	mov	r1, r9
 8002920:	eb43 0501 	adc.w	r5, r3, r1
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	00eb      	lsls	r3, r5, #3
 800292e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002932:	00e2      	lsls	r2, r4, #3
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	4643      	mov	r3, r8
 800293a:	18e3      	adds	r3, r4, r3
 800293c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002940:	464b      	mov	r3, r9
 8002942:	eb45 0303 	adc.w	r3, r5, r3
 8002946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002966:	4629      	mov	r1, r5
 8002968:	008b      	lsls	r3, r1, #2
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002970:	4621      	mov	r1, r4
 8002972:	008a      	lsls	r2, r1, #2
 8002974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002978:	f7fd fc8a 	bl	8000290 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011c      	lsls	r4, r3, #4
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800299c:	4642      	mov	r2, r8
 800299e:	464b      	mov	r3, r9
 80029a0:	1891      	adds	r1, r2, r2
 80029a2:	61b9      	str	r1, [r7, #24]
 80029a4:	415b      	adcs	r3, r3
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ac:	4641      	mov	r1, r8
 80029ae:	1851      	adds	r1, r2, r1
 80029b0:	6139      	str	r1, [r7, #16]
 80029b2:	4649      	mov	r1, r9
 80029b4:	414b      	adcs	r3, r1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029c4:	4659      	mov	r1, fp
 80029c6:	00cb      	lsls	r3, r1, #3
 80029c8:	4651      	mov	r1, sl
 80029ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ce:	4651      	mov	r1, sl
 80029d0:	00ca      	lsls	r2, r1, #3
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	4642      	mov	r2, r8
 80029da:	189b      	adds	r3, r3, r2
 80029dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029e0:	464b      	mov	r3, r9
 80029e2:	460a      	mov	r2, r1
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80029f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a04:	4649      	mov	r1, r9
 8002a06:	008b      	lsls	r3, r1, #2
 8002a08:	4641      	mov	r1, r8
 8002a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a0e:	4641      	mov	r1, r8
 8002a10:	008a      	lsls	r2, r1, #2
 8002a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a16:	f7fd fc3b 	bl	8000290 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	2164      	movs	r1, #100	; 0x64
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	3332      	adds	r3, #50	; 0x32
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3e:	441c      	add	r4, r3
 8002a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a44:	2200      	movs	r2, #0
 8002a46:	673b      	str	r3, [r7, #112]	; 0x70
 8002a48:	677a      	str	r2, [r7, #116]	; 0x74
 8002a4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a4e:	4642      	mov	r2, r8
 8002a50:	464b      	mov	r3, r9
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	415b      	adcs	r3, r3
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5e:	4641      	mov	r1, r8
 8002a60:	1851      	adds	r1, r2, r1
 8002a62:	6039      	str	r1, [r7, #0]
 8002a64:	4649      	mov	r1, r9
 8002a66:	414b      	adcs	r3, r1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a76:	4659      	mov	r1, fp
 8002a78:	00cb      	lsls	r3, r1, #3
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a80:	4651      	mov	r1, sl
 8002a82:	00ca      	lsls	r2, r1, #3
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8002aa4:	667a      	str	r2, [r7, #100]	; 0x64
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	008b      	lsls	r3, r1, #2
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002abc:	4641      	mov	r1, r8
 8002abe:	008a      	lsls	r2, r1, #2
 8002ac0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ac4:	f7fd fbe4 	bl	8000290 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002ace:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2164      	movs	r1, #100	; 0x64
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	3332      	adds	r3, #50	; 0x32
 8002ae0:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4422      	add	r2, r4
 8002af4:	609a      	str	r2, [r3, #8]
}
 8002af6:	bf00      	nop
 8002af8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	51eb851f 	.word	0x51eb851f

08002b08 <main>:
#define TIME2 500

void iniciaADC();

int main(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
		 handled in milliseconds basis.
	   - Set NVIC Group Priority to 4
	   - Low Level Initialization
	 */

	HAL_Init();
 8002b0e:	f7fe f893 	bl	8000c38 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8002b12:	f000 f831 	bl	8002b78 <SystemClock_Config>

	/* Initialize Inputs */
	inputsInit();
 8002b16:	f7fd fd67 	bl	80005e8 <inputsInit>

	delay_t delayLED2;
	tick_t  timeLED2 = 100;
 8002b1a:	2364      	movs	r3, #100	; 0x64
 8002b1c:	617b      	str	r3, [r7, #20]
	delayInit(&delayLED2, timeLED2);
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	6979      	ldr	r1, [r7, #20]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fd46 	bl	80005b4 <delayInit>

	/* Initialize FSM */
	debounceFSM_init();
 8002b28:	f7fd fd34 	bl	8000594 <debounceFSM_init>
					  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	  - Stop Bit    = One Stop bit
	  - Parity      = ODD parity
	  - BaudRate    = 9600 baud
	  - Hardware flow control disabled (RTS and CTS signals) */
	uartinit();
 8002b2c:	f7fd fefc 	bl	8000928 <uartinit>
	printf("UART TP PdM Jordan OK\r\n");
 8002b30:	480e      	ldr	r0, [pc, #56]	; (8002b6c <main+0x64>)
 8002b32:	f000 f96b 	bl	8002e0c <puts>



/* Infinite loop */
	uint32_t valorLeidoADC = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
	while (1)
	{
		//valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
		HAL_ADC_Start(&AdcHandle);
 8002b3a:	480d      	ldr	r0, [pc, #52]	; (8002b70 <main+0x68>)
 8002b3c:	f7fe f90c 	bl	8000d58 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&AdcHandle,0xFFF);
 8002b40:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002b44:	480a      	ldr	r0, [pc, #40]	; (8002b70 <main+0x68>)
 8002b46:	f7fe fa0c 	bl	8000f62 <HAL_ADC_PollForConversion>
		valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8002b4a:	4809      	ldr	r0, [pc, #36]	; (8002b70 <main+0x68>)
 8002b4c:	f7fe fa94 	bl	8001078 <HAL_ADC_GetValue>
 8002b50:	6138      	str	r0, [r7, #16]
		HAL_ADC_Stop(&AdcHandle);
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <main+0x68>)
 8002b54:	f7fe f9d2 	bl	8000efc <HAL_ADC_Stop>

		printf("Valor leido = %lu\r\n", valorLeidoADC);
 8002b58:	6939      	ldr	r1, [r7, #16]
 8002b5a:	4806      	ldr	r0, [pc, #24]	; (8002b74 <main+0x6c>)
 8002b5c:	f000 f8d0 	bl	8002d00 <iprintf>
		HAL_Delay(500);
 8002b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b64:	f7fe f8d4 	bl	8000d10 <HAL_Delay>
		HAL_ADC_Start(&AdcHandle);
 8002b68:	e7e7      	b.n	8002b3a <main+0x32>
 8002b6a:	bf00      	nop
 8002b6c:	08003e00 	.word	0x08003e00
 8002b70:	20000108 	.word	0x20000108
 8002b74:	08003e18 	.word	0x08003e18

08002b78 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b094      	sub	sp, #80	; 0x50
 8002b7c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <SystemClock_Config+0xbc>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <SystemClock_Config+0xbc>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <SystemClock_Config+0xbc>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <SystemClock_Config+0xc0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a25      	ldr	r2, [pc, #148]	; (8002c38 <SystemClock_Config+0xc0>)
 8002ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <SystemClock_Config+0xc0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002bba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002bbe:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002bce:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bd8:	2307      	movs	r3, #7
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe ff37 	bl	8001a54 <HAL_RCC_OscConfig>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002bec:	f000 f826 	bl	8002c3c <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002bf0:	f7fe fee0 	bl	80019b4 <HAL_PWREx_EnableOverDrive>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002bfa:	f000 f81f 	bl	8002c3c <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002bfe:	230f      	movs	r3, #15
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c02:	2302      	movs	r3, #2
 8002c04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c06:	2300      	movs	r3, #0
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1a:	2105      	movs	r1, #5
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f991 	bl	8001f44 <HAL_RCC_ClockConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002c28:	f000 f808 	bl	8002c3c <Error_Handler>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3750      	adds	r7, #80	; 0x50
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40007000 	.word	0x40007000

08002c3c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7fd fecb 	bl	80009dc <BSP_LED_On>
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <Error_Handler+0xa>

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c80 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c4e:	e003      	b.n	8002c58 <LoopCopyDataInit>

08002c50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c56:	3104      	adds	r1, #4

08002c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c58:	480b      	ldr	r0, [pc, #44]	; (8002c88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c60:	d3f6      	bcc.n	8002c50 <CopyDataInit>
  ldr  r2, =_sbss
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c64:	e002      	b.n	8002c6c <LoopFillZerobss>

08002c66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c68:	f842 3b04 	str.w	r3, [r2], #4

08002c6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c70:	d3f9      	bcc.n	8002c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c72:	f7fd fecd 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c76:	f000 f817 	bl	8002ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7ff ff45 	bl	8002b08 <main>
  bx  lr    
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c80:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002c84:	08003f24 	.word	0x08003f24
  ldr  r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c8c:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8002c90:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8002c94:	20000160 	.word	0x20000160

08002c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC_IRQHandler>
	...

08002c9c <__errno>:
 8002c9c:	4b01      	ldr	r3, [pc, #4]	; (8002ca4 <__errno+0x8>)
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000028 	.word	0x20000028

08002ca8 <__libc_init_array>:
 8002ca8:	b570      	push	{r4, r5, r6, lr}
 8002caa:	4d0d      	ldr	r5, [pc, #52]	; (8002ce0 <__libc_init_array+0x38>)
 8002cac:	4c0d      	ldr	r4, [pc, #52]	; (8002ce4 <__libc_init_array+0x3c>)
 8002cae:	1b64      	subs	r4, r4, r5
 8002cb0:	10a4      	asrs	r4, r4, #2
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	42a6      	cmp	r6, r4
 8002cb6:	d109      	bne.n	8002ccc <__libc_init_array+0x24>
 8002cb8:	4d0b      	ldr	r5, [pc, #44]	; (8002ce8 <__libc_init_array+0x40>)
 8002cba:	4c0c      	ldr	r4, [pc, #48]	; (8002cec <__libc_init_array+0x44>)
 8002cbc:	f001 f824 	bl	8003d08 <_init>
 8002cc0:	1b64      	subs	r4, r4, r5
 8002cc2:	10a4      	asrs	r4, r4, #2
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	42a6      	cmp	r6, r4
 8002cc8:	d105      	bne.n	8002cd6 <__libc_init_array+0x2e>
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd0:	4798      	blx	r3
 8002cd2:	3601      	adds	r6, #1
 8002cd4:	e7ee      	b.n	8002cb4 <__libc_init_array+0xc>
 8002cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cda:	4798      	blx	r3
 8002cdc:	3601      	adds	r6, #1
 8002cde:	e7f2      	b.n	8002cc6 <__libc_init_array+0x1e>
 8002ce0:	08003f1c 	.word	0x08003f1c
 8002ce4:	08003f1c 	.word	0x08003f1c
 8002ce8:	08003f1c 	.word	0x08003f1c
 8002cec:	08003f20 	.word	0x08003f20

08002cf0 <memset>:
 8002cf0:	4402      	add	r2, r0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <memset+0xa>
 8002cf8:	4770      	bx	lr
 8002cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfe:	e7f9      	b.n	8002cf4 <memset+0x4>

08002d00 <iprintf>:
 8002d00:	b40f      	push	{r0, r1, r2, r3}
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <iprintf+0x2c>)
 8002d04:	b513      	push	{r0, r1, r4, lr}
 8002d06:	681c      	ldr	r4, [r3, #0]
 8002d08:	b124      	cbz	r4, 8002d14 <iprintf+0x14>
 8002d0a:	69a3      	ldr	r3, [r4, #24]
 8002d0c:	b913      	cbnz	r3, 8002d14 <iprintf+0x14>
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f000 fa5e 	bl	80031d0 <__sinit>
 8002d14:	ab05      	add	r3, sp, #20
 8002d16:	9a04      	ldr	r2, [sp, #16]
 8002d18:	68a1      	ldr	r1, [r4, #8]
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f000 fc67 	bl	80035f0 <_vfiprintf_r>
 8002d22:	b002      	add	sp, #8
 8002d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d28:	b004      	add	sp, #16
 8002d2a:	4770      	bx	lr
 8002d2c:	20000028 	.word	0x20000028

08002d30 <_puts_r>:
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	460e      	mov	r6, r1
 8002d34:	4605      	mov	r5, r0
 8002d36:	b118      	cbz	r0, 8002d40 <_puts_r+0x10>
 8002d38:	6983      	ldr	r3, [r0, #24]
 8002d3a:	b90b      	cbnz	r3, 8002d40 <_puts_r+0x10>
 8002d3c:	f000 fa48 	bl	80031d0 <__sinit>
 8002d40:	69ab      	ldr	r3, [r5, #24]
 8002d42:	68ac      	ldr	r4, [r5, #8]
 8002d44:	b913      	cbnz	r3, 8002d4c <_puts_r+0x1c>
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 fa42 	bl	80031d0 <__sinit>
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <_puts_r+0xd0>)
 8002d4e:	429c      	cmp	r4, r3
 8002d50:	d120      	bne.n	8002d94 <_puts_r+0x64>
 8002d52:	686c      	ldr	r4, [r5, #4]
 8002d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d56:	07db      	lsls	r3, r3, #31
 8002d58:	d405      	bmi.n	8002d66 <_puts_r+0x36>
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	0598      	lsls	r0, r3, #22
 8002d5e:	d402      	bmi.n	8002d66 <_puts_r+0x36>
 8002d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d62:	f000 fad3 	bl	800330c <__retarget_lock_acquire_recursive>
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	0719      	lsls	r1, r3, #28
 8002d6a:	d51d      	bpl.n	8002da8 <_puts_r+0x78>
 8002d6c:	6923      	ldr	r3, [r4, #16]
 8002d6e:	b1db      	cbz	r3, 8002da8 <_puts_r+0x78>
 8002d70:	3e01      	subs	r6, #1
 8002d72:	68a3      	ldr	r3, [r4, #8]
 8002d74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	60a3      	str	r3, [r4, #8]
 8002d7c:	bb39      	cbnz	r1, 8002dce <_puts_r+0x9e>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da38      	bge.n	8002df4 <_puts_r+0xc4>
 8002d82:	4622      	mov	r2, r4
 8002d84:	210a      	movs	r1, #10
 8002d86:	4628      	mov	r0, r5
 8002d88:	f000 f848 	bl	8002e1c <__swbuf_r>
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	d011      	beq.n	8002db4 <_puts_r+0x84>
 8002d90:	250a      	movs	r5, #10
 8002d92:	e011      	b.n	8002db8 <_puts_r+0x88>
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <_puts_r+0xd4>)
 8002d96:	429c      	cmp	r4, r3
 8002d98:	d101      	bne.n	8002d9e <_puts_r+0x6e>
 8002d9a:	68ac      	ldr	r4, [r5, #8]
 8002d9c:	e7da      	b.n	8002d54 <_puts_r+0x24>
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <_puts_r+0xd8>)
 8002da0:	429c      	cmp	r4, r3
 8002da2:	bf08      	it	eq
 8002da4:	68ec      	ldreq	r4, [r5, #12]
 8002da6:	e7d5      	b.n	8002d54 <_puts_r+0x24>
 8002da8:	4621      	mov	r1, r4
 8002daa:	4628      	mov	r0, r5
 8002dac:	f000 f888 	bl	8002ec0 <__swsetup_r>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d0dd      	beq.n	8002d70 <_puts_r+0x40>
 8002db4:	f04f 35ff 	mov.w	r5, #4294967295
 8002db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dba:	07da      	lsls	r2, r3, #31
 8002dbc:	d405      	bmi.n	8002dca <_puts_r+0x9a>
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	059b      	lsls	r3, r3, #22
 8002dc2:	d402      	bmi.n	8002dca <_puts_r+0x9a>
 8002dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dc6:	f000 faa2 	bl	800330e <__retarget_lock_release_recursive>
 8002dca:	4628      	mov	r0, r5
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da04      	bge.n	8002ddc <_puts_r+0xac>
 8002dd2:	69a2      	ldr	r2, [r4, #24]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dc06      	bgt.n	8002de6 <_puts_r+0xb6>
 8002dd8:	290a      	cmp	r1, #10
 8002dda:	d004      	beq.n	8002de6 <_puts_r+0xb6>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	6022      	str	r2, [r4, #0]
 8002de2:	7019      	strb	r1, [r3, #0]
 8002de4:	e7c5      	b.n	8002d72 <_puts_r+0x42>
 8002de6:	4622      	mov	r2, r4
 8002de8:	4628      	mov	r0, r5
 8002dea:	f000 f817 	bl	8002e1c <__swbuf_r>
 8002dee:	3001      	adds	r0, #1
 8002df0:	d1bf      	bne.n	8002d72 <_puts_r+0x42>
 8002df2:	e7df      	b.n	8002db4 <_puts_r+0x84>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	250a      	movs	r5, #10
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	6022      	str	r2, [r4, #0]
 8002dfc:	701d      	strb	r5, [r3, #0]
 8002dfe:	e7db      	b.n	8002db8 <_puts_r+0x88>
 8002e00:	08003ea0 	.word	0x08003ea0
 8002e04:	08003ec0 	.word	0x08003ec0
 8002e08:	08003e80 	.word	0x08003e80

08002e0c <puts>:
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <puts+0xc>)
 8002e0e:	4601      	mov	r1, r0
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f7ff bf8d 	b.w	8002d30 <_puts_r>
 8002e16:	bf00      	nop
 8002e18:	20000028 	.word	0x20000028

08002e1c <__swbuf_r>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	460e      	mov	r6, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	4605      	mov	r5, r0
 8002e24:	b118      	cbz	r0, 8002e2e <__swbuf_r+0x12>
 8002e26:	6983      	ldr	r3, [r0, #24]
 8002e28:	b90b      	cbnz	r3, 8002e2e <__swbuf_r+0x12>
 8002e2a:	f000 f9d1 	bl	80031d0 <__sinit>
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <__swbuf_r+0x98>)
 8002e30:	429c      	cmp	r4, r3
 8002e32:	d12b      	bne.n	8002e8c <__swbuf_r+0x70>
 8002e34:	686c      	ldr	r4, [r5, #4]
 8002e36:	69a3      	ldr	r3, [r4, #24]
 8002e38:	60a3      	str	r3, [r4, #8]
 8002e3a:	89a3      	ldrh	r3, [r4, #12]
 8002e3c:	071a      	lsls	r2, r3, #28
 8002e3e:	d52f      	bpl.n	8002ea0 <__swbuf_r+0x84>
 8002e40:	6923      	ldr	r3, [r4, #16]
 8002e42:	b36b      	cbz	r3, 8002ea0 <__swbuf_r+0x84>
 8002e44:	6923      	ldr	r3, [r4, #16]
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	1ac0      	subs	r0, r0, r3
 8002e4a:	6963      	ldr	r3, [r4, #20]
 8002e4c:	b2f6      	uxtb	r6, r6
 8002e4e:	4283      	cmp	r3, r0
 8002e50:	4637      	mov	r7, r6
 8002e52:	dc04      	bgt.n	8002e5e <__swbuf_r+0x42>
 8002e54:	4621      	mov	r1, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 f926 	bl	80030a8 <_fflush_r>
 8002e5c:	bb30      	cbnz	r0, 8002eac <__swbuf_r+0x90>
 8002e5e:	68a3      	ldr	r3, [r4, #8]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	60a3      	str	r3, [r4, #8]
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	6022      	str	r2, [r4, #0]
 8002e6a:	701e      	strb	r6, [r3, #0]
 8002e6c:	6963      	ldr	r3, [r4, #20]
 8002e6e:	3001      	adds	r0, #1
 8002e70:	4283      	cmp	r3, r0
 8002e72:	d004      	beq.n	8002e7e <__swbuf_r+0x62>
 8002e74:	89a3      	ldrh	r3, [r4, #12]
 8002e76:	07db      	lsls	r3, r3, #31
 8002e78:	d506      	bpl.n	8002e88 <__swbuf_r+0x6c>
 8002e7a:	2e0a      	cmp	r6, #10
 8002e7c:	d104      	bne.n	8002e88 <__swbuf_r+0x6c>
 8002e7e:	4621      	mov	r1, r4
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 f911 	bl	80030a8 <_fflush_r>
 8002e86:	b988      	cbnz	r0, 8002eac <__swbuf_r+0x90>
 8002e88:	4638      	mov	r0, r7
 8002e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <__swbuf_r+0x9c>)
 8002e8e:	429c      	cmp	r4, r3
 8002e90:	d101      	bne.n	8002e96 <__swbuf_r+0x7a>
 8002e92:	68ac      	ldr	r4, [r5, #8]
 8002e94:	e7cf      	b.n	8002e36 <__swbuf_r+0x1a>
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <__swbuf_r+0xa0>)
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	bf08      	it	eq
 8002e9c:	68ec      	ldreq	r4, [r5, #12]
 8002e9e:	e7ca      	b.n	8002e36 <__swbuf_r+0x1a>
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f000 f80c 	bl	8002ec0 <__swsetup_r>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d0cb      	beq.n	8002e44 <__swbuf_r+0x28>
 8002eac:	f04f 37ff 	mov.w	r7, #4294967295
 8002eb0:	e7ea      	b.n	8002e88 <__swbuf_r+0x6c>
 8002eb2:	bf00      	nop
 8002eb4:	08003ea0 	.word	0x08003ea0
 8002eb8:	08003ec0 	.word	0x08003ec0
 8002ebc:	08003e80 	.word	0x08003e80

08002ec0 <__swsetup_r>:
 8002ec0:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <__swsetup_r+0xcc>)
 8002ec2:	b570      	push	{r4, r5, r6, lr}
 8002ec4:	681d      	ldr	r5, [r3, #0]
 8002ec6:	4606      	mov	r6, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	b125      	cbz	r5, 8002ed6 <__swsetup_r+0x16>
 8002ecc:	69ab      	ldr	r3, [r5, #24]
 8002ece:	b913      	cbnz	r3, 8002ed6 <__swsetup_r+0x16>
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f000 f97d 	bl	80031d0 <__sinit>
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <__swsetup_r+0xd0>)
 8002ed8:	429c      	cmp	r4, r3
 8002eda:	d10f      	bne.n	8002efc <__swsetup_r+0x3c>
 8002edc:	686c      	ldr	r4, [r5, #4]
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ee4:	0719      	lsls	r1, r3, #28
 8002ee6:	d42c      	bmi.n	8002f42 <__swsetup_r+0x82>
 8002ee8:	06dd      	lsls	r5, r3, #27
 8002eea:	d411      	bmi.n	8002f10 <__swsetup_r+0x50>
 8002eec:	2309      	movs	r3, #9
 8002eee:	6033      	str	r3, [r6, #0]
 8002ef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8002efa:	e03e      	b.n	8002f7a <__swsetup_r+0xba>
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <__swsetup_r+0xd4>)
 8002efe:	429c      	cmp	r4, r3
 8002f00:	d101      	bne.n	8002f06 <__swsetup_r+0x46>
 8002f02:	68ac      	ldr	r4, [r5, #8]
 8002f04:	e7eb      	b.n	8002ede <__swsetup_r+0x1e>
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <__swsetup_r+0xd8>)
 8002f08:	429c      	cmp	r4, r3
 8002f0a:	bf08      	it	eq
 8002f0c:	68ec      	ldreq	r4, [r5, #12]
 8002f0e:	e7e6      	b.n	8002ede <__swsetup_r+0x1e>
 8002f10:	0758      	lsls	r0, r3, #29
 8002f12:	d512      	bpl.n	8002f3a <__swsetup_r+0x7a>
 8002f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f16:	b141      	cbz	r1, 8002f2a <__swsetup_r+0x6a>
 8002f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	d002      	beq.n	8002f26 <__swsetup_r+0x66>
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 fa5b 	bl	80033dc <_free_r>
 8002f26:	2300      	movs	r3, #0
 8002f28:	6363      	str	r3, [r4, #52]	; 0x34
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f30:	81a3      	strh	r3, [r4, #12]
 8002f32:	2300      	movs	r3, #0
 8002f34:	6063      	str	r3, [r4, #4]
 8002f36:	6923      	ldr	r3, [r4, #16]
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	81a3      	strh	r3, [r4, #12]
 8002f42:	6923      	ldr	r3, [r4, #16]
 8002f44:	b94b      	cbnz	r3, 8002f5a <__swsetup_r+0x9a>
 8002f46:	89a3      	ldrh	r3, [r4, #12]
 8002f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f50:	d003      	beq.n	8002f5a <__swsetup_r+0x9a>
 8002f52:	4621      	mov	r1, r4
 8002f54:	4630      	mov	r0, r6
 8002f56:	f000 fa01 	bl	800335c <__smakebuf_r>
 8002f5a:	89a0      	ldrh	r0, [r4, #12]
 8002f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f60:	f010 0301 	ands.w	r3, r0, #1
 8002f64:	d00a      	beq.n	8002f7c <__swsetup_r+0xbc>
 8002f66:	2300      	movs	r3, #0
 8002f68:	60a3      	str	r3, [r4, #8]
 8002f6a:	6963      	ldr	r3, [r4, #20]
 8002f6c:	425b      	negs	r3, r3
 8002f6e:	61a3      	str	r3, [r4, #24]
 8002f70:	6923      	ldr	r3, [r4, #16]
 8002f72:	b943      	cbnz	r3, 8002f86 <__swsetup_r+0xc6>
 8002f74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f78:	d1ba      	bne.n	8002ef0 <__swsetup_r+0x30>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	0781      	lsls	r1, r0, #30
 8002f7e:	bf58      	it	pl
 8002f80:	6963      	ldrpl	r3, [r4, #20]
 8002f82:	60a3      	str	r3, [r4, #8]
 8002f84:	e7f4      	b.n	8002f70 <__swsetup_r+0xb0>
 8002f86:	2000      	movs	r0, #0
 8002f88:	e7f7      	b.n	8002f7a <__swsetup_r+0xba>
 8002f8a:	bf00      	nop
 8002f8c:	20000028 	.word	0x20000028
 8002f90:	08003ea0 	.word	0x08003ea0
 8002f94:	08003ec0 	.word	0x08003ec0
 8002f98:	08003e80 	.word	0x08003e80

08002f9c <__sflush_r>:
 8002f9c:	898a      	ldrh	r2, [r1, #12]
 8002f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa2:	4605      	mov	r5, r0
 8002fa4:	0710      	lsls	r0, r2, #28
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	d458      	bmi.n	800305c <__sflush_r+0xc0>
 8002faa:	684b      	ldr	r3, [r1, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	dc05      	bgt.n	8002fbc <__sflush_r+0x20>
 8002fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	dc02      	bgt.n	8002fbc <__sflush_r+0x20>
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fbe:	2e00      	cmp	r6, #0
 8002fc0:	d0f9      	beq.n	8002fb6 <__sflush_r+0x1a>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fc8:	682f      	ldr	r7, [r5, #0]
 8002fca:	602b      	str	r3, [r5, #0]
 8002fcc:	d032      	beq.n	8003034 <__sflush_r+0x98>
 8002fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	075a      	lsls	r2, r3, #29
 8002fd4:	d505      	bpl.n	8002fe2 <__sflush_r+0x46>
 8002fd6:	6863      	ldr	r3, [r4, #4]
 8002fd8:	1ac0      	subs	r0, r0, r3
 8002fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fdc:	b10b      	cbz	r3, 8002fe2 <__sflush_r+0x46>
 8002fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fe0:	1ac0      	subs	r0, r0, r3
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fe8:	6a21      	ldr	r1, [r4, #32]
 8002fea:	4628      	mov	r0, r5
 8002fec:	47b0      	blx	r6
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	d106      	bne.n	8003002 <__sflush_r+0x66>
 8002ff4:	6829      	ldr	r1, [r5, #0]
 8002ff6:	291d      	cmp	r1, #29
 8002ff8:	d82c      	bhi.n	8003054 <__sflush_r+0xb8>
 8002ffa:	4a2a      	ldr	r2, [pc, #168]	; (80030a4 <__sflush_r+0x108>)
 8002ffc:	40ca      	lsrs	r2, r1
 8002ffe:	07d6      	lsls	r6, r2, #31
 8003000:	d528      	bpl.n	8003054 <__sflush_r+0xb8>
 8003002:	2200      	movs	r2, #0
 8003004:	6062      	str	r2, [r4, #4]
 8003006:	04d9      	lsls	r1, r3, #19
 8003008:	6922      	ldr	r2, [r4, #16]
 800300a:	6022      	str	r2, [r4, #0]
 800300c:	d504      	bpl.n	8003018 <__sflush_r+0x7c>
 800300e:	1c42      	adds	r2, r0, #1
 8003010:	d101      	bne.n	8003016 <__sflush_r+0x7a>
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	b903      	cbnz	r3, 8003018 <__sflush_r+0x7c>
 8003016:	6560      	str	r0, [r4, #84]	; 0x54
 8003018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800301a:	602f      	str	r7, [r5, #0]
 800301c:	2900      	cmp	r1, #0
 800301e:	d0ca      	beq.n	8002fb6 <__sflush_r+0x1a>
 8003020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003024:	4299      	cmp	r1, r3
 8003026:	d002      	beq.n	800302e <__sflush_r+0x92>
 8003028:	4628      	mov	r0, r5
 800302a:	f000 f9d7 	bl	80033dc <_free_r>
 800302e:	2000      	movs	r0, #0
 8003030:	6360      	str	r0, [r4, #52]	; 0x34
 8003032:	e7c1      	b.n	8002fb8 <__sflush_r+0x1c>
 8003034:	6a21      	ldr	r1, [r4, #32]
 8003036:	2301      	movs	r3, #1
 8003038:	4628      	mov	r0, r5
 800303a:	47b0      	blx	r6
 800303c:	1c41      	adds	r1, r0, #1
 800303e:	d1c7      	bne.n	8002fd0 <__sflush_r+0x34>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0c4      	beq.n	8002fd0 <__sflush_r+0x34>
 8003046:	2b1d      	cmp	r3, #29
 8003048:	d001      	beq.n	800304e <__sflush_r+0xb2>
 800304a:	2b16      	cmp	r3, #22
 800304c:	d101      	bne.n	8003052 <__sflush_r+0xb6>
 800304e:	602f      	str	r7, [r5, #0]
 8003050:	e7b1      	b.n	8002fb6 <__sflush_r+0x1a>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	e7ad      	b.n	8002fb8 <__sflush_r+0x1c>
 800305c:	690f      	ldr	r7, [r1, #16]
 800305e:	2f00      	cmp	r7, #0
 8003060:	d0a9      	beq.n	8002fb6 <__sflush_r+0x1a>
 8003062:	0793      	lsls	r3, r2, #30
 8003064:	680e      	ldr	r6, [r1, #0]
 8003066:	bf08      	it	eq
 8003068:	694b      	ldreq	r3, [r1, #20]
 800306a:	600f      	str	r7, [r1, #0]
 800306c:	bf18      	it	ne
 800306e:	2300      	movne	r3, #0
 8003070:	eba6 0807 	sub.w	r8, r6, r7
 8003074:	608b      	str	r3, [r1, #8]
 8003076:	f1b8 0f00 	cmp.w	r8, #0
 800307a:	dd9c      	ble.n	8002fb6 <__sflush_r+0x1a>
 800307c:	6a21      	ldr	r1, [r4, #32]
 800307e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003080:	4643      	mov	r3, r8
 8003082:	463a      	mov	r2, r7
 8003084:	4628      	mov	r0, r5
 8003086:	47b0      	blx	r6
 8003088:	2800      	cmp	r0, #0
 800308a:	dc06      	bgt.n	800309a <__sflush_r+0xfe>
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	e78e      	b.n	8002fb8 <__sflush_r+0x1c>
 800309a:	4407      	add	r7, r0
 800309c:	eba8 0800 	sub.w	r8, r8, r0
 80030a0:	e7e9      	b.n	8003076 <__sflush_r+0xda>
 80030a2:	bf00      	nop
 80030a4:	20400001 	.word	0x20400001

080030a8 <_fflush_r>:
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	690b      	ldr	r3, [r1, #16]
 80030ac:	4605      	mov	r5, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	b913      	cbnz	r3, 80030b8 <_fflush_r+0x10>
 80030b2:	2500      	movs	r5, #0
 80030b4:	4628      	mov	r0, r5
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	b118      	cbz	r0, 80030c2 <_fflush_r+0x1a>
 80030ba:	6983      	ldr	r3, [r0, #24]
 80030bc:	b90b      	cbnz	r3, 80030c2 <_fflush_r+0x1a>
 80030be:	f000 f887 	bl	80031d0 <__sinit>
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <_fflush_r+0x6c>)
 80030c4:	429c      	cmp	r4, r3
 80030c6:	d11b      	bne.n	8003100 <_fflush_r+0x58>
 80030c8:	686c      	ldr	r4, [r5, #4]
 80030ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ef      	beq.n	80030b2 <_fflush_r+0xa>
 80030d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030d4:	07d0      	lsls	r0, r2, #31
 80030d6:	d404      	bmi.n	80030e2 <_fflush_r+0x3a>
 80030d8:	0599      	lsls	r1, r3, #22
 80030da:	d402      	bmi.n	80030e2 <_fflush_r+0x3a>
 80030dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030de:	f000 f915 	bl	800330c <__retarget_lock_acquire_recursive>
 80030e2:	4628      	mov	r0, r5
 80030e4:	4621      	mov	r1, r4
 80030e6:	f7ff ff59 	bl	8002f9c <__sflush_r>
 80030ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ec:	07da      	lsls	r2, r3, #31
 80030ee:	4605      	mov	r5, r0
 80030f0:	d4e0      	bmi.n	80030b4 <_fflush_r+0xc>
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	059b      	lsls	r3, r3, #22
 80030f6:	d4dd      	bmi.n	80030b4 <_fflush_r+0xc>
 80030f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030fa:	f000 f908 	bl	800330e <__retarget_lock_release_recursive>
 80030fe:	e7d9      	b.n	80030b4 <_fflush_r+0xc>
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <_fflush_r+0x70>)
 8003102:	429c      	cmp	r4, r3
 8003104:	d101      	bne.n	800310a <_fflush_r+0x62>
 8003106:	68ac      	ldr	r4, [r5, #8]
 8003108:	e7df      	b.n	80030ca <_fflush_r+0x22>
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <_fflush_r+0x74>)
 800310c:	429c      	cmp	r4, r3
 800310e:	bf08      	it	eq
 8003110:	68ec      	ldreq	r4, [r5, #12]
 8003112:	e7da      	b.n	80030ca <_fflush_r+0x22>
 8003114:	08003ea0 	.word	0x08003ea0
 8003118:	08003ec0 	.word	0x08003ec0
 800311c:	08003e80 	.word	0x08003e80

08003120 <std>:
 8003120:	2300      	movs	r3, #0
 8003122:	b510      	push	{r4, lr}
 8003124:	4604      	mov	r4, r0
 8003126:	e9c0 3300 	strd	r3, r3, [r0]
 800312a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800312e:	6083      	str	r3, [r0, #8]
 8003130:	8181      	strh	r1, [r0, #12]
 8003132:	6643      	str	r3, [r0, #100]	; 0x64
 8003134:	81c2      	strh	r2, [r0, #14]
 8003136:	6183      	str	r3, [r0, #24]
 8003138:	4619      	mov	r1, r3
 800313a:	2208      	movs	r2, #8
 800313c:	305c      	adds	r0, #92	; 0x5c
 800313e:	f7ff fdd7 	bl	8002cf0 <memset>
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <std+0x38>)
 8003144:	6263      	str	r3, [r4, #36]	; 0x24
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <std+0x3c>)
 8003148:	62a3      	str	r3, [r4, #40]	; 0x28
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <std+0x40>)
 800314c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <std+0x44>)
 8003150:	6224      	str	r4, [r4, #32]
 8003152:	6323      	str	r3, [r4, #48]	; 0x30
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	08003b99 	.word	0x08003b99
 800315c:	08003bbb 	.word	0x08003bbb
 8003160:	08003bf3 	.word	0x08003bf3
 8003164:	08003c17 	.word	0x08003c17

08003168 <_cleanup_r>:
 8003168:	4901      	ldr	r1, [pc, #4]	; (8003170 <_cleanup_r+0x8>)
 800316a:	f000 b8af 	b.w	80032cc <_fwalk_reent>
 800316e:	bf00      	nop
 8003170:	080030a9 	.word	0x080030a9

08003174 <__sfmoreglue>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	2268      	movs	r2, #104	; 0x68
 8003178:	1e4d      	subs	r5, r1, #1
 800317a:	4355      	muls	r5, r2
 800317c:	460e      	mov	r6, r1
 800317e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003182:	f000 f997 	bl	80034b4 <_malloc_r>
 8003186:	4604      	mov	r4, r0
 8003188:	b140      	cbz	r0, 800319c <__sfmoreglue+0x28>
 800318a:	2100      	movs	r1, #0
 800318c:	e9c0 1600 	strd	r1, r6, [r0]
 8003190:	300c      	adds	r0, #12
 8003192:	60a0      	str	r0, [r4, #8]
 8003194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003198:	f7ff fdaa 	bl	8002cf0 <memset>
 800319c:	4620      	mov	r0, r4
 800319e:	bd70      	pop	{r4, r5, r6, pc}

080031a0 <__sfp_lock_acquire>:
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <__sfp_lock_acquire+0x8>)
 80031a2:	f000 b8b3 	b.w	800330c <__retarget_lock_acquire_recursive>
 80031a6:	bf00      	nop
 80031a8:	20000151 	.word	0x20000151

080031ac <__sfp_lock_release>:
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <__sfp_lock_release+0x8>)
 80031ae:	f000 b8ae 	b.w	800330e <__retarget_lock_release_recursive>
 80031b2:	bf00      	nop
 80031b4:	20000151 	.word	0x20000151

080031b8 <__sinit_lock_acquire>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__sinit_lock_acquire+0x8>)
 80031ba:	f000 b8a7 	b.w	800330c <__retarget_lock_acquire_recursive>
 80031be:	bf00      	nop
 80031c0:	20000152 	.word	0x20000152

080031c4 <__sinit_lock_release>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__sinit_lock_release+0x8>)
 80031c6:	f000 b8a2 	b.w	800330e <__retarget_lock_release_recursive>
 80031ca:	bf00      	nop
 80031cc:	20000152 	.word	0x20000152

080031d0 <__sinit>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	4604      	mov	r4, r0
 80031d4:	f7ff fff0 	bl	80031b8 <__sinit_lock_acquire>
 80031d8:	69a3      	ldr	r3, [r4, #24]
 80031da:	b11b      	cbz	r3, 80031e4 <__sinit+0x14>
 80031dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e0:	f7ff bff0 	b.w	80031c4 <__sinit_lock_release>
 80031e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031e8:	6523      	str	r3, [r4, #80]	; 0x50
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <__sinit+0x68>)
 80031ec:	4a13      	ldr	r2, [pc, #76]	; (800323c <__sinit+0x6c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80031f2:	42a3      	cmp	r3, r4
 80031f4:	bf04      	itt	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	61a3      	streq	r3, [r4, #24]
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 f820 	bl	8003240 <__sfp>
 8003200:	6060      	str	r0, [r4, #4]
 8003202:	4620      	mov	r0, r4
 8003204:	f000 f81c 	bl	8003240 <__sfp>
 8003208:	60a0      	str	r0, [r4, #8]
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f818 	bl	8003240 <__sfp>
 8003210:	2200      	movs	r2, #0
 8003212:	60e0      	str	r0, [r4, #12]
 8003214:	2104      	movs	r1, #4
 8003216:	6860      	ldr	r0, [r4, #4]
 8003218:	f7ff ff82 	bl	8003120 <std>
 800321c:	68a0      	ldr	r0, [r4, #8]
 800321e:	2201      	movs	r2, #1
 8003220:	2109      	movs	r1, #9
 8003222:	f7ff ff7d 	bl	8003120 <std>
 8003226:	68e0      	ldr	r0, [r4, #12]
 8003228:	2202      	movs	r2, #2
 800322a:	2112      	movs	r1, #18
 800322c:	f7ff ff78 	bl	8003120 <std>
 8003230:	2301      	movs	r3, #1
 8003232:	61a3      	str	r3, [r4, #24]
 8003234:	e7d2      	b.n	80031dc <__sinit+0xc>
 8003236:	bf00      	nop
 8003238:	08003e7c 	.word	0x08003e7c
 800323c:	08003169 	.word	0x08003169

08003240 <__sfp>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	4607      	mov	r7, r0
 8003244:	f7ff ffac 	bl	80031a0 <__sfp_lock_acquire>
 8003248:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <__sfp+0x84>)
 800324a:	681e      	ldr	r6, [r3, #0]
 800324c:	69b3      	ldr	r3, [r6, #24]
 800324e:	b913      	cbnz	r3, 8003256 <__sfp+0x16>
 8003250:	4630      	mov	r0, r6
 8003252:	f7ff ffbd 	bl	80031d0 <__sinit>
 8003256:	3648      	adds	r6, #72	; 0x48
 8003258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800325c:	3b01      	subs	r3, #1
 800325e:	d503      	bpl.n	8003268 <__sfp+0x28>
 8003260:	6833      	ldr	r3, [r6, #0]
 8003262:	b30b      	cbz	r3, 80032a8 <__sfp+0x68>
 8003264:	6836      	ldr	r6, [r6, #0]
 8003266:	e7f7      	b.n	8003258 <__sfp+0x18>
 8003268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800326c:	b9d5      	cbnz	r5, 80032a4 <__sfp+0x64>
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <__sfp+0x88>)
 8003270:	60e3      	str	r3, [r4, #12]
 8003272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003276:	6665      	str	r5, [r4, #100]	; 0x64
 8003278:	f000 f847 	bl	800330a <__retarget_lock_init_recursive>
 800327c:	f7ff ff96 	bl	80031ac <__sfp_lock_release>
 8003280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003288:	6025      	str	r5, [r4, #0]
 800328a:	61a5      	str	r5, [r4, #24]
 800328c:	2208      	movs	r2, #8
 800328e:	4629      	mov	r1, r5
 8003290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003294:	f7ff fd2c 	bl	8002cf0 <memset>
 8003298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800329c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032a0:	4620      	mov	r0, r4
 80032a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a4:	3468      	adds	r4, #104	; 0x68
 80032a6:	e7d9      	b.n	800325c <__sfp+0x1c>
 80032a8:	2104      	movs	r1, #4
 80032aa:	4638      	mov	r0, r7
 80032ac:	f7ff ff62 	bl	8003174 <__sfmoreglue>
 80032b0:	4604      	mov	r4, r0
 80032b2:	6030      	str	r0, [r6, #0]
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d1d5      	bne.n	8003264 <__sfp+0x24>
 80032b8:	f7ff ff78 	bl	80031ac <__sfp_lock_release>
 80032bc:	230c      	movs	r3, #12
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	e7ee      	b.n	80032a0 <__sfp+0x60>
 80032c2:	bf00      	nop
 80032c4:	08003e7c 	.word	0x08003e7c
 80032c8:	ffff0001 	.word	0xffff0001

080032cc <_fwalk_reent>:
 80032cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d0:	4606      	mov	r6, r0
 80032d2:	4688      	mov	r8, r1
 80032d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032d8:	2700      	movs	r7, #0
 80032da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032de:	f1b9 0901 	subs.w	r9, r9, #1
 80032e2:	d505      	bpl.n	80032f0 <_fwalk_reent+0x24>
 80032e4:	6824      	ldr	r4, [r4, #0]
 80032e6:	2c00      	cmp	r4, #0
 80032e8:	d1f7      	bne.n	80032da <_fwalk_reent+0xe>
 80032ea:	4638      	mov	r0, r7
 80032ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f0:	89ab      	ldrh	r3, [r5, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d907      	bls.n	8003306 <_fwalk_reent+0x3a>
 80032f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032fa:	3301      	adds	r3, #1
 80032fc:	d003      	beq.n	8003306 <_fwalk_reent+0x3a>
 80032fe:	4629      	mov	r1, r5
 8003300:	4630      	mov	r0, r6
 8003302:	47c0      	blx	r8
 8003304:	4307      	orrs	r7, r0
 8003306:	3568      	adds	r5, #104	; 0x68
 8003308:	e7e9      	b.n	80032de <_fwalk_reent+0x12>

0800330a <__retarget_lock_init_recursive>:
 800330a:	4770      	bx	lr

0800330c <__retarget_lock_acquire_recursive>:
 800330c:	4770      	bx	lr

0800330e <__retarget_lock_release_recursive>:
 800330e:	4770      	bx	lr

08003310 <__swhatbuf_r>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	460e      	mov	r6, r1
 8003314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003318:	2900      	cmp	r1, #0
 800331a:	b096      	sub	sp, #88	; 0x58
 800331c:	4614      	mov	r4, r2
 800331e:	461d      	mov	r5, r3
 8003320:	da08      	bge.n	8003334 <__swhatbuf_r+0x24>
 8003322:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	602a      	str	r2, [r5, #0]
 800332a:	061a      	lsls	r2, r3, #24
 800332c:	d410      	bmi.n	8003350 <__swhatbuf_r+0x40>
 800332e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003332:	e00e      	b.n	8003352 <__swhatbuf_r+0x42>
 8003334:	466a      	mov	r2, sp
 8003336:	f000 fc95 	bl	8003c64 <_fstat_r>
 800333a:	2800      	cmp	r0, #0
 800333c:	dbf1      	blt.n	8003322 <__swhatbuf_r+0x12>
 800333e:	9a01      	ldr	r2, [sp, #4]
 8003340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003348:	425a      	negs	r2, r3
 800334a:	415a      	adcs	r2, r3
 800334c:	602a      	str	r2, [r5, #0]
 800334e:	e7ee      	b.n	800332e <__swhatbuf_r+0x1e>
 8003350:	2340      	movs	r3, #64	; 0x40
 8003352:	2000      	movs	r0, #0
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	b016      	add	sp, #88	; 0x58
 8003358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800335c <__smakebuf_r>:
 800335c:	898b      	ldrh	r3, [r1, #12]
 800335e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003360:	079d      	lsls	r5, r3, #30
 8003362:	4606      	mov	r6, r0
 8003364:	460c      	mov	r4, r1
 8003366:	d507      	bpl.n	8003378 <__smakebuf_r+0x1c>
 8003368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	6123      	str	r3, [r4, #16]
 8003370:	2301      	movs	r3, #1
 8003372:	6163      	str	r3, [r4, #20]
 8003374:	b002      	add	sp, #8
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	ab01      	add	r3, sp, #4
 800337a:	466a      	mov	r2, sp
 800337c:	f7ff ffc8 	bl	8003310 <__swhatbuf_r>
 8003380:	9900      	ldr	r1, [sp, #0]
 8003382:	4605      	mov	r5, r0
 8003384:	4630      	mov	r0, r6
 8003386:	f000 f895 	bl	80034b4 <_malloc_r>
 800338a:	b948      	cbnz	r0, 80033a0 <__smakebuf_r+0x44>
 800338c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003390:	059a      	lsls	r2, r3, #22
 8003392:	d4ef      	bmi.n	8003374 <__smakebuf_r+0x18>
 8003394:	f023 0303 	bic.w	r3, r3, #3
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	e7e3      	b.n	8003368 <__smakebuf_r+0xc>
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <__smakebuf_r+0x7c>)
 80033a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80033a4:	89a3      	ldrh	r3, [r4, #12]
 80033a6:	6020      	str	r0, [r4, #0]
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	81a3      	strh	r3, [r4, #12]
 80033ae:	9b00      	ldr	r3, [sp, #0]
 80033b0:	6163      	str	r3, [r4, #20]
 80033b2:	9b01      	ldr	r3, [sp, #4]
 80033b4:	6120      	str	r0, [r4, #16]
 80033b6:	b15b      	cbz	r3, 80033d0 <__smakebuf_r+0x74>
 80033b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033bc:	4630      	mov	r0, r6
 80033be:	f000 fc63 	bl	8003c88 <_isatty_r>
 80033c2:	b128      	cbz	r0, 80033d0 <__smakebuf_r+0x74>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	89a0      	ldrh	r0, [r4, #12]
 80033d2:	4305      	orrs	r5, r0
 80033d4:	81a5      	strh	r5, [r4, #12]
 80033d6:	e7cd      	b.n	8003374 <__smakebuf_r+0x18>
 80033d8:	08003169 	.word	0x08003169

080033dc <_free_r>:
 80033dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d044      	beq.n	800346c <_free_r+0x90>
 80033e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e6:	9001      	str	r0, [sp, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f1a1 0404 	sub.w	r4, r1, #4
 80033ee:	bfb8      	it	lt
 80033f0:	18e4      	addlt	r4, r4, r3
 80033f2:	f000 fc6b 	bl	8003ccc <__malloc_lock>
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <_free_r+0x94>)
 80033f8:	9801      	ldr	r0, [sp, #4]
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	b933      	cbnz	r3, 800340c <_free_r+0x30>
 80033fe:	6063      	str	r3, [r4, #4]
 8003400:	6014      	str	r4, [r2, #0]
 8003402:	b003      	add	sp, #12
 8003404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003408:	f000 bc66 	b.w	8003cd8 <__malloc_unlock>
 800340c:	42a3      	cmp	r3, r4
 800340e:	d908      	bls.n	8003422 <_free_r+0x46>
 8003410:	6825      	ldr	r5, [r4, #0]
 8003412:	1961      	adds	r1, r4, r5
 8003414:	428b      	cmp	r3, r1
 8003416:	bf01      	itttt	eq
 8003418:	6819      	ldreq	r1, [r3, #0]
 800341a:	685b      	ldreq	r3, [r3, #4]
 800341c:	1949      	addeq	r1, r1, r5
 800341e:	6021      	streq	r1, [r4, #0]
 8003420:	e7ed      	b.n	80033fe <_free_r+0x22>
 8003422:	461a      	mov	r2, r3
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b10b      	cbz	r3, 800342c <_free_r+0x50>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d9fa      	bls.n	8003422 <_free_r+0x46>
 800342c:	6811      	ldr	r1, [r2, #0]
 800342e:	1855      	adds	r5, r2, r1
 8003430:	42a5      	cmp	r5, r4
 8003432:	d10b      	bne.n	800344c <_free_r+0x70>
 8003434:	6824      	ldr	r4, [r4, #0]
 8003436:	4421      	add	r1, r4
 8003438:	1854      	adds	r4, r2, r1
 800343a:	42a3      	cmp	r3, r4
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	d1e0      	bne.n	8003402 <_free_r+0x26>
 8003440:	681c      	ldr	r4, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	6053      	str	r3, [r2, #4]
 8003446:	4421      	add	r1, r4
 8003448:	6011      	str	r1, [r2, #0]
 800344a:	e7da      	b.n	8003402 <_free_r+0x26>
 800344c:	d902      	bls.n	8003454 <_free_r+0x78>
 800344e:	230c      	movs	r3, #12
 8003450:	6003      	str	r3, [r0, #0]
 8003452:	e7d6      	b.n	8003402 <_free_r+0x26>
 8003454:	6825      	ldr	r5, [r4, #0]
 8003456:	1961      	adds	r1, r4, r5
 8003458:	428b      	cmp	r3, r1
 800345a:	bf04      	itt	eq
 800345c:	6819      	ldreq	r1, [r3, #0]
 800345e:	685b      	ldreq	r3, [r3, #4]
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	bf04      	itt	eq
 8003464:	1949      	addeq	r1, r1, r5
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	6054      	str	r4, [r2, #4]
 800346a:	e7ca      	b.n	8003402 <_free_r+0x26>
 800346c:	b003      	add	sp, #12
 800346e:	bd30      	pop	{r4, r5, pc}
 8003470:	20000154 	.word	0x20000154

08003474 <sbrk_aligned>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	4e0e      	ldr	r6, [pc, #56]	; (80034b0 <sbrk_aligned+0x3c>)
 8003478:	460c      	mov	r4, r1
 800347a:	6831      	ldr	r1, [r6, #0]
 800347c:	4605      	mov	r5, r0
 800347e:	b911      	cbnz	r1, 8003486 <sbrk_aligned+0x12>
 8003480:	f000 fb7a 	bl	8003b78 <_sbrk_r>
 8003484:	6030      	str	r0, [r6, #0]
 8003486:	4621      	mov	r1, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 fb75 	bl	8003b78 <_sbrk_r>
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	d00a      	beq.n	80034a8 <sbrk_aligned+0x34>
 8003492:	1cc4      	adds	r4, r0, #3
 8003494:	f024 0403 	bic.w	r4, r4, #3
 8003498:	42a0      	cmp	r0, r4
 800349a:	d007      	beq.n	80034ac <sbrk_aligned+0x38>
 800349c:	1a21      	subs	r1, r4, r0
 800349e:	4628      	mov	r0, r5
 80034a0:	f000 fb6a 	bl	8003b78 <_sbrk_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d101      	bne.n	80034ac <sbrk_aligned+0x38>
 80034a8:	f04f 34ff 	mov.w	r4, #4294967295
 80034ac:	4620      	mov	r0, r4
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	20000158 	.word	0x20000158

080034b4 <_malloc_r>:
 80034b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b8:	1ccd      	adds	r5, r1, #3
 80034ba:	f025 0503 	bic.w	r5, r5, #3
 80034be:	3508      	adds	r5, #8
 80034c0:	2d0c      	cmp	r5, #12
 80034c2:	bf38      	it	cc
 80034c4:	250c      	movcc	r5, #12
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	4607      	mov	r7, r0
 80034ca:	db01      	blt.n	80034d0 <_malloc_r+0x1c>
 80034cc:	42a9      	cmp	r1, r5
 80034ce:	d905      	bls.n	80034dc <_malloc_r+0x28>
 80034d0:	230c      	movs	r3, #12
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	2600      	movs	r6, #0
 80034d6:	4630      	mov	r0, r6
 80034d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034dc:	4e2e      	ldr	r6, [pc, #184]	; (8003598 <_malloc_r+0xe4>)
 80034de:	f000 fbf5 	bl	8003ccc <__malloc_lock>
 80034e2:	6833      	ldr	r3, [r6, #0]
 80034e4:	461c      	mov	r4, r3
 80034e6:	bb34      	cbnz	r4, 8003536 <_malloc_r+0x82>
 80034e8:	4629      	mov	r1, r5
 80034ea:	4638      	mov	r0, r7
 80034ec:	f7ff ffc2 	bl	8003474 <sbrk_aligned>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	4604      	mov	r4, r0
 80034f4:	d14d      	bne.n	8003592 <_malloc_r+0xde>
 80034f6:	6834      	ldr	r4, [r6, #0]
 80034f8:	4626      	mov	r6, r4
 80034fa:	2e00      	cmp	r6, #0
 80034fc:	d140      	bne.n	8003580 <_malloc_r+0xcc>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	4631      	mov	r1, r6
 8003502:	4638      	mov	r0, r7
 8003504:	eb04 0803 	add.w	r8, r4, r3
 8003508:	f000 fb36 	bl	8003b78 <_sbrk_r>
 800350c:	4580      	cmp	r8, r0
 800350e:	d13a      	bne.n	8003586 <_malloc_r+0xd2>
 8003510:	6821      	ldr	r1, [r4, #0]
 8003512:	3503      	adds	r5, #3
 8003514:	1a6d      	subs	r5, r5, r1
 8003516:	f025 0503 	bic.w	r5, r5, #3
 800351a:	3508      	adds	r5, #8
 800351c:	2d0c      	cmp	r5, #12
 800351e:	bf38      	it	cc
 8003520:	250c      	movcc	r5, #12
 8003522:	4629      	mov	r1, r5
 8003524:	4638      	mov	r0, r7
 8003526:	f7ff ffa5 	bl	8003474 <sbrk_aligned>
 800352a:	3001      	adds	r0, #1
 800352c:	d02b      	beq.n	8003586 <_malloc_r+0xd2>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	442b      	add	r3, r5
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	e00e      	b.n	8003554 <_malloc_r+0xa0>
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	1b52      	subs	r2, r2, r5
 800353a:	d41e      	bmi.n	800357a <_malloc_r+0xc6>
 800353c:	2a0b      	cmp	r2, #11
 800353e:	d916      	bls.n	800356e <_malloc_r+0xba>
 8003540:	1961      	adds	r1, r4, r5
 8003542:	42a3      	cmp	r3, r4
 8003544:	6025      	str	r5, [r4, #0]
 8003546:	bf18      	it	ne
 8003548:	6059      	strne	r1, [r3, #4]
 800354a:	6863      	ldr	r3, [r4, #4]
 800354c:	bf08      	it	eq
 800354e:	6031      	streq	r1, [r6, #0]
 8003550:	5162      	str	r2, [r4, r5]
 8003552:	604b      	str	r3, [r1, #4]
 8003554:	4638      	mov	r0, r7
 8003556:	f104 060b 	add.w	r6, r4, #11
 800355a:	f000 fbbd 	bl	8003cd8 <__malloc_unlock>
 800355e:	f026 0607 	bic.w	r6, r6, #7
 8003562:	1d23      	adds	r3, r4, #4
 8003564:	1af2      	subs	r2, r6, r3
 8003566:	d0b6      	beq.n	80034d6 <_malloc_r+0x22>
 8003568:	1b9b      	subs	r3, r3, r6
 800356a:	50a3      	str	r3, [r4, r2]
 800356c:	e7b3      	b.n	80034d6 <_malloc_r+0x22>
 800356e:	6862      	ldr	r2, [r4, #4]
 8003570:	42a3      	cmp	r3, r4
 8003572:	bf0c      	ite	eq
 8003574:	6032      	streq	r2, [r6, #0]
 8003576:	605a      	strne	r2, [r3, #4]
 8003578:	e7ec      	b.n	8003554 <_malloc_r+0xa0>
 800357a:	4623      	mov	r3, r4
 800357c:	6864      	ldr	r4, [r4, #4]
 800357e:	e7b2      	b.n	80034e6 <_malloc_r+0x32>
 8003580:	4634      	mov	r4, r6
 8003582:	6876      	ldr	r6, [r6, #4]
 8003584:	e7b9      	b.n	80034fa <_malloc_r+0x46>
 8003586:	230c      	movs	r3, #12
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4638      	mov	r0, r7
 800358c:	f000 fba4 	bl	8003cd8 <__malloc_unlock>
 8003590:	e7a1      	b.n	80034d6 <_malloc_r+0x22>
 8003592:	6025      	str	r5, [r4, #0]
 8003594:	e7de      	b.n	8003554 <_malloc_r+0xa0>
 8003596:	bf00      	nop
 8003598:	20000154 	.word	0x20000154

0800359c <__sfputc_r>:
 800359c:	6893      	ldr	r3, [r2, #8]
 800359e:	3b01      	subs	r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	b410      	push	{r4}
 80035a4:	6093      	str	r3, [r2, #8]
 80035a6:	da08      	bge.n	80035ba <__sfputc_r+0x1e>
 80035a8:	6994      	ldr	r4, [r2, #24]
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	db01      	blt.n	80035b2 <__sfputc_r+0x16>
 80035ae:	290a      	cmp	r1, #10
 80035b0:	d103      	bne.n	80035ba <__sfputc_r+0x1e>
 80035b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035b6:	f7ff bc31 	b.w	8002e1c <__swbuf_r>
 80035ba:	6813      	ldr	r3, [r2, #0]
 80035bc:	1c58      	adds	r0, r3, #1
 80035be:	6010      	str	r0, [r2, #0]
 80035c0:	7019      	strb	r1, [r3, #0]
 80035c2:	4608      	mov	r0, r1
 80035c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <__sfputs_r>:
 80035ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035cc:	4606      	mov	r6, r0
 80035ce:	460f      	mov	r7, r1
 80035d0:	4614      	mov	r4, r2
 80035d2:	18d5      	adds	r5, r2, r3
 80035d4:	42ac      	cmp	r4, r5
 80035d6:	d101      	bne.n	80035dc <__sfputs_r+0x12>
 80035d8:	2000      	movs	r0, #0
 80035da:	e007      	b.n	80035ec <__sfputs_r+0x22>
 80035dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e0:	463a      	mov	r2, r7
 80035e2:	4630      	mov	r0, r6
 80035e4:	f7ff ffda 	bl	800359c <__sfputc_r>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d1f3      	bne.n	80035d4 <__sfputs_r+0xa>
 80035ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035f0 <_vfiprintf_r>:
 80035f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	460d      	mov	r5, r1
 80035f6:	b09d      	sub	sp, #116	; 0x74
 80035f8:	4614      	mov	r4, r2
 80035fa:	4698      	mov	r8, r3
 80035fc:	4606      	mov	r6, r0
 80035fe:	b118      	cbz	r0, 8003608 <_vfiprintf_r+0x18>
 8003600:	6983      	ldr	r3, [r0, #24]
 8003602:	b90b      	cbnz	r3, 8003608 <_vfiprintf_r+0x18>
 8003604:	f7ff fde4 	bl	80031d0 <__sinit>
 8003608:	4b89      	ldr	r3, [pc, #548]	; (8003830 <_vfiprintf_r+0x240>)
 800360a:	429d      	cmp	r5, r3
 800360c:	d11b      	bne.n	8003646 <_vfiprintf_r+0x56>
 800360e:	6875      	ldr	r5, [r6, #4]
 8003610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003612:	07d9      	lsls	r1, r3, #31
 8003614:	d405      	bmi.n	8003622 <_vfiprintf_r+0x32>
 8003616:	89ab      	ldrh	r3, [r5, #12]
 8003618:	059a      	lsls	r2, r3, #22
 800361a:	d402      	bmi.n	8003622 <_vfiprintf_r+0x32>
 800361c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800361e:	f7ff fe75 	bl	800330c <__retarget_lock_acquire_recursive>
 8003622:	89ab      	ldrh	r3, [r5, #12]
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	d501      	bpl.n	800362c <_vfiprintf_r+0x3c>
 8003628:	692b      	ldr	r3, [r5, #16]
 800362a:	b9eb      	cbnz	r3, 8003668 <_vfiprintf_r+0x78>
 800362c:	4629      	mov	r1, r5
 800362e:	4630      	mov	r0, r6
 8003630:	f7ff fc46 	bl	8002ec0 <__swsetup_r>
 8003634:	b1c0      	cbz	r0, 8003668 <_vfiprintf_r+0x78>
 8003636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003638:	07dc      	lsls	r4, r3, #31
 800363a:	d50e      	bpl.n	800365a <_vfiprintf_r+0x6a>
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	b01d      	add	sp, #116	; 0x74
 8003642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003646:	4b7b      	ldr	r3, [pc, #492]	; (8003834 <_vfiprintf_r+0x244>)
 8003648:	429d      	cmp	r5, r3
 800364a:	d101      	bne.n	8003650 <_vfiprintf_r+0x60>
 800364c:	68b5      	ldr	r5, [r6, #8]
 800364e:	e7df      	b.n	8003610 <_vfiprintf_r+0x20>
 8003650:	4b79      	ldr	r3, [pc, #484]	; (8003838 <_vfiprintf_r+0x248>)
 8003652:	429d      	cmp	r5, r3
 8003654:	bf08      	it	eq
 8003656:	68f5      	ldreq	r5, [r6, #12]
 8003658:	e7da      	b.n	8003610 <_vfiprintf_r+0x20>
 800365a:	89ab      	ldrh	r3, [r5, #12]
 800365c:	0598      	lsls	r0, r3, #22
 800365e:	d4ed      	bmi.n	800363c <_vfiprintf_r+0x4c>
 8003660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003662:	f7ff fe54 	bl	800330e <__retarget_lock_release_recursive>
 8003666:	e7e9      	b.n	800363c <_vfiprintf_r+0x4c>
 8003668:	2300      	movs	r3, #0
 800366a:	9309      	str	r3, [sp, #36]	; 0x24
 800366c:	2320      	movs	r3, #32
 800366e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003672:	f8cd 800c 	str.w	r8, [sp, #12]
 8003676:	2330      	movs	r3, #48	; 0x30
 8003678:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800383c <_vfiprintf_r+0x24c>
 800367c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003680:	f04f 0901 	mov.w	r9, #1
 8003684:	4623      	mov	r3, r4
 8003686:	469a      	mov	sl, r3
 8003688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800368c:	b10a      	cbz	r2, 8003692 <_vfiprintf_r+0xa2>
 800368e:	2a25      	cmp	r2, #37	; 0x25
 8003690:	d1f9      	bne.n	8003686 <_vfiprintf_r+0x96>
 8003692:	ebba 0b04 	subs.w	fp, sl, r4
 8003696:	d00b      	beq.n	80036b0 <_vfiprintf_r+0xc0>
 8003698:	465b      	mov	r3, fp
 800369a:	4622      	mov	r2, r4
 800369c:	4629      	mov	r1, r5
 800369e:	4630      	mov	r0, r6
 80036a0:	f7ff ff93 	bl	80035ca <__sfputs_r>
 80036a4:	3001      	adds	r0, #1
 80036a6:	f000 80aa 	beq.w	80037fe <_vfiprintf_r+0x20e>
 80036aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036ac:	445a      	add	r2, fp
 80036ae:	9209      	str	r2, [sp, #36]	; 0x24
 80036b0:	f89a 3000 	ldrb.w	r3, [sl]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a2 	beq.w	80037fe <_vfiprintf_r+0x20e>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c4:	f10a 0a01 	add.w	sl, sl, #1
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	9307      	str	r3, [sp, #28]
 80036cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036d0:	931a      	str	r3, [sp, #104]	; 0x68
 80036d2:	4654      	mov	r4, sl
 80036d4:	2205      	movs	r2, #5
 80036d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036da:	4858      	ldr	r0, [pc, #352]	; (800383c <_vfiprintf_r+0x24c>)
 80036dc:	f7fc fd88 	bl	80001f0 <memchr>
 80036e0:	9a04      	ldr	r2, [sp, #16]
 80036e2:	b9d8      	cbnz	r0, 800371c <_vfiprintf_r+0x12c>
 80036e4:	06d1      	lsls	r1, r2, #27
 80036e6:	bf44      	itt	mi
 80036e8:	2320      	movmi	r3, #32
 80036ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ee:	0713      	lsls	r3, r2, #28
 80036f0:	bf44      	itt	mi
 80036f2:	232b      	movmi	r3, #43	; 0x2b
 80036f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036f8:	f89a 3000 	ldrb.w	r3, [sl]
 80036fc:	2b2a      	cmp	r3, #42	; 0x2a
 80036fe:	d015      	beq.n	800372c <_vfiprintf_r+0x13c>
 8003700:	9a07      	ldr	r2, [sp, #28]
 8003702:	4654      	mov	r4, sl
 8003704:	2000      	movs	r0, #0
 8003706:	f04f 0c0a 	mov.w	ip, #10
 800370a:	4621      	mov	r1, r4
 800370c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003710:	3b30      	subs	r3, #48	; 0x30
 8003712:	2b09      	cmp	r3, #9
 8003714:	d94e      	bls.n	80037b4 <_vfiprintf_r+0x1c4>
 8003716:	b1b0      	cbz	r0, 8003746 <_vfiprintf_r+0x156>
 8003718:	9207      	str	r2, [sp, #28]
 800371a:	e014      	b.n	8003746 <_vfiprintf_r+0x156>
 800371c:	eba0 0308 	sub.w	r3, r0, r8
 8003720:	fa09 f303 	lsl.w	r3, r9, r3
 8003724:	4313      	orrs	r3, r2
 8003726:	9304      	str	r3, [sp, #16]
 8003728:	46a2      	mov	sl, r4
 800372a:	e7d2      	b.n	80036d2 <_vfiprintf_r+0xe2>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	1d19      	adds	r1, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	9103      	str	r1, [sp, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	bfbb      	ittet	lt
 8003738:	425b      	neglt	r3, r3
 800373a:	f042 0202 	orrlt.w	r2, r2, #2
 800373e:	9307      	strge	r3, [sp, #28]
 8003740:	9307      	strlt	r3, [sp, #28]
 8003742:	bfb8      	it	lt
 8003744:	9204      	strlt	r2, [sp, #16]
 8003746:	7823      	ldrb	r3, [r4, #0]
 8003748:	2b2e      	cmp	r3, #46	; 0x2e
 800374a:	d10c      	bne.n	8003766 <_vfiprintf_r+0x176>
 800374c:	7863      	ldrb	r3, [r4, #1]
 800374e:	2b2a      	cmp	r3, #42	; 0x2a
 8003750:	d135      	bne.n	80037be <_vfiprintf_r+0x1ce>
 8003752:	9b03      	ldr	r3, [sp, #12]
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	9203      	str	r2, [sp, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	bfb8      	it	lt
 800375e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003762:	3402      	adds	r4, #2
 8003764:	9305      	str	r3, [sp, #20]
 8003766:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800384c <_vfiprintf_r+0x25c>
 800376a:	7821      	ldrb	r1, [r4, #0]
 800376c:	2203      	movs	r2, #3
 800376e:	4650      	mov	r0, sl
 8003770:	f7fc fd3e 	bl	80001f0 <memchr>
 8003774:	b140      	cbz	r0, 8003788 <_vfiprintf_r+0x198>
 8003776:	2340      	movs	r3, #64	; 0x40
 8003778:	eba0 000a 	sub.w	r0, r0, sl
 800377c:	fa03 f000 	lsl.w	r0, r3, r0
 8003780:	9b04      	ldr	r3, [sp, #16]
 8003782:	4303      	orrs	r3, r0
 8003784:	3401      	adds	r4, #1
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378c:	482c      	ldr	r0, [pc, #176]	; (8003840 <_vfiprintf_r+0x250>)
 800378e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003792:	2206      	movs	r2, #6
 8003794:	f7fc fd2c 	bl	80001f0 <memchr>
 8003798:	2800      	cmp	r0, #0
 800379a:	d03f      	beq.n	800381c <_vfiprintf_r+0x22c>
 800379c:	4b29      	ldr	r3, [pc, #164]	; (8003844 <_vfiprintf_r+0x254>)
 800379e:	bb1b      	cbnz	r3, 80037e8 <_vfiprintf_r+0x1f8>
 80037a0:	9b03      	ldr	r3, [sp, #12]
 80037a2:	3307      	adds	r3, #7
 80037a4:	f023 0307 	bic.w	r3, r3, #7
 80037a8:	3308      	adds	r3, #8
 80037aa:	9303      	str	r3, [sp, #12]
 80037ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ae:	443b      	add	r3, r7
 80037b0:	9309      	str	r3, [sp, #36]	; 0x24
 80037b2:	e767      	b.n	8003684 <_vfiprintf_r+0x94>
 80037b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b8:	460c      	mov	r4, r1
 80037ba:	2001      	movs	r0, #1
 80037bc:	e7a5      	b.n	800370a <_vfiprintf_r+0x11a>
 80037be:	2300      	movs	r3, #0
 80037c0:	3401      	adds	r4, #1
 80037c2:	9305      	str	r3, [sp, #20]
 80037c4:	4619      	mov	r1, r3
 80037c6:	f04f 0c0a 	mov.w	ip, #10
 80037ca:	4620      	mov	r0, r4
 80037cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037d0:	3a30      	subs	r2, #48	; 0x30
 80037d2:	2a09      	cmp	r2, #9
 80037d4:	d903      	bls.n	80037de <_vfiprintf_r+0x1ee>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0c5      	beq.n	8003766 <_vfiprintf_r+0x176>
 80037da:	9105      	str	r1, [sp, #20]
 80037dc:	e7c3      	b.n	8003766 <_vfiprintf_r+0x176>
 80037de:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e2:	4604      	mov	r4, r0
 80037e4:	2301      	movs	r3, #1
 80037e6:	e7f0      	b.n	80037ca <_vfiprintf_r+0x1da>
 80037e8:	ab03      	add	r3, sp, #12
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	462a      	mov	r2, r5
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <_vfiprintf_r+0x258>)
 80037f0:	a904      	add	r1, sp, #16
 80037f2:	4630      	mov	r0, r6
 80037f4:	f3af 8000 	nop.w
 80037f8:	4607      	mov	r7, r0
 80037fa:	1c78      	adds	r0, r7, #1
 80037fc:	d1d6      	bne.n	80037ac <_vfiprintf_r+0x1bc>
 80037fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003800:	07d9      	lsls	r1, r3, #31
 8003802:	d405      	bmi.n	8003810 <_vfiprintf_r+0x220>
 8003804:	89ab      	ldrh	r3, [r5, #12]
 8003806:	059a      	lsls	r2, r3, #22
 8003808:	d402      	bmi.n	8003810 <_vfiprintf_r+0x220>
 800380a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800380c:	f7ff fd7f 	bl	800330e <__retarget_lock_release_recursive>
 8003810:	89ab      	ldrh	r3, [r5, #12]
 8003812:	065b      	lsls	r3, r3, #25
 8003814:	f53f af12 	bmi.w	800363c <_vfiprintf_r+0x4c>
 8003818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800381a:	e711      	b.n	8003640 <_vfiprintf_r+0x50>
 800381c:	ab03      	add	r3, sp, #12
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	462a      	mov	r2, r5
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <_vfiprintf_r+0x258>)
 8003824:	a904      	add	r1, sp, #16
 8003826:	4630      	mov	r0, r6
 8003828:	f000 f880 	bl	800392c <_printf_i>
 800382c:	e7e4      	b.n	80037f8 <_vfiprintf_r+0x208>
 800382e:	bf00      	nop
 8003830:	08003ea0 	.word	0x08003ea0
 8003834:	08003ec0 	.word	0x08003ec0
 8003838:	08003e80 	.word	0x08003e80
 800383c:	08003ee0 	.word	0x08003ee0
 8003840:	08003eea 	.word	0x08003eea
 8003844:	00000000 	.word	0x00000000
 8003848:	080035cb 	.word	0x080035cb
 800384c:	08003ee6 	.word	0x08003ee6

08003850 <_printf_common>:
 8003850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003854:	4616      	mov	r6, r2
 8003856:	4699      	mov	r9, r3
 8003858:	688a      	ldr	r2, [r1, #8]
 800385a:	690b      	ldr	r3, [r1, #16]
 800385c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003860:	4293      	cmp	r3, r2
 8003862:	bfb8      	it	lt
 8003864:	4613      	movlt	r3, r2
 8003866:	6033      	str	r3, [r6, #0]
 8003868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800386c:	4607      	mov	r7, r0
 800386e:	460c      	mov	r4, r1
 8003870:	b10a      	cbz	r2, 8003876 <_printf_common+0x26>
 8003872:	3301      	adds	r3, #1
 8003874:	6033      	str	r3, [r6, #0]
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	0699      	lsls	r1, r3, #26
 800387a:	bf42      	ittt	mi
 800387c:	6833      	ldrmi	r3, [r6, #0]
 800387e:	3302      	addmi	r3, #2
 8003880:	6033      	strmi	r3, [r6, #0]
 8003882:	6825      	ldr	r5, [r4, #0]
 8003884:	f015 0506 	ands.w	r5, r5, #6
 8003888:	d106      	bne.n	8003898 <_printf_common+0x48>
 800388a:	f104 0a19 	add.w	sl, r4, #25
 800388e:	68e3      	ldr	r3, [r4, #12]
 8003890:	6832      	ldr	r2, [r6, #0]
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	42ab      	cmp	r3, r5
 8003896:	dc26      	bgt.n	80038e6 <_printf_common+0x96>
 8003898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800389c:	1e13      	subs	r3, r2, #0
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	bf18      	it	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	0692      	lsls	r2, r2, #26
 80038a6:	d42b      	bmi.n	8003900 <_printf_common+0xb0>
 80038a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ac:	4649      	mov	r1, r9
 80038ae:	4638      	mov	r0, r7
 80038b0:	47c0      	blx	r8
 80038b2:	3001      	adds	r0, #1
 80038b4:	d01e      	beq.n	80038f4 <_printf_common+0xa4>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	68e5      	ldr	r5, [r4, #12]
 80038ba:	6832      	ldr	r2, [r6, #0]
 80038bc:	f003 0306 	and.w	r3, r3, #6
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	bf08      	it	eq
 80038c4:	1aad      	subeq	r5, r5, r2
 80038c6:	68a3      	ldr	r3, [r4, #8]
 80038c8:	6922      	ldr	r2, [r4, #16]
 80038ca:	bf0c      	ite	eq
 80038cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d0:	2500      	movne	r5, #0
 80038d2:	4293      	cmp	r3, r2
 80038d4:	bfc4      	itt	gt
 80038d6:	1a9b      	subgt	r3, r3, r2
 80038d8:	18ed      	addgt	r5, r5, r3
 80038da:	2600      	movs	r6, #0
 80038dc:	341a      	adds	r4, #26
 80038de:	42b5      	cmp	r5, r6
 80038e0:	d11a      	bne.n	8003918 <_printf_common+0xc8>
 80038e2:	2000      	movs	r0, #0
 80038e4:	e008      	b.n	80038f8 <_printf_common+0xa8>
 80038e6:	2301      	movs	r3, #1
 80038e8:	4652      	mov	r2, sl
 80038ea:	4649      	mov	r1, r9
 80038ec:	4638      	mov	r0, r7
 80038ee:	47c0      	blx	r8
 80038f0:	3001      	adds	r0, #1
 80038f2:	d103      	bne.n	80038fc <_printf_common+0xac>
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038fc:	3501      	adds	r5, #1
 80038fe:	e7c6      	b.n	800388e <_printf_common+0x3e>
 8003900:	18e1      	adds	r1, r4, r3
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	2030      	movs	r0, #48	; 0x30
 8003906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800390a:	4422      	add	r2, r4
 800390c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003914:	3302      	adds	r3, #2
 8003916:	e7c7      	b.n	80038a8 <_printf_common+0x58>
 8003918:	2301      	movs	r3, #1
 800391a:	4622      	mov	r2, r4
 800391c:	4649      	mov	r1, r9
 800391e:	4638      	mov	r0, r7
 8003920:	47c0      	blx	r8
 8003922:	3001      	adds	r0, #1
 8003924:	d0e6      	beq.n	80038f4 <_printf_common+0xa4>
 8003926:	3601      	adds	r6, #1
 8003928:	e7d9      	b.n	80038de <_printf_common+0x8e>
	...

0800392c <_printf_i>:
 800392c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	7e0f      	ldrb	r7, [r1, #24]
 8003932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003934:	2f78      	cmp	r7, #120	; 0x78
 8003936:	4691      	mov	r9, r2
 8003938:	4680      	mov	r8, r0
 800393a:	460c      	mov	r4, r1
 800393c:	469a      	mov	sl, r3
 800393e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003942:	d807      	bhi.n	8003954 <_printf_i+0x28>
 8003944:	2f62      	cmp	r7, #98	; 0x62
 8003946:	d80a      	bhi.n	800395e <_printf_i+0x32>
 8003948:	2f00      	cmp	r7, #0
 800394a:	f000 80d8 	beq.w	8003afe <_printf_i+0x1d2>
 800394e:	2f58      	cmp	r7, #88	; 0x58
 8003950:	f000 80a3 	beq.w	8003a9a <_printf_i+0x16e>
 8003954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800395c:	e03a      	b.n	80039d4 <_printf_i+0xa8>
 800395e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003962:	2b15      	cmp	r3, #21
 8003964:	d8f6      	bhi.n	8003954 <_printf_i+0x28>
 8003966:	a101      	add	r1, pc, #4	; (adr r1, 800396c <_printf_i+0x40>)
 8003968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800396c:	080039c5 	.word	0x080039c5
 8003970:	080039d9 	.word	0x080039d9
 8003974:	08003955 	.word	0x08003955
 8003978:	08003955 	.word	0x08003955
 800397c:	08003955 	.word	0x08003955
 8003980:	08003955 	.word	0x08003955
 8003984:	080039d9 	.word	0x080039d9
 8003988:	08003955 	.word	0x08003955
 800398c:	08003955 	.word	0x08003955
 8003990:	08003955 	.word	0x08003955
 8003994:	08003955 	.word	0x08003955
 8003998:	08003ae5 	.word	0x08003ae5
 800399c:	08003a09 	.word	0x08003a09
 80039a0:	08003ac7 	.word	0x08003ac7
 80039a4:	08003955 	.word	0x08003955
 80039a8:	08003955 	.word	0x08003955
 80039ac:	08003b07 	.word	0x08003b07
 80039b0:	08003955 	.word	0x08003955
 80039b4:	08003a09 	.word	0x08003a09
 80039b8:	08003955 	.word	0x08003955
 80039bc:	08003955 	.word	0x08003955
 80039c0:	08003acf 	.word	0x08003acf
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	1d1a      	adds	r2, r3, #4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	602a      	str	r2, [r5, #0]
 80039cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0a3      	b.n	8003b20 <_printf_i+0x1f4>
 80039d8:	6820      	ldr	r0, [r4, #0]
 80039da:	6829      	ldr	r1, [r5, #0]
 80039dc:	0606      	lsls	r6, r0, #24
 80039de:	f101 0304 	add.w	r3, r1, #4
 80039e2:	d50a      	bpl.n	80039fa <_printf_i+0xce>
 80039e4:	680e      	ldr	r6, [r1, #0]
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	2e00      	cmp	r6, #0
 80039ea:	da03      	bge.n	80039f4 <_printf_i+0xc8>
 80039ec:	232d      	movs	r3, #45	; 0x2d
 80039ee:	4276      	negs	r6, r6
 80039f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f4:	485e      	ldr	r0, [pc, #376]	; (8003b70 <_printf_i+0x244>)
 80039f6:	230a      	movs	r3, #10
 80039f8:	e019      	b.n	8003a2e <_printf_i+0x102>
 80039fa:	680e      	ldr	r6, [r1, #0]
 80039fc:	602b      	str	r3, [r5, #0]
 80039fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a02:	bf18      	it	ne
 8003a04:	b236      	sxthne	r6, r6
 8003a06:	e7ef      	b.n	80039e8 <_printf_i+0xbc>
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1d19      	adds	r1, r3, #4
 8003a0e:	6029      	str	r1, [r5, #0]
 8003a10:	0601      	lsls	r1, r0, #24
 8003a12:	d501      	bpl.n	8003a18 <_printf_i+0xec>
 8003a14:	681e      	ldr	r6, [r3, #0]
 8003a16:	e002      	b.n	8003a1e <_printf_i+0xf2>
 8003a18:	0646      	lsls	r6, r0, #25
 8003a1a:	d5fb      	bpl.n	8003a14 <_printf_i+0xe8>
 8003a1c:	881e      	ldrh	r6, [r3, #0]
 8003a1e:	4854      	ldr	r0, [pc, #336]	; (8003b70 <_printf_i+0x244>)
 8003a20:	2f6f      	cmp	r7, #111	; 0x6f
 8003a22:	bf0c      	ite	eq
 8003a24:	2308      	moveq	r3, #8
 8003a26:	230a      	movne	r3, #10
 8003a28:	2100      	movs	r1, #0
 8003a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a2e:	6865      	ldr	r5, [r4, #4]
 8003a30:	60a5      	str	r5, [r4, #8]
 8003a32:	2d00      	cmp	r5, #0
 8003a34:	bfa2      	ittt	ge
 8003a36:	6821      	ldrge	r1, [r4, #0]
 8003a38:	f021 0104 	bicge.w	r1, r1, #4
 8003a3c:	6021      	strge	r1, [r4, #0]
 8003a3e:	b90e      	cbnz	r6, 8003a44 <_printf_i+0x118>
 8003a40:	2d00      	cmp	r5, #0
 8003a42:	d04d      	beq.n	8003ae0 <_printf_i+0x1b4>
 8003a44:	4615      	mov	r5, r2
 8003a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a4e:	5dc7      	ldrb	r7, [r0, r7]
 8003a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a54:	4637      	mov	r7, r6
 8003a56:	42bb      	cmp	r3, r7
 8003a58:	460e      	mov	r6, r1
 8003a5a:	d9f4      	bls.n	8003a46 <_printf_i+0x11a>
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d10b      	bne.n	8003a78 <_printf_i+0x14c>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	07de      	lsls	r6, r3, #31
 8003a64:	d508      	bpl.n	8003a78 <_printf_i+0x14c>
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	6861      	ldr	r1, [r4, #4]
 8003a6a:	4299      	cmp	r1, r3
 8003a6c:	bfde      	ittt	le
 8003a6e:	2330      	movle	r3, #48	; 0x30
 8003a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a78:	1b52      	subs	r2, r2, r5
 8003a7a:	6122      	str	r2, [r4, #16]
 8003a7c:	f8cd a000 	str.w	sl, [sp]
 8003a80:	464b      	mov	r3, r9
 8003a82:	aa03      	add	r2, sp, #12
 8003a84:	4621      	mov	r1, r4
 8003a86:	4640      	mov	r0, r8
 8003a88:	f7ff fee2 	bl	8003850 <_printf_common>
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d14c      	bne.n	8003b2a <_printf_i+0x1fe>
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	b004      	add	sp, #16
 8003a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9a:	4835      	ldr	r0, [pc, #212]	; (8003b70 <_printf_i+0x244>)
 8003a9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003aa0:	6829      	ldr	r1, [r5, #0]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003aa8:	6029      	str	r1, [r5, #0]
 8003aaa:	061d      	lsls	r5, r3, #24
 8003aac:	d514      	bpl.n	8003ad8 <_printf_i+0x1ac>
 8003aae:	07df      	lsls	r7, r3, #31
 8003ab0:	bf44      	itt	mi
 8003ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ab6:	6023      	strmi	r3, [r4, #0]
 8003ab8:	b91e      	cbnz	r6, 8003ac2 <_printf_i+0x196>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	f023 0320 	bic.w	r3, r3, #32
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	2310      	movs	r3, #16
 8003ac4:	e7b0      	b.n	8003a28 <_printf_i+0xfc>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	f043 0320 	orr.w	r3, r3, #32
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	2378      	movs	r3, #120	; 0x78
 8003ad0:	4828      	ldr	r0, [pc, #160]	; (8003b74 <_printf_i+0x248>)
 8003ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ad6:	e7e3      	b.n	8003aa0 <_printf_i+0x174>
 8003ad8:	0659      	lsls	r1, r3, #25
 8003ada:	bf48      	it	mi
 8003adc:	b2b6      	uxthmi	r6, r6
 8003ade:	e7e6      	b.n	8003aae <_printf_i+0x182>
 8003ae0:	4615      	mov	r5, r2
 8003ae2:	e7bb      	b.n	8003a5c <_printf_i+0x130>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	6826      	ldr	r6, [r4, #0]
 8003ae8:	6961      	ldr	r1, [r4, #20]
 8003aea:	1d18      	adds	r0, r3, #4
 8003aec:	6028      	str	r0, [r5, #0]
 8003aee:	0635      	lsls	r5, r6, #24
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	d501      	bpl.n	8003af8 <_printf_i+0x1cc>
 8003af4:	6019      	str	r1, [r3, #0]
 8003af6:	e002      	b.n	8003afe <_printf_i+0x1d2>
 8003af8:	0670      	lsls	r0, r6, #25
 8003afa:	d5fb      	bpl.n	8003af4 <_printf_i+0x1c8>
 8003afc:	8019      	strh	r1, [r3, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	6123      	str	r3, [r4, #16]
 8003b02:	4615      	mov	r5, r2
 8003b04:	e7ba      	b.n	8003a7c <_printf_i+0x150>
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	1d1a      	adds	r2, r3, #4
 8003b0a:	602a      	str	r2, [r5, #0]
 8003b0c:	681d      	ldr	r5, [r3, #0]
 8003b0e:	6862      	ldr	r2, [r4, #4]
 8003b10:	2100      	movs	r1, #0
 8003b12:	4628      	mov	r0, r5
 8003b14:	f7fc fb6c 	bl	80001f0 <memchr>
 8003b18:	b108      	cbz	r0, 8003b1e <_printf_i+0x1f2>
 8003b1a:	1b40      	subs	r0, r0, r5
 8003b1c:	6060      	str	r0, [r4, #4]
 8003b1e:	6863      	ldr	r3, [r4, #4]
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	2300      	movs	r3, #0
 8003b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b28:	e7a8      	b.n	8003a7c <_printf_i+0x150>
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	462a      	mov	r2, r5
 8003b2e:	4649      	mov	r1, r9
 8003b30:	4640      	mov	r0, r8
 8003b32:	47d0      	blx	sl
 8003b34:	3001      	adds	r0, #1
 8003b36:	d0ab      	beq.n	8003a90 <_printf_i+0x164>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	079b      	lsls	r3, r3, #30
 8003b3c:	d413      	bmi.n	8003b66 <_printf_i+0x23a>
 8003b3e:	68e0      	ldr	r0, [r4, #12]
 8003b40:	9b03      	ldr	r3, [sp, #12]
 8003b42:	4298      	cmp	r0, r3
 8003b44:	bfb8      	it	lt
 8003b46:	4618      	movlt	r0, r3
 8003b48:	e7a4      	b.n	8003a94 <_printf_i+0x168>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4632      	mov	r2, r6
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4640      	mov	r0, r8
 8003b52:	47d0      	blx	sl
 8003b54:	3001      	adds	r0, #1
 8003b56:	d09b      	beq.n	8003a90 <_printf_i+0x164>
 8003b58:	3501      	adds	r5, #1
 8003b5a:	68e3      	ldr	r3, [r4, #12]
 8003b5c:	9903      	ldr	r1, [sp, #12]
 8003b5e:	1a5b      	subs	r3, r3, r1
 8003b60:	42ab      	cmp	r3, r5
 8003b62:	dcf2      	bgt.n	8003b4a <_printf_i+0x21e>
 8003b64:	e7eb      	b.n	8003b3e <_printf_i+0x212>
 8003b66:	2500      	movs	r5, #0
 8003b68:	f104 0619 	add.w	r6, r4, #25
 8003b6c:	e7f5      	b.n	8003b5a <_printf_i+0x22e>
 8003b6e:	bf00      	nop
 8003b70:	08003ef1 	.word	0x08003ef1
 8003b74:	08003f02 	.word	0x08003f02

08003b78 <_sbrk_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4d06      	ldr	r5, [pc, #24]	; (8003b94 <_sbrk_r+0x1c>)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	f7fd f822 	bl	8000bcc <_sbrk>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_sbrk_r+0x1a>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_sbrk_r+0x1a>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	2000015c 	.word	0x2000015c

08003b98 <__sread>:
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba0:	f000 f8a0 	bl	8003ce4 <_read_r>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	bfab      	itete	ge
 8003ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003baa:	89a3      	ldrhlt	r3, [r4, #12]
 8003bac:	181b      	addge	r3, r3, r0
 8003bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bb2:	bfac      	ite	ge
 8003bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bb6:	81a3      	strhlt	r3, [r4, #12]
 8003bb8:	bd10      	pop	{r4, pc}

08003bba <__swrite>:
 8003bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbe:	461f      	mov	r7, r3
 8003bc0:	898b      	ldrh	r3, [r1, #12]
 8003bc2:	05db      	lsls	r3, r3, #23
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	4616      	mov	r6, r2
 8003bca:	d505      	bpl.n	8003bd8 <__swrite+0x1e>
 8003bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f000 f868 	bl	8003ca8 <_lseek_r>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	4632      	mov	r2, r6
 8003be6:	463b      	mov	r3, r7
 8003be8:	4628      	mov	r0, r5
 8003bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bee:	f000 b817 	b.w	8003c20 <_write_r>

08003bf2 <__sseek>:
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfa:	f000 f855 	bl	8003ca8 <_lseek_r>
 8003bfe:	1c43      	adds	r3, r0, #1
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	bf15      	itete	ne
 8003c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c0e:	81a3      	strheq	r3, [r4, #12]
 8003c10:	bf18      	it	ne
 8003c12:	81a3      	strhne	r3, [r4, #12]
 8003c14:	bd10      	pop	{r4, pc}

08003c16 <__sclose>:
 8003c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1a:	f000 b813 	b.w	8003c44 <_close_r>
	...

08003c20 <_write_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d07      	ldr	r5, [pc, #28]	; (8003c40 <_write_r+0x20>)
 8003c24:	4604      	mov	r4, r0
 8003c26:	4608      	mov	r0, r1
 8003c28:	4611      	mov	r1, r2
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	602a      	str	r2, [r5, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7fc ff7b 	bl	8000b2a <_write>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_write_r+0x1e>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_write_r+0x1e>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	2000015c 	.word	0x2000015c

08003c44 <_close_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d06      	ldr	r5, [pc, #24]	; (8003c60 <_close_r+0x1c>)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	f7fc ff87 	bl	8000b62 <_close>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_close_r+0x1a>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_close_r+0x1a>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	2000015c 	.word	0x2000015c

08003c64 <_fstat_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	4d07      	ldr	r5, [pc, #28]	; (8003c84 <_fstat_r+0x20>)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	4611      	mov	r1, r2
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	f7fc ff82 	bl	8000b7a <_fstat>
 8003c76:	1c43      	adds	r3, r0, #1
 8003c78:	d102      	bne.n	8003c80 <_fstat_r+0x1c>
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	b103      	cbz	r3, 8003c80 <_fstat_r+0x1c>
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	2000015c 	.word	0x2000015c

08003c88 <_isatty_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4d06      	ldr	r5, [pc, #24]	; (8003ca4 <_isatty_r+0x1c>)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	f7fc ff81 	bl	8000b9a <_isatty>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_isatty_r+0x1a>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_isatty_r+0x1a>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	2000015c 	.word	0x2000015c

08003ca8 <_lseek_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4d07      	ldr	r5, [pc, #28]	; (8003cc8 <_lseek_r+0x20>)
 8003cac:	4604      	mov	r4, r0
 8003cae:	4608      	mov	r0, r1
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	602a      	str	r2, [r5, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f7fc ff7a 	bl	8000bb0 <_lseek>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d102      	bne.n	8003cc6 <_lseek_r+0x1e>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	b103      	cbz	r3, 8003cc6 <_lseek_r+0x1e>
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	2000015c 	.word	0x2000015c

08003ccc <__malloc_lock>:
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <__malloc_lock+0x8>)
 8003cce:	f7ff bb1d 	b.w	800330c <__retarget_lock_acquire_recursive>
 8003cd2:	bf00      	nop
 8003cd4:	20000150 	.word	0x20000150

08003cd8 <__malloc_unlock>:
 8003cd8:	4801      	ldr	r0, [pc, #4]	; (8003ce0 <__malloc_unlock+0x8>)
 8003cda:	f7ff bb18 	b.w	800330e <__retarget_lock_release_recursive>
 8003cde:	bf00      	nop
 8003ce0:	20000150 	.word	0x20000150

08003ce4 <_read_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4d07      	ldr	r5, [pc, #28]	; (8003d04 <_read_r+0x20>)
 8003ce8:	4604      	mov	r4, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	602a      	str	r2, [r5, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fc fefc 	bl	8000af0 <_read>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_read_r+0x1e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_read_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	2000015c 	.word	0x2000015c

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
