
TP_PdM_Emma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08007130  08007130  00017130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007714  08007714  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800771c  0800771c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000150  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6a7  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002547  00000000  00000000  0002c8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a68  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ac0  00000000  00000000  00058c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0195  00000000  00000000  0006a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a895  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003890  00000000  00000000  0015a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007114 	.word	0x08007114

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08007114 	.word	0x08007114

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <myADC_init>:
/*	Función: inicialización de conversor AD en un canal (A0 de placa Nucleo)
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
void myADC_init()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;

	//##-1- Configure the ADC peripheral #######################################
	AdcHandle.Instance                   = ADC1;
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <myADC_init+0x98>)
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <myADC_init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
	AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <myADC_init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
	AdcHandle.Init.Resolution            = ADC_RESOLUTION12b;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <myADC_init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
	AdcHandle.Init.ScanConvMode          = DISABLE;                       // Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1)
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <myADC_init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
	AdcHandle.Init.ContinuousConvMode    = ENABLE;                        // Continuous mode disabled to have only 1 conversion at each conversion trig
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <myADC_init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	761a      	strb	r2, [r3, #24]
	AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       // Parameter discarded because sequencer is disabled
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <myADC_init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]
	AdcHandle.Init.NbrOfDiscConversion   = 0;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <myADC_init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
	AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;        // Conversion start trigged at each external event
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <myADC_init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
	AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <myADC_init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
	AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <myADC_init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
	AdcHandle.Init.NbrOfConversion       = 1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <myADC_init+0x98>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	61da      	str	r2, [r3, #28]
	AdcHandle.Init.DMAContinuousRequests = ENABLE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <myADC_init+0x98>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	AdcHandle.Init.EOCSelection          = DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <myADC_init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <myADC_init+0x98>)
 8000f66:	f000 fe87 	bl	8001c78 <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <myADC_init+0x6a>
	{
		printf("Error inicializacion ADC\r\n");
 8000f70:	480e      	ldr	r0, [pc, #56]	; (8000fac <myADC_init+0xa0>)
 8000f72:	f004 f81b 	bl	8004fac <puts>
	}


	//##-2- Configure ADC regular channel ######################################
	sConfig.Channel      = ADC_CHANNEL_3;
 8000f76:	2303      	movs	r3, #3
 8000f78:	603b      	str	r3, [r7, #0]
	sConfig.Rank         = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
	sConfig.Offset       = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <myADC_init+0x98>)
 8000f8c:	f001 f856 	bl	800203c <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <myADC_init+0x90>
	{
		printf("Error configuracion ADC\r\n");
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <myADC_init+0xa4>)
 8000f98:	f004 f808 	bl	8004fac <puts>
	//        IRQHandler.
	/*if(HAL_ADC_Start_DMA(&AdcHandle, (uint32_t*)&uhADCxConvertedValue, 1) != HAL_OK)
	{
		printf("Error inicializacion DMA\r\n");
	}*/
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000020c 	.word	0x2000020c
 8000fa8:	40012000 	.word	0x40012000
 8000fac:	08007130 	.word	0x08007130
 8000fb0:	0800714c 	.word	0x0800714c

08000fb4 <myADC_read>:
 	siguiendo ejemplo ADC_RegularConversion_DMA de STM32Cube_FW_F4_V1.27.0
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
static uint32_t myADC_read()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	uint32_t valorLeidoADC;
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <myADC_read+0x38>)
 8000fbc:	f001 f830 	bl	8002020 <HAL_ADC_GetValue>
 8000fc0:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&AdcHandle);
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <myADC_read+0x38>)
 8000fc4:	f000 fe9c 	bl	8001d00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&AdcHandle,0xFFF);
 8000fc8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <myADC_read+0x38>)
 8000fce:	f000 ff9c 	bl	8001f0a <HAL_ADC_PollForConversion>
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <myADC_read+0x38>)
 8000fd4:	f001 f824 	bl	8002020 <HAL_ADC_GetValue>
 8000fd8:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&AdcHandle);
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <myADC_read+0x38>)
 8000fdc:	f000 ff62 	bl	8001ea4 <HAL_ADC_Stop>
	return valorLeidoADC;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000020c 	.word	0x2000020c

08000ff0 <myADC_update>:
/*	Función: actualización de lectura AD para mostrar Línea por terminal (muestra variaciones +-2)
	Entrada: ninguna
	Salida: error (0:ok, 1:bloqueo por problema de Línea)
	Nota: es una función privada porque se llama internamente en API_adc */
bool_t myADC_update()
{
 8000ff0:	b598      	push	{r3, r4, r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	lecturaADC = ( myADC_read()+myADC_read()+myADC_read() ) / 3; 	//Promedio de 3 lecturas para disminuir oscilación
 8000ff4:	f7ff ffde 	bl	8000fb4 <myADC_read>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	f7ff ffdb 	bl	8000fb4 <myADC_read>
 8000ffe:	4603      	mov	r3, r0
 8001000:	441c      	add	r4, r3
 8001002:	f7ff ffd7 	bl	8000fb4 <myADC_read>
 8001006:	4603      	mov	r3, r0
 8001008:	4423      	add	r3, r4
 800100a:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <myADC_update+0xe0>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <myADC_update+0xe4>)
 8001014:	6013      	str	r3, [r2, #0]
	valorADC   = ((float)lecturaADC/ADC_RESOLUTION)*AMPLITUD_LINEA;	//Escala Linea
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <myADC_update+0xe4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001022:	ee17 0a90 	vmov	r0, s15
 8001026:	f7ff fa9f 	bl	8000568 <__aeabi_f2d>
 800102a:	a327      	add	r3, pc, #156	; (adr r3, 80010c8 <myADC_update+0xd8>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc1c 	bl	800086c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <myADC_update+0xe8>)
 8001042:	f7ff fae9 	bl	8000618 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fdbb 	bl	8000bc8 <__aeabi_d2uiz>
 8001052:	4603      	mov	r3, r0
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <myADC_update+0xec>)
 8001058:	701a      	strb	r2, [r3, #0]

	if( (valorAnteriorADC <= valorADC-2) || (valorAnteriorADC >= valorADC+2) )
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <myADC_update+0xec>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <myADC_update+0xf0>)
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	4293      	cmp	r3, r2
 8001066:	dc06      	bgt.n	8001076 <myADC_update+0x86>
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <myADC_update+0xec>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <myADC_update+0xf0>)
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	4293      	cmp	r3, r2
 8001074:	da22      	bge.n	80010bc <myADC_update+0xcc>
	//if( valorAnteriorADC != valorADC )
	{
		if(valorADC<MIN_LINEA)
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <myADC_update+0xec>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2bc7      	cmp	r3, #199	; 0xc7
 800107c:	d806      	bhi.n	800108c <myADC_update+0x9c>
		{
			printf("Tension de alimentacion insuficiente!\r\n");
 800107e:	4819      	ldr	r0, [pc, #100]	; (80010e4 <myADC_update+0xf4>)
 8001080:	f003 ff94 	bl	8004fac <puts>
			error = 1;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <myADC_update+0xf8>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e013      	b.n	80010b4 <myADC_update+0xc4>
		}
		else if(valorADC>MAX_LINEA)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <myADC_update+0xec>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2bf0      	cmp	r3, #240	; 0xf0
 8001092:	d906      	bls.n	80010a2 <myADC_update+0xb2>
		{
			printf("Tension de alimentacion excedida!\r\n");
 8001094:	4815      	ldr	r0, [pc, #84]	; (80010ec <myADC_update+0xfc>)
 8001096:	f003 ff89 	bl	8004fac <puts>
			error = 1;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <myADC_update+0xf8>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e008      	b.n	80010b4 <myADC_update+0xc4>
		}
		else
		{
			printf("Linea = %dVca\r\n", valorADC);
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <myADC_update+0xec>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4811      	ldr	r0, [pc, #68]	; (80010f0 <myADC_update+0x100>)
 80010aa:	f003 fef9 	bl	8004ea0 <iprintf>
			error = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <myADC_update+0xf8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
		}
		valorAnteriorADC = valorADC; //Evita escrituras sucesivas iguales (+-2)
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <myADC_update+0xec>)
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <myADC_update+0xf0>)
 80010ba:	701a      	strb	r2, [r3, #0]
	}

	return error;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <myADC_update+0xf8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd98      	pop	{r3, r4, r7, pc}
 80010c4:	f3af 8000 	nop.w
 80010c8:	00000000 	.word	0x00000000
 80010cc:	40affe00 	.word	0x40affe00
 80010d0:	aaaaaaab 	.word	0xaaaaaaab
 80010d4:	20000254 	.word	0x20000254
 80010d8:	406f4000 	.word	0x406f4000
 80010dc:	20000259 	.word	0x20000259
 80010e0:	20000258 	.word	0x20000258
 80010e4:	08007168 	.word	0x08007168
 80010e8:	2000025a 	.word	0x2000025a
 80010ec:	08007190 	.word	0x08007190
 80010f0:	080071b4 	.word	0x080071b4

080010f4 <debounceFSM_update>:
/*	Función: lee las entradas, resuelve la lógica de transición de datos, actualiza las salidas
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
uint8_t debounceFSM_update()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	changeState = 0;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <debounceFSM_update+0x20>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	debounceB1_update();
 80010fe:	f000 f80b 	bl	8001118 <debounceB1_update>
	debounceB2_update();
 8001102:	f000 f86d 	bl	80011e0 <debounceB2_update>
	debounceB3_update();
 8001106:	f000 f8cf 	bl	80012a8 <debounceB3_update>
	return changeState;
 800110a:	4b02      	ldr	r3, [pc, #8]	; (8001114 <debounceFSM_update+0x20>)
 800110c:	781b      	ldrb	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000283 	.word	0x20000283

08001118 <debounceB1_update>:

void debounceB1_update()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	switch (actualB1State)
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <debounceB1_update+0xb8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d84a      	bhi.n	80011ba <debounceB1_update+0xa2>
 8001124:	a201      	add	r2, pc, #4	; (adr r2, 800112c <debounceB1_update+0x14>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	0800113d 	.word	0x0800113d
 8001130:	08001151 	.word	0x08001151
 8001134:	0800117f 	.word	0x0800117f
 8001138:	08001193 	.word	0x08001193
	{
		case BUTTON_UP:

					if ( BUTTON_menosTiempo_PRESSED )
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <debounceB1_update+0xbc>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d03a      	beq.n	80011be <debounceB1_update+0xa6>
					{
						actualB1State = BUTTON_FALLING;
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <debounceB1_update+0xb8>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800114e:	e036      	b.n	80011be <debounceB1_update+0xa6>

		case BUTTON_FALLING:

					if( delayRead(&delayAntiReboteB1) )
 8001150:	4821      	ldr	r0, [pc, #132]	; (80011d8 <debounceB1_update+0xc0>)
 8001152:	f000 f94b 	bl	80013ec <delayRead>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d032      	beq.n	80011c2 <debounceB1_update+0xaa>
					{
						if (BUTTON_menosTiempo_PRESSED )
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <debounceB1_update+0xbc>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <debounceB1_update+0x5e>
						{
							actualB1State = BUTTON_DOWN;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <debounceB1_update+0xb8>)
 800116a:	2202      	movs	r2, #2
 800116c:	701a      	strb	r2, [r3, #0]
							changeState = 1;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <debounceB1_update+0xc4>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB1State = BUTTON_UP;
						}
					}
					break;
 8001174:	e025      	b.n	80011c2 <debounceB1_update+0xaa>
							actualB1State = BUTTON_UP;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <debounceB1_update+0xb8>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
					break;
 800117c:	e021      	b.n	80011c2 <debounceB1_update+0xaa>

		case BUTTON_DOWN:

					if ( !BUTTON_menosTiempo_PRESSED )
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <debounceB1_update+0xbc>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11d      	bne.n	80011c6 <debounceB1_update+0xae>
					{
						actualB1State = BUTTON_RAISING;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <debounceB1_update+0xb8>)
 800118c:	2203      	movs	r2, #3
 800118e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001190:	e019      	b.n	80011c6 <debounceB1_update+0xae>

		case BUTTON_RAISING:

					if( delayRead(&delayAntiReboteB1) )
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <debounceB1_update+0xc0>)
 8001194:	f000 f92a 	bl	80013ec <delayRead>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d015      	beq.n	80011ca <debounceB1_update+0xb2>
					{
						if ( !BUTTON_menosTiempo_PRESSED )
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <debounceB1_update+0xbc>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <debounceB1_update+0x9a>
						{
							actualB1State = BUTTON_UP;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <debounceB1_update+0xb8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB1State = BUTTON_DOWN;
						}
					}
					break;
 80011b0:	e00b      	b.n	80011ca <debounceB1_update+0xb2>
							actualB1State = BUTTON_DOWN;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <debounceB1_update+0xb8>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	701a      	strb	r2, [r3, #0]
					break;
 80011b8:	e007      	b.n	80011ca <debounceB1_update+0xb2>
		default:
					break;
 80011ba:	bf00      	nop
 80011bc:	e006      	b.n	80011cc <debounceB1_update+0xb4>
					break;
 80011be:	bf00      	nop
 80011c0:	e004      	b.n	80011cc <debounceB1_update+0xb4>
					break;
 80011c2:	bf00      	nop
 80011c4:	e002      	b.n	80011cc <debounceB1_update+0xb4>
					break;
 80011c6:	bf00      	nop
 80011c8:	e000      	b.n	80011cc <debounceB1_update+0xb4>
					break;
 80011ca:	bf00      	nop
	}
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000280 	.word	0x20000280
 80011d4:	40021800 	.word	0x40021800
 80011d8:	2000025c 	.word	0x2000025c
 80011dc:	20000283 	.word	0x20000283

080011e0 <debounceB2_update>:

void debounceB2_update()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	switch (actualB2State)
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <debounceB2_update+0xb8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d84a      	bhi.n	8001282 <debounceB2_update+0xa2>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <debounceB2_update+0x14>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	08001219 	.word	0x08001219
 80011fc:	08001247 	.word	0x08001247
 8001200:	0800125b 	.word	0x0800125b
	{
		case BUTTON_UP:

					if ( BUTTON_masTiempo_PRESSED )
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <debounceB2_update+0xbc>)
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d03a      	beq.n	8001286 <debounceB2_update+0xa6>
					{
						actualB2State = BUTTON_FALLING;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <debounceB2_update+0xb8>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001216:	e036      	b.n	8001286 <debounceB2_update+0xa6>

		case BUTTON_FALLING:

					if( delayRead(&delayAntiReboteB2) )
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <debounceB2_update+0xc0>)
 800121a:	f000 f8e7 	bl	80013ec <delayRead>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d032      	beq.n	800128a <debounceB2_update+0xaa>
					{
						if (BUTTON_masTiempo_PRESSED )
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <debounceB2_update+0xbc>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <debounceB2_update+0x5e>
						{
							actualB2State = BUTTON_DOWN;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <debounceB2_update+0xb8>)
 8001232:	2202      	movs	r2, #2
 8001234:	701a      	strb	r2, [r3, #0]
							changeState = 2;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <debounceB2_update+0xc4>)
 8001238:	2202      	movs	r2, #2
 800123a:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB2State = BUTTON_UP;
						}
					}
					break;
 800123c:	e025      	b.n	800128a <debounceB2_update+0xaa>
							actualB2State = BUTTON_UP;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <debounceB2_update+0xb8>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
					break;
 8001244:	e021      	b.n	800128a <debounceB2_update+0xaa>

		case BUTTON_DOWN:

					if ( !BUTTON_masTiempo_PRESSED )
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <debounceB2_update+0xbc>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d11d      	bne.n	800128e <debounceB2_update+0xae>
					{
						actualB2State = BUTTON_RAISING;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <debounceB2_update+0xb8>)
 8001254:	2203      	movs	r2, #3
 8001256:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001258:	e019      	b.n	800128e <debounceB2_update+0xae>

		case BUTTON_RAISING:

					if( delayRead(&delayAntiReboteB2) )
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <debounceB2_update+0xc0>)
 800125c:	f000 f8c6 	bl	80013ec <delayRead>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d015      	beq.n	8001292 <debounceB2_update+0xb2>
					{
						if ( !BUTTON_masTiempo_PRESSED )
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <debounceB2_update+0xbc>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <debounceB2_update+0x9a>
						{
							actualB2State = BUTTON_UP;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <debounceB2_update+0xb8>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB2State = BUTTON_DOWN;
						}
					}
					break;
 8001278:	e00b      	b.n	8001292 <debounceB2_update+0xb2>
							actualB2State = BUTTON_DOWN;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <debounceB2_update+0xb8>)
 800127c:	2202      	movs	r2, #2
 800127e:	701a      	strb	r2, [r3, #0]
					break;
 8001280:	e007      	b.n	8001292 <debounceB2_update+0xb2>
		default:
					break;
 8001282:	bf00      	nop
 8001284:	e006      	b.n	8001294 <debounceB2_update+0xb4>
					break;
 8001286:	bf00      	nop
 8001288:	e004      	b.n	8001294 <debounceB2_update+0xb4>
					break;
 800128a:	bf00      	nop
 800128c:	e002      	b.n	8001294 <debounceB2_update+0xb4>
					break;
 800128e:	bf00      	nop
 8001290:	e000      	b.n	8001294 <debounceB2_update+0xb4>
					break;
 8001292:	bf00      	nop
	}
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000281 	.word	0x20000281
 800129c:	40021800 	.word	0x40021800
 80012a0:	20000268 	.word	0x20000268
 80012a4:	20000283 	.word	0x20000283

080012a8 <debounceB3_update>:

void debounceB3_update()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	switch (actualB3State)
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <debounceB3_update+0xb8>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d84a      	bhi.n	800134a <debounceB3_update+0xa2>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <debounceB3_update+0x14>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012e1 	.word	0x080012e1
 80012c4:	0800130f 	.word	0x0800130f
 80012c8:	08001323 	.word	0x08001323
		{
			case BUTTON_UP:

						if ( BSP_PB_GetState(BUTTON_USER) )
 80012cc:	2000      	movs	r0, #0
 80012ce:	f000 faf7 	bl	80018c0 <BSP_PB_GetState>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03a      	beq.n	800134e <debounceB3_update+0xa6>
						{
							actualB3State = BUTTON_FALLING;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <debounceB3_update+0xb8>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
						}
						break;
 80012de:	e036      	b.n	800134e <debounceB3_update+0xa6>

			case BUTTON_FALLING:

						if( delayRead(&delayAntiReboteB3) )
 80012e0:	4820      	ldr	r0, [pc, #128]	; (8001364 <debounceB3_update+0xbc>)
 80012e2:	f000 f883 	bl	80013ec <delayRead>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d032      	beq.n	8001352 <debounceB3_update+0xaa>
						{
							if (BSP_PB_GetState(BUTTON_USER) )
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 fae7 	bl	80018c0 <BSP_PB_GetState>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <debounceB3_update+0x5e>
							{
								actualB3State = BUTTON_DOWN;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <debounceB3_update+0xb8>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	701a      	strb	r2, [r3, #0]
								changeState = 3;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <debounceB3_update+0xc0>)
 8001300:	2203      	movs	r2, #3
 8001302:	701a      	strb	r2, [r3, #0]
							else
							{
								actualB3State = BUTTON_UP;
							}
						}
						break;
 8001304:	e025      	b.n	8001352 <debounceB3_update+0xaa>
								actualB3State = BUTTON_UP;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <debounceB3_update+0xb8>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
						break;
 800130c:	e021      	b.n	8001352 <debounceB3_update+0xaa>

			case BUTTON_DOWN:

						if ( !BSP_PB_GetState(BUTTON_USER) )
 800130e:	2000      	movs	r0, #0
 8001310:	f000 fad6 	bl	80018c0 <BSP_PB_GetState>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d11d      	bne.n	8001356 <debounceB3_update+0xae>
						{
							actualB3State = BUTTON_RAISING;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <debounceB3_update+0xb8>)
 800131c:	2203      	movs	r2, #3
 800131e:	701a      	strb	r2, [r3, #0]
						}
						break;
 8001320:	e019      	b.n	8001356 <debounceB3_update+0xae>

			case BUTTON_RAISING:

						if( delayRead(&delayAntiReboteB3) )
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <debounceB3_update+0xbc>)
 8001324:	f000 f862 	bl	80013ec <delayRead>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d015      	beq.n	800135a <debounceB3_update+0xb2>
						{
							if ( !BSP_PB_GetState(BUTTON_USER) )
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fac6 	bl	80018c0 <BSP_PB_GetState>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <debounceB3_update+0x9a>
							{
								actualB3State = BUTTON_UP;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <debounceB3_update+0xb8>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
							else
							{
								actualB3State = BUTTON_DOWN;
							}
						}
						break;
 8001340:	e00b      	b.n	800135a <debounceB3_update+0xb2>
								actualB3State = BUTTON_DOWN;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <debounceB3_update+0xb8>)
 8001344:	2202      	movs	r2, #2
 8001346:	701a      	strb	r2, [r3, #0]
						break;
 8001348:	e007      	b.n	800135a <debounceB3_update+0xb2>
			default:
						break;
 800134a:	bf00      	nop
 800134c:	e006      	b.n	800135c <debounceB3_update+0xb4>
						break;
 800134e:	bf00      	nop
 8001350:	e004      	b.n	800135c <debounceB3_update+0xb4>
						break;
 8001352:	bf00      	nop
 8001354:	e002      	b.n	800135c <debounceB3_update+0xb4>
						break;
 8001356:	bf00      	nop
 8001358:	e000      	b.n	800135c <debounceB3_update+0xb4>
						break;
 800135a:	bf00      	nop
		}
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000282 	.word	0x20000282
 8001364:	20000274 	.word	0x20000274
 8001368:	20000283 	.word	0x20000283

0800136c <debounceFSM_init>:
//Función: carga el estado inicial
//Entrada: ninguna
//Salida:  ninguna
//Nota: es una función pública porque se llama desde fuera del módulo (main)
void debounceFSM_init()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	delayInit(&delayAntiReboteB1, TIME_ANTIREBOTE);
 8001370:	2128      	movs	r1, #40	; 0x28
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <debounceFSM_init+0x34>)
 8001374:	f000 f820 	bl	80013b8 <delayInit>
	delayInit(&delayAntiReboteB2, TIME_ANTIREBOTE);
 8001378:	2128      	movs	r1, #40	; 0x28
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <debounceFSM_init+0x38>)
 800137c:	f000 f81c 	bl	80013b8 <delayInit>
	delayInit(&delayAntiReboteB3, TIME_ANTIREBOTE);
 8001380:	2128      	movs	r1, #40	; 0x28
 8001382:	4809      	ldr	r0, [pc, #36]	; (80013a8 <debounceFSM_init+0x3c>)
 8001384:	f000 f818 	bl	80013b8 <delayInit>
	actualB1State = BUTTON_UP;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <debounceFSM_init+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	actualB2State = BUTTON_UP;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <debounceFSM_init+0x44>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	actualB3State = BUTTON_UP;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <debounceFSM_init+0x48>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000025c 	.word	0x2000025c
 80013a4:	20000268 	.word	0x20000268
 80013a8:	20000274 	.word	0x20000274
 80013ac:	20000280 	.word	0x20000280
 80013b0:	20000281 	.word	0x20000281
 80013b4:	20000282 	.word	0x20000282

080013b8 <delayInit>:

// Entrada: Puntero al delay y su duración en ms
// Salida: Ninguna
// Función: Inicializa los parámetros internos del delay
void delayInit( delay_t * delay, tick_t duration )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	if((delay != NULL) && (duration > 0))			// Verifica que el puntero sea valido y que la duracion sea un valor positivo
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <delayInit+0x28>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <delayInit+0x28>
	{
		delay->startTime = 0;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
		delay->duration = duration;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	605a      	str	r2, [r3, #4]
		delay->running = false;						// Inicializa el delay detenido
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	721a      	strb	r2, [r3, #8]
	}
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <delayRead>:

// Entrada: Puntero al delay
// Salida: Bool que indica si ya transcurrió el tiempo del delay o no.
// Función: Comprueba si ya transcurrio el tiempo del delay
bool_t delayRead( delay_t * delay )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if((delay != NULL) && (delay > 0))			// Verifica que el puntero sea válido y que la duración sea un valor positivo
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d021      	beq.n	800143e <delayRead+0x52>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01e      	beq.n	800143e <delayRead+0x52>
	{
		if(delay->running)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7a1b      	ldrb	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d010      	beq.n	800142a <delayRead+0x3e>
		{
			if(HAL_GetTick() >= (delay->startTime + delay->duration))
 8001408:	f000 fc06 	bl	8001c18 <HAL_GetTick>
 800140c:	4601      	mov	r1, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4413      	add	r3, r2
 8001418:	4299      	cmp	r1, r3
 800141a:	d304      	bcc.n	8001426 <delayRead+0x3a>
			{
				delay->running = false;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	721a      	strb	r2, [r3, #8]
				return true;
 8001422:	2301      	movs	r3, #1
 8001424:	e00c      	b.n	8001440 <delayRead+0x54>
			}
			else
			{
				return false;
 8001426:	2300      	movs	r3, #0
 8001428:	e00a      	b.n	8001440 <delayRead+0x54>
			}
		}
		else
		{
			delay->startTime = HAL_GetTick();
 800142a:	f000 fbf5 	bl	8001c18 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	601a      	str	r2, [r3, #0]
			delay->running   = true;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	721a      	strb	r2, [r3, #8]
			return false;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <delayRead+0x54>
		}
	}
	else
	{
		return false;
 800143e:	2300      	movs	r3, #0
	}
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <inputsInit>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de las entradas del Sistema
void inputsInit()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f9e0 	bl	8001814 <BSP_PB_Init>

	/* Initialize Button for -Time & +Time */
	RCC->AHB1ENR |= (1<<6); //Habilita puerto G
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <inputsInit+0x64>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <inputsInit+0x64>)
 800145a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145e:	6313      	str	r3, [r2, #48]	; 0x30

	//PG0 -Time
	GPIOG->MODER &=~ (3<<0);   			//00 --> entrada
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <inputsInit+0x68>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <inputsInit+0x68>)
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<0);			//10 --> pull down
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <inputsInit+0x68>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <inputsInit+0x68>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<1);
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <inputsInit+0x68>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <inputsInit+0x68>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	60d3      	str	r3, [r2, #12]

	//PG1 +Time
	GPIOG->MODER &=~ (3<<2);   			//00 --> entrada
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <inputsInit+0x68>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <inputsInit+0x68>)
 800148a:	f023 030c 	bic.w	r3, r3, #12
 800148e:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<2);			//10 --> pull down
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <inputsInit+0x68>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <inputsInit+0x68>)
 8001496:	f023 0304 	bic.w	r3, r3, #4
 800149a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<3);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <inputsInit+0x68>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <inputsInit+0x68>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021800 	.word	0x40021800

080014b4 <outputsInit>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de las salidas del Sistema
void outputsInit()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f927 	bl	800170c <BSP_LED_Init>
	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED2);
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 f924 	bl	800170c <BSP_LED_Init>
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED3);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f000 f921 	bl	800170c <BSP_LED_Init>
	/* Initialize Buzzer */
	RCC->AHB1ENR   |=  (1<<4); //Habilita puerto E <-- para PE2 (buzzer) y PE4 (Rx)
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <outputsInit+0xa0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a21      	ldr	r2, [pc, #132]	; (8001554 <outputsInit+0xa0>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER   &=~ (1<<(pinBuzzer*2+1));
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <outputsInit+0xa4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <outputsInit+0xa4>)
 80014dc:	f023 0320 	bic.w	r3, r3, #32
 80014e0:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |=  (1<<pinBuzzer*2);
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <outputsInit+0xa4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <outputsInit+0xa4>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER  &=~ (1<<pinBuzzer);
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <outputsInit+0xa4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <outputsInit+0xa4>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6053      	str	r3, [r2, #4]
	GPIOE->OSPEEDR &=~ (3<<pinBuzzer*3);
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <outputsInit+0xa4>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <outputsInit+0xa4>)
 8001500:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001504:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR   &=~ (3<<pinBuzzer*3);
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <outputsInit+0xa4>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <outputsInit+0xa4>)
 800150c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001510:	60d3      	str	r3, [r2, #12]
	/* Initialize Disparo Rx */
	GPIOE->MODER   &=~ (1<<(pinRx*2+1));
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <outputsInit+0xa4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <outputsInit+0xa4>)
 8001518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800151c:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |=  (1<<pinRx*2);
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <outputsInit+0xa4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <outputsInit+0xa4>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER  &=~ (1<<pinRx);
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <outputsInit+0xa4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <outputsInit+0xa4>)
 8001530:	f023 0310 	bic.w	r3, r3, #16
 8001534:	6053      	str	r3, [r2, #4]
	GPIOE->OSPEEDR &=~ (3<<pinRx*3);
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <outputsInit+0xa4>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <outputsInit+0xa4>)
 800153c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001540:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR   &=~ (3<<pinRx*3);
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <outputsInit+0xa4>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <outputsInit+0xa4>)
 8001548:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800154c:	60d3      	str	r3, [r2, #12]
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40021000 	.word	0x40021000

0800155c <decreaseTime>:

//Función: disminuye tiempo de Disparo de RX
//Entrada: ninguna
//Salida: ninguna
void decreaseTime()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001560:	2000      	movs	r0, #0
 8001562:	f000 f923 	bl	80017ac <BSP_LED_On>
	if(tiempoDisparo>100) tiempoDisparo = tiempoDisparo-100;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <decreaseTime+0x48>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d905      	bls.n	800157a <decreaseTime+0x1e>
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <decreaseTime+0x48>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	3b64      	subs	r3, #100	; 0x64
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <decreaseTime+0x48>)
 8001578:	801a      	strh	r2, [r3, #0]
	printf("Tiempo de disparo = %dms\r\n",tiempoDisparo);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <decreaseTime+0x48>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <decreaseTime+0x4c>)
 8001582:	f003 fc8d 	bl	8004ea0 <iprintf>
	while(menosTiempo_PRESSED);
 8001586:	bf00      	nop
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <decreaseTime+0x50>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f9      	bne.n	8001588 <decreaseTime+0x2c>
	BSP_LED_Off(LED1);
 8001594:	2000      	movs	r0, #0
 8001596:	f000 f923 	bl	80017e0 <BSP_LED_Off>
	HAL_Delay(100);
 800159a:	2064      	movs	r0, #100	; 0x64
 800159c:	f000 fb48 	bl	8001c30 <HAL_Delay>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	080071c4 	.word	0x080071c4
 80015ac:	40021800 	.word	0x40021800

080015b0 <increaseTime>:

//Función: aumenta tiempo de Disparo de RX
//Entrada: ninguna
//Salida: ninguna
void increaseTime()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f000 f8f9 	bl	80017ac <BSP_LED_On>
	if(tiempoDisparo<3000) tiempoDisparo = tiempoDisparo+100;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <increaseTime+0x4c>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d805      	bhi.n	80015d2 <increaseTime+0x22>
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <increaseTime+0x4c>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	3364      	adds	r3, #100	; 0x64
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <increaseTime+0x4c>)
 80015d0:	801a      	strh	r2, [r3, #0]
	printf("Tiempo de disparo = %dms\r\n",tiempoDisparo);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <increaseTime+0x4c>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <increaseTime+0x50>)
 80015da:	f003 fc61 	bl	8004ea0 <iprintf>
	while(masTiempo_PRESSED);
 80015de:	bf00      	nop
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <increaseTime+0x54>)
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f9      	bne.n	80015e0 <increaseTime+0x30>
	BSP_LED_Off(LED2);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 f8f7 	bl	80017e0 <BSP_LED_Off>
	HAL_Delay(100);
 80015f2:	2064      	movs	r0, #100	; 0x64
 80015f4:	f000 fb1c 	bl	8001c30 <HAL_Delay>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000000 	.word	0x20000000
 8001600:	080071c4 	.word	0x080071c4
 8001604:	40021800 	.word	0x40021800

08001608 <applyRx>:

//Función: ejecución de Disparo de RX, durante el tiempo configurado
//Entrada: ninguna
//Salida: ninguna
void applyRx()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	printf("Disparo ON\r\n");
 800160c:	480e      	ldr	r0, [pc, #56]	; (8001648 <applyRx+0x40>)
 800160e:	f003 fccd 	bl	8004fac <puts>
	BSP_LED_On(LED3);
 8001612:	2002      	movs	r0, #2
 8001614:	f000 f8ca 	bl	80017ac <BSP_LED_On>
	HAL_Delay(tiempoDisparo);
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <applyRx+0x44>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fb07 	bl	8001c30 <HAL_Delay>
	BSP_LED_Off(LED3);
 8001622:	2002      	movs	r0, #2
 8001624:	f000 f8dc 	bl	80017e0 <BSP_LED_Off>
	printf("Disparo OFF\r\n");
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <applyRx+0x48>)
 800162a:	f003 fcbf 	bl	8004fac <puts>
	while(BSP_PB_GetState(BUTTON_USER)); //espera a que suelte disparo
 800162e:	bf00      	nop
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f945 	bl	80018c0 <BSP_PB_GetState>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f9      	bne.n	8001630 <applyRx+0x28>
	HAL_Delay(200);
 800163c:	20c8      	movs	r0, #200	; 0xc8
 800163e:	f000 faf7 	bl	8001c30 <HAL_Delay>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	080071e0 	.word	0x080071e0
 800164c:	20000000 	.word	0x20000000
 8001650:	080071ec 	.word	0x080071ec

08001654 <myUART_init>:
 	 Entradas: ninguna
 	 Salida: booleando TRUE si se inicializó correctamente, FALSE si falló
 	 Es pública porque se llama desde fuera del módulo (main)
*/
bool_t myUART_init()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	UartHandle.Instance        = USART3; //uart 1 para placa discovery
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <myUART_init+0x74>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <myUART_init+0x78>)
 800165c:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = myBaudRate;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <myUART_init+0x74>)
 8001660:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001664:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <myUART_init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <myUART_init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_ODD;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <myUART_init+0x74>)
 8001674:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001678:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <myUART_init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <myUART_init+0x74>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <myUART_init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <myUART_init+0x74>)
 800168e:	f002 faa3 	bl	8003bd8 <HAL_UART_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <myUART_init+0x4e>
	{
		printf("Error en la inicializacion de la UART\n\r");
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <myUART_init+0x7c>)
 800169a:	f003 fc01 	bl	8004ea0 <iprintf>
		return false;
 800169e:	2300      	movs	r3, #0
 80016a0:	e00f      	b.n	80016c2 <myUART_init+0x6e>
	}
	printf("TP final PdM\r\n");
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <myUART_init+0x80>)
 80016a4:	f003 fc82 	bl	8004fac <puts>
	printf("Programacion de Microcontroladores\r\n");
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <myUART_init+0x84>)
 80016aa:	f003 fc7f 	bl	8004fac <puts>
	printf("Carrera de Especializacion en Sistemas Embebidos\r\n");
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <myUART_init+0x88>)
 80016b0:	f003 fc7c 	bl	8004fac <puts>
	printf("Joan Emmanuel Jordan\r\n\r\n");
 80016b4:	480a      	ldr	r0, [pc, #40]	; (80016e0 <myUART_init+0x8c>)
 80016b6:	f003 fc79 	bl	8004fac <puts>
	printf("Tiempo de disparo = 100ms\r\n");
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <myUART_init+0x90>)
 80016bc:	f003 fc76 	bl	8004fac <puts>
	return true;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000284 	.word	0x20000284
 80016cc:	40004800 	.word	0x40004800
 80016d0:	080071fc 	.word	0x080071fc
 80016d4:	08007224 	.word	0x08007224
 80016d8:	08007234 	.word	0x08007234
 80016dc:	08007258 	.word	0x08007258
 80016e0:	0800728c 	.word	0x0800728c
 80016e4:	080072a4 	.word	0x080072a4

080016e8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  // Place your implementation of fputc here
  // e.g. write a character to the USART3 and Loop until the end of transmission
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 80016f0:	1d39      	adds	r1, r7, #4
 80016f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f6:	2201      	movs	r2, #1
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <__io_putchar+0x20>)
 80016fa:	f002 faba 	bl	8003c72 <HAL_UART_Transmit>

  return ch;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000284 	.word	0x20000284

0800170c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10e      	bne.n	800173a <BSP_LED_Init+0x2e>
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <BSP_LED_Init+0x94>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <BSP_LED_Init+0x94>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	6313      	str	r3, [r2, #48]	; 0x30
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <BSP_LED_Init+0x94>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	e00d      	b.n	8001756 <BSP_LED_Init+0x4a>
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <BSP_LED_Init+0x94>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <BSP_LED_Init+0x94>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <BSP_LED_Init+0x94>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <BSP_LED_Init+0x98>)
 800175a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <BSP_LED_Init+0x9c>)
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	f107 0214 	add.w	r2, r7, #20
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fa88 	bl	8002c90 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <BSP_LED_Init+0x9c>)
 8001784:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <BSP_LED_Init+0x98>)
 800178c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	f001 fc40 	bl	8003018 <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	08007310 	.word	0x08007310
 80017a8:	20000004 	.word	0x20000004

080017ac <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <BSP_LED_On+0x2c>)
 80017ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <BSP_LED_On+0x30>)
 80017c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	f001 fc25 	bl	8003018 <HAL_GPIO_WritePin>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000004 	.word	0x20000004
 80017dc:	08007310 	.word	0x08007310

080017e0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <BSP_LED_Off+0x2c>)
 80017ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <BSP_LED_Off+0x30>)
 80017f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	f001 fc0b 	bl	8003018 <HAL_GPIO_WritePin>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000004 	.word	0x20000004
 8001810:	08007310 	.word	0x08007310

08001814 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	4613      	mov	r3, r2
 8001822:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <BSP_PB_Init+0xa4>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <BSP_PB_Init+0xa4>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <BSP_PB_Init+0xa4>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d112      	bne.n	800186c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001854:	2302      	movs	r3, #2
 8001856:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <BSP_PB_Init+0xa8>)
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	f107 020c 	add.w	r2, r7, #12
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fa12 	bl	8002c90 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d11d      	bne.n	80018ae <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800187c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001880:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <BSP_PB_Init+0xa8>)
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	f107 020c 	add.w	r2, r7, #12
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f001 f9fd 	bl	8002c90 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001896:	2328      	movs	r3, #40	; 0x28
 8001898:	b25b      	sxtb	r3, r3
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fed5 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80018a4:	2328      	movs	r3, #40	; 0x28
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 feec 	bl	8002686 <HAL_NVIC_EnableIRQ>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	20000010 	.word	0x20000010

080018c0 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <BSP_PB_GetState+0x28>)
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 fb85 	bl	8002fe8 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000010 	.word	0x20000010

080018ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <SystemInit+0x60>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <SystemInit+0x60>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <SystemInit+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <SystemInit+0x64>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <SystemInit+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <SystemInit+0x64>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <SystemInit+0x64>)
 8001918:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800191c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <SystemInit+0x64>)
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <SystemInit+0x68>)
 8001926:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <SystemInit+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a08      	ldr	r2, [pc, #32]	; (8001950 <SystemInit+0x64>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001932:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <SystemInit+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SystemInit+0x60>)
 800193c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001940:	609a      	str	r2, [r3, #8]
#endif
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	40023800 	.word	0x40023800
 8001954:	24003010 	.word	0x24003010

08001958 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80019ac:	f000 f920 	bl	8001bf0 <HAL_IncTick>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <DMA2_Stream0_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <DMA2_Stream0_IRQHandler+0x14>)
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 ff2b 	bl	8002818 <HAL_DMA_IRQHandler>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000020c 	.word	0x2000020c

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e6:	f002 fdbf 	bl	8004568 <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
	return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0e:	e7fe      	b.n	8001a0e <_exit+0x12>

08001a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
	}

return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e009      	b.n	8001a70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fe3f 	bl	80016e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf1      	blt.n	8001a5c <_write+0x12>
	}
	return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_isatty>:

int _isatty(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f002 fd24 	bl	8004568 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20030000 	.word	0x20030000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	200002c8 	.word	0x200002c8
 8001b54:	20000340 	.word	0x20000340

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_Init+0x34>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_Init+0x34>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_Init+0x34>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_Init+0x34>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f000 fd5f 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7a:	200f      	movs	r0, #15
 8001b7c:	f000 f808 	bl	8001b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b80:	f001 fb3a 	bl	80031f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_InitTick+0x54>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x58>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fd77 	bl	80026a2 <HAL_SYSTICK_Config>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00e      	b.n	8001bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	d80a      	bhi.n	8001bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f000 fd3f 	bl	800264e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd0:	4a06      	ldr	r2, [pc, #24]	; (8001bec <HAL_InitTick+0x5c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000014 	.word	0x20000014
 8001be8:	2000001c 	.word	0x2000001c
 8001bec:	20000018 	.word	0x20000018

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	2000001c 	.word	0x2000001c
 8001c14:	200002cc 	.word	0x200002cc

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200002cc 	.word	0x200002cc

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000001c 	.word	0x2000001c

08001c78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e033      	b.n	8001cf6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f001 f9d8 	bl	800304c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d118      	bne.n	8001ce8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cbe:	f023 0302 	bic.w	r3, r3, #2
 8001cc2:	f043 0202 	orr.w	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fae8 	bl	80022a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ce6:	e001      	b.n	8001cec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_Start+0x1a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e0b2      	b.n	8001e80 <HAL_ADC_Start+0x180>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d018      	beq.n	8001d62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d40:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <HAL_ADC_Start+0x18c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_ADC_Start+0x190>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9a      	lsrs	r2, r3, #18
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d17a      	bne.n	8001e66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dae:	d106      	bne.n	8001dbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f023 0206 	bic.w	r2, r3, #6
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
 8001dbc:	e002      	b.n	8001dc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dcc:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_ADC_Start+0x194>)
 8001dce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dd8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d12a      	bne.n	8001e3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2b      	ldr	r2, [pc, #172]	; (8001e98 <HAL_ADC_Start+0x198>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d015      	beq.n	8001e1c <HAL_ADC_Start+0x11c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a29      	ldr	r2, [pc, #164]	; (8001e9c <HAL_ADC_Start+0x19c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d105      	bne.n	8001e06 <HAL_ADC_Start+0x106>
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_ADC_Start+0x194>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <HAL_ADC_Start+0x1a0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d136      	bne.n	8001e7e <HAL_ADC_Start+0x17e>
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_ADC_Start+0x194>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d130      	bne.n	8001e7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d129      	bne.n	8001e7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	e020      	b.n	8001e7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_ADC_Start+0x198>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d11b      	bne.n	8001e7e <HAL_ADC_Start+0x17e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d114      	bne.n	8001e7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	e00b      	b.n	8001e7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f043 0210 	orr.w	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	20000014 	.word	0x20000014
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	40012300 	.word	0x40012300
 8001e98:	40012000 	.word	0x40012000
 8001e9c:	40012100 	.word	0x40012100
 8001ea0:	40012200 	.word	0x40012200

08001ea4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Stop+0x16>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e021      	b.n	8001efe <HAL_ADC_Stop+0x5a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f26:	d113      	bne.n	8001f50 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f36:	d10b      	bne.n	8001f50 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e063      	b.n	8002018 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f50:	f7ff fe62 	bl	8001c18 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f56:	e021      	b.n	8001f9c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	d01d      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_ADC_PollForConversion+0x6c>
 8001f66:	f7ff fe57 	bl	8001c18 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d212      	bcs.n	8001f9c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d00b      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0204 	orr.w	r2, r3, #4
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e03d      	b.n	8002018 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d1d6      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0212 	mvn.w	r2, #18
 8001fb2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d123      	bne.n	8002016 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11f      	bne.n	8002016 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d111      	bne.n	8002016 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d105      	bne.n	8002016 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x1c>
 8002054:	2302      	movs	r3, #2
 8002056:	e113      	b.n	8002280 <HAL_ADC_ConfigChannel+0x244>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d925      	bls.n	80020b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68d9      	ldr	r1, [r3, #12]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	3b1e      	subs	r3, #30
 800207e:	2207      	movs	r2, #7
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43da      	mvns	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	400a      	ands	r2, r1
 800208c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	4603      	mov	r3, r0
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4403      	add	r3, r0
 80020a6:	3b1e      	subs	r3, #30
 80020a8:	409a      	lsls	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	e022      	b.n	80020fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6919      	ldr	r1, [r3, #16]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	2207      	movs	r2, #7
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	400a      	ands	r2, r1
 80020d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6919      	ldr	r1, [r3, #16]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4403      	add	r3, r0
 80020f0:	409a      	lsls	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d824      	bhi.n	800214c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b05      	subs	r3, #5
 8002114:	221f      	movs	r2, #31
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	400a      	ands	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	3b05      	subs	r3, #5
 800213e:	fa00 f203 	lsl.w	r2, r0, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
 800214a:	e04c      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d824      	bhi.n	800219e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	3b23      	subs	r3, #35	; 0x23
 8002166:	221f      	movs	r2, #31
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43da      	mvns	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	400a      	ands	r2, r1
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	4618      	mov	r0, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b23      	subs	r3, #35	; 0x23
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
 800219c:	e023      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b41      	subs	r3, #65	; 0x41
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b41      	subs	r3, #65	; 0x41
 80021da:	fa00 f203 	lsl.w	r2, r0, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_ADC_ConfigChannel+0x250>)
 80021e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a28      	ldr	r2, [pc, #160]	; (8002290 <HAL_ADC_ConfigChannel+0x254>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10f      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1d8>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b12      	cmp	r3, #18
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_ADC_ConfigChannel+0x254>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12b      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x23a>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_ADC_ConfigChannel+0x258>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x1f4>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b11      	cmp	r3, #17
 800222e:	d122      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_ADC_ConfigChannel+0x258>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d111      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_ADC_ConfigChannel+0x25c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_ADC_ConfigChannel+0x260>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	0c9a      	lsrs	r2, r3, #18
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002268:	e002      	b.n	8002270 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3b01      	subs	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f9      	bne.n	800226a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	40012300 	.word	0x40012300
 8002290:	40012000 	.word	0x40012000
 8002294:	10000012 	.word	0x10000012
 8002298:	20000014 	.word	0x20000014
 800229c:	431bde83 	.word	0x431bde83

080022a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	4b79      	ldr	r3, [pc, #484]	; (8002490 <ADC_Init+0x1f0>)
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	021a      	lsls	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	4a58      	ldr	r2, [pc, #352]	; (8002494 <ADC_Init+0x1f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e00f      	b.n	800239e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800239c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0202 	bic.w	r2, r2, #2
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
 80023b8:	005a      	lsls	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	3b01      	subs	r3, #1
 80023f8:	035a      	lsls	r2, r3, #13
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e007      	b.n	8002414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	3b01      	subs	r3, #1
 8002430:	051a      	lsls	r2, r3, #20
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002456:	025a      	lsls	r2, r3, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	029a      	lsls	r2, r3, #10
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40012300 	.word	0x40012300
 8002494:	0f000001 	.word	0x0f000001

08002498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b4:	4013      	ands	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db0b      	blt.n	8002526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <__NVIC_EnableIRQ+0x38>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2001      	movs	r0, #1
 800251e:	fa00 f202 	lsl.w	r2, r0, r2
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000e100 	.word	0xe000e100

08002538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db0a      	blt.n	8002562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	490c      	ldr	r1, [pc, #48]	; (8002584 <__NVIC_SetPriority+0x4c>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	440b      	add	r3, r1
 800255c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002560:	e00a      	b.n	8002578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4908      	ldr	r1, [pc, #32]	; (8002588 <__NVIC_SetPriority+0x50>)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3b04      	subs	r3, #4
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	440b      	add	r3, r1
 8002576:	761a      	strb	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	bf28      	it	cs
 80025aa:	2304      	movcs	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d902      	bls.n	80025bc <NVIC_EncodePriority+0x30>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3b03      	subs	r3, #3
 80025ba:	e000      	b.n	80025be <NVIC_EncodePriority+0x32>
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43d9      	mvns	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	4313      	orrs	r3, r2
         );
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002604:	d301      	bcc.n	800260a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002606:	2301      	movs	r3, #1
 8002608:	e00f      	b.n	800262a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <SysTick_Config+0x40>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002612:	210f      	movs	r1, #15
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f7ff ff8e 	bl	8002538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <SysTick_Config+0x40>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <SysTick_Config+0x40>)
 8002624:	2207      	movs	r2, #7
 8002626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	e000e010 	.word	0xe000e010

08002638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff29 	bl	8002498 <__NVIC_SetPriorityGrouping>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002660:	f7ff ff3e 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 8002664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7ff ff8e 	bl	800258c <NVIC_EncodePriority>
 8002670:	4602      	mov	r2, r0
 8002672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff5d 	bl	8002538 <__NVIC_SetPriority>
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff31 	bl	80024fc <__NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffa2 	bl	80025f4 <SysTick_Config>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff faa6 	bl	8001c18 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e099      	b.n	800280c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f8:	e00f      	b.n	800271a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fa:	f7ff fa8d 	bl	8001c18 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b05      	cmp	r3, #5
 8002706:	d908      	bls.n	800271a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e078      	b.n	800280c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e8      	bne.n	80026fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_DMA_Init+0x158>)
 8002734:	4013      	ands	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2b04      	cmp	r3, #4
 8002772:	d107      	bne.n	8002784 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	4313      	orrs	r3, r2
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f023 0307 	bic.w	r3, r3, #7
 800279a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d117      	bne.n	80027de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f9e9 	bl	8002b98 <DMA_CheckFifoParam>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027da:	2301      	movs	r3, #1
 80027dc:	e016      	b.n	800280c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f9a0 	bl	8002b2c <DMA_CalcBaseAndBitshift>
 80027ec:	4603      	mov	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	223f      	movs	r2, #63	; 0x3f
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	f010803f 	.word	0xf010803f

08002818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002824:	4b8e      	ldr	r3, [pc, #568]	; (8002a60 <HAL_DMA_IRQHandler+0x248>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a8e      	ldr	r2, [pc, #568]	; (8002a64 <HAL_DMA_IRQHandler+0x24c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	2208      	movs	r2, #8
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01a      	beq.n	8002884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0204 	bic.w	r2, r2, #4
 800286a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2208      	movs	r2, #8
 8002872:	409a      	lsls	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2201      	movs	r2, #1
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2201      	movs	r2, #1
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	f043 0202 	orr.w	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2204      	movs	r2, #4
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	2204      	movs	r2, #4
 80028de:	409a      	lsls	r2, r3
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e8:	f043 0204 	orr.w	r2, r3, #4
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f4:	2210      	movs	r2, #16
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d043      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d03c      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2210      	movs	r2, #16
 8002914:	409a      	lsls	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d018      	beq.n	800295a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
 8002946:	e01f      	b.n	8002988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01b      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
 8002958:	e016      	b.n	8002988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0208 	bic.w	r2, r2, #8
 8002976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	2220      	movs	r2, #32
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 808f 	beq.w	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8087 	beq.w	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	2220      	movs	r2, #32
 80029b0:	409a      	lsls	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d136      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0216 	bic.w	r2, r2, #22
 80029d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x1da>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0208 	bic.w	r2, r2, #8
 8002a00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	223f      	movs	r2, #63	; 0x3f
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d07e      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
        }
        return;
 8002a2e:	e079      	b.n	8002b24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d031      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e02c      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
 8002a5e:	bf00      	nop
 8002a60:	20000014 	.word	0x20000014
 8002a64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d023      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e01e      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10f      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0210 	bic.w	r2, r2, #16
 8002a96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d032      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2205      	movs	r2, #5
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d307      	bcc.n	8002b00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f2      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x2cc>
 8002afe:	e000      	b.n	8002b02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
 8002b22:	e000      	b.n	8002b26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b24:	bf00      	nop
    }
  }
}
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	3b10      	subs	r3, #16
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <DMA_CalcBaseAndBitshift+0x64>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <DMA_CalcBaseAndBitshift+0x68>)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d909      	bls.n	8002b6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	1d1a      	adds	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b6c:	e007      	b.n	8002b7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	aaaaaaab 	.word	0xaaaaaaab
 8002b94:	08007330 	.word	0x08007330

08002b98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11f      	bne.n	8002bf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d856      	bhi.n	8002c66 <DMA_CheckFifoParam+0xce>
 8002bb8:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <DMA_CheckFifoParam+0x28>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002be3 	.word	0x08002be3
 8002bc8:	08002bd1 	.word	0x08002bd1
 8002bcc:	08002c67 	.word	0x08002c67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d046      	beq.n	8002c6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be0:	e043      	b.n	8002c6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bea:	d140      	bne.n	8002c6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf0:	e03d      	b.n	8002c6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfa:	d121      	bne.n	8002c40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d837      	bhi.n	8002c72 <DMA_CheckFifoParam+0xda>
 8002c02:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <DMA_CheckFifoParam+0x70>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c1f 	.word	0x08002c1f
 8002c10:	08002c19 	.word	0x08002c19
 8002c14:	08002c31 	.word	0x08002c31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1c:	e030      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d025      	beq.n	8002c76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2e:	e022      	b.n	8002c76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c38:	d11f      	bne.n	8002c7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c3e:	e01c      	b.n	8002c7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d903      	bls.n	8002c4e <DMA_CheckFifoParam+0xb6>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d003      	beq.n	8002c54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c4c:	e018      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      break;
 8002c52:	e015      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e00b      	b.n	8002c7e <DMA_CheckFifoParam+0xe6>
      break;
 8002c66:	bf00      	nop
 8002c68:	e00a      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e008      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e006      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      break;
 8002c72:	bf00      	nop
 8002c74:	e004      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <DMA_CheckFifoParam+0xe8>
      break;
 8002c7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e177      	b.n	8002f9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	f040 8166 	bne.w	8002f96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d005      	beq.n	8002ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d130      	bne.n	8002d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 0201 	and.w	r2, r3, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d017      	beq.n	8002d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d123      	bne.n	8002dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80c0 	beq.w	8002f96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_GPIO_Init+0x324>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <HAL_GPIO_Init+0x324>)
 8002e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e24:	6453      	str	r3, [r2, #68]	; 0x44
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <HAL_GPIO_Init+0x324>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e32:	4a61      	ldr	r2, [pc, #388]	; (8002fb8 <HAL_GPIO_Init+0x328>)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	220f      	movs	r2, #15
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_GPIO_Init+0x32c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d037      	beq.n	8002ece <HAL_GPIO_Init+0x23e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a57      	ldr	r2, [pc, #348]	; (8002fc0 <HAL_GPIO_Init+0x330>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d031      	beq.n	8002eca <HAL_GPIO_Init+0x23a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a56      	ldr	r2, [pc, #344]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d02b      	beq.n	8002ec6 <HAL_GPIO_Init+0x236>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a55      	ldr	r2, [pc, #340]	; (8002fc8 <HAL_GPIO_Init+0x338>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d025      	beq.n	8002ec2 <HAL_GPIO_Init+0x232>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a54      	ldr	r2, [pc, #336]	; (8002fcc <HAL_GPIO_Init+0x33c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <HAL_GPIO_Init+0x22e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a53      	ldr	r2, [pc, #332]	; (8002fd0 <HAL_GPIO_Init+0x340>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x22a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_GPIO_Init+0x344>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x226>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <HAL_GPIO_Init+0x348>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x222>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a50      	ldr	r2, [pc, #320]	; (8002fdc <HAL_GPIO_Init+0x34c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x21e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a4f      	ldr	r2, [pc, #316]	; (8002fe0 <HAL_GPIO_Init+0x350>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x21a>
 8002ea6:	2309      	movs	r3, #9
 8002ea8:	e012      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002eaa:	230a      	movs	r3, #10
 8002eac:	e010      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	e00e      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	e00c      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	e00a      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002eba:	2305      	movs	r3, #5
 8002ebc:	e008      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e004      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e002      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_GPIO_Init+0x240>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	f002 0203 	and.w	r2, r2, #3
 8002ed6:	0092      	lsls	r2, r2, #2
 8002ed8:	4093      	lsls	r3, r2
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee0:	4935      	ldr	r1, [pc, #212]	; (8002fb8 <HAL_GPIO_Init+0x328>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f12:	4a34      	ldr	r2, [pc, #208]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f18:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f3c:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f42:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f66:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <HAL_GPIO_Init+0x354>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	f67f ae84 	bls.w	8002cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40021400 	.word	0x40021400
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40021c00 	.word	0x40021c00
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40022400 	.word	0x40022400
 8002fe4:	40013c00 	.word	0x40013c00

08002fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e001      	b.n	800300a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003034:	e003      	b.n	800303e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_ADC_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* ADC1 Periph clock enable */
  ADCx_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	4a39      	ldr	r2, [pc, #228]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 800305e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003062:	6453      	str	r3, [r2, #68]	; 0x44
 8003064:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
  /* Enable GPIO clock ****************************************/
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4a32      	ldr	r2, [pc, #200]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6313      	str	r3, [r2, #48]	; 0x30
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
  /* Enable DMA2 clock */
  DMAx_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 8003096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800309a:	6313      	str	r3, [r2, #48]	; 0x30
 800309c:	4b29      	ldr	r3, [pc, #164]	; (8003144 <HAL_ADC_MspInit+0xf8>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* ADC Channel GPIO pin configuration */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
 80030a8:	2308      	movs	r3, #8
 80030aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ac:	2303      	movs	r3, #3
 80030ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	4823      	ldr	r0, [pc, #140]	; (8003148 <HAL_ADC_MspInit+0xfc>)
 80030bc:	f7ff fde8 	bl	8002c90 <HAL_GPIO_Init>

  /*##-3- Configure the DMA streams ##########################################*/
  /* Set the parameters to be configured */
  hdma_adc.Instance = ADCx_DMA_STREAM;
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030c2:	4a23      	ldr	r2, [pc, #140]	; (8003150 <HAL_ADC_MspInit+0x104>)
 80030c4:	601a      	str	r2, [r3, #0]
  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]
  hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030cc:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b1e      	ldr	r3, [pc, #120]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030de:	611a      	str	r2, [r3, #16]
  hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030e6:	615a      	str	r2, [r3, #20]
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030ee:	619a      	str	r2, [r3, #24]
  hdma_adc.Init.Mode = DMA_CIRCULAR;
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f6:	61da      	str	r2, [r3, #28]
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_ADC_MspInit+0x100>)
 80030fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030fe:	621a      	str	r2, [r3, #32]
  hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_ADC_MspInit+0x100>)
 8003102:	2200      	movs	r2, #0
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_ADC_MspInit+0x100>)
 8003108:	2201      	movs	r2, #1
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_ADC_MspInit+0x100>)
 800310e:	2200      	movs	r2, #0
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_ADC_MspInit+0x100>)
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30

  HAL_DMA_Init(&hdma_adc);
 8003118:	480c      	ldr	r0, [pc, #48]	; (800314c <HAL_ADC_MspInit+0x100>)
 800311a:	f7ff facf 	bl	80026bc <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_ADC_MspInit+0x100>)
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
 8003124:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_ADC_MspInit+0x100>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6393      	str	r3, [r2, #56]	; 0x38

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2038      	movs	r0, #56	; 0x38
 8003130:	f7ff fa8d 	bl	800264e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 8003134:	2038      	movs	r0, #56	; 0x38
 8003136:	f7ff faa6 	bl	8002686 <HAL_NVIC_EnableIRQ>
}
 800313a:	bf00      	nop
 800313c:	3728      	adds	r7, #40	; 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000
 800314c:	200002d0 	.word	0x200002d0
 8003150:	40026410 	.word	0x40026410

08003154 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	6313      	str	r3, [r2, #48]	; 0x30
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	6313      	str	r3, [r2, #48]	; 0x30
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 800319e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a2:	6413      	str	r3, [r2, #64]	; 0x40
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_UART_MspInit+0x9c>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80031c2:	2307      	movs	r3, #7
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4809      	ldr	r0, [pc, #36]	; (80031f4 <HAL_UART_MspInit+0xa0>)
 80031ce:	f7ff fd5f 	bl	8002c90 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80031d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80031d8:	2307      	movs	r3, #7
 80031da:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80031dc:	f107 0314 	add.w	r3, r7, #20
 80031e0:	4619      	mov	r1, r3
 80031e2:	4804      	ldr	r0, [pc, #16]	; (80031f4 <HAL_UART_MspInit+0xa0>)
 80031e4:	f7ff fd54 	bl	8002c90 <HAL_GPIO_Init>
}
 80031e8:	bf00      	nop
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40020c00 	.word	0x40020c00

080031f8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0

}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_PWREx_EnableOverDrive+0x90>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_PWREx_EnableOverDrive+0x90>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_PWREx_EnableOverDrive+0x90>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_PWREx_EnableOverDrive+0x94>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003234:	f7fe fcf0 	bl	8001c18 <HAL_GetTick>
 8003238:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800323a:	e009      	b.n	8003250 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800323c:	f7fe fcec 	bl	8001c18 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324a:	d901      	bls.n	8003250 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e01f      	b.n	8003290 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d1ee      	bne.n	800323c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003264:	f7fe fcd8 	bl	8001c18 <HAL_GetTick>
 8003268:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800326a:	e009      	b.n	8003280 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800326c:	f7fe fcd4 	bl	8001c18 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800327a:	d901      	bls.n	8003280 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e007      	b.n	8003290 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800328c:	d1ee      	bne.n	800326c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	420e0040 	.word	0x420e0040
 80032a0:	40007000 	.word	0x40007000
 80032a4:	420e0044 	.word	0x420e0044

080032a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e267      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d075      	beq.n	80033b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d00c      	beq.n	80032ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d112      	bne.n	8003304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4b82      	ldr	r3, [pc, #520]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ea:	d10b      	bne.n	8003304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	4b7e      	ldr	r3, [pc, #504]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d05b      	beq.n	80033b0 <HAL_RCC_OscConfig+0x108>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d157      	bne.n	80033b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e242      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d106      	bne.n	800331c <HAL_RCC_OscConfig+0x74>
 800330e:	4b76      	ldr	r3, [pc, #472]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a75      	ldr	r2, [pc, #468]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xb0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x98>
 8003326:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6f      	ldr	r2, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6c      	ldr	r2, [pc, #432]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xb0>
 8003340:	4b69      	ldr	r3, [pc, #420]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a68      	ldr	r2, [pc, #416]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a65      	ldr	r2, [pc, #404]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fc5a 	bl	8001c18 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fc56 	bl	8001c18 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e207      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xc0>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fc46 	bl	8001c18 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe fc42 	bl	8001c18 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1f3      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0xe8>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033be:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x152>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1c7      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4937      	ldr	r1, [pc, #220]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCC_OscConfig+0x244>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fe fbfb 	bl	8001c18 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003426:	f7fe fbf7 	bl	8001c18 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a8      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4925      	ldr	r1, [pc, #148]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_OscConfig+0x244>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fbda 	bl	8001c18 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe fbd6 	bl	8001c18 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e187      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d036      	beq.n	8003500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_RCC_OscConfig+0x248>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe fbba 	bl	8001c18 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fe fbb6 	bl	8001c18 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e167      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x200>
 80034c6:	e01b      	b.n	8003500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_OscConfig+0x248>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ce:	f7fe fba3 	bl	8001c18 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	e00e      	b.n	80034f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d6:	f7fe fb9f 	bl	8001c18 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d907      	bls.n	80034f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e150      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	42470000 	.word	0x42470000
 80034f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ea      	bne.n	80034d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8097 	beq.w	800363c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b81      	ldr	r3, [pc, #516]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b7d      	ldr	r3, [pc, #500]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a7c      	ldr	r2, [pc, #496]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b7a      	ldr	r3, [pc, #488]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	4b77      	ldr	r3, [pc, #476]	; (800371c <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d118      	bne.n	800357c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354a:	4b74      	ldr	r3, [pc, #464]	; (800371c <HAL_RCC_OscConfig+0x474>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a73      	ldr	r2, [pc, #460]	; (800371c <HAL_RCC_OscConfig+0x474>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fe fb5f 	bl	8001c18 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fe fb5b 	bl	8001c18 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e10c      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCC_OscConfig+0x474>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x2ea>
 8003584:	4b64      	ldr	r3, [pc, #400]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a63      	ldr	r2, [pc, #396]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x324>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x30c>
 800359a:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a5e      	ldr	r2, [pc, #376]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x324>
 80035b4:	4b58      	ldr	r3, [pc, #352]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a57      	ldr	r2, [pc, #348]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
 80035c0:	4b55      	ldr	r3, [pc, #340]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a54      	ldr	r2, [pc, #336]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f023 0304 	bic.w	r3, r3, #4
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fe fb20 	bl	8001c18 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe fb1c 	bl	8001c18 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0cb      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b49      	ldr	r3, [pc, #292]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCC_OscConfig+0x334>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7fe fb0a 	bl	8001c18 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fe fb06 	bl	8001c18 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0b5      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ee      	bne.n	8003608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b39      	ldr	r3, [pc, #228]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a38      	ldr	r2, [pc, #224]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a1 	beq.w	8003788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003646:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b08      	cmp	r3, #8
 8003650:	d05c      	beq.n	800370c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d141      	bne.n	80036de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b31      	ldr	r3, [pc, #196]	; (8003720 <HAL_RCC_OscConfig+0x478>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe fada 	bl	8001c18 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe fad6 	bl	8001c18 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e087      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	491b      	ldr	r1, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x478>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fe faaf 	bl	8001c18 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036be:	f7fe faab 	bl	8001c18 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e05c      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x416>
 80036dc:	e054      	b.n	8003788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_RCC_OscConfig+0x478>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fa98 	bl	8001c18 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fa94 	bl	8001c18 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e045      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_OscConfig+0x470>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x444>
 800370a:	e03d      	b.n	8003788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e038      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
 8003720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x4ec>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d028      	beq.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d121      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d11a      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003754:	4013      	ands	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800375a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	3b01      	subs	r3, #1
 800376e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0cc      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b68      	ldr	r3, [pc, #416]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d90c      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b8      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ec:	4b59      	ldr	r3, [pc, #356]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a58      	ldr	r2, [pc, #352]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003804:	4b53      	ldr	r3, [pc, #332]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a52      	ldr	r2, [pc, #328]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800380e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	494d      	ldr	r1, [pc, #308]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d044      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d119      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d003      	beq.n	8003856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	2b03      	cmp	r3, #3
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e067      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b37      	ldr	r3, [pc, #220]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4934      	ldr	r1, [pc, #208]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003888:	f7fe f9c6 	bl	8001c18 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fe f9c2 	bl	8001c18 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e04f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d20c      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e032      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4916      	ldr	r1, [pc, #88]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	490e      	ldr	r1, [pc, #56]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800391e:	f000 f821 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003922:	4602      	mov	r2, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	490a      	ldr	r1, [pc, #40]	; (8003958 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	5ccb      	ldrb	r3, [r1, r3]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe f926 	bl	8001b90 <HAL_InitTick>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023c00 	.word	0x40023c00
 8003954:	40023800 	.word	0x40023800
 8003958:	08007318 	.word	0x08007318
 800395c:	20000014 	.word	0x20000014
 8003960:	20000018 	.word	0x20000018

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b094      	sub	sp, #80	; 0x50
 800396a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	647b      	str	r3, [r7, #68]	; 0x44
 8003970:	2300      	movs	r3, #0
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003974:	2300      	movs	r3, #0
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800397c:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d00d      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003988:	2b08      	cmp	r3, #8
 800398a:	f200 80e1 	bhi.w	8003b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x34>
 8003992:	2b04      	cmp	r3, #4
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x3a>
 8003996:	e0db      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800399a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800399c:	e0db      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800399e:	4b73      	ldr	r3, [pc, #460]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80039a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a2:	e0d8      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a4:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ae:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	2200      	movs	r2, #0
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
 80039ce:	2300      	movs	r3, #0
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34
 80039d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	0159      	lsls	r1, r3, #5
 80039e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e8:	0150      	lsls	r0, r2, #5
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4621      	mov	r1, r4
 80039f0:	1a51      	subs	r1, r2, r1
 80039f2:	6139      	str	r1, [r7, #16]
 80039f4:	4629      	mov	r1, r5
 80039f6:	eb63 0301 	sbc.w	r3, r3, r1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a08:	4659      	mov	r1, fp
 8003a0a:	018b      	lsls	r3, r1, #6
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a12:	4651      	mov	r1, sl
 8003a14:	018a      	lsls	r2, r1, #6
 8003a16:	4651      	mov	r1, sl
 8003a18:	ebb2 0801 	subs.w	r8, r2, r1
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a36:	4690      	mov	r8, r2
 8003a38:	4699      	mov	r9, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	eb18 0303 	adds.w	r3, r8, r3
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	462b      	mov	r3, r5
 8003a44:	eb49 0303 	adc.w	r3, r9, r3
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a56:	4629      	mov	r1, r5
 8003a58:	024b      	lsls	r3, r1, #9
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a60:	4621      	mov	r1, r4
 8003a62:	024a      	lsls	r2, r1, #9
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a74:	f7fd f8c8 	bl	8000c08 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a80:	e058      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
 8003a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	f04f 0000 	mov.w	r0, #0
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	0159      	lsls	r1, r3, #5
 8003aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aae:	0150      	lsls	r0, r2, #5
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aba:	4649      	mov	r1, r9
 8003abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	00eb      	lsls	r3, r5, #3
 8003ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aea:	00e2      	lsls	r2, r4, #3
 8003aec:	4614      	mov	r4, r2
 8003aee:	461d      	mov	r5, r3
 8003af0:	4643      	mov	r3, r8
 8003af2:	18e3      	adds	r3, r4, r3
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	464b      	mov	r3, r9
 8003af8:	eb45 0303 	adc.w	r3, r5, r3
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	028b      	lsls	r3, r1, #10
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b14:	4621      	mov	r1, r4
 8003b16:	028a      	lsls	r2, r1, #10
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b28:	f7fd f86e 	bl	8000c08 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4613      	mov	r3, r2
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3750      	adds	r7, #80	; 0x50
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000014 	.word	0x20000014

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b8c:	f7ff fff0 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0a9b      	lsrs	r3, r3, #10
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	08007328 	.word	0x08007328

08003bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb4:	f7ff ffdc 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0b5b      	lsrs	r3, r3, #13
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08007328 	.word	0x08007328

08003bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e03f      	b.n	8003c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff faa8 	bl	8003154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f929 	bl	8003e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af02      	add	r7, sp, #8
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d17c      	bne.n	8003d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Transmit+0x2c>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e075      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit+0x3e>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e06e      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc6:	f7fd ffa7 	bl	8001c18 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d04:	e02a      	b.n	8003d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f840 	bl	8003d96 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e036      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cf      	bne.n	8003d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	; 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f810 	bl	8003d96 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b090      	sub	sp, #64	; 0x40
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da6:	e050      	b.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d04c      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003db6:	f7fd ff2f 	bl	8001c18 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d241      	bcs.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de6:	637a      	str	r2, [r7, #52]	; 0x34
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e5      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1a:	623a      	str	r2, [r7, #32]
 8003e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00f      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d09f      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3740      	adds	r7, #64	; 0x40
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b0c0      	sub	sp, #256	; 0x100
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	68d9      	ldr	r1, [r3, #12]
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	ea40 0301 	orr.w	r3, r0, r1
 8003e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ecc:	f021 010c 	bic.w	r1, r1, #12
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eda:	430b      	orrs	r3, r1
 8003edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	6999      	ldr	r1, [r3, #24]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	ea40 0301 	orr.w	r3, r0, r1
 8003efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b8f      	ldr	r3, [pc, #572]	; (8004140 <UART_SetConfig+0x2cc>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d005      	beq.n	8003f14 <UART_SetConfig+0xa0>
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b8d      	ldr	r3, [pc, #564]	; (8004144 <UART_SetConfig+0x2d0>)
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d104      	bne.n	8003f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7ff fe4c 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 8003f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f1c:	e003      	b.n	8003f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f1e:	f7ff fe33 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8003f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	f040 810c 	bne.w	800414c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f46:	4622      	mov	r2, r4
 8003f48:	462b      	mov	r3, r5
 8003f4a:	1891      	adds	r1, r2, r2
 8003f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f4e:	415b      	adcs	r3, r3
 8003f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f56:	4621      	mov	r1, r4
 8003f58:	eb12 0801 	adds.w	r8, r2, r1
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	eb43 0901 	adc.w	r9, r3, r1
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f76:	4690      	mov	r8, r2
 8003f78:	4699      	mov	r9, r3
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	eb18 0303 	adds.w	r3, r8, r3
 8003f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb49 0303 	adc.w	r3, r9, r3
 8003f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	18db      	adds	r3, r3, r3
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa8:	4613      	mov	r3, r2
 8003faa:	eb42 0303 	adc.w	r3, r2, r3
 8003fae:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fb8:	f7fc fe26 	bl	8000c08 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4b61      	ldr	r3, [pc, #388]	; (8004148 <UART_SetConfig+0x2d4>)
 8003fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	011c      	lsls	r4, r3, #4
 8003fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fec:	4641      	mov	r1, r8
 8003fee:	eb12 0a01 	adds.w	sl, r2, r1
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400c:	4692      	mov	sl, r2
 800400e:	469b      	mov	fp, r3
 8004010:	4643      	mov	r3, r8
 8004012:	eb1a 0303 	adds.w	r3, sl, r3
 8004016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800401a:	464b      	mov	r3, r9
 800401c:	eb4b 0303 	adc.w	r3, fp, r3
 8004020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004038:	460b      	mov	r3, r1
 800403a:	18db      	adds	r3, r3, r3
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
 800403e:	4613      	mov	r3, r2
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800404a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800404e:	f7fc fddb 	bl	8000c08 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4611      	mov	r1, r2
 8004058:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <UART_SetConfig+0x2d4>)
 800405a:	fba3 2301 	umull	r2, r3, r3, r1
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2264      	movs	r2, #100	; 0x64
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	1acb      	subs	r3, r1, r3
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <UART_SetConfig+0x2d4>)
 8004070:	fba3 2302 	umull	r2, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800407c:	441c      	add	r4, r3
 800407e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800408c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	1891      	adds	r1, r2, r2
 8004096:	63b9      	str	r1, [r7, #56]	; 0x38
 8004098:	415b      	adcs	r3, r3
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040a0:	4641      	mov	r1, r8
 80040a2:	1851      	adds	r1, r2, r1
 80040a4:	6339      	str	r1, [r7, #48]	; 0x30
 80040a6:	4649      	mov	r1, r9
 80040a8:	414b      	adcs	r3, r1
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040b8:	4659      	mov	r1, fp
 80040ba:	00cb      	lsls	r3, r1, #3
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c2:	4651      	mov	r1, sl
 80040c4:	00ca      	lsls	r2, r1, #3
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	4642      	mov	r2, r8
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d4:	464b      	mov	r3, r9
 80040d6:	460a      	mov	r2, r1
 80040d8:	eb42 0303 	adc.w	r3, r2, r3
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040f4:	460b      	mov	r3, r1
 80040f6:	18db      	adds	r3, r3, r3
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fa:	4613      	mov	r3, r2
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800410a:	f7fc fd7d 	bl	8000c08 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <UART_SetConfig+0x2d4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <UART_SetConfig+0x2d4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 0207 	and.w	r2, r3, #7
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4422      	add	r2, r4
 800413a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800413c:	e105      	b.n	800434a <UART_SetConfig+0x4d6>
 800413e:	bf00      	nop
 8004140:	40011000 	.word	0x40011000
 8004144:	40011400 	.word	0x40011400
 8004148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800415a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800415e:	4642      	mov	r2, r8
 8004160:	464b      	mov	r3, r9
 8004162:	1891      	adds	r1, r2, r2
 8004164:	6239      	str	r1, [r7, #32]
 8004166:	415b      	adcs	r3, r3
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
 800416a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800416e:	4641      	mov	r1, r8
 8004170:	1854      	adds	r4, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb43 0501 	adc.w	r5, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	00eb      	lsls	r3, r5, #3
 8004182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004186:	00e2      	lsls	r2, r4, #3
 8004188:	4614      	mov	r4, r2
 800418a:	461d      	mov	r5, r3
 800418c:	4643      	mov	r3, r8
 800418e:	18e3      	adds	r3, r4, r3
 8004190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004194:	464b      	mov	r3, r9
 8004196:	eb45 0303 	adc.w	r3, r5, r3
 800419a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ba:	4629      	mov	r1, r5
 80041bc:	008b      	lsls	r3, r1, #2
 80041be:	4621      	mov	r1, r4
 80041c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c4:	4621      	mov	r1, r4
 80041c6:	008a      	lsls	r2, r1, #2
 80041c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041cc:	f7fc fd1c 	bl	8000c08 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4b60      	ldr	r3, [pc, #384]	; (8004358 <UART_SetConfig+0x4e4>)
 80041d6:	fba3 2302 	umull	r2, r3, r3, r2
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	011c      	lsls	r4, r3, #4
 80041de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	1891      	adds	r1, r2, r2
 80041f6:	61b9      	str	r1, [r7, #24]
 80041f8:	415b      	adcs	r3, r3
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004200:	4641      	mov	r1, r8
 8004202:	1851      	adds	r1, r2, r1
 8004204:	6139      	str	r1, [r7, #16]
 8004206:	4649      	mov	r1, r9
 8004208:	414b      	adcs	r3, r1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004218:	4659      	mov	r1, fp
 800421a:	00cb      	lsls	r3, r1, #3
 800421c:	4651      	mov	r1, sl
 800421e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004222:	4651      	mov	r1, sl
 8004224:	00ca      	lsls	r2, r1, #3
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	4603      	mov	r3, r0
 800422c:	4642      	mov	r2, r8
 800422e:	189b      	adds	r3, r3, r2
 8004230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004234:	464b      	mov	r3, r9
 8004236:	460a      	mov	r2, r1
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	67bb      	str	r3, [r7, #120]	; 0x78
 800424a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004258:	4649      	mov	r1, r9
 800425a:	008b      	lsls	r3, r1, #2
 800425c:	4641      	mov	r1, r8
 800425e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004262:	4641      	mov	r1, r8
 8004264:	008a      	lsls	r2, r1, #2
 8004266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800426a:	f7fc fccd 	bl	8000c08 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <UART_SetConfig+0x4e4>)
 8004274:	fba3 1302 	umull	r1, r3, r3, r2
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	2164      	movs	r1, #100	; 0x64
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	3332      	adds	r3, #50	; 0x32
 8004286:	4a34      	ldr	r2, [pc, #208]	; (8004358 <UART_SetConfig+0x4e4>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004292:	441c      	add	r4, r3
 8004294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004298:	2200      	movs	r2, #0
 800429a:	673b      	str	r3, [r7, #112]	; 0x70
 800429c:	677a      	str	r2, [r7, #116]	; 0x74
 800429e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042a2:	4642      	mov	r2, r8
 80042a4:	464b      	mov	r3, r9
 80042a6:	1891      	adds	r1, r2, r2
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	415b      	adcs	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b2:	4641      	mov	r1, r8
 80042b4:	1851      	adds	r1, r2, r1
 80042b6:	6039      	str	r1, [r7, #0]
 80042b8:	4649      	mov	r1, r9
 80042ba:	414b      	adcs	r3, r1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ca:	4659      	mov	r1, fp
 80042cc:	00cb      	lsls	r3, r1, #3
 80042ce:	4651      	mov	r1, sl
 80042d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d4:	4651      	mov	r1, sl
 80042d6:	00ca      	lsls	r2, r1, #3
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	4603      	mov	r3, r0
 80042de:	4642      	mov	r2, r8
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e4:	464b      	mov	r3, r9
 80042e6:	460a      	mov	r2, r1
 80042e8:	eb42 0303 	adc.w	r3, r2, r3
 80042ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	663b      	str	r3, [r7, #96]	; 0x60
 80042f8:	667a      	str	r2, [r7, #100]	; 0x64
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004306:	4649      	mov	r1, r9
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	4641      	mov	r1, r8
 800430c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004310:	4641      	mov	r1, r8
 8004312:	008a      	lsls	r2, r1, #2
 8004314:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004318:	f7fc fc76 	bl	8000c08 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <UART_SetConfig+0x4e4>)
 8004322:	fba3 1302 	umull	r1, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2164      	movs	r1, #100	; 0x64
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	; 0x32
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <UART_SetConfig+0x4e4>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4422      	add	r2, r4
 8004348:	609a      	str	r2, [r3, #8]
}
 800434a:	bf00      	nop
 800434c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	51eb851f 	.word	0x51eb851f

0800435c <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
		 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
		 handled in milliseconds basis.
	   - Set NVIC Group Priority to 4
	   - Low Level Initialization
	 */
	HAL_Init();
 8004362:	f7fd fbf9 	bl	8001b58 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8004366:	f000 f86d 	bl	8004444 <SystemClock_Config>

	/* Initialize Inputs */
	inputsInit();
 800436a:	f7fd f86d 	bl	8001448 <inputsInit>

	/* Initialize Outputs */
	outputsInit();
 800436e:	f7fd f8a1 	bl	80014b4 <outputsInit>

	/* Initialize FSM */
	debounceFSM_init();
 8004372:	f7fc fffb 	bl	800136c <debounceFSM_init>
					  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	  - Stop Bit    = One Stop bit
	  - Parity      = ODD parity
	  - BaudRate    = 9600 baud
	  - Hardware flow control disabled (RTS and CTS signals) */
	myUART_init();
 8004376:	f7fd f96d 	bl	8001654 <myUART_init>

	/* Initialize ADC */
	myADC_init();
 800437a:	f7fc fdc7 	bl	8000f0c <myADC_init>

	/* Infinite loop */
	bool_t error = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	71bb      	strb	r3, [r7, #6]
	uint8_t state = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	717b      	strb	r3, [r7, #5]
	debounceState_t mainState = s_rest;
 8004386:	2300      	movs	r3, #0
 8004388:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		switch (mainState)
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d855      	bhi.n	800443c <main+0xe0>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <main+0x3c>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043ad 	.word	0x080043ad
 800439c:	080043ff 	.word	0x080043ff
 80043a0:	08004409 	.word	0x08004409
 80043a4:	08004413 	.word	0x08004413
 80043a8:	0800442d 	.word	0x0800442d
		{
			case s_rest:

					error = myADC_update();
 80043ac:	f7fc fe20 	bl	8000ff0 <myADC_update>
 80043b0:	4603      	mov	r3, r0
 80043b2:	71bb      	strb	r3, [r7, #6]
					if(error==0)
 80043b4:	79bb      	ldrb	r3, [r7, #6]
 80043b6:	f083 0301 	eor.w	r3, r3, #1
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <main+0x9c>
					{
						state = debounceFSM_update();
 80043c0:	f7fc fe98 	bl	80010f4 <debounceFSM_update>
 80043c4:	4603      	mov	r3, r0
 80043c6:	717b      	strb	r3, [r7, #5]
						if(state==0) 		mainState = s_rest;
 80043c8:	797b      	ldrb	r3, [r7, #5]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <main+0x78>
 80043ce:	2300      	movs	r3, #0
 80043d0:	71fb      	strb	r3, [r7, #7]
						else if(state==1) 	mainState = s_decreaseTime;
						else if(state==2)	mainState = s_increaseTime;
						else if(state==3)   mainState = s_Rx;
					}
					else mainState = s_alarm;
					break;
 80043d2:	e030      	b.n	8004436 <main+0xda>
						else if(state==1) 	mainState = s_decreaseTime;
 80043d4:	797b      	ldrb	r3, [r7, #5]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <main+0x84>
 80043da:	2301      	movs	r3, #1
 80043dc:	71fb      	strb	r3, [r7, #7]
					break;
 80043de:	e02a      	b.n	8004436 <main+0xda>
						else if(state==2)	mainState = s_increaseTime;
 80043e0:	797b      	ldrb	r3, [r7, #5]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d102      	bne.n	80043ec <main+0x90>
 80043e6:	2302      	movs	r3, #2
 80043e8:	71fb      	strb	r3, [r7, #7]
					break;
 80043ea:	e024      	b.n	8004436 <main+0xda>
						else if(state==3)   mainState = s_Rx;
 80043ec:	797b      	ldrb	r3, [r7, #5]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d121      	bne.n	8004436 <main+0xda>
 80043f2:	2304      	movs	r3, #4
 80043f4:	71fb      	strb	r3, [r7, #7]
					break;
 80043f6:	e01e      	b.n	8004436 <main+0xda>
					else mainState = s_alarm;
 80043f8:	2303      	movs	r3, #3
 80043fa:	71fb      	strb	r3, [r7, #7]
					break;
 80043fc:	e01b      	b.n	8004436 <main+0xda>

			case s_decreaseTime:

					decreaseTime();
 80043fe:	f7fd f8ad 	bl	800155c <decreaseTime>
					mainState = s_rest;
 8004402:	2300      	movs	r3, #0
 8004404:	71fb      	strb	r3, [r7, #7]
					break;
 8004406:	e019      	b.n	800443c <main+0xe0>

			case s_increaseTime:

					increaseTime();
 8004408:	f7fd f8d2 	bl	80015b0 <increaseTime>
					mainState = s_rest;
 800440c:	2300      	movs	r3, #0
 800440e:	71fb      	strb	r3, [r7, #7]
					break;
 8004410:	e014      	b.n	800443c <main+0xe0>

			case s_alarm:

					error = myADC_update();
 8004412:	f7fc fded 	bl	8000ff0 <myADC_update>
 8004416:	4603      	mov	r3, r0
 8004418:	71bb      	strb	r3, [r7, #6]
					if(error==0) mainState = s_rest;
 800441a:	79bb      	ldrb	r3, [r7, #6]
 800441c:	f083 0301 	eor.w	r3, r3, #1
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <main+0xde>
 8004426:	2300      	movs	r3, #0
 8004428:	71fb      	strb	r3, [r7, #7]
					break;
 800442a:	e006      	b.n	800443a <main+0xde>

			case s_Rx:

					applyRx();
 800442c:	f7fd f8ec 	bl	8001608 <applyRx>
					mainState = s_rest;
 8004430:	2300      	movs	r3, #0
 8004432:	71fb      	strb	r3, [r7, #7]
					break;
 8004434:	e002      	b.n	800443c <main+0xe0>
					break;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <main+0xe0>
					break;
 800443a:	bf00      	nop
		}
		HAL_Delay(10);
 800443c:	200a      	movs	r0, #10
 800443e:	f7fd fbf7 	bl	8001c30 <HAL_Delay>
		switch (mainState)
 8004442:	e7a2      	b.n	800438a <main+0x2e>

08004444 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b094      	sub	sp, #80	; 0x50
 8004448:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <SystemClock_Config+0xbc>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a2b      	ldr	r2, [pc, #172]	; (8004500 <SystemClock_Config+0xbc>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b29      	ldr	r3, [pc, #164]	; (8004500 <SystemClock_Config+0xbc>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <SystemClock_Config+0xc0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a25      	ldr	r2, [pc, #148]	; (8004504 <SystemClock_Config+0xc0>)
 8004470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <SystemClock_Config+0xc0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004482:	2301      	movs	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004486:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800448a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800448c:	2302      	movs	r3, #2
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004490:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004496:	2308      	movs	r3, #8
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800449a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044a0:	2302      	movs	r3, #2
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80044a4:	2307      	movs	r3, #7
 80044a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fefb 	bl	80032a8 <HAL_RCC_OscConfig>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 80044b8:	f000 f826 	bl	8004508 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80044bc:	f7fe fea4 	bl	8003208 <HAL_PWREx_EnableOverDrive>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80044c6:	f000 f81f 	bl	8004508 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80044ca:	230f      	movs	r3, #15
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044ce:	2302      	movs	r3, #2
 80044d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044d2:	2300      	movs	r3, #0
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80044d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80044dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80044e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044e6:	2105      	movs	r1, #5
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff f955 	bl	8003798 <HAL_RCC_ClockConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80044f4:	f000 f808 	bl	8004508 <Error_Handler>
  }
}
 80044f8:	bf00      	nop
 80044fa:	3750      	adds	r7, #80	; 0x50
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000

08004508 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 800450c:	2001      	movs	r0, #1
 800450e:	f7fd f94d 	bl	80017ac <BSP_LED_On>
  while (1)
 8004512:	e7fe      	b.n	8004512 <Error_Handler+0xa>

08004514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800454c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004518:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800451a:	e003      	b.n	8004524 <LoopCopyDataInit>

0800451c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800451e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004520:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004522:	3104      	adds	r1, #4

08004524 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004524:	480b      	ldr	r0, [pc, #44]	; (8004554 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004528:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800452a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800452c:	d3f6      	bcc.n	800451c <CopyDataInit>
  ldr  r2, =_sbss
 800452e:	4a0b      	ldr	r2, [pc, #44]	; (800455c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004530:	e002      	b.n	8004538 <LoopFillZerobss>

08004532 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004532:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004534:	f842 3b04 	str.w	r3, [r2], #4

08004538 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800453a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800453c:	d3f9      	bcc.n	8004532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800453e:	f7fd f9d5 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004542:	f000 f817 	bl	8004574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004546:	f7ff ff09 	bl	800435c <main>
  bx  lr    
 800454a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800454c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004550:	08007724 	.word	0x08007724
  ldr  r0, =_sdata
 8004554:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004558:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 800455c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8004560:	20000340 	.word	0x20000340

08004564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004564:	e7fe      	b.n	8004564 <ADC_IRQHandler>
	...

08004568 <__errno>:
 8004568:	4b01      	ldr	r3, [pc, #4]	; (8004570 <__errno+0x8>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000020 	.word	0x20000020

08004574 <__libc_init_array>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4d0d      	ldr	r5, [pc, #52]	; (80045ac <__libc_init_array+0x38>)
 8004578:	4c0d      	ldr	r4, [pc, #52]	; (80045b0 <__libc_init_array+0x3c>)
 800457a:	1b64      	subs	r4, r4, r5
 800457c:	10a4      	asrs	r4, r4, #2
 800457e:	2600      	movs	r6, #0
 8004580:	42a6      	cmp	r6, r4
 8004582:	d109      	bne.n	8004598 <__libc_init_array+0x24>
 8004584:	4d0b      	ldr	r5, [pc, #44]	; (80045b4 <__libc_init_array+0x40>)
 8004586:	4c0c      	ldr	r4, [pc, #48]	; (80045b8 <__libc_init_array+0x44>)
 8004588:	f002 fdc4 	bl	8007114 <_init>
 800458c:	1b64      	subs	r4, r4, r5
 800458e:	10a4      	asrs	r4, r4, #2
 8004590:	2600      	movs	r6, #0
 8004592:	42a6      	cmp	r6, r4
 8004594:	d105      	bne.n	80045a2 <__libc_init_array+0x2e>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	f855 3b04 	ldr.w	r3, [r5], #4
 800459c:	4798      	blx	r3
 800459e:	3601      	adds	r6, #1
 80045a0:	e7ee      	b.n	8004580 <__libc_init_array+0xc>
 80045a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a6:	4798      	blx	r3
 80045a8:	3601      	adds	r6, #1
 80045aa:	e7f2      	b.n	8004592 <__libc_init_array+0x1e>
 80045ac:	0800771c 	.word	0x0800771c
 80045b0:	0800771c 	.word	0x0800771c
 80045b4:	0800771c 	.word	0x0800771c
 80045b8:	08007720 	.word	0x08007720

080045bc <memset>:
 80045bc:	4402      	add	r2, r0
 80045be:	4603      	mov	r3, r0
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d100      	bne.n	80045c6 <memset+0xa>
 80045c4:	4770      	bx	lr
 80045c6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ca:	e7f9      	b.n	80045c0 <memset+0x4>

080045cc <__cvt>:
 80045cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045d0:	ec55 4b10 	vmov	r4, r5, d0
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	460e      	mov	r6, r1
 80045d8:	4619      	mov	r1, r3
 80045da:	462b      	mov	r3, r5
 80045dc:	bfbb      	ittet	lt
 80045de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045e2:	461d      	movlt	r5, r3
 80045e4:	2300      	movge	r3, #0
 80045e6:	232d      	movlt	r3, #45	; 0x2d
 80045e8:	700b      	strb	r3, [r1, #0]
 80045ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045f0:	4691      	mov	r9, r2
 80045f2:	f023 0820 	bic.w	r8, r3, #32
 80045f6:	bfbc      	itt	lt
 80045f8:	4622      	movlt	r2, r4
 80045fa:	4614      	movlt	r4, r2
 80045fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004600:	d005      	beq.n	800460e <__cvt+0x42>
 8004602:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004606:	d100      	bne.n	800460a <__cvt+0x3e>
 8004608:	3601      	adds	r6, #1
 800460a:	2102      	movs	r1, #2
 800460c:	e000      	b.n	8004610 <__cvt+0x44>
 800460e:	2103      	movs	r1, #3
 8004610:	ab03      	add	r3, sp, #12
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	ab02      	add	r3, sp, #8
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	ec45 4b10 	vmov	d0, r4, r5
 800461c:	4653      	mov	r3, sl
 800461e:	4632      	mov	r2, r6
 8004620:	f000 fe1a 	bl	8005258 <_dtoa_r>
 8004624:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004628:	4607      	mov	r7, r0
 800462a:	d102      	bne.n	8004632 <__cvt+0x66>
 800462c:	f019 0f01 	tst.w	r9, #1
 8004630:	d022      	beq.n	8004678 <__cvt+0xac>
 8004632:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004636:	eb07 0906 	add.w	r9, r7, r6
 800463a:	d110      	bne.n	800465e <__cvt+0x92>
 800463c:	783b      	ldrb	r3, [r7, #0]
 800463e:	2b30      	cmp	r3, #48	; 0x30
 8004640:	d10a      	bne.n	8004658 <__cvt+0x8c>
 8004642:	2200      	movs	r2, #0
 8004644:	2300      	movs	r3, #0
 8004646:	4620      	mov	r0, r4
 8004648:	4629      	mov	r1, r5
 800464a:	f7fc fa4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800464e:	b918      	cbnz	r0, 8004658 <__cvt+0x8c>
 8004650:	f1c6 0601 	rsb	r6, r6, #1
 8004654:	f8ca 6000 	str.w	r6, [sl]
 8004658:	f8da 3000 	ldr.w	r3, [sl]
 800465c:	4499      	add	r9, r3
 800465e:	2200      	movs	r2, #0
 8004660:	2300      	movs	r3, #0
 8004662:	4620      	mov	r0, r4
 8004664:	4629      	mov	r1, r5
 8004666:	f7fc fa3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800466a:	b108      	cbz	r0, 8004670 <__cvt+0xa4>
 800466c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004670:	2230      	movs	r2, #48	; 0x30
 8004672:	9b03      	ldr	r3, [sp, #12]
 8004674:	454b      	cmp	r3, r9
 8004676:	d307      	bcc.n	8004688 <__cvt+0xbc>
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800467c:	1bdb      	subs	r3, r3, r7
 800467e:	4638      	mov	r0, r7
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	b004      	add	sp, #16
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004688:	1c59      	adds	r1, r3, #1
 800468a:	9103      	str	r1, [sp, #12]
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e7f0      	b.n	8004672 <__cvt+0xa6>

08004690 <__exponent>:
 8004690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004692:	4603      	mov	r3, r0
 8004694:	2900      	cmp	r1, #0
 8004696:	bfb8      	it	lt
 8004698:	4249      	neglt	r1, r1
 800469a:	f803 2b02 	strb.w	r2, [r3], #2
 800469e:	bfb4      	ite	lt
 80046a0:	222d      	movlt	r2, #45	; 0x2d
 80046a2:	222b      	movge	r2, #43	; 0x2b
 80046a4:	2909      	cmp	r1, #9
 80046a6:	7042      	strb	r2, [r0, #1]
 80046a8:	dd2a      	ble.n	8004700 <__exponent+0x70>
 80046aa:	f10d 0407 	add.w	r4, sp, #7
 80046ae:	46a4      	mov	ip, r4
 80046b0:	270a      	movs	r7, #10
 80046b2:	46a6      	mov	lr, r4
 80046b4:	460a      	mov	r2, r1
 80046b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80046ba:	fb07 1516 	mls	r5, r7, r6, r1
 80046be:	3530      	adds	r5, #48	; 0x30
 80046c0:	2a63      	cmp	r2, #99	; 0x63
 80046c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80046c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046ca:	4631      	mov	r1, r6
 80046cc:	dcf1      	bgt.n	80046b2 <__exponent+0x22>
 80046ce:	3130      	adds	r1, #48	; 0x30
 80046d0:	f1ae 0502 	sub.w	r5, lr, #2
 80046d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046d8:	1c44      	adds	r4, r0, #1
 80046da:	4629      	mov	r1, r5
 80046dc:	4561      	cmp	r1, ip
 80046de:	d30a      	bcc.n	80046f6 <__exponent+0x66>
 80046e0:	f10d 0209 	add.w	r2, sp, #9
 80046e4:	eba2 020e 	sub.w	r2, r2, lr
 80046e8:	4565      	cmp	r5, ip
 80046ea:	bf88      	it	hi
 80046ec:	2200      	movhi	r2, #0
 80046ee:	4413      	add	r3, r2
 80046f0:	1a18      	subs	r0, r3, r0
 80046f2:	b003      	add	sp, #12
 80046f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046fe:	e7ed      	b.n	80046dc <__exponent+0x4c>
 8004700:	2330      	movs	r3, #48	; 0x30
 8004702:	3130      	adds	r1, #48	; 0x30
 8004704:	7083      	strb	r3, [r0, #2]
 8004706:	70c1      	strb	r1, [r0, #3]
 8004708:	1d03      	adds	r3, r0, #4
 800470a:	e7f1      	b.n	80046f0 <__exponent+0x60>

0800470c <_printf_float>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	ed2d 8b02 	vpush	{d8}
 8004714:	b08d      	sub	sp, #52	; 0x34
 8004716:	460c      	mov	r4, r1
 8004718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800471c:	4616      	mov	r6, r2
 800471e:	461f      	mov	r7, r3
 8004720:	4605      	mov	r5, r0
 8004722:	f001 fd3f 	bl	80061a4 <_localeconv_r>
 8004726:	f8d0 a000 	ldr.w	sl, [r0]
 800472a:	4650      	mov	r0, sl
 800472c:	f7fb fd60 	bl	80001f0 <strlen>
 8004730:	2300      	movs	r3, #0
 8004732:	930a      	str	r3, [sp, #40]	; 0x28
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	9305      	str	r3, [sp, #20]
 8004738:	f8d8 3000 	ldr.w	r3, [r8]
 800473c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004740:	3307      	adds	r3, #7
 8004742:	f023 0307 	bic.w	r3, r3, #7
 8004746:	f103 0208 	add.w	r2, r3, #8
 800474a:	f8c8 2000 	str.w	r2, [r8]
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004756:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800475a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800475e:	9307      	str	r3, [sp, #28]
 8004760:	f8cd 8018 	str.w	r8, [sp, #24]
 8004764:	ee08 0a10 	vmov	s16, r0
 8004768:	4b9f      	ldr	r3, [pc, #636]	; (80049e8 <_printf_float+0x2dc>)
 800476a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800476e:	f04f 32ff 	mov.w	r2, #4294967295
 8004772:	f7fc f9eb 	bl	8000b4c <__aeabi_dcmpun>
 8004776:	bb88      	cbnz	r0, 80047dc <_printf_float+0xd0>
 8004778:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800477c:	4b9a      	ldr	r3, [pc, #616]	; (80049e8 <_printf_float+0x2dc>)
 800477e:	f04f 32ff 	mov.w	r2, #4294967295
 8004782:	f7fc f9c5 	bl	8000b10 <__aeabi_dcmple>
 8004786:	bb48      	cbnz	r0, 80047dc <_printf_float+0xd0>
 8004788:	2200      	movs	r2, #0
 800478a:	2300      	movs	r3, #0
 800478c:	4640      	mov	r0, r8
 800478e:	4649      	mov	r1, r9
 8004790:	f7fc f9b4 	bl	8000afc <__aeabi_dcmplt>
 8004794:	b110      	cbz	r0, 800479c <_printf_float+0x90>
 8004796:	232d      	movs	r3, #45	; 0x2d
 8004798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479c:	4b93      	ldr	r3, [pc, #588]	; (80049ec <_printf_float+0x2e0>)
 800479e:	4894      	ldr	r0, [pc, #592]	; (80049f0 <_printf_float+0x2e4>)
 80047a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047a4:	bf94      	ite	ls
 80047a6:	4698      	movls	r8, r3
 80047a8:	4680      	movhi	r8, r0
 80047aa:	2303      	movs	r3, #3
 80047ac:	6123      	str	r3, [r4, #16]
 80047ae:	9b05      	ldr	r3, [sp, #20]
 80047b0:	f023 0204 	bic.w	r2, r3, #4
 80047b4:	6022      	str	r2, [r4, #0]
 80047b6:	f04f 0900 	mov.w	r9, #0
 80047ba:	9700      	str	r7, [sp, #0]
 80047bc:	4633      	mov	r3, r6
 80047be:	aa0b      	add	r2, sp, #44	; 0x2c
 80047c0:	4621      	mov	r1, r4
 80047c2:	4628      	mov	r0, r5
 80047c4:	f000 f9d8 	bl	8004b78 <_printf_common>
 80047c8:	3001      	adds	r0, #1
 80047ca:	f040 8090 	bne.w	80048ee <_printf_float+0x1e2>
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295
 80047d2:	b00d      	add	sp, #52	; 0x34
 80047d4:	ecbd 8b02 	vpop	{d8}
 80047d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	4640      	mov	r0, r8
 80047e2:	4649      	mov	r1, r9
 80047e4:	f7fc f9b2 	bl	8000b4c <__aeabi_dcmpun>
 80047e8:	b140      	cbz	r0, 80047fc <_printf_float+0xf0>
 80047ea:	464b      	mov	r3, r9
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bfbc      	itt	lt
 80047f0:	232d      	movlt	r3, #45	; 0x2d
 80047f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047f6:	487f      	ldr	r0, [pc, #508]	; (80049f4 <_printf_float+0x2e8>)
 80047f8:	4b7f      	ldr	r3, [pc, #508]	; (80049f8 <_printf_float+0x2ec>)
 80047fa:	e7d1      	b.n	80047a0 <_printf_float+0x94>
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004802:	9206      	str	r2, [sp, #24]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	d13f      	bne.n	8004888 <_printf_float+0x17c>
 8004808:	2306      	movs	r3, #6
 800480a:	6063      	str	r3, [r4, #4]
 800480c:	9b05      	ldr	r3, [sp, #20]
 800480e:	6861      	ldr	r1, [r4, #4]
 8004810:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004814:	2300      	movs	r3, #0
 8004816:	9303      	str	r3, [sp, #12]
 8004818:	ab0a      	add	r3, sp, #40	; 0x28
 800481a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800481e:	ab09      	add	r3, sp, #36	; 0x24
 8004820:	ec49 8b10 	vmov	d0, r8, r9
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	6022      	str	r2, [r4, #0]
 8004828:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800482c:	4628      	mov	r0, r5
 800482e:	f7ff fecd 	bl	80045cc <__cvt>
 8004832:	9b06      	ldr	r3, [sp, #24]
 8004834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004836:	2b47      	cmp	r3, #71	; 0x47
 8004838:	4680      	mov	r8, r0
 800483a:	d108      	bne.n	800484e <_printf_float+0x142>
 800483c:	1cc8      	adds	r0, r1, #3
 800483e:	db02      	blt.n	8004846 <_printf_float+0x13a>
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	4299      	cmp	r1, r3
 8004844:	dd41      	ble.n	80048ca <_printf_float+0x1be>
 8004846:	f1ab 0b02 	sub.w	fp, fp, #2
 800484a:	fa5f fb8b 	uxtb.w	fp, fp
 800484e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004852:	d820      	bhi.n	8004896 <_printf_float+0x18a>
 8004854:	3901      	subs	r1, #1
 8004856:	465a      	mov	r2, fp
 8004858:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800485c:	9109      	str	r1, [sp, #36]	; 0x24
 800485e:	f7ff ff17 	bl	8004690 <__exponent>
 8004862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004864:	1813      	adds	r3, r2, r0
 8004866:	2a01      	cmp	r2, #1
 8004868:	4681      	mov	r9, r0
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	dc02      	bgt.n	8004874 <_printf_float+0x168>
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	07d2      	lsls	r2, r2, #31
 8004872:	d501      	bpl.n	8004878 <_printf_float+0x16c>
 8004874:	3301      	adds	r3, #1
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800487c:	2b00      	cmp	r3, #0
 800487e:	d09c      	beq.n	80047ba <_printf_float+0xae>
 8004880:	232d      	movs	r3, #45	; 0x2d
 8004882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004886:	e798      	b.n	80047ba <_printf_float+0xae>
 8004888:	9a06      	ldr	r2, [sp, #24]
 800488a:	2a47      	cmp	r2, #71	; 0x47
 800488c:	d1be      	bne.n	800480c <_printf_float+0x100>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1bc      	bne.n	800480c <_printf_float+0x100>
 8004892:	2301      	movs	r3, #1
 8004894:	e7b9      	b.n	800480a <_printf_float+0xfe>
 8004896:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800489a:	d118      	bne.n	80048ce <_printf_float+0x1c2>
 800489c:	2900      	cmp	r1, #0
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	dd0b      	ble.n	80048ba <_printf_float+0x1ae>
 80048a2:	6121      	str	r1, [r4, #16]
 80048a4:	b913      	cbnz	r3, 80048ac <_printf_float+0x1a0>
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	07d0      	lsls	r0, r2, #31
 80048aa:	d502      	bpl.n	80048b2 <_printf_float+0x1a6>
 80048ac:	3301      	adds	r3, #1
 80048ae:	440b      	add	r3, r1
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80048b4:	f04f 0900 	mov.w	r9, #0
 80048b8:	e7de      	b.n	8004878 <_printf_float+0x16c>
 80048ba:	b913      	cbnz	r3, 80048c2 <_printf_float+0x1b6>
 80048bc:	6822      	ldr	r2, [r4, #0]
 80048be:	07d2      	lsls	r2, r2, #31
 80048c0:	d501      	bpl.n	80048c6 <_printf_float+0x1ba>
 80048c2:	3302      	adds	r3, #2
 80048c4:	e7f4      	b.n	80048b0 <_printf_float+0x1a4>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e7f2      	b.n	80048b0 <_printf_float+0x1a4>
 80048ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d0:	4299      	cmp	r1, r3
 80048d2:	db05      	blt.n	80048e0 <_printf_float+0x1d4>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	6121      	str	r1, [r4, #16]
 80048d8:	07d8      	lsls	r0, r3, #31
 80048da:	d5ea      	bpl.n	80048b2 <_printf_float+0x1a6>
 80048dc:	1c4b      	adds	r3, r1, #1
 80048de:	e7e7      	b.n	80048b0 <_printf_float+0x1a4>
 80048e0:	2900      	cmp	r1, #0
 80048e2:	bfd4      	ite	le
 80048e4:	f1c1 0202 	rsble	r2, r1, #2
 80048e8:	2201      	movgt	r2, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	e7e0      	b.n	80048b0 <_printf_float+0x1a4>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	055a      	lsls	r2, r3, #21
 80048f2:	d407      	bmi.n	8004904 <_printf_float+0x1f8>
 80048f4:	6923      	ldr	r3, [r4, #16]
 80048f6:	4642      	mov	r2, r8
 80048f8:	4631      	mov	r1, r6
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	d12c      	bne.n	800495c <_printf_float+0x250>
 8004902:	e764      	b.n	80047ce <_printf_float+0xc2>
 8004904:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004908:	f240 80e0 	bls.w	8004acc <_printf_float+0x3c0>
 800490c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004910:	2200      	movs	r2, #0
 8004912:	2300      	movs	r3, #0
 8004914:	f7fc f8e8 	bl	8000ae8 <__aeabi_dcmpeq>
 8004918:	2800      	cmp	r0, #0
 800491a:	d034      	beq.n	8004986 <_printf_float+0x27a>
 800491c:	4a37      	ldr	r2, [pc, #220]	; (80049fc <_printf_float+0x2f0>)
 800491e:	2301      	movs	r3, #1
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f af51 	beq.w	80047ce <_printf_float+0xc2>
 800492c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004930:	429a      	cmp	r2, r3
 8004932:	db02      	blt.n	800493a <_printf_float+0x22e>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	07d8      	lsls	r0, r3, #31
 8004938:	d510      	bpl.n	800495c <_printf_float+0x250>
 800493a:	ee18 3a10 	vmov	r3, s16
 800493e:	4652      	mov	r2, sl
 8004940:	4631      	mov	r1, r6
 8004942:	4628      	mov	r0, r5
 8004944:	47b8      	blx	r7
 8004946:	3001      	adds	r0, #1
 8004948:	f43f af41 	beq.w	80047ce <_printf_float+0xc2>
 800494c:	f04f 0800 	mov.w	r8, #0
 8004950:	f104 091a 	add.w	r9, r4, #26
 8004954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004956:	3b01      	subs	r3, #1
 8004958:	4543      	cmp	r3, r8
 800495a:	dc09      	bgt.n	8004970 <_printf_float+0x264>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	079b      	lsls	r3, r3, #30
 8004960:	f100 8105 	bmi.w	8004b6e <_printf_float+0x462>
 8004964:	68e0      	ldr	r0, [r4, #12]
 8004966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004968:	4298      	cmp	r0, r3
 800496a:	bfb8      	it	lt
 800496c:	4618      	movlt	r0, r3
 800496e:	e730      	b.n	80047d2 <_printf_float+0xc6>
 8004970:	2301      	movs	r3, #1
 8004972:	464a      	mov	r2, r9
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f af27 	beq.w	80047ce <_printf_float+0xc2>
 8004980:	f108 0801 	add.w	r8, r8, #1
 8004984:	e7e6      	b.n	8004954 <_printf_float+0x248>
 8004986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	dc39      	bgt.n	8004a00 <_printf_float+0x2f4>
 800498c:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <_printf_float+0x2f0>)
 800498e:	2301      	movs	r3, #1
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af19 	beq.w	80047ce <_printf_float+0xc2>
 800499c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a0:	4313      	orrs	r3, r2
 80049a2:	d102      	bne.n	80049aa <_printf_float+0x29e>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	07d9      	lsls	r1, r3, #31
 80049a8:	d5d8      	bpl.n	800495c <_printf_float+0x250>
 80049aa:	ee18 3a10 	vmov	r3, s16
 80049ae:	4652      	mov	r2, sl
 80049b0:	4631      	mov	r1, r6
 80049b2:	4628      	mov	r0, r5
 80049b4:	47b8      	blx	r7
 80049b6:	3001      	adds	r0, #1
 80049b8:	f43f af09 	beq.w	80047ce <_printf_float+0xc2>
 80049bc:	f04f 0900 	mov.w	r9, #0
 80049c0:	f104 0a1a 	add.w	sl, r4, #26
 80049c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c6:	425b      	negs	r3, r3
 80049c8:	454b      	cmp	r3, r9
 80049ca:	dc01      	bgt.n	80049d0 <_printf_float+0x2c4>
 80049cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ce:	e792      	b.n	80048f6 <_printf_float+0x1ea>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4652      	mov	r2, sl
 80049d4:	4631      	mov	r1, r6
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b8      	blx	r7
 80049da:	3001      	adds	r0, #1
 80049dc:	f43f aef7 	beq.w	80047ce <_printf_float+0xc2>
 80049e0:	f109 0901 	add.w	r9, r9, #1
 80049e4:	e7ee      	b.n	80049c4 <_printf_float+0x2b8>
 80049e6:	bf00      	nop
 80049e8:	7fefffff 	.word	0x7fefffff
 80049ec:	0800733c 	.word	0x0800733c
 80049f0:	08007340 	.word	0x08007340
 80049f4:	08007348 	.word	0x08007348
 80049f8:	08007344 	.word	0x08007344
 80049fc:	0800734c 	.word	0x0800734c
 8004a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a04:	429a      	cmp	r2, r3
 8004a06:	bfa8      	it	ge
 8004a08:	461a      	movge	r2, r3
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	4691      	mov	r9, r2
 8004a0e:	dc37      	bgt.n	8004a80 <_printf_float+0x374>
 8004a10:	f04f 0b00 	mov.w	fp, #0
 8004a14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a18:	f104 021a 	add.w	r2, r4, #26
 8004a1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a1e:	9305      	str	r3, [sp, #20]
 8004a20:	eba3 0309 	sub.w	r3, r3, r9
 8004a24:	455b      	cmp	r3, fp
 8004a26:	dc33      	bgt.n	8004a90 <_printf_float+0x384>
 8004a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	db3b      	blt.n	8004aa8 <_printf_float+0x39c>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	07da      	lsls	r2, r3, #31
 8004a34:	d438      	bmi.n	8004aa8 <_printf_float+0x39c>
 8004a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a38:	9a05      	ldr	r2, [sp, #20]
 8004a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a3c:	1a9a      	subs	r2, r3, r2
 8004a3e:	eba3 0901 	sub.w	r9, r3, r1
 8004a42:	4591      	cmp	r9, r2
 8004a44:	bfa8      	it	ge
 8004a46:	4691      	movge	r9, r2
 8004a48:	f1b9 0f00 	cmp.w	r9, #0
 8004a4c:	dc35      	bgt.n	8004aba <_printf_float+0x3ae>
 8004a4e:	f04f 0800 	mov.w	r8, #0
 8004a52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a56:	f104 0a1a 	add.w	sl, r4, #26
 8004a5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	eba3 0309 	sub.w	r3, r3, r9
 8004a64:	4543      	cmp	r3, r8
 8004a66:	f77f af79 	ble.w	800495c <_printf_float+0x250>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4652      	mov	r2, sl
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f aeaa 	beq.w	80047ce <_printf_float+0xc2>
 8004a7a:	f108 0801 	add.w	r8, r8, #1
 8004a7e:	e7ec      	b.n	8004a5a <_printf_float+0x34e>
 8004a80:	4613      	mov	r3, r2
 8004a82:	4631      	mov	r1, r6
 8004a84:	4642      	mov	r2, r8
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d1c0      	bne.n	8004a10 <_printf_float+0x304>
 8004a8e:	e69e      	b.n	80047ce <_printf_float+0xc2>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4631      	mov	r1, r6
 8004a94:	4628      	mov	r0, r5
 8004a96:	9205      	str	r2, [sp, #20]
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f ae97 	beq.w	80047ce <_printf_float+0xc2>
 8004aa0:	9a05      	ldr	r2, [sp, #20]
 8004aa2:	f10b 0b01 	add.w	fp, fp, #1
 8004aa6:	e7b9      	b.n	8004a1c <_printf_float+0x310>
 8004aa8:	ee18 3a10 	vmov	r3, s16
 8004aac:	4652      	mov	r2, sl
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d1be      	bne.n	8004a36 <_printf_float+0x32a>
 8004ab8:	e689      	b.n	80047ce <_printf_float+0xc2>
 8004aba:	9a05      	ldr	r2, [sp, #20]
 8004abc:	464b      	mov	r3, r9
 8004abe:	4442      	add	r2, r8
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d1c1      	bne.n	8004a4e <_printf_float+0x342>
 8004aca:	e680      	b.n	80047ce <_printf_float+0xc2>
 8004acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ace:	2a01      	cmp	r2, #1
 8004ad0:	dc01      	bgt.n	8004ad6 <_printf_float+0x3ca>
 8004ad2:	07db      	lsls	r3, r3, #31
 8004ad4:	d538      	bpl.n	8004b48 <_printf_float+0x43c>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4642      	mov	r2, r8
 8004ada:	4631      	mov	r1, r6
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b8      	blx	r7
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f43f ae74 	beq.w	80047ce <_printf_float+0xc2>
 8004ae6:	ee18 3a10 	vmov	r3, s16
 8004aea:	4652      	mov	r2, sl
 8004aec:	4631      	mov	r1, r6
 8004aee:	4628      	mov	r0, r5
 8004af0:	47b8      	blx	r7
 8004af2:	3001      	adds	r0, #1
 8004af4:	f43f ae6b 	beq.w	80047ce <_printf_float+0xc2>
 8004af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004afc:	2200      	movs	r2, #0
 8004afe:	2300      	movs	r3, #0
 8004b00:	f7fb fff2 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b04:	b9d8      	cbnz	r0, 8004b3e <_printf_float+0x432>
 8004b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b08:	f108 0201 	add.w	r2, r8, #1
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b8      	blx	r7
 8004b14:	3001      	adds	r0, #1
 8004b16:	d10e      	bne.n	8004b36 <_printf_float+0x42a>
 8004b18:	e659      	b.n	80047ce <_printf_float+0xc2>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b8      	blx	r7
 8004b24:	3001      	adds	r0, #1
 8004b26:	f43f ae52 	beq.w	80047ce <_printf_float+0xc2>
 8004b2a:	f108 0801 	add.w	r8, r8, #1
 8004b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b30:	3b01      	subs	r3, #1
 8004b32:	4543      	cmp	r3, r8
 8004b34:	dcf1      	bgt.n	8004b1a <_printf_float+0x40e>
 8004b36:	464b      	mov	r3, r9
 8004b38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b3c:	e6dc      	b.n	80048f8 <_printf_float+0x1ec>
 8004b3e:	f04f 0800 	mov.w	r8, #0
 8004b42:	f104 0a1a 	add.w	sl, r4, #26
 8004b46:	e7f2      	b.n	8004b2e <_printf_float+0x422>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	e7df      	b.n	8004b0e <_printf_float+0x402>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	464a      	mov	r2, r9
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f ae38 	beq.w	80047ce <_printf_float+0xc2>
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	4543      	cmp	r3, r8
 8004b6a:	dcf0      	bgt.n	8004b4e <_printf_float+0x442>
 8004b6c:	e6fa      	b.n	8004964 <_printf_float+0x258>
 8004b6e:	f04f 0800 	mov.w	r8, #0
 8004b72:	f104 0919 	add.w	r9, r4, #25
 8004b76:	e7f4      	b.n	8004b62 <_printf_float+0x456>

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4699      	mov	r9, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc4:	1e13      	subs	r3, r2, #0
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	68e5      	ldr	r5, [r4, #12]
 8004be2:	6832      	ldr	r2, [r6, #0]
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	; 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4649      	mov	r1, r9
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	7e0f      	ldrb	r7, [r1, #24]
 8004c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c5c:	2f78      	cmp	r7, #120	; 0x78
 8004c5e:	4691      	mov	r9, r2
 8004c60:	4680      	mov	r8, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	469a      	mov	sl, r3
 8004c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	; 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d8 	beq.w	8004e26 <_printf_i+0x1d2>
 8004c76:	2f58      	cmp	r7, #88	; 0x58
 8004c78:	f000 80a3 	beq.w	8004dc2 <_printf_i+0x16e>
 8004c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a101      	add	r1, pc, #4	; (adr r1, 8004c94 <_printf_i+0x40>)
 8004c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e0d 	.word	0x08004e0d
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004def 	.word	0x08004def
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e2f 	.word	0x08004e2f
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004df7 	.word	0x08004df7
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	602a      	str	r2, [r5, #0]
 8004cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0a3      	b.n	8004e48 <_printf_i+0x1f4>
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	6829      	ldr	r1, [r5, #0]
 8004d04:	0606      	lsls	r6, r0, #24
 8004d06:	f101 0304 	add.w	r3, r1, #4
 8004d0a:	d50a      	bpl.n	8004d22 <_printf_i+0xce>
 8004d0c:	680e      	ldr	r6, [r1, #0]
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	da03      	bge.n	8004d1c <_printf_i+0xc8>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	4276      	negs	r6, r6
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	485e      	ldr	r0, [pc, #376]	; (8004e98 <_printf_i+0x244>)
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e019      	b.n	8004d56 <_printf_i+0x102>
 8004d22:	680e      	ldr	r6, [r1, #0]
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d2a:	bf18      	it	ne
 8004d2c:	b236      	sxthne	r6, r6
 8004d2e:	e7ef      	b.n	8004d10 <_printf_i+0xbc>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	1d19      	adds	r1, r3, #4
 8004d36:	6029      	str	r1, [r5, #0]
 8004d38:	0601      	lsls	r1, r0, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xec>
 8004d3c:	681e      	ldr	r6, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xf2>
 8004d40:	0646      	lsls	r6, r0, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe8>
 8004d44:	881e      	ldrh	r6, [r3, #0]
 8004d46:	4854      	ldr	r0, [pc, #336]	; (8004e98 <_printf_i+0x244>)
 8004d48:	2f6f      	cmp	r7, #111	; 0x6f
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6865      	ldr	r5, [r4, #4]
 8004d58:	60a5      	str	r5, [r4, #8]
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	bfa2      	ittt	ge
 8004d5e:	6821      	ldrge	r1, [r4, #0]
 8004d60:	f021 0104 	bicge.w	r1, r1, #4
 8004d64:	6021      	strge	r1, [r4, #0]
 8004d66:	b90e      	cbnz	r6, 8004d6c <_printf_i+0x118>
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	d04d      	beq.n	8004e08 <_printf_i+0x1b4>
 8004d6c:	4615      	mov	r5, r2
 8004d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d72:	fb03 6711 	mls	r7, r3, r1, r6
 8004d76:	5dc7      	ldrb	r7, [r0, r7]
 8004d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d7c:	4637      	mov	r7, r6
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	460e      	mov	r6, r1
 8004d82:	d9f4      	bls.n	8004d6e <_printf_i+0x11a>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10b      	bne.n	8004da0 <_printf_i+0x14c>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07de      	lsls	r6, r3, #31
 8004d8c:	d508      	bpl.n	8004da0 <_printf_i+0x14c>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6861      	ldr	r1, [r4, #4]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	bfde      	ittt	le
 8004d96:	2330      	movle	r3, #48	; 0x30
 8004d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004da0:	1b52      	subs	r2, r2, r5
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	f8cd a000 	str.w	sl, [sp]
 8004da8:	464b      	mov	r3, r9
 8004daa:	aa03      	add	r2, sp, #12
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff fee2 	bl	8004b78 <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d14c      	bne.n	8004e52 <_printf_i+0x1fe>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	4835      	ldr	r0, [pc, #212]	; (8004e98 <_printf_i+0x244>)
 8004dc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dc8:	6829      	ldr	r1, [r5, #0]
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dd0:	6029      	str	r1, [r5, #0]
 8004dd2:	061d      	lsls	r5, r3, #24
 8004dd4:	d514      	bpl.n	8004e00 <_printf_i+0x1ac>
 8004dd6:	07df      	lsls	r7, r3, #31
 8004dd8:	bf44      	itt	mi
 8004dda:	f043 0320 	orrmi.w	r3, r3, #32
 8004dde:	6023      	strmi	r3, [r4, #0]
 8004de0:	b91e      	cbnz	r6, 8004dea <_printf_i+0x196>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	2310      	movs	r3, #16
 8004dec:	e7b0      	b.n	8004d50 <_printf_i+0xfc>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2378      	movs	r3, #120	; 0x78
 8004df8:	4828      	ldr	r0, [pc, #160]	; (8004e9c <_printf_i+0x248>)
 8004dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfe:	e7e3      	b.n	8004dc8 <_printf_i+0x174>
 8004e00:	0659      	lsls	r1, r3, #25
 8004e02:	bf48      	it	mi
 8004e04:	b2b6      	uxthmi	r6, r6
 8004e06:	e7e6      	b.n	8004dd6 <_printf_i+0x182>
 8004e08:	4615      	mov	r5, r2
 8004e0a:	e7bb      	b.n	8004d84 <_printf_i+0x130>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	6826      	ldr	r6, [r4, #0]
 8004e10:	6961      	ldr	r1, [r4, #20]
 8004e12:	1d18      	adds	r0, r3, #4
 8004e14:	6028      	str	r0, [r5, #0]
 8004e16:	0635      	lsls	r5, r6, #24
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0x1cc>
 8004e1c:	6019      	str	r1, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0x1d2>
 8004e20:	0670      	lsls	r0, r6, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0x1c8>
 8004e24:	8019      	strh	r1, [r3, #0]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	4615      	mov	r5, r2
 8004e2c:	e7ba      	b.n	8004da4 <_printf_i+0x150>
 8004e2e:	682b      	ldr	r3, [r5, #0]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	602a      	str	r2, [r5, #0]
 8004e34:	681d      	ldr	r5, [r3, #0]
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7fb f9e0 	bl	8000200 <memchr>
 8004e40:	b108      	cbz	r0, 8004e46 <_printf_i+0x1f2>
 8004e42:	1b40      	subs	r0, r0, r5
 8004e44:	6060      	str	r0, [r4, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	e7a8      	b.n	8004da4 <_printf_i+0x150>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	462a      	mov	r2, r5
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0ab      	beq.n	8004db8 <_printf_i+0x164>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	079b      	lsls	r3, r3, #30
 8004e64:	d413      	bmi.n	8004e8e <_printf_i+0x23a>
 8004e66:	68e0      	ldr	r0, [r4, #12]
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	bfb8      	it	lt
 8004e6e:	4618      	movlt	r0, r3
 8004e70:	e7a4      	b.n	8004dbc <_printf_i+0x168>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d09b      	beq.n	8004db8 <_printf_i+0x164>
 8004e80:	3501      	adds	r5, #1
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	9903      	ldr	r1, [sp, #12]
 8004e86:	1a5b      	subs	r3, r3, r1
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dcf2      	bgt.n	8004e72 <_printf_i+0x21e>
 8004e8c:	e7eb      	b.n	8004e66 <_printf_i+0x212>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	f104 0619 	add.w	r6, r4, #25
 8004e94:	e7f5      	b.n	8004e82 <_printf_i+0x22e>
 8004e96:	bf00      	nop
 8004e98:	0800734e 	.word	0x0800734e
 8004e9c:	0800735f 	.word	0x0800735f

08004ea0 <iprintf>:
 8004ea0:	b40f      	push	{r0, r1, r2, r3}
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <iprintf+0x2c>)
 8004ea4:	b513      	push	{r0, r1, r4, lr}
 8004ea6:	681c      	ldr	r4, [r3, #0]
 8004ea8:	b124      	cbz	r4, 8004eb4 <iprintf+0x14>
 8004eaa:	69a3      	ldr	r3, [r4, #24]
 8004eac:	b913      	cbnz	r3, 8004eb4 <iprintf+0x14>
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f001 f8da 	bl	8006068 <__sinit>
 8004eb4:	ab05      	add	r3, sp, #20
 8004eb6:	9a04      	ldr	r2, [sp, #16]
 8004eb8:	68a1      	ldr	r1, [r4, #8]
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f001 fe97 	bl	8006bf0 <_vfiprintf_r>
 8004ec2:	b002      	add	sp, #8
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec8:	b004      	add	sp, #16
 8004eca:	4770      	bx	lr
 8004ecc:	20000020 	.word	0x20000020

08004ed0 <_puts_r>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	460e      	mov	r6, r1
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	b118      	cbz	r0, 8004ee0 <_puts_r+0x10>
 8004ed8:	6983      	ldr	r3, [r0, #24]
 8004eda:	b90b      	cbnz	r3, 8004ee0 <_puts_r+0x10>
 8004edc:	f001 f8c4 	bl	8006068 <__sinit>
 8004ee0:	69ab      	ldr	r3, [r5, #24]
 8004ee2:	68ac      	ldr	r4, [r5, #8]
 8004ee4:	b913      	cbnz	r3, 8004eec <_puts_r+0x1c>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f001 f8be 	bl	8006068 <__sinit>
 8004eec:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <_puts_r+0xd0>)
 8004eee:	429c      	cmp	r4, r3
 8004ef0:	d120      	bne.n	8004f34 <_puts_r+0x64>
 8004ef2:	686c      	ldr	r4, [r5, #4]
 8004ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ef6:	07db      	lsls	r3, r3, #31
 8004ef8:	d405      	bmi.n	8004f06 <_puts_r+0x36>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	0598      	lsls	r0, r3, #22
 8004efe:	d402      	bmi.n	8004f06 <_puts_r+0x36>
 8004f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f02:	f001 f954 	bl	80061ae <__retarget_lock_acquire_recursive>
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	0719      	lsls	r1, r3, #28
 8004f0a:	d51d      	bpl.n	8004f48 <_puts_r+0x78>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	b1db      	cbz	r3, 8004f48 <_puts_r+0x78>
 8004f10:	3e01      	subs	r6, #1
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60a3      	str	r3, [r4, #8]
 8004f1c:	bb39      	cbnz	r1, 8004f6e <_puts_r+0x9e>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da38      	bge.n	8004f94 <_puts_r+0xc4>
 8004f22:	4622      	mov	r2, r4
 8004f24:	210a      	movs	r1, #10
 8004f26:	4628      	mov	r0, r5
 8004f28:	f000 f848 	bl	8004fbc <__swbuf_r>
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d011      	beq.n	8004f54 <_puts_r+0x84>
 8004f30:	250a      	movs	r5, #10
 8004f32:	e011      	b.n	8004f58 <_puts_r+0x88>
 8004f34:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <_puts_r+0xd4>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	d101      	bne.n	8004f3e <_puts_r+0x6e>
 8004f3a:	68ac      	ldr	r4, [r5, #8]
 8004f3c:	e7da      	b.n	8004ef4 <_puts_r+0x24>
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <_puts_r+0xd8>)
 8004f40:	429c      	cmp	r4, r3
 8004f42:	bf08      	it	eq
 8004f44:	68ec      	ldreq	r4, [r5, #12]
 8004f46:	e7d5      	b.n	8004ef4 <_puts_r+0x24>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f888 	bl	8005060 <__swsetup_r>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d0dd      	beq.n	8004f10 <_puts_r+0x40>
 8004f54:	f04f 35ff 	mov.w	r5, #4294967295
 8004f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f5a:	07da      	lsls	r2, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_puts_r+0x9a>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	059b      	lsls	r3, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_puts_r+0x9a>
 8004f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f66:	f001 f923 	bl	80061b0 <__retarget_lock_release_recursive>
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da04      	bge.n	8004f7c <_puts_r+0xac>
 8004f72:	69a2      	ldr	r2, [r4, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	dc06      	bgt.n	8004f86 <_puts_r+0xb6>
 8004f78:	290a      	cmp	r1, #10
 8004f7a:	d004      	beq.n	8004f86 <_puts_r+0xb6>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	6022      	str	r2, [r4, #0]
 8004f82:	7019      	strb	r1, [r3, #0]
 8004f84:	e7c5      	b.n	8004f12 <_puts_r+0x42>
 8004f86:	4622      	mov	r2, r4
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f000 f817 	bl	8004fbc <__swbuf_r>
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d1bf      	bne.n	8004f12 <_puts_r+0x42>
 8004f92:	e7df      	b.n	8004f54 <_puts_r+0x84>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	250a      	movs	r5, #10
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	6022      	str	r2, [r4, #0]
 8004f9c:	701d      	strb	r5, [r3, #0]
 8004f9e:	e7db      	b.n	8004f58 <_puts_r+0x88>
 8004fa0:	08007420 	.word	0x08007420
 8004fa4:	08007440 	.word	0x08007440
 8004fa8:	08007400 	.word	0x08007400

08004fac <puts>:
 8004fac:	4b02      	ldr	r3, [pc, #8]	; (8004fb8 <puts+0xc>)
 8004fae:	4601      	mov	r1, r0
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f7ff bf8d 	b.w	8004ed0 <_puts_r>
 8004fb6:	bf00      	nop
 8004fb8:	20000020 	.word	0x20000020

08004fbc <__swbuf_r>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	460e      	mov	r6, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	b118      	cbz	r0, 8004fce <__swbuf_r+0x12>
 8004fc6:	6983      	ldr	r3, [r0, #24]
 8004fc8:	b90b      	cbnz	r3, 8004fce <__swbuf_r+0x12>
 8004fca:	f001 f84d 	bl	8006068 <__sinit>
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <__swbuf_r+0x98>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	d12b      	bne.n	800502c <__swbuf_r+0x70>
 8004fd4:	686c      	ldr	r4, [r5, #4]
 8004fd6:	69a3      	ldr	r3, [r4, #24]
 8004fd8:	60a3      	str	r3, [r4, #8]
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	071a      	lsls	r2, r3, #28
 8004fde:	d52f      	bpl.n	8005040 <__swbuf_r+0x84>
 8004fe0:	6923      	ldr	r3, [r4, #16]
 8004fe2:	b36b      	cbz	r3, 8005040 <__swbuf_r+0x84>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	1ac0      	subs	r0, r0, r3
 8004fea:	6963      	ldr	r3, [r4, #20]
 8004fec:	b2f6      	uxtb	r6, r6
 8004fee:	4283      	cmp	r3, r0
 8004ff0:	4637      	mov	r7, r6
 8004ff2:	dc04      	bgt.n	8004ffe <__swbuf_r+0x42>
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 ffa2 	bl	8005f40 <_fflush_r>
 8004ffc:	bb30      	cbnz	r0, 800504c <__swbuf_r+0x90>
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	3b01      	subs	r3, #1
 8005002:	60a3      	str	r3, [r4, #8]
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	6022      	str	r2, [r4, #0]
 800500a:	701e      	strb	r6, [r3, #0]
 800500c:	6963      	ldr	r3, [r4, #20]
 800500e:	3001      	adds	r0, #1
 8005010:	4283      	cmp	r3, r0
 8005012:	d004      	beq.n	800501e <__swbuf_r+0x62>
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	07db      	lsls	r3, r3, #31
 8005018:	d506      	bpl.n	8005028 <__swbuf_r+0x6c>
 800501a:	2e0a      	cmp	r6, #10
 800501c:	d104      	bne.n	8005028 <__swbuf_r+0x6c>
 800501e:	4621      	mov	r1, r4
 8005020:	4628      	mov	r0, r5
 8005022:	f000 ff8d 	bl	8005f40 <_fflush_r>
 8005026:	b988      	cbnz	r0, 800504c <__swbuf_r+0x90>
 8005028:	4638      	mov	r0, r7
 800502a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <__swbuf_r+0x9c>)
 800502e:	429c      	cmp	r4, r3
 8005030:	d101      	bne.n	8005036 <__swbuf_r+0x7a>
 8005032:	68ac      	ldr	r4, [r5, #8]
 8005034:	e7cf      	b.n	8004fd6 <__swbuf_r+0x1a>
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <__swbuf_r+0xa0>)
 8005038:	429c      	cmp	r4, r3
 800503a:	bf08      	it	eq
 800503c:	68ec      	ldreq	r4, [r5, #12]
 800503e:	e7ca      	b.n	8004fd6 <__swbuf_r+0x1a>
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f80c 	bl	8005060 <__swsetup_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	d0cb      	beq.n	8004fe4 <__swbuf_r+0x28>
 800504c:	f04f 37ff 	mov.w	r7, #4294967295
 8005050:	e7ea      	b.n	8005028 <__swbuf_r+0x6c>
 8005052:	bf00      	nop
 8005054:	08007420 	.word	0x08007420
 8005058:	08007440 	.word	0x08007440
 800505c:	08007400 	.word	0x08007400

08005060 <__swsetup_r>:
 8005060:	4b32      	ldr	r3, [pc, #200]	; (800512c <__swsetup_r+0xcc>)
 8005062:	b570      	push	{r4, r5, r6, lr}
 8005064:	681d      	ldr	r5, [r3, #0]
 8005066:	4606      	mov	r6, r0
 8005068:	460c      	mov	r4, r1
 800506a:	b125      	cbz	r5, 8005076 <__swsetup_r+0x16>
 800506c:	69ab      	ldr	r3, [r5, #24]
 800506e:	b913      	cbnz	r3, 8005076 <__swsetup_r+0x16>
 8005070:	4628      	mov	r0, r5
 8005072:	f000 fff9 	bl	8006068 <__sinit>
 8005076:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <__swsetup_r+0xd0>)
 8005078:	429c      	cmp	r4, r3
 800507a:	d10f      	bne.n	800509c <__swsetup_r+0x3c>
 800507c:	686c      	ldr	r4, [r5, #4]
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005084:	0719      	lsls	r1, r3, #28
 8005086:	d42c      	bmi.n	80050e2 <__swsetup_r+0x82>
 8005088:	06dd      	lsls	r5, r3, #27
 800508a:	d411      	bmi.n	80050b0 <__swsetup_r+0x50>
 800508c:	2309      	movs	r3, #9
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	e03e      	b.n	800511a <__swsetup_r+0xba>
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <__swsetup_r+0xd4>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	d101      	bne.n	80050a6 <__swsetup_r+0x46>
 80050a2:	68ac      	ldr	r4, [r5, #8]
 80050a4:	e7eb      	b.n	800507e <__swsetup_r+0x1e>
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <__swsetup_r+0xd8>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	bf08      	it	eq
 80050ac:	68ec      	ldreq	r4, [r5, #12]
 80050ae:	e7e6      	b.n	800507e <__swsetup_r+0x1e>
 80050b0:	0758      	lsls	r0, r3, #29
 80050b2:	d512      	bpl.n	80050da <__swsetup_r+0x7a>
 80050b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b6:	b141      	cbz	r1, 80050ca <__swsetup_r+0x6a>
 80050b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050bc:	4299      	cmp	r1, r3
 80050be:	d002      	beq.n	80050c6 <__swsetup_r+0x66>
 80050c0:	4630      	mov	r0, r6
 80050c2:	f001 fc8b 	bl	80069dc <_free_r>
 80050c6:	2300      	movs	r3, #0
 80050c8:	6363      	str	r3, [r4, #52]	; 0x34
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050d0:	81a3      	strh	r3, [r4, #12]
 80050d2:	2300      	movs	r3, #0
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f043 0308 	orr.w	r3, r3, #8
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	b94b      	cbnz	r3, 80050fa <__swsetup_r+0x9a>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f0:	d003      	beq.n	80050fa <__swsetup_r+0x9a>
 80050f2:	4621      	mov	r1, r4
 80050f4:	4630      	mov	r0, r6
 80050f6:	f001 f881 	bl	80061fc <__smakebuf_r>
 80050fa:	89a0      	ldrh	r0, [r4, #12]
 80050fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005100:	f010 0301 	ands.w	r3, r0, #1
 8005104:	d00a      	beq.n	800511c <__swsetup_r+0xbc>
 8005106:	2300      	movs	r3, #0
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	6963      	ldr	r3, [r4, #20]
 800510c:	425b      	negs	r3, r3
 800510e:	61a3      	str	r3, [r4, #24]
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	b943      	cbnz	r3, 8005126 <__swsetup_r+0xc6>
 8005114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005118:	d1ba      	bne.n	8005090 <__swsetup_r+0x30>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	0781      	lsls	r1, r0, #30
 800511e:	bf58      	it	pl
 8005120:	6963      	ldrpl	r3, [r4, #20]
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	e7f4      	b.n	8005110 <__swsetup_r+0xb0>
 8005126:	2000      	movs	r0, #0
 8005128:	e7f7      	b.n	800511a <__swsetup_r+0xba>
 800512a:	bf00      	nop
 800512c:	20000020 	.word	0x20000020
 8005130:	08007420 	.word	0x08007420
 8005134:	08007440 	.word	0x08007440
 8005138:	08007400 	.word	0x08007400

0800513c <quorem>:
 800513c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	6903      	ldr	r3, [r0, #16]
 8005142:	690c      	ldr	r4, [r1, #16]
 8005144:	42a3      	cmp	r3, r4
 8005146:	4607      	mov	r7, r0
 8005148:	f2c0 8081 	blt.w	800524e <quorem+0x112>
 800514c:	3c01      	subs	r4, #1
 800514e:	f101 0814 	add.w	r8, r1, #20
 8005152:	f100 0514 	add.w	r5, r0, #20
 8005156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005164:	3301      	adds	r3, #1
 8005166:	429a      	cmp	r2, r3
 8005168:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800516c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005170:	fbb2 f6f3 	udiv	r6, r2, r3
 8005174:	d331      	bcc.n	80051da <quorem+0x9e>
 8005176:	f04f 0e00 	mov.w	lr, #0
 800517a:	4640      	mov	r0, r8
 800517c:	46ac      	mov	ip, r5
 800517e:	46f2      	mov	sl, lr
 8005180:	f850 2b04 	ldr.w	r2, [r0], #4
 8005184:	b293      	uxth	r3, r2
 8005186:	fb06 e303 	mla	r3, r6, r3, lr
 800518a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800518e:	b29b      	uxth	r3, r3
 8005190:	ebaa 0303 	sub.w	r3, sl, r3
 8005194:	f8dc a000 	ldr.w	sl, [ip]
 8005198:	0c12      	lsrs	r2, r2, #16
 800519a:	fa13 f38a 	uxtah	r3, r3, sl
 800519e:	fb06 e202 	mla	r2, r6, r2, lr
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	9b00      	ldr	r3, [sp, #0]
 80051a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051aa:	b292      	uxth	r2, r2
 80051ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80051b8:	4581      	cmp	r9, r0
 80051ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051be:	f84c 3b04 	str.w	r3, [ip], #4
 80051c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051c6:	d2db      	bcs.n	8005180 <quorem+0x44>
 80051c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80051cc:	b92b      	cbnz	r3, 80051da <quorem+0x9e>
 80051ce:	9b01      	ldr	r3, [sp, #4]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	429d      	cmp	r5, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	d32e      	bcc.n	8005236 <quorem+0xfa>
 80051d8:	613c      	str	r4, [r7, #16]
 80051da:	4638      	mov	r0, r7
 80051dc:	f001 fae6 	bl	80067ac <__mcmp>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	db24      	blt.n	800522e <quorem+0xf2>
 80051e4:	3601      	adds	r6, #1
 80051e6:	4628      	mov	r0, r5
 80051e8:	f04f 0c00 	mov.w	ip, #0
 80051ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80051f0:	f8d0 e000 	ldr.w	lr, [r0]
 80051f4:	b293      	uxth	r3, r2
 80051f6:	ebac 0303 	sub.w	r3, ip, r3
 80051fa:	0c12      	lsrs	r2, r2, #16
 80051fc:	fa13 f38e 	uxtah	r3, r3, lr
 8005200:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800520e:	45c1      	cmp	r9, r8
 8005210:	f840 3b04 	str.w	r3, [r0], #4
 8005214:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005218:	d2e8      	bcs.n	80051ec <quorem+0xb0>
 800521a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800521e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005222:	b922      	cbnz	r2, 800522e <quorem+0xf2>
 8005224:	3b04      	subs	r3, #4
 8005226:	429d      	cmp	r5, r3
 8005228:	461a      	mov	r2, r3
 800522a:	d30a      	bcc.n	8005242 <quorem+0x106>
 800522c:	613c      	str	r4, [r7, #16]
 800522e:	4630      	mov	r0, r6
 8005230:	b003      	add	sp, #12
 8005232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	3b04      	subs	r3, #4
 800523a:	2a00      	cmp	r2, #0
 800523c:	d1cc      	bne.n	80051d8 <quorem+0x9c>
 800523e:	3c01      	subs	r4, #1
 8005240:	e7c7      	b.n	80051d2 <quorem+0x96>
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	3b04      	subs	r3, #4
 8005246:	2a00      	cmp	r2, #0
 8005248:	d1f0      	bne.n	800522c <quorem+0xf0>
 800524a:	3c01      	subs	r4, #1
 800524c:	e7eb      	b.n	8005226 <quorem+0xea>
 800524e:	2000      	movs	r0, #0
 8005250:	e7ee      	b.n	8005230 <quorem+0xf4>
 8005252:	0000      	movs	r0, r0
 8005254:	0000      	movs	r0, r0
	...

08005258 <_dtoa_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	ed2d 8b04 	vpush	{d8-d9}
 8005260:	ec57 6b10 	vmov	r6, r7, d0
 8005264:	b093      	sub	sp, #76	; 0x4c
 8005266:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005268:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800526c:	9106      	str	r1, [sp, #24]
 800526e:	ee10 aa10 	vmov	sl, s0
 8005272:	4604      	mov	r4, r0
 8005274:	9209      	str	r2, [sp, #36]	; 0x24
 8005276:	930c      	str	r3, [sp, #48]	; 0x30
 8005278:	46bb      	mov	fp, r7
 800527a:	b975      	cbnz	r5, 800529a <_dtoa_r+0x42>
 800527c:	2010      	movs	r0, #16
 800527e:	f000 fffd 	bl	800627c <malloc>
 8005282:	4602      	mov	r2, r0
 8005284:	6260      	str	r0, [r4, #36]	; 0x24
 8005286:	b920      	cbnz	r0, 8005292 <_dtoa_r+0x3a>
 8005288:	4ba7      	ldr	r3, [pc, #668]	; (8005528 <_dtoa_r+0x2d0>)
 800528a:	21ea      	movs	r1, #234	; 0xea
 800528c:	48a7      	ldr	r0, [pc, #668]	; (800552c <_dtoa_r+0x2d4>)
 800528e:	f001 fe45 	bl	8006f1c <__assert_func>
 8005292:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005296:	6005      	str	r5, [r0, #0]
 8005298:	60c5      	str	r5, [r0, #12]
 800529a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800529c:	6819      	ldr	r1, [r3, #0]
 800529e:	b151      	cbz	r1, 80052b6 <_dtoa_r+0x5e>
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	604a      	str	r2, [r1, #4]
 80052a4:	2301      	movs	r3, #1
 80052a6:	4093      	lsls	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
 80052aa:	4620      	mov	r0, r4
 80052ac:	f001 f83c 	bl	8006328 <_Bfree>
 80052b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	1e3b      	subs	r3, r7, #0
 80052b8:	bfaa      	itet	ge
 80052ba:	2300      	movge	r3, #0
 80052bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80052c0:	f8c8 3000 	strge.w	r3, [r8]
 80052c4:	4b9a      	ldr	r3, [pc, #616]	; (8005530 <_dtoa_r+0x2d8>)
 80052c6:	bfbc      	itt	lt
 80052c8:	2201      	movlt	r2, #1
 80052ca:	f8c8 2000 	strlt.w	r2, [r8]
 80052ce:	ea33 030b 	bics.w	r3, r3, fp
 80052d2:	d11b      	bne.n	800530c <_dtoa_r+0xb4>
 80052d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052e0:	4333      	orrs	r3, r6
 80052e2:	f000 8592 	beq.w	8005e0a <_dtoa_r+0xbb2>
 80052e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052e8:	b963      	cbnz	r3, 8005304 <_dtoa_r+0xac>
 80052ea:	4b92      	ldr	r3, [pc, #584]	; (8005534 <_dtoa_r+0x2dc>)
 80052ec:	e022      	b.n	8005334 <_dtoa_r+0xdc>
 80052ee:	4b92      	ldr	r3, [pc, #584]	; (8005538 <_dtoa_r+0x2e0>)
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	3308      	adds	r3, #8
 80052f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	9801      	ldr	r0, [sp, #4]
 80052fa:	b013      	add	sp, #76	; 0x4c
 80052fc:	ecbd 8b04 	vpop	{d8-d9}
 8005300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005304:	4b8b      	ldr	r3, [pc, #556]	; (8005534 <_dtoa_r+0x2dc>)
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	3303      	adds	r3, #3
 800530a:	e7f3      	b.n	80052f4 <_dtoa_r+0x9c>
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	4650      	mov	r0, sl
 8005312:	4659      	mov	r1, fp
 8005314:	f7fb fbe8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005318:	ec4b ab19 	vmov	d9, sl, fp
 800531c:	4680      	mov	r8, r0
 800531e:	b158      	cbz	r0, 8005338 <_dtoa_r+0xe0>
 8005320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005322:	2301      	movs	r3, #1
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 856b 	beq.w	8005e04 <_dtoa_r+0xbac>
 800532e:	4883      	ldr	r0, [pc, #524]	; (800553c <_dtoa_r+0x2e4>)
 8005330:	6018      	str	r0, [r3, #0]
 8005332:	1e43      	subs	r3, r0, #1
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	e7df      	b.n	80052f8 <_dtoa_r+0xa0>
 8005338:	ec4b ab10 	vmov	d0, sl, fp
 800533c:	aa10      	add	r2, sp, #64	; 0x40
 800533e:	a911      	add	r1, sp, #68	; 0x44
 8005340:	4620      	mov	r0, r4
 8005342:	f001 fad9 	bl	80068f8 <__d2b>
 8005346:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800534a:	ee08 0a10 	vmov	s16, r0
 800534e:	2d00      	cmp	r5, #0
 8005350:	f000 8084 	beq.w	800545c <_dtoa_r+0x204>
 8005354:	ee19 3a90 	vmov	r3, s19
 8005358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800535c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005360:	4656      	mov	r6, sl
 8005362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800536a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800536e:	4b74      	ldr	r3, [pc, #464]	; (8005540 <_dtoa_r+0x2e8>)
 8005370:	2200      	movs	r2, #0
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fa ff97 	bl	80002a8 <__aeabi_dsub>
 800537a:	a365      	add	r3, pc, #404	; (adr r3, 8005510 <_dtoa_r+0x2b8>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fb f94a 	bl	8000618 <__aeabi_dmul>
 8005384:	a364      	add	r3, pc, #400	; (adr r3, 8005518 <_dtoa_r+0x2c0>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f7fa ff8f 	bl	80002ac <__adddf3>
 800538e:	4606      	mov	r6, r0
 8005390:	4628      	mov	r0, r5
 8005392:	460f      	mov	r7, r1
 8005394:	f7fb f8d6 	bl	8000544 <__aeabi_i2d>
 8005398:	a361      	add	r3, pc, #388	; (adr r3, 8005520 <_dtoa_r+0x2c8>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fb f93b 	bl	8000618 <__aeabi_dmul>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4630      	mov	r0, r6
 80053a8:	4639      	mov	r1, r7
 80053aa:	f7fa ff7f 	bl	80002ac <__adddf3>
 80053ae:	4606      	mov	r6, r0
 80053b0:	460f      	mov	r7, r1
 80053b2:	f7fb fbe1 	bl	8000b78 <__aeabi_d2iz>
 80053b6:	2200      	movs	r2, #0
 80053b8:	9000      	str	r0, [sp, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	4630      	mov	r0, r6
 80053be:	4639      	mov	r1, r7
 80053c0:	f7fb fb9c 	bl	8000afc <__aeabi_dcmplt>
 80053c4:	b150      	cbz	r0, 80053dc <_dtoa_r+0x184>
 80053c6:	9800      	ldr	r0, [sp, #0]
 80053c8:	f7fb f8bc 	bl	8000544 <__aeabi_i2d>
 80053cc:	4632      	mov	r2, r6
 80053ce:	463b      	mov	r3, r7
 80053d0:	f7fb fb8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80053d4:	b910      	cbnz	r0, 80053dc <_dtoa_r+0x184>
 80053d6:	9b00      	ldr	r3, [sp, #0]
 80053d8:	3b01      	subs	r3, #1
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	9b00      	ldr	r3, [sp, #0]
 80053de:	2b16      	cmp	r3, #22
 80053e0:	d85a      	bhi.n	8005498 <_dtoa_r+0x240>
 80053e2:	9a00      	ldr	r2, [sp, #0]
 80053e4:	4b57      	ldr	r3, [pc, #348]	; (8005544 <_dtoa_r+0x2ec>)
 80053e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	ec51 0b19 	vmov	r0, r1, d9
 80053f2:	f7fb fb83 	bl	8000afc <__aeabi_dcmplt>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d050      	beq.n	800549c <_dtoa_r+0x244>
 80053fa:	9b00      	ldr	r3, [sp, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2300      	movs	r3, #0
 8005402:	930b      	str	r3, [sp, #44]	; 0x2c
 8005404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005406:	1b5d      	subs	r5, r3, r5
 8005408:	1e6b      	subs	r3, r5, #1
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	bf45      	ittet	mi
 800540e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005412:	9304      	strmi	r3, [sp, #16]
 8005414:	2300      	movpl	r3, #0
 8005416:	2300      	movmi	r3, #0
 8005418:	bf4c      	ite	mi
 800541a:	9305      	strmi	r3, [sp, #20]
 800541c:	9304      	strpl	r3, [sp, #16]
 800541e:	9b00      	ldr	r3, [sp, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	db3d      	blt.n	80054a0 <_dtoa_r+0x248>
 8005424:	9b05      	ldr	r3, [sp, #20]
 8005426:	9a00      	ldr	r2, [sp, #0]
 8005428:	920a      	str	r2, [sp, #40]	; 0x28
 800542a:	4413      	add	r3, r2
 800542c:	9305      	str	r3, [sp, #20]
 800542e:	2300      	movs	r3, #0
 8005430:	9307      	str	r3, [sp, #28]
 8005432:	9b06      	ldr	r3, [sp, #24]
 8005434:	2b09      	cmp	r3, #9
 8005436:	f200 8089 	bhi.w	800554c <_dtoa_r+0x2f4>
 800543a:	2b05      	cmp	r3, #5
 800543c:	bfc4      	itt	gt
 800543e:	3b04      	subgt	r3, #4
 8005440:	9306      	strgt	r3, [sp, #24]
 8005442:	9b06      	ldr	r3, [sp, #24]
 8005444:	f1a3 0302 	sub.w	r3, r3, #2
 8005448:	bfcc      	ite	gt
 800544a:	2500      	movgt	r5, #0
 800544c:	2501      	movle	r5, #1
 800544e:	2b03      	cmp	r3, #3
 8005450:	f200 8087 	bhi.w	8005562 <_dtoa_r+0x30a>
 8005454:	e8df f003 	tbb	[pc, r3]
 8005458:	59383a2d 	.word	0x59383a2d
 800545c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005460:	441d      	add	r5, r3
 8005462:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005466:	2b20      	cmp	r3, #32
 8005468:	bfc1      	itttt	gt
 800546a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800546e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005472:	fa0b f303 	lslgt.w	r3, fp, r3
 8005476:	fa26 f000 	lsrgt.w	r0, r6, r0
 800547a:	bfda      	itte	le
 800547c:	f1c3 0320 	rsble	r3, r3, #32
 8005480:	fa06 f003 	lslle.w	r0, r6, r3
 8005484:	4318      	orrgt	r0, r3
 8005486:	f7fb f84d 	bl	8000524 <__aeabi_ui2d>
 800548a:	2301      	movs	r3, #1
 800548c:	4606      	mov	r6, r0
 800548e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005492:	3d01      	subs	r5, #1
 8005494:	930e      	str	r3, [sp, #56]	; 0x38
 8005496:	e76a      	b.n	800536e <_dtoa_r+0x116>
 8005498:	2301      	movs	r3, #1
 800549a:	e7b2      	b.n	8005402 <_dtoa_r+0x1aa>
 800549c:	900b      	str	r0, [sp, #44]	; 0x2c
 800549e:	e7b1      	b.n	8005404 <_dtoa_r+0x1ac>
 80054a0:	9b04      	ldr	r3, [sp, #16]
 80054a2:	9a00      	ldr	r2, [sp, #0]
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	9304      	str	r3, [sp, #16]
 80054a8:	4253      	negs	r3, r2
 80054aa:	9307      	str	r3, [sp, #28]
 80054ac:	2300      	movs	r3, #0
 80054ae:	930a      	str	r3, [sp, #40]	; 0x28
 80054b0:	e7bf      	b.n	8005432 <_dtoa_r+0x1da>
 80054b2:	2300      	movs	r3, #0
 80054b4:	9308      	str	r3, [sp, #32]
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	dc55      	bgt.n	8005568 <_dtoa_r+0x310>
 80054bc:	2301      	movs	r3, #1
 80054be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054c2:	461a      	mov	r2, r3
 80054c4:	9209      	str	r2, [sp, #36]	; 0x24
 80054c6:	e00c      	b.n	80054e2 <_dtoa_r+0x28a>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e7f3      	b.n	80054b4 <_dtoa_r+0x25c>
 80054cc:	2300      	movs	r3, #0
 80054ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d0:	9308      	str	r3, [sp, #32]
 80054d2:	9b00      	ldr	r3, [sp, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	9302      	str	r3, [sp, #8]
 80054d8:	3301      	adds	r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	9303      	str	r3, [sp, #12]
 80054de:	bfb8      	it	lt
 80054e0:	2301      	movlt	r3, #1
 80054e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054e4:	2200      	movs	r2, #0
 80054e6:	6042      	str	r2, [r0, #4]
 80054e8:	2204      	movs	r2, #4
 80054ea:	f102 0614 	add.w	r6, r2, #20
 80054ee:	429e      	cmp	r6, r3
 80054f0:	6841      	ldr	r1, [r0, #4]
 80054f2:	d93d      	bls.n	8005570 <_dtoa_r+0x318>
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fed7 	bl	80062a8 <_Balloc>
 80054fa:	9001      	str	r0, [sp, #4]
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d13b      	bne.n	8005578 <_dtoa_r+0x320>
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <_dtoa_r+0x2f0>)
 8005502:	4602      	mov	r2, r0
 8005504:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005508:	e6c0      	b.n	800528c <_dtoa_r+0x34>
 800550a:	2301      	movs	r3, #1
 800550c:	e7df      	b.n	80054ce <_dtoa_r+0x276>
 800550e:	bf00      	nop
 8005510:	636f4361 	.word	0x636f4361
 8005514:	3fd287a7 	.word	0x3fd287a7
 8005518:	8b60c8b3 	.word	0x8b60c8b3
 800551c:	3fc68a28 	.word	0x3fc68a28
 8005520:	509f79fb 	.word	0x509f79fb
 8005524:	3fd34413 	.word	0x3fd34413
 8005528:	0800737d 	.word	0x0800737d
 800552c:	08007394 	.word	0x08007394
 8005530:	7ff00000 	.word	0x7ff00000
 8005534:	08007379 	.word	0x08007379
 8005538:	08007370 	.word	0x08007370
 800553c:	0800734d 	.word	0x0800734d
 8005540:	3ff80000 	.word	0x3ff80000
 8005544:	080074e8 	.word	0x080074e8
 8005548:	080073ef 	.word	0x080073ef
 800554c:	2501      	movs	r5, #1
 800554e:	2300      	movs	r3, #0
 8005550:	9306      	str	r3, [sp, #24]
 8005552:	9508      	str	r5, [sp, #32]
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
 8005558:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800555c:	2200      	movs	r2, #0
 800555e:	2312      	movs	r3, #18
 8005560:	e7b0      	b.n	80054c4 <_dtoa_r+0x26c>
 8005562:	2301      	movs	r3, #1
 8005564:	9308      	str	r3, [sp, #32]
 8005566:	e7f5      	b.n	8005554 <_dtoa_r+0x2fc>
 8005568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800556e:	e7b8      	b.n	80054e2 <_dtoa_r+0x28a>
 8005570:	3101      	adds	r1, #1
 8005572:	6041      	str	r1, [r0, #4]
 8005574:	0052      	lsls	r2, r2, #1
 8005576:	e7b8      	b.n	80054ea <_dtoa_r+0x292>
 8005578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800557a:	9a01      	ldr	r2, [sp, #4]
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	2b0e      	cmp	r3, #14
 8005582:	f200 809d 	bhi.w	80056c0 <_dtoa_r+0x468>
 8005586:	2d00      	cmp	r5, #0
 8005588:	f000 809a 	beq.w	80056c0 <_dtoa_r+0x468>
 800558c:	9b00      	ldr	r3, [sp, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	dd32      	ble.n	80055f8 <_dtoa_r+0x3a0>
 8005592:	4ab7      	ldr	r2, [pc, #732]	; (8005870 <_dtoa_r+0x618>)
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800559c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055a0:	9b00      	ldr	r3, [sp, #0]
 80055a2:	05d8      	lsls	r0, r3, #23
 80055a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055a8:	d516      	bpl.n	80055d8 <_dtoa_r+0x380>
 80055aa:	4bb2      	ldr	r3, [pc, #712]	; (8005874 <_dtoa_r+0x61c>)
 80055ac:	ec51 0b19 	vmov	r0, r1, d9
 80055b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055b4:	f7fb f95a 	bl	800086c <__aeabi_ddiv>
 80055b8:	f007 070f 	and.w	r7, r7, #15
 80055bc:	4682      	mov	sl, r0
 80055be:	468b      	mov	fp, r1
 80055c0:	2503      	movs	r5, #3
 80055c2:	4eac      	ldr	r6, [pc, #688]	; (8005874 <_dtoa_r+0x61c>)
 80055c4:	b957      	cbnz	r7, 80055dc <_dtoa_r+0x384>
 80055c6:	4642      	mov	r2, r8
 80055c8:	464b      	mov	r3, r9
 80055ca:	4650      	mov	r0, sl
 80055cc:	4659      	mov	r1, fp
 80055ce:	f7fb f94d 	bl	800086c <__aeabi_ddiv>
 80055d2:	4682      	mov	sl, r0
 80055d4:	468b      	mov	fp, r1
 80055d6:	e028      	b.n	800562a <_dtoa_r+0x3d2>
 80055d8:	2502      	movs	r5, #2
 80055da:	e7f2      	b.n	80055c2 <_dtoa_r+0x36a>
 80055dc:	07f9      	lsls	r1, r7, #31
 80055de:	d508      	bpl.n	80055f2 <_dtoa_r+0x39a>
 80055e0:	4640      	mov	r0, r8
 80055e2:	4649      	mov	r1, r9
 80055e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055e8:	f7fb f816 	bl	8000618 <__aeabi_dmul>
 80055ec:	3501      	adds	r5, #1
 80055ee:	4680      	mov	r8, r0
 80055f0:	4689      	mov	r9, r1
 80055f2:	107f      	asrs	r7, r7, #1
 80055f4:	3608      	adds	r6, #8
 80055f6:	e7e5      	b.n	80055c4 <_dtoa_r+0x36c>
 80055f8:	f000 809b 	beq.w	8005732 <_dtoa_r+0x4da>
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	4f9d      	ldr	r7, [pc, #628]	; (8005874 <_dtoa_r+0x61c>)
 8005600:	425e      	negs	r6, r3
 8005602:	4b9b      	ldr	r3, [pc, #620]	; (8005870 <_dtoa_r+0x618>)
 8005604:	f006 020f 	and.w	r2, r6, #15
 8005608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	ec51 0b19 	vmov	r0, r1, d9
 8005614:	f7fb f800 	bl	8000618 <__aeabi_dmul>
 8005618:	1136      	asrs	r6, r6, #4
 800561a:	4682      	mov	sl, r0
 800561c:	468b      	mov	fp, r1
 800561e:	2300      	movs	r3, #0
 8005620:	2502      	movs	r5, #2
 8005622:	2e00      	cmp	r6, #0
 8005624:	d17a      	bne.n	800571c <_dtoa_r+0x4c4>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1d3      	bne.n	80055d2 <_dtoa_r+0x37a>
 800562a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8082 	beq.w	8005736 <_dtoa_r+0x4de>
 8005632:	4b91      	ldr	r3, [pc, #580]	; (8005878 <_dtoa_r+0x620>)
 8005634:	2200      	movs	r2, #0
 8005636:	4650      	mov	r0, sl
 8005638:	4659      	mov	r1, fp
 800563a:	f7fb fa5f 	bl	8000afc <__aeabi_dcmplt>
 800563e:	2800      	cmp	r0, #0
 8005640:	d079      	beq.n	8005736 <_dtoa_r+0x4de>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d076      	beq.n	8005736 <_dtoa_r+0x4de>
 8005648:	9b02      	ldr	r3, [sp, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	dd36      	ble.n	80056bc <_dtoa_r+0x464>
 800564e:	9b00      	ldr	r3, [sp, #0]
 8005650:	4650      	mov	r0, sl
 8005652:	4659      	mov	r1, fp
 8005654:	1e5f      	subs	r7, r3, #1
 8005656:	2200      	movs	r2, #0
 8005658:	4b88      	ldr	r3, [pc, #544]	; (800587c <_dtoa_r+0x624>)
 800565a:	f7fa ffdd 	bl	8000618 <__aeabi_dmul>
 800565e:	9e02      	ldr	r6, [sp, #8]
 8005660:	4682      	mov	sl, r0
 8005662:	468b      	mov	fp, r1
 8005664:	3501      	adds	r5, #1
 8005666:	4628      	mov	r0, r5
 8005668:	f7fa ff6c 	bl	8000544 <__aeabi_i2d>
 800566c:	4652      	mov	r2, sl
 800566e:	465b      	mov	r3, fp
 8005670:	f7fa ffd2 	bl	8000618 <__aeabi_dmul>
 8005674:	4b82      	ldr	r3, [pc, #520]	; (8005880 <_dtoa_r+0x628>)
 8005676:	2200      	movs	r2, #0
 8005678:	f7fa fe18 	bl	80002ac <__adddf3>
 800567c:	46d0      	mov	r8, sl
 800567e:	46d9      	mov	r9, fp
 8005680:	4682      	mov	sl, r0
 8005682:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005686:	2e00      	cmp	r6, #0
 8005688:	d158      	bne.n	800573c <_dtoa_r+0x4e4>
 800568a:	4b7e      	ldr	r3, [pc, #504]	; (8005884 <_dtoa_r+0x62c>)
 800568c:	2200      	movs	r2, #0
 800568e:	4640      	mov	r0, r8
 8005690:	4649      	mov	r1, r9
 8005692:	f7fa fe09 	bl	80002a8 <__aeabi_dsub>
 8005696:	4652      	mov	r2, sl
 8005698:	465b      	mov	r3, fp
 800569a:	4680      	mov	r8, r0
 800569c:	4689      	mov	r9, r1
 800569e:	f7fb fa4b 	bl	8000b38 <__aeabi_dcmpgt>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f040 8295 	bne.w	8005bd2 <_dtoa_r+0x97a>
 80056a8:	4652      	mov	r2, sl
 80056aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056ae:	4640      	mov	r0, r8
 80056b0:	4649      	mov	r1, r9
 80056b2:	f7fb fa23 	bl	8000afc <__aeabi_dcmplt>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f040 8289 	bne.w	8005bce <_dtoa_r+0x976>
 80056bc:	ec5b ab19 	vmov	sl, fp, d9
 80056c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f2c0 8148 	blt.w	8005958 <_dtoa_r+0x700>
 80056c8:	9a00      	ldr	r2, [sp, #0]
 80056ca:	2a0e      	cmp	r2, #14
 80056cc:	f300 8144 	bgt.w	8005958 <_dtoa_r+0x700>
 80056d0:	4b67      	ldr	r3, [pc, #412]	; (8005870 <_dtoa_r+0x618>)
 80056d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f280 80d5 	bge.w	800588c <_dtoa_r+0x634>
 80056e2:	9b03      	ldr	r3, [sp, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f300 80d1 	bgt.w	800588c <_dtoa_r+0x634>
 80056ea:	f040 826f 	bne.w	8005bcc <_dtoa_r+0x974>
 80056ee:	4b65      	ldr	r3, [pc, #404]	; (8005884 <_dtoa_r+0x62c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	4640      	mov	r0, r8
 80056f4:	4649      	mov	r1, r9
 80056f6:	f7fa ff8f 	bl	8000618 <__aeabi_dmul>
 80056fa:	4652      	mov	r2, sl
 80056fc:	465b      	mov	r3, fp
 80056fe:	f7fb fa11 	bl	8000b24 <__aeabi_dcmpge>
 8005702:	9e03      	ldr	r6, [sp, #12]
 8005704:	4637      	mov	r7, r6
 8005706:	2800      	cmp	r0, #0
 8005708:	f040 8245 	bne.w	8005b96 <_dtoa_r+0x93e>
 800570c:	9d01      	ldr	r5, [sp, #4]
 800570e:	2331      	movs	r3, #49	; 0x31
 8005710:	f805 3b01 	strb.w	r3, [r5], #1
 8005714:	9b00      	ldr	r3, [sp, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	e240      	b.n	8005b9e <_dtoa_r+0x946>
 800571c:	07f2      	lsls	r2, r6, #31
 800571e:	d505      	bpl.n	800572c <_dtoa_r+0x4d4>
 8005720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005724:	f7fa ff78 	bl	8000618 <__aeabi_dmul>
 8005728:	3501      	adds	r5, #1
 800572a:	2301      	movs	r3, #1
 800572c:	1076      	asrs	r6, r6, #1
 800572e:	3708      	adds	r7, #8
 8005730:	e777      	b.n	8005622 <_dtoa_r+0x3ca>
 8005732:	2502      	movs	r5, #2
 8005734:	e779      	b.n	800562a <_dtoa_r+0x3d2>
 8005736:	9f00      	ldr	r7, [sp, #0]
 8005738:	9e03      	ldr	r6, [sp, #12]
 800573a:	e794      	b.n	8005666 <_dtoa_r+0x40e>
 800573c:	9901      	ldr	r1, [sp, #4]
 800573e:	4b4c      	ldr	r3, [pc, #304]	; (8005870 <_dtoa_r+0x618>)
 8005740:	4431      	add	r1, r6
 8005742:	910d      	str	r1, [sp, #52]	; 0x34
 8005744:	9908      	ldr	r1, [sp, #32]
 8005746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800574a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800574e:	2900      	cmp	r1, #0
 8005750:	d043      	beq.n	80057da <_dtoa_r+0x582>
 8005752:	494d      	ldr	r1, [pc, #308]	; (8005888 <_dtoa_r+0x630>)
 8005754:	2000      	movs	r0, #0
 8005756:	f7fb f889 	bl	800086c <__aeabi_ddiv>
 800575a:	4652      	mov	r2, sl
 800575c:	465b      	mov	r3, fp
 800575e:	f7fa fda3 	bl	80002a8 <__aeabi_dsub>
 8005762:	9d01      	ldr	r5, [sp, #4]
 8005764:	4682      	mov	sl, r0
 8005766:	468b      	mov	fp, r1
 8005768:	4649      	mov	r1, r9
 800576a:	4640      	mov	r0, r8
 800576c:	f7fb fa04 	bl	8000b78 <__aeabi_d2iz>
 8005770:	4606      	mov	r6, r0
 8005772:	f7fa fee7 	bl	8000544 <__aeabi_i2d>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4640      	mov	r0, r8
 800577c:	4649      	mov	r1, r9
 800577e:	f7fa fd93 	bl	80002a8 <__aeabi_dsub>
 8005782:	3630      	adds	r6, #48	; 0x30
 8005784:	f805 6b01 	strb.w	r6, [r5], #1
 8005788:	4652      	mov	r2, sl
 800578a:	465b      	mov	r3, fp
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	f7fb f9b4 	bl	8000afc <__aeabi_dcmplt>
 8005794:	2800      	cmp	r0, #0
 8005796:	d163      	bne.n	8005860 <_dtoa_r+0x608>
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	4936      	ldr	r1, [pc, #216]	; (8005878 <_dtoa_r+0x620>)
 800579e:	2000      	movs	r0, #0
 80057a0:	f7fa fd82 	bl	80002a8 <__aeabi_dsub>
 80057a4:	4652      	mov	r2, sl
 80057a6:	465b      	mov	r3, fp
 80057a8:	f7fb f9a8 	bl	8000afc <__aeabi_dcmplt>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f040 80b5 	bne.w	800591c <_dtoa_r+0x6c4>
 80057b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057b4:	429d      	cmp	r5, r3
 80057b6:	d081      	beq.n	80056bc <_dtoa_r+0x464>
 80057b8:	4b30      	ldr	r3, [pc, #192]	; (800587c <_dtoa_r+0x624>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	4650      	mov	r0, sl
 80057be:	4659      	mov	r1, fp
 80057c0:	f7fa ff2a 	bl	8000618 <__aeabi_dmul>
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <_dtoa_r+0x624>)
 80057c6:	4682      	mov	sl, r0
 80057c8:	468b      	mov	fp, r1
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	2200      	movs	r2, #0
 80057d0:	f7fa ff22 	bl	8000618 <__aeabi_dmul>
 80057d4:	4680      	mov	r8, r0
 80057d6:	4689      	mov	r9, r1
 80057d8:	e7c6      	b.n	8005768 <_dtoa_r+0x510>
 80057da:	4650      	mov	r0, sl
 80057dc:	4659      	mov	r1, fp
 80057de:	f7fa ff1b 	bl	8000618 <__aeabi_dmul>
 80057e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e4:	9d01      	ldr	r5, [sp, #4]
 80057e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057e8:	4682      	mov	sl, r0
 80057ea:	468b      	mov	fp, r1
 80057ec:	4649      	mov	r1, r9
 80057ee:	4640      	mov	r0, r8
 80057f0:	f7fb f9c2 	bl	8000b78 <__aeabi_d2iz>
 80057f4:	4606      	mov	r6, r0
 80057f6:	f7fa fea5 	bl	8000544 <__aeabi_i2d>
 80057fa:	3630      	adds	r6, #48	; 0x30
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4640      	mov	r0, r8
 8005802:	4649      	mov	r1, r9
 8005804:	f7fa fd50 	bl	80002a8 <__aeabi_dsub>
 8005808:	f805 6b01 	strb.w	r6, [r5], #1
 800580c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800580e:	429d      	cmp	r5, r3
 8005810:	4680      	mov	r8, r0
 8005812:	4689      	mov	r9, r1
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	d124      	bne.n	8005864 <_dtoa_r+0x60c>
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <_dtoa_r+0x630>)
 800581c:	4650      	mov	r0, sl
 800581e:	4659      	mov	r1, fp
 8005820:	f7fa fd44 	bl	80002ac <__adddf3>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4640      	mov	r0, r8
 800582a:	4649      	mov	r1, r9
 800582c:	f7fb f984 	bl	8000b38 <__aeabi_dcmpgt>
 8005830:	2800      	cmp	r0, #0
 8005832:	d173      	bne.n	800591c <_dtoa_r+0x6c4>
 8005834:	4652      	mov	r2, sl
 8005836:	465b      	mov	r3, fp
 8005838:	4913      	ldr	r1, [pc, #76]	; (8005888 <_dtoa_r+0x630>)
 800583a:	2000      	movs	r0, #0
 800583c:	f7fa fd34 	bl	80002a8 <__aeabi_dsub>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4640      	mov	r0, r8
 8005846:	4649      	mov	r1, r9
 8005848:	f7fb f958 	bl	8000afc <__aeabi_dcmplt>
 800584c:	2800      	cmp	r0, #0
 800584e:	f43f af35 	beq.w	80056bc <_dtoa_r+0x464>
 8005852:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005854:	1e6b      	subs	r3, r5, #1
 8005856:	930f      	str	r3, [sp, #60]	; 0x3c
 8005858:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800585c:	2b30      	cmp	r3, #48	; 0x30
 800585e:	d0f8      	beq.n	8005852 <_dtoa_r+0x5fa>
 8005860:	9700      	str	r7, [sp, #0]
 8005862:	e049      	b.n	80058f8 <_dtoa_r+0x6a0>
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <_dtoa_r+0x624>)
 8005866:	f7fa fed7 	bl	8000618 <__aeabi_dmul>
 800586a:	4680      	mov	r8, r0
 800586c:	4689      	mov	r9, r1
 800586e:	e7bd      	b.n	80057ec <_dtoa_r+0x594>
 8005870:	080074e8 	.word	0x080074e8
 8005874:	080074c0 	.word	0x080074c0
 8005878:	3ff00000 	.word	0x3ff00000
 800587c:	40240000 	.word	0x40240000
 8005880:	401c0000 	.word	0x401c0000
 8005884:	40140000 	.word	0x40140000
 8005888:	3fe00000 	.word	0x3fe00000
 800588c:	9d01      	ldr	r5, [sp, #4]
 800588e:	4656      	mov	r6, sl
 8005890:	465f      	mov	r7, fp
 8005892:	4642      	mov	r2, r8
 8005894:	464b      	mov	r3, r9
 8005896:	4630      	mov	r0, r6
 8005898:	4639      	mov	r1, r7
 800589a:	f7fa ffe7 	bl	800086c <__aeabi_ddiv>
 800589e:	f7fb f96b 	bl	8000b78 <__aeabi_d2iz>
 80058a2:	4682      	mov	sl, r0
 80058a4:	f7fa fe4e 	bl	8000544 <__aeabi_i2d>
 80058a8:	4642      	mov	r2, r8
 80058aa:	464b      	mov	r3, r9
 80058ac:	f7fa feb4 	bl	8000618 <__aeabi_dmul>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4630      	mov	r0, r6
 80058b6:	4639      	mov	r1, r7
 80058b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058bc:	f7fa fcf4 	bl	80002a8 <__aeabi_dsub>
 80058c0:	f805 6b01 	strb.w	r6, [r5], #1
 80058c4:	9e01      	ldr	r6, [sp, #4]
 80058c6:	9f03      	ldr	r7, [sp, #12]
 80058c8:	1bae      	subs	r6, r5, r6
 80058ca:	42b7      	cmp	r7, r6
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	d135      	bne.n	800593e <_dtoa_r+0x6e6>
 80058d2:	f7fa fceb 	bl	80002ac <__adddf3>
 80058d6:	4642      	mov	r2, r8
 80058d8:	464b      	mov	r3, r9
 80058da:	4606      	mov	r6, r0
 80058dc:	460f      	mov	r7, r1
 80058de:	f7fb f92b 	bl	8000b38 <__aeabi_dcmpgt>
 80058e2:	b9d0      	cbnz	r0, 800591a <_dtoa_r+0x6c2>
 80058e4:	4642      	mov	r2, r8
 80058e6:	464b      	mov	r3, r9
 80058e8:	4630      	mov	r0, r6
 80058ea:	4639      	mov	r1, r7
 80058ec:	f7fb f8fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80058f0:	b110      	cbz	r0, 80058f8 <_dtoa_r+0x6a0>
 80058f2:	f01a 0f01 	tst.w	sl, #1
 80058f6:	d110      	bne.n	800591a <_dtoa_r+0x6c2>
 80058f8:	4620      	mov	r0, r4
 80058fa:	ee18 1a10 	vmov	r1, s16
 80058fe:	f000 fd13 	bl	8006328 <_Bfree>
 8005902:	2300      	movs	r3, #0
 8005904:	9800      	ldr	r0, [sp, #0]
 8005906:	702b      	strb	r3, [r5, #0]
 8005908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800590a:	3001      	adds	r0, #1
 800590c:	6018      	str	r0, [r3, #0]
 800590e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005910:	2b00      	cmp	r3, #0
 8005912:	f43f acf1 	beq.w	80052f8 <_dtoa_r+0xa0>
 8005916:	601d      	str	r5, [r3, #0]
 8005918:	e4ee      	b.n	80052f8 <_dtoa_r+0xa0>
 800591a:	9f00      	ldr	r7, [sp, #0]
 800591c:	462b      	mov	r3, r5
 800591e:	461d      	mov	r5, r3
 8005920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005924:	2a39      	cmp	r2, #57	; 0x39
 8005926:	d106      	bne.n	8005936 <_dtoa_r+0x6de>
 8005928:	9a01      	ldr	r2, [sp, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d1f7      	bne.n	800591e <_dtoa_r+0x6c6>
 800592e:	9901      	ldr	r1, [sp, #4]
 8005930:	2230      	movs	r2, #48	; 0x30
 8005932:	3701      	adds	r7, #1
 8005934:	700a      	strb	r2, [r1, #0]
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	3201      	adds	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e790      	b.n	8005860 <_dtoa_r+0x608>
 800593e:	4ba6      	ldr	r3, [pc, #664]	; (8005bd8 <_dtoa_r+0x980>)
 8005940:	2200      	movs	r2, #0
 8005942:	f7fa fe69 	bl	8000618 <__aeabi_dmul>
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	4606      	mov	r6, r0
 800594c:	460f      	mov	r7, r1
 800594e:	f7fb f8cb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005952:	2800      	cmp	r0, #0
 8005954:	d09d      	beq.n	8005892 <_dtoa_r+0x63a>
 8005956:	e7cf      	b.n	80058f8 <_dtoa_r+0x6a0>
 8005958:	9a08      	ldr	r2, [sp, #32]
 800595a:	2a00      	cmp	r2, #0
 800595c:	f000 80d7 	beq.w	8005b0e <_dtoa_r+0x8b6>
 8005960:	9a06      	ldr	r2, [sp, #24]
 8005962:	2a01      	cmp	r2, #1
 8005964:	f300 80ba 	bgt.w	8005adc <_dtoa_r+0x884>
 8005968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800596a:	2a00      	cmp	r2, #0
 800596c:	f000 80b2 	beq.w	8005ad4 <_dtoa_r+0x87c>
 8005970:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005974:	9e07      	ldr	r6, [sp, #28]
 8005976:	9d04      	ldr	r5, [sp, #16]
 8005978:	9a04      	ldr	r2, [sp, #16]
 800597a:	441a      	add	r2, r3
 800597c:	9204      	str	r2, [sp, #16]
 800597e:	9a05      	ldr	r2, [sp, #20]
 8005980:	2101      	movs	r1, #1
 8005982:	441a      	add	r2, r3
 8005984:	4620      	mov	r0, r4
 8005986:	9205      	str	r2, [sp, #20]
 8005988:	f000 fd86 	bl	8006498 <__i2b>
 800598c:	4607      	mov	r7, r0
 800598e:	2d00      	cmp	r5, #0
 8005990:	dd0c      	ble.n	80059ac <_dtoa_r+0x754>
 8005992:	9b05      	ldr	r3, [sp, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	dd09      	ble.n	80059ac <_dtoa_r+0x754>
 8005998:	42ab      	cmp	r3, r5
 800599a:	9a04      	ldr	r2, [sp, #16]
 800599c:	bfa8      	it	ge
 800599e:	462b      	movge	r3, r5
 80059a0:	1ad2      	subs	r2, r2, r3
 80059a2:	9204      	str	r2, [sp, #16]
 80059a4:	9a05      	ldr	r2, [sp, #20]
 80059a6:	1aed      	subs	r5, r5, r3
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	b31b      	cbz	r3, 80059f8 <_dtoa_r+0x7a0>
 80059b0:	9b08      	ldr	r3, [sp, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80af 	beq.w	8005b16 <_dtoa_r+0x8be>
 80059b8:	2e00      	cmp	r6, #0
 80059ba:	dd13      	ble.n	80059e4 <_dtoa_r+0x78c>
 80059bc:	4639      	mov	r1, r7
 80059be:	4632      	mov	r2, r6
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 fe29 	bl	8006618 <__pow5mult>
 80059c6:	ee18 2a10 	vmov	r2, s16
 80059ca:	4601      	mov	r1, r0
 80059cc:	4607      	mov	r7, r0
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 fd78 	bl	80064c4 <__multiply>
 80059d4:	ee18 1a10 	vmov	r1, s16
 80059d8:	4680      	mov	r8, r0
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 fca4 	bl	8006328 <_Bfree>
 80059e0:	ee08 8a10 	vmov	s16, r8
 80059e4:	9b07      	ldr	r3, [sp, #28]
 80059e6:	1b9a      	subs	r2, r3, r6
 80059e8:	d006      	beq.n	80059f8 <_dtoa_r+0x7a0>
 80059ea:	ee18 1a10 	vmov	r1, s16
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fe12 	bl	8006618 <__pow5mult>
 80059f4:	ee08 0a10 	vmov	s16, r0
 80059f8:	2101      	movs	r1, #1
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fd4c 	bl	8006498 <__i2b>
 8005a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	4606      	mov	r6, r0
 8005a06:	f340 8088 	ble.w	8005b1a <_dtoa_r+0x8c2>
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4601      	mov	r1, r0
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 fe02 	bl	8006618 <__pow5mult>
 8005a14:	9b06      	ldr	r3, [sp, #24]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	4606      	mov	r6, r0
 8005a1a:	f340 8081 	ble.w	8005b20 <_dtoa_r+0x8c8>
 8005a1e:	f04f 0800 	mov.w	r8, #0
 8005a22:	6933      	ldr	r3, [r6, #16]
 8005a24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a28:	6918      	ldr	r0, [r3, #16]
 8005a2a:	f000 fce5 	bl	80063f8 <__hi0bits>
 8005a2e:	f1c0 0020 	rsb	r0, r0, #32
 8005a32:	9b05      	ldr	r3, [sp, #20]
 8005a34:	4418      	add	r0, r3
 8005a36:	f010 001f 	ands.w	r0, r0, #31
 8005a3a:	f000 8092 	beq.w	8005b62 <_dtoa_r+0x90a>
 8005a3e:	f1c0 0320 	rsb	r3, r0, #32
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	f340 808a 	ble.w	8005b5c <_dtoa_r+0x904>
 8005a48:	f1c0 001c 	rsb	r0, r0, #28
 8005a4c:	9b04      	ldr	r3, [sp, #16]
 8005a4e:	4403      	add	r3, r0
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	9b05      	ldr	r3, [sp, #20]
 8005a54:	4403      	add	r3, r0
 8005a56:	4405      	add	r5, r0
 8005a58:	9305      	str	r3, [sp, #20]
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dd07      	ble.n	8005a70 <_dtoa_r+0x818>
 8005a60:	ee18 1a10 	vmov	r1, s16
 8005a64:	461a      	mov	r2, r3
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fe30 	bl	80066cc <__lshift>
 8005a6c:	ee08 0a10 	vmov	s16, r0
 8005a70:	9b05      	ldr	r3, [sp, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dd05      	ble.n	8005a82 <_dtoa_r+0x82a>
 8005a76:	4631      	mov	r1, r6
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 fe26 	bl	80066cc <__lshift>
 8005a80:	4606      	mov	r6, r0
 8005a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d06e      	beq.n	8005b66 <_dtoa_r+0x90e>
 8005a88:	ee18 0a10 	vmov	r0, s16
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	f000 fe8d 	bl	80067ac <__mcmp>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	da67      	bge.n	8005b66 <_dtoa_r+0x90e>
 8005a96:	9b00      	ldr	r3, [sp, #0]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	ee18 1a10 	vmov	r1, s16
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	220a      	movs	r2, #10
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 fc61 	bl	800636c <__multadd>
 8005aaa:	9b08      	ldr	r3, [sp, #32]
 8005aac:	ee08 0a10 	vmov	s16, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 81b1 	beq.w	8005e18 <_dtoa_r+0xbc0>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	4639      	mov	r1, r7
 8005aba:	220a      	movs	r2, #10
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 fc55 	bl	800636c <__multadd>
 8005ac2:	9b02      	ldr	r3, [sp, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	4607      	mov	r7, r0
 8005ac8:	f300 808e 	bgt.w	8005be8 <_dtoa_r+0x990>
 8005acc:	9b06      	ldr	r3, [sp, #24]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	dc51      	bgt.n	8005b76 <_dtoa_r+0x91e>
 8005ad2:	e089      	b.n	8005be8 <_dtoa_r+0x990>
 8005ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ada:	e74b      	b.n	8005974 <_dtoa_r+0x71c>
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	1e5e      	subs	r6, r3, #1
 8005ae0:	9b07      	ldr	r3, [sp, #28]
 8005ae2:	42b3      	cmp	r3, r6
 8005ae4:	bfbf      	itttt	lt
 8005ae6:	9b07      	ldrlt	r3, [sp, #28]
 8005ae8:	9607      	strlt	r6, [sp, #28]
 8005aea:	1af2      	sublt	r2, r6, r3
 8005aec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005aee:	bfb6      	itet	lt
 8005af0:	189b      	addlt	r3, r3, r2
 8005af2:	1b9e      	subge	r6, r3, r6
 8005af4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	bfb8      	it	lt
 8005afa:	2600      	movlt	r6, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bfb7      	itett	lt
 8005b00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b08:	1a9d      	sublt	r5, r3, r2
 8005b0a:	2300      	movlt	r3, #0
 8005b0c:	e734      	b.n	8005978 <_dtoa_r+0x720>
 8005b0e:	9e07      	ldr	r6, [sp, #28]
 8005b10:	9d04      	ldr	r5, [sp, #16]
 8005b12:	9f08      	ldr	r7, [sp, #32]
 8005b14:	e73b      	b.n	800598e <_dtoa_r+0x736>
 8005b16:	9a07      	ldr	r2, [sp, #28]
 8005b18:	e767      	b.n	80059ea <_dtoa_r+0x792>
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	dc18      	bgt.n	8005b52 <_dtoa_r+0x8fa>
 8005b20:	f1ba 0f00 	cmp.w	sl, #0
 8005b24:	d115      	bne.n	8005b52 <_dtoa_r+0x8fa>
 8005b26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b2a:	b993      	cbnz	r3, 8005b52 <_dtoa_r+0x8fa>
 8005b2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b30:	0d1b      	lsrs	r3, r3, #20
 8005b32:	051b      	lsls	r3, r3, #20
 8005b34:	b183      	cbz	r3, 8005b58 <_dtoa_r+0x900>
 8005b36:	9b04      	ldr	r3, [sp, #16]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	9b05      	ldr	r3, [sp, #20]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	9305      	str	r3, [sp, #20]
 8005b42:	f04f 0801 	mov.w	r8, #1
 8005b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f af6a 	bne.w	8005a22 <_dtoa_r+0x7ca>
 8005b4e:	2001      	movs	r0, #1
 8005b50:	e76f      	b.n	8005a32 <_dtoa_r+0x7da>
 8005b52:	f04f 0800 	mov.w	r8, #0
 8005b56:	e7f6      	b.n	8005b46 <_dtoa_r+0x8ee>
 8005b58:	4698      	mov	r8, r3
 8005b5a:	e7f4      	b.n	8005b46 <_dtoa_r+0x8ee>
 8005b5c:	f43f af7d 	beq.w	8005a5a <_dtoa_r+0x802>
 8005b60:	4618      	mov	r0, r3
 8005b62:	301c      	adds	r0, #28
 8005b64:	e772      	b.n	8005a4c <_dtoa_r+0x7f4>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dc37      	bgt.n	8005bdc <_dtoa_r+0x984>
 8005b6c:	9b06      	ldr	r3, [sp, #24]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	dd34      	ble.n	8005bdc <_dtoa_r+0x984>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	b96b      	cbnz	r3, 8005b96 <_dtoa_r+0x93e>
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 fbf4 	bl	800636c <__multadd>
 8005b84:	4601      	mov	r1, r0
 8005b86:	4606      	mov	r6, r0
 8005b88:	ee18 0a10 	vmov	r0, s16
 8005b8c:	f000 fe0e 	bl	80067ac <__mcmp>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	f73f adbb 	bgt.w	800570c <_dtoa_r+0x4b4>
 8005b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b98:	9d01      	ldr	r5, [sp, #4]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	f04f 0800 	mov.w	r8, #0
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fbbf 	bl	8006328 <_Bfree>
 8005baa:	2f00      	cmp	r7, #0
 8005bac:	f43f aea4 	beq.w	80058f8 <_dtoa_r+0x6a0>
 8005bb0:	f1b8 0f00 	cmp.w	r8, #0
 8005bb4:	d005      	beq.n	8005bc2 <_dtoa_r+0x96a>
 8005bb6:	45b8      	cmp	r8, r7
 8005bb8:	d003      	beq.n	8005bc2 <_dtoa_r+0x96a>
 8005bba:	4641      	mov	r1, r8
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 fbb3 	bl	8006328 <_Bfree>
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fbaf 	bl	8006328 <_Bfree>
 8005bca:	e695      	b.n	80058f8 <_dtoa_r+0x6a0>
 8005bcc:	2600      	movs	r6, #0
 8005bce:	4637      	mov	r7, r6
 8005bd0:	e7e1      	b.n	8005b96 <_dtoa_r+0x93e>
 8005bd2:	9700      	str	r7, [sp, #0]
 8005bd4:	4637      	mov	r7, r6
 8005bd6:	e599      	b.n	800570c <_dtoa_r+0x4b4>
 8005bd8:	40240000 	.word	0x40240000
 8005bdc:	9b08      	ldr	r3, [sp, #32]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80ca 	beq.w	8005d78 <_dtoa_r+0xb20>
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	9302      	str	r3, [sp, #8]
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	dd05      	ble.n	8005bf8 <_dtoa_r+0x9a0>
 8005bec:	4639      	mov	r1, r7
 8005bee:	462a      	mov	r2, r5
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 fd6b 	bl	80066cc <__lshift>
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	f1b8 0f00 	cmp.w	r8, #0
 8005bfc:	d05b      	beq.n	8005cb6 <_dtoa_r+0xa5e>
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 fb51 	bl	80062a8 <_Balloc>
 8005c06:	4605      	mov	r5, r0
 8005c08:	b928      	cbnz	r0, 8005c16 <_dtoa_r+0x9be>
 8005c0a:	4b87      	ldr	r3, [pc, #540]	; (8005e28 <_dtoa_r+0xbd0>)
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c12:	f7ff bb3b 	b.w	800528c <_dtoa_r+0x34>
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	3202      	adds	r2, #2
 8005c1a:	0092      	lsls	r2, r2, #2
 8005c1c:	f107 010c 	add.w	r1, r7, #12
 8005c20:	300c      	adds	r0, #12
 8005c22:	f000 fb33 	bl	800628c <memcpy>
 8005c26:	2201      	movs	r2, #1
 8005c28:	4629      	mov	r1, r5
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fd4e 	bl	80066cc <__lshift>
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	f103 0901 	add.w	r9, r3, #1
 8005c36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	9305      	str	r3, [sp, #20]
 8005c3e:	f00a 0301 	and.w	r3, sl, #1
 8005c42:	46b8      	mov	r8, r7
 8005c44:	9304      	str	r3, [sp, #16]
 8005c46:	4607      	mov	r7, r0
 8005c48:	4631      	mov	r1, r6
 8005c4a:	ee18 0a10 	vmov	r0, s16
 8005c4e:	f7ff fa75 	bl	800513c <quorem>
 8005c52:	4641      	mov	r1, r8
 8005c54:	9002      	str	r0, [sp, #8]
 8005c56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c5a:	ee18 0a10 	vmov	r0, s16
 8005c5e:	f000 fda5 	bl	80067ac <__mcmp>
 8005c62:	463a      	mov	r2, r7
 8005c64:	9003      	str	r0, [sp, #12]
 8005c66:	4631      	mov	r1, r6
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fdbb 	bl	80067e4 <__mdiff>
 8005c6e:	68c2      	ldr	r2, [r0, #12]
 8005c70:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c74:	4605      	mov	r5, r0
 8005c76:	bb02      	cbnz	r2, 8005cba <_dtoa_r+0xa62>
 8005c78:	4601      	mov	r1, r0
 8005c7a:	ee18 0a10 	vmov	r0, s16
 8005c7e:	f000 fd95 	bl	80067ac <__mcmp>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4629      	mov	r1, r5
 8005c86:	4620      	mov	r0, r4
 8005c88:	9207      	str	r2, [sp, #28]
 8005c8a:	f000 fb4d 	bl	8006328 <_Bfree>
 8005c8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005c92:	ea43 0102 	orr.w	r1, r3, r2
 8005c96:	9b04      	ldr	r3, [sp, #16]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	464d      	mov	r5, r9
 8005c9c:	d10f      	bne.n	8005cbe <_dtoa_r+0xa66>
 8005c9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ca2:	d02a      	beq.n	8005cfa <_dtoa_r+0xaa2>
 8005ca4:	9b03      	ldr	r3, [sp, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	dd02      	ble.n	8005cb0 <_dtoa_r+0xa58>
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005cb0:	f88b a000 	strb.w	sl, [fp]
 8005cb4:	e775      	b.n	8005ba2 <_dtoa_r+0x94a>
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	e7ba      	b.n	8005c30 <_dtoa_r+0x9d8>
 8005cba:	2201      	movs	r2, #1
 8005cbc:	e7e2      	b.n	8005c84 <_dtoa_r+0xa2c>
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	db04      	blt.n	8005cce <_dtoa_r+0xa76>
 8005cc4:	9906      	ldr	r1, [sp, #24]
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	9904      	ldr	r1, [sp, #16]
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	d122      	bne.n	8005d14 <_dtoa_r+0xabc>
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	ddee      	ble.n	8005cb0 <_dtoa_r+0xa58>
 8005cd2:	ee18 1a10 	vmov	r1, s16
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 fcf7 	bl	80066cc <__lshift>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	ee08 0a10 	vmov	s16, r0
 8005ce4:	f000 fd62 	bl	80067ac <__mcmp>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	dc03      	bgt.n	8005cf4 <_dtoa_r+0xa9c>
 8005cec:	d1e0      	bne.n	8005cb0 <_dtoa_r+0xa58>
 8005cee:	f01a 0f01 	tst.w	sl, #1
 8005cf2:	d0dd      	beq.n	8005cb0 <_dtoa_r+0xa58>
 8005cf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cf8:	d1d7      	bne.n	8005caa <_dtoa_r+0xa52>
 8005cfa:	2339      	movs	r3, #57	; 0x39
 8005cfc:	f88b 3000 	strb.w	r3, [fp]
 8005d00:	462b      	mov	r3, r5
 8005d02:	461d      	mov	r5, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d0a:	2a39      	cmp	r2, #57	; 0x39
 8005d0c:	d071      	beq.n	8005df2 <_dtoa_r+0xb9a>
 8005d0e:	3201      	adds	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	e746      	b.n	8005ba2 <_dtoa_r+0x94a>
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	dd07      	ble.n	8005d28 <_dtoa_r+0xad0>
 8005d18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d1c:	d0ed      	beq.n	8005cfa <_dtoa_r+0xaa2>
 8005d1e:	f10a 0301 	add.w	r3, sl, #1
 8005d22:	f88b 3000 	strb.w	r3, [fp]
 8005d26:	e73c      	b.n	8005ba2 <_dtoa_r+0x94a>
 8005d28:	9b05      	ldr	r3, [sp, #20]
 8005d2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d2e:	4599      	cmp	r9, r3
 8005d30:	d047      	beq.n	8005dc2 <_dtoa_r+0xb6a>
 8005d32:	ee18 1a10 	vmov	r1, s16
 8005d36:	2300      	movs	r3, #0
 8005d38:	220a      	movs	r2, #10
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 fb16 	bl	800636c <__multadd>
 8005d40:	45b8      	cmp	r8, r7
 8005d42:	ee08 0a10 	vmov	s16, r0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	f04f 020a 	mov.w	r2, #10
 8005d4e:	4641      	mov	r1, r8
 8005d50:	4620      	mov	r0, r4
 8005d52:	d106      	bne.n	8005d62 <_dtoa_r+0xb0a>
 8005d54:	f000 fb0a 	bl	800636c <__multadd>
 8005d58:	4680      	mov	r8, r0
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	f109 0901 	add.w	r9, r9, #1
 8005d60:	e772      	b.n	8005c48 <_dtoa_r+0x9f0>
 8005d62:	f000 fb03 	bl	800636c <__multadd>
 8005d66:	4639      	mov	r1, r7
 8005d68:	4680      	mov	r8, r0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	220a      	movs	r2, #10
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fafc 	bl	800636c <__multadd>
 8005d74:	4607      	mov	r7, r0
 8005d76:	e7f1      	b.n	8005d5c <_dtoa_r+0xb04>
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	9302      	str	r3, [sp, #8]
 8005d7c:	9d01      	ldr	r5, [sp, #4]
 8005d7e:	ee18 0a10 	vmov	r0, s16
 8005d82:	4631      	mov	r1, r6
 8005d84:	f7ff f9da 	bl	800513c <quorem>
 8005d88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	f805 ab01 	strb.w	sl, [r5], #1
 8005d92:	1aea      	subs	r2, r5, r3
 8005d94:	9b02      	ldr	r3, [sp, #8]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	dd09      	ble.n	8005dae <_dtoa_r+0xb56>
 8005d9a:	ee18 1a10 	vmov	r1, s16
 8005d9e:	2300      	movs	r3, #0
 8005da0:	220a      	movs	r2, #10
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 fae2 	bl	800636c <__multadd>
 8005da8:	ee08 0a10 	vmov	s16, r0
 8005dac:	e7e7      	b.n	8005d7e <_dtoa_r+0xb26>
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bfc8      	it	gt
 8005db4:	461d      	movgt	r5, r3
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	bfd8      	it	le
 8005dba:	2501      	movle	r5, #1
 8005dbc:	441d      	add	r5, r3
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	ee18 1a10 	vmov	r1, s16
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 fc7f 	bl	80066cc <__lshift>
 8005dce:	4631      	mov	r1, r6
 8005dd0:	ee08 0a10 	vmov	s16, r0
 8005dd4:	f000 fcea 	bl	80067ac <__mcmp>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	dc91      	bgt.n	8005d00 <_dtoa_r+0xaa8>
 8005ddc:	d102      	bne.n	8005de4 <_dtoa_r+0xb8c>
 8005dde:	f01a 0f01 	tst.w	sl, #1
 8005de2:	d18d      	bne.n	8005d00 <_dtoa_r+0xaa8>
 8005de4:	462b      	mov	r3, r5
 8005de6:	461d      	mov	r5, r3
 8005de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dec:	2a30      	cmp	r2, #48	; 0x30
 8005dee:	d0fa      	beq.n	8005de6 <_dtoa_r+0xb8e>
 8005df0:	e6d7      	b.n	8005ba2 <_dtoa_r+0x94a>
 8005df2:	9a01      	ldr	r2, [sp, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d184      	bne.n	8005d02 <_dtoa_r+0xaaa>
 8005df8:	9b00      	ldr	r3, [sp, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	2331      	movs	r3, #49	; 0x31
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	e6ce      	b.n	8005ba2 <_dtoa_r+0x94a>
 8005e04:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <_dtoa_r+0xbd4>)
 8005e06:	f7ff ba95 	b.w	8005334 <_dtoa_r+0xdc>
 8005e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f aa6e 	bne.w	80052ee <_dtoa_r+0x96>
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <_dtoa_r+0xbd8>)
 8005e14:	f7ff ba8e 	b.w	8005334 <_dtoa_r+0xdc>
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dcae      	bgt.n	8005d7c <_dtoa_r+0xb24>
 8005e1e:	9b06      	ldr	r3, [sp, #24]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	f73f aea8 	bgt.w	8005b76 <_dtoa_r+0x91e>
 8005e26:	e7a9      	b.n	8005d7c <_dtoa_r+0xb24>
 8005e28:	080073ef 	.word	0x080073ef
 8005e2c:	0800734c 	.word	0x0800734c
 8005e30:	08007370 	.word	0x08007370

08005e34 <__sflush_r>:
 8005e34:	898a      	ldrh	r2, [r1, #12]
 8005e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	0710      	lsls	r0, r2, #28
 8005e3e:	460c      	mov	r4, r1
 8005e40:	d458      	bmi.n	8005ef4 <__sflush_r+0xc0>
 8005e42:	684b      	ldr	r3, [r1, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dc05      	bgt.n	8005e54 <__sflush_r+0x20>
 8005e48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	dc02      	bgt.n	8005e54 <__sflush_r+0x20>
 8005e4e:	2000      	movs	r0, #0
 8005e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	d0f9      	beq.n	8005e4e <__sflush_r+0x1a>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e60:	682f      	ldr	r7, [r5, #0]
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	d032      	beq.n	8005ecc <__sflush_r+0x98>
 8005e66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	075a      	lsls	r2, r3, #29
 8005e6c:	d505      	bpl.n	8005e7a <__sflush_r+0x46>
 8005e6e:	6863      	ldr	r3, [r4, #4]
 8005e70:	1ac0      	subs	r0, r0, r3
 8005e72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e74:	b10b      	cbz	r3, 8005e7a <__sflush_r+0x46>
 8005e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e78:	1ac0      	subs	r0, r0, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e80:	6a21      	ldr	r1, [r4, #32]
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b0      	blx	r6
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	d106      	bne.n	8005e9a <__sflush_r+0x66>
 8005e8c:	6829      	ldr	r1, [r5, #0]
 8005e8e:	291d      	cmp	r1, #29
 8005e90:	d82c      	bhi.n	8005eec <__sflush_r+0xb8>
 8005e92:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <__sflush_r+0x108>)
 8005e94:	40ca      	lsrs	r2, r1
 8005e96:	07d6      	lsls	r6, r2, #31
 8005e98:	d528      	bpl.n	8005eec <__sflush_r+0xb8>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	6062      	str	r2, [r4, #4]
 8005e9e:	04d9      	lsls	r1, r3, #19
 8005ea0:	6922      	ldr	r2, [r4, #16]
 8005ea2:	6022      	str	r2, [r4, #0]
 8005ea4:	d504      	bpl.n	8005eb0 <__sflush_r+0x7c>
 8005ea6:	1c42      	adds	r2, r0, #1
 8005ea8:	d101      	bne.n	8005eae <__sflush_r+0x7a>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	b903      	cbnz	r3, 8005eb0 <__sflush_r+0x7c>
 8005eae:	6560      	str	r0, [r4, #84]	; 0x54
 8005eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eb2:	602f      	str	r7, [r5, #0]
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d0ca      	beq.n	8005e4e <__sflush_r+0x1a>
 8005eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	d002      	beq.n	8005ec6 <__sflush_r+0x92>
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 fd8b 	bl	80069dc <_free_r>
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	6360      	str	r0, [r4, #52]	; 0x34
 8005eca:	e7c1      	b.n	8005e50 <__sflush_r+0x1c>
 8005ecc:	6a21      	ldr	r1, [r4, #32]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b0      	blx	r6
 8005ed4:	1c41      	adds	r1, r0, #1
 8005ed6:	d1c7      	bne.n	8005e68 <__sflush_r+0x34>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0c4      	beq.n	8005e68 <__sflush_r+0x34>
 8005ede:	2b1d      	cmp	r3, #29
 8005ee0:	d001      	beq.n	8005ee6 <__sflush_r+0xb2>
 8005ee2:	2b16      	cmp	r3, #22
 8005ee4:	d101      	bne.n	8005eea <__sflush_r+0xb6>
 8005ee6:	602f      	str	r7, [r5, #0]
 8005ee8:	e7b1      	b.n	8005e4e <__sflush_r+0x1a>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	e7ad      	b.n	8005e50 <__sflush_r+0x1c>
 8005ef4:	690f      	ldr	r7, [r1, #16]
 8005ef6:	2f00      	cmp	r7, #0
 8005ef8:	d0a9      	beq.n	8005e4e <__sflush_r+0x1a>
 8005efa:	0793      	lsls	r3, r2, #30
 8005efc:	680e      	ldr	r6, [r1, #0]
 8005efe:	bf08      	it	eq
 8005f00:	694b      	ldreq	r3, [r1, #20]
 8005f02:	600f      	str	r7, [r1, #0]
 8005f04:	bf18      	it	ne
 8005f06:	2300      	movne	r3, #0
 8005f08:	eba6 0807 	sub.w	r8, r6, r7
 8005f0c:	608b      	str	r3, [r1, #8]
 8005f0e:	f1b8 0f00 	cmp.w	r8, #0
 8005f12:	dd9c      	ble.n	8005e4e <__sflush_r+0x1a>
 8005f14:	6a21      	ldr	r1, [r4, #32]
 8005f16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f18:	4643      	mov	r3, r8
 8005f1a:	463a      	mov	r2, r7
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b0      	blx	r6
 8005f20:	2800      	cmp	r0, #0
 8005f22:	dc06      	bgt.n	8005f32 <__sflush_r+0xfe>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	e78e      	b.n	8005e50 <__sflush_r+0x1c>
 8005f32:	4407      	add	r7, r0
 8005f34:	eba8 0800 	sub.w	r8, r8, r0
 8005f38:	e7e9      	b.n	8005f0e <__sflush_r+0xda>
 8005f3a:	bf00      	nop
 8005f3c:	20400001 	.word	0x20400001

08005f40 <_fflush_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	690b      	ldr	r3, [r1, #16]
 8005f44:	4605      	mov	r5, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	b913      	cbnz	r3, 8005f50 <_fflush_r+0x10>
 8005f4a:	2500      	movs	r5, #0
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	b118      	cbz	r0, 8005f5a <_fflush_r+0x1a>
 8005f52:	6983      	ldr	r3, [r0, #24]
 8005f54:	b90b      	cbnz	r3, 8005f5a <_fflush_r+0x1a>
 8005f56:	f000 f887 	bl	8006068 <__sinit>
 8005f5a:	4b14      	ldr	r3, [pc, #80]	; (8005fac <_fflush_r+0x6c>)
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	d11b      	bne.n	8005f98 <_fflush_r+0x58>
 8005f60:	686c      	ldr	r4, [r5, #4]
 8005f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0ef      	beq.n	8005f4a <_fflush_r+0xa>
 8005f6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f6c:	07d0      	lsls	r0, r2, #31
 8005f6e:	d404      	bmi.n	8005f7a <_fflush_r+0x3a>
 8005f70:	0599      	lsls	r1, r3, #22
 8005f72:	d402      	bmi.n	8005f7a <_fflush_r+0x3a>
 8005f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f76:	f000 f91a 	bl	80061ae <__retarget_lock_acquire_recursive>
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	f7ff ff59 	bl	8005e34 <__sflush_r>
 8005f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f84:	07da      	lsls	r2, r3, #31
 8005f86:	4605      	mov	r5, r0
 8005f88:	d4e0      	bmi.n	8005f4c <_fflush_r+0xc>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	d4dd      	bmi.n	8005f4c <_fflush_r+0xc>
 8005f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f92:	f000 f90d 	bl	80061b0 <__retarget_lock_release_recursive>
 8005f96:	e7d9      	b.n	8005f4c <_fflush_r+0xc>
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <_fflush_r+0x70>)
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	d101      	bne.n	8005fa2 <_fflush_r+0x62>
 8005f9e:	68ac      	ldr	r4, [r5, #8]
 8005fa0:	e7df      	b.n	8005f62 <_fflush_r+0x22>
 8005fa2:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <_fflush_r+0x74>)
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	bf08      	it	eq
 8005fa8:	68ec      	ldreq	r4, [r5, #12]
 8005faa:	e7da      	b.n	8005f62 <_fflush_r+0x22>
 8005fac:	08007420 	.word	0x08007420
 8005fb0:	08007440 	.word	0x08007440
 8005fb4:	08007400 	.word	0x08007400

08005fb8 <std>:
 8005fb8:	2300      	movs	r3, #0
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8005fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fc6:	6083      	str	r3, [r0, #8]
 8005fc8:	8181      	strh	r1, [r0, #12]
 8005fca:	6643      	str	r3, [r0, #100]	; 0x64
 8005fcc:	81c2      	strh	r2, [r0, #14]
 8005fce:	6183      	str	r3, [r0, #24]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	305c      	adds	r0, #92	; 0x5c
 8005fd6:	f7fe faf1 	bl	80045bc <memset>
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <std+0x38>)
 8005fdc:	6263      	str	r3, [r4, #36]	; 0x24
 8005fde:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <std+0x3c>)
 8005fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <std+0x40>)
 8005fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <std+0x44>)
 8005fe8:	6224      	str	r4, [r4, #32]
 8005fea:	6323      	str	r3, [r4, #48]	; 0x30
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	bf00      	nop
 8005ff0:	08006e71 	.word	0x08006e71
 8005ff4:	08006e93 	.word	0x08006e93
 8005ff8:	08006ecb 	.word	0x08006ecb
 8005ffc:	08006eef 	.word	0x08006eef

08006000 <_cleanup_r>:
 8006000:	4901      	ldr	r1, [pc, #4]	; (8006008 <_cleanup_r+0x8>)
 8006002:	f000 b8af 	b.w	8006164 <_fwalk_reent>
 8006006:	bf00      	nop
 8006008:	08005f41 	.word	0x08005f41

0800600c <__sfmoreglue>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	2268      	movs	r2, #104	; 0x68
 8006010:	1e4d      	subs	r5, r1, #1
 8006012:	4355      	muls	r5, r2
 8006014:	460e      	mov	r6, r1
 8006016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800601a:	f000 fd4b 	bl	8006ab4 <_malloc_r>
 800601e:	4604      	mov	r4, r0
 8006020:	b140      	cbz	r0, 8006034 <__sfmoreglue+0x28>
 8006022:	2100      	movs	r1, #0
 8006024:	e9c0 1600 	strd	r1, r6, [r0]
 8006028:	300c      	adds	r0, #12
 800602a:	60a0      	str	r0, [r4, #8]
 800602c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006030:	f7fe fac4 	bl	80045bc <memset>
 8006034:	4620      	mov	r0, r4
 8006036:	bd70      	pop	{r4, r5, r6, pc}

08006038 <__sfp_lock_acquire>:
 8006038:	4801      	ldr	r0, [pc, #4]	; (8006040 <__sfp_lock_acquire+0x8>)
 800603a:	f000 b8b8 	b.w	80061ae <__retarget_lock_acquire_recursive>
 800603e:	bf00      	nop
 8006040:	20000331 	.word	0x20000331

08006044 <__sfp_lock_release>:
 8006044:	4801      	ldr	r0, [pc, #4]	; (800604c <__sfp_lock_release+0x8>)
 8006046:	f000 b8b3 	b.w	80061b0 <__retarget_lock_release_recursive>
 800604a:	bf00      	nop
 800604c:	20000331 	.word	0x20000331

08006050 <__sinit_lock_acquire>:
 8006050:	4801      	ldr	r0, [pc, #4]	; (8006058 <__sinit_lock_acquire+0x8>)
 8006052:	f000 b8ac 	b.w	80061ae <__retarget_lock_acquire_recursive>
 8006056:	bf00      	nop
 8006058:	20000332 	.word	0x20000332

0800605c <__sinit_lock_release>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__sinit_lock_release+0x8>)
 800605e:	f000 b8a7 	b.w	80061b0 <__retarget_lock_release_recursive>
 8006062:	bf00      	nop
 8006064:	20000332 	.word	0x20000332

08006068 <__sinit>:
 8006068:	b510      	push	{r4, lr}
 800606a:	4604      	mov	r4, r0
 800606c:	f7ff fff0 	bl	8006050 <__sinit_lock_acquire>
 8006070:	69a3      	ldr	r3, [r4, #24]
 8006072:	b11b      	cbz	r3, 800607c <__sinit+0x14>
 8006074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006078:	f7ff bff0 	b.w	800605c <__sinit_lock_release>
 800607c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006080:	6523      	str	r3, [r4, #80]	; 0x50
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <__sinit+0x68>)
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <__sinit+0x6c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	62a2      	str	r2, [r4, #40]	; 0x28
 800608a:	42a3      	cmp	r3, r4
 800608c:	bf04      	itt	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	61a3      	streq	r3, [r4, #24]
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f820 	bl	80060d8 <__sfp>
 8006098:	6060      	str	r0, [r4, #4]
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f81c 	bl	80060d8 <__sfp>
 80060a0:	60a0      	str	r0, [r4, #8]
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 f818 	bl	80060d8 <__sfp>
 80060a8:	2200      	movs	r2, #0
 80060aa:	60e0      	str	r0, [r4, #12]
 80060ac:	2104      	movs	r1, #4
 80060ae:	6860      	ldr	r0, [r4, #4]
 80060b0:	f7ff ff82 	bl	8005fb8 <std>
 80060b4:	68a0      	ldr	r0, [r4, #8]
 80060b6:	2201      	movs	r2, #1
 80060b8:	2109      	movs	r1, #9
 80060ba:	f7ff ff7d 	bl	8005fb8 <std>
 80060be:	68e0      	ldr	r0, [r4, #12]
 80060c0:	2202      	movs	r2, #2
 80060c2:	2112      	movs	r1, #18
 80060c4:	f7ff ff78 	bl	8005fb8 <std>
 80060c8:	2301      	movs	r3, #1
 80060ca:	61a3      	str	r3, [r4, #24]
 80060cc:	e7d2      	b.n	8006074 <__sinit+0xc>
 80060ce:	bf00      	nop
 80060d0:	08007338 	.word	0x08007338
 80060d4:	08006001 	.word	0x08006001

080060d8 <__sfp>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	4607      	mov	r7, r0
 80060dc:	f7ff ffac 	bl	8006038 <__sfp_lock_acquire>
 80060e0:	4b1e      	ldr	r3, [pc, #120]	; (800615c <__sfp+0x84>)
 80060e2:	681e      	ldr	r6, [r3, #0]
 80060e4:	69b3      	ldr	r3, [r6, #24]
 80060e6:	b913      	cbnz	r3, 80060ee <__sfp+0x16>
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff ffbd 	bl	8006068 <__sinit>
 80060ee:	3648      	adds	r6, #72	; 0x48
 80060f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	d503      	bpl.n	8006100 <__sfp+0x28>
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	b30b      	cbz	r3, 8006140 <__sfp+0x68>
 80060fc:	6836      	ldr	r6, [r6, #0]
 80060fe:	e7f7      	b.n	80060f0 <__sfp+0x18>
 8006100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006104:	b9d5      	cbnz	r5, 800613c <__sfp+0x64>
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <__sfp+0x88>)
 8006108:	60e3      	str	r3, [r4, #12]
 800610a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800610e:	6665      	str	r5, [r4, #100]	; 0x64
 8006110:	f000 f84c 	bl	80061ac <__retarget_lock_init_recursive>
 8006114:	f7ff ff96 	bl	8006044 <__sfp_lock_release>
 8006118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800611c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006120:	6025      	str	r5, [r4, #0]
 8006122:	61a5      	str	r5, [r4, #24]
 8006124:	2208      	movs	r2, #8
 8006126:	4629      	mov	r1, r5
 8006128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800612c:	f7fe fa46 	bl	80045bc <memset>
 8006130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006138:	4620      	mov	r0, r4
 800613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800613c:	3468      	adds	r4, #104	; 0x68
 800613e:	e7d9      	b.n	80060f4 <__sfp+0x1c>
 8006140:	2104      	movs	r1, #4
 8006142:	4638      	mov	r0, r7
 8006144:	f7ff ff62 	bl	800600c <__sfmoreglue>
 8006148:	4604      	mov	r4, r0
 800614a:	6030      	str	r0, [r6, #0]
 800614c:	2800      	cmp	r0, #0
 800614e:	d1d5      	bne.n	80060fc <__sfp+0x24>
 8006150:	f7ff ff78 	bl	8006044 <__sfp_lock_release>
 8006154:	230c      	movs	r3, #12
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	e7ee      	b.n	8006138 <__sfp+0x60>
 800615a:	bf00      	nop
 800615c:	08007338 	.word	0x08007338
 8006160:	ffff0001 	.word	0xffff0001

08006164 <_fwalk_reent>:
 8006164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006168:	4606      	mov	r6, r0
 800616a:	4688      	mov	r8, r1
 800616c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006170:	2700      	movs	r7, #0
 8006172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006176:	f1b9 0901 	subs.w	r9, r9, #1
 800617a:	d505      	bpl.n	8006188 <_fwalk_reent+0x24>
 800617c:	6824      	ldr	r4, [r4, #0]
 800617e:	2c00      	cmp	r4, #0
 8006180:	d1f7      	bne.n	8006172 <_fwalk_reent+0xe>
 8006182:	4638      	mov	r0, r7
 8006184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006188:	89ab      	ldrh	r3, [r5, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d907      	bls.n	800619e <_fwalk_reent+0x3a>
 800618e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006192:	3301      	adds	r3, #1
 8006194:	d003      	beq.n	800619e <_fwalk_reent+0x3a>
 8006196:	4629      	mov	r1, r5
 8006198:	4630      	mov	r0, r6
 800619a:	47c0      	blx	r8
 800619c:	4307      	orrs	r7, r0
 800619e:	3568      	adds	r5, #104	; 0x68
 80061a0:	e7e9      	b.n	8006176 <_fwalk_reent+0x12>
	...

080061a4 <_localeconv_r>:
 80061a4:	4800      	ldr	r0, [pc, #0]	; (80061a8 <_localeconv_r+0x4>)
 80061a6:	4770      	bx	lr
 80061a8:	20000174 	.word	0x20000174

080061ac <__retarget_lock_init_recursive>:
 80061ac:	4770      	bx	lr

080061ae <__retarget_lock_acquire_recursive>:
 80061ae:	4770      	bx	lr

080061b0 <__retarget_lock_release_recursive>:
 80061b0:	4770      	bx	lr

080061b2 <__swhatbuf_r>:
 80061b2:	b570      	push	{r4, r5, r6, lr}
 80061b4:	460e      	mov	r6, r1
 80061b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ba:	2900      	cmp	r1, #0
 80061bc:	b096      	sub	sp, #88	; 0x58
 80061be:	4614      	mov	r4, r2
 80061c0:	461d      	mov	r5, r3
 80061c2:	da08      	bge.n	80061d6 <__swhatbuf_r+0x24>
 80061c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	602a      	str	r2, [r5, #0]
 80061cc:	061a      	lsls	r2, r3, #24
 80061ce:	d410      	bmi.n	80061f2 <__swhatbuf_r+0x40>
 80061d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d4:	e00e      	b.n	80061f4 <__swhatbuf_r+0x42>
 80061d6:	466a      	mov	r2, sp
 80061d8:	f000 fee0 	bl	8006f9c <_fstat_r>
 80061dc:	2800      	cmp	r0, #0
 80061de:	dbf1      	blt.n	80061c4 <__swhatbuf_r+0x12>
 80061e0:	9a01      	ldr	r2, [sp, #4]
 80061e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061ea:	425a      	negs	r2, r3
 80061ec:	415a      	adcs	r2, r3
 80061ee:	602a      	str	r2, [r5, #0]
 80061f0:	e7ee      	b.n	80061d0 <__swhatbuf_r+0x1e>
 80061f2:	2340      	movs	r3, #64	; 0x40
 80061f4:	2000      	movs	r0, #0
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	b016      	add	sp, #88	; 0x58
 80061fa:	bd70      	pop	{r4, r5, r6, pc}

080061fc <__smakebuf_r>:
 80061fc:	898b      	ldrh	r3, [r1, #12]
 80061fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006200:	079d      	lsls	r5, r3, #30
 8006202:	4606      	mov	r6, r0
 8006204:	460c      	mov	r4, r1
 8006206:	d507      	bpl.n	8006218 <__smakebuf_r+0x1c>
 8006208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	2301      	movs	r3, #1
 8006212:	6163      	str	r3, [r4, #20]
 8006214:	b002      	add	sp, #8
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	ab01      	add	r3, sp, #4
 800621a:	466a      	mov	r2, sp
 800621c:	f7ff ffc9 	bl	80061b2 <__swhatbuf_r>
 8006220:	9900      	ldr	r1, [sp, #0]
 8006222:	4605      	mov	r5, r0
 8006224:	4630      	mov	r0, r6
 8006226:	f000 fc45 	bl	8006ab4 <_malloc_r>
 800622a:	b948      	cbnz	r0, 8006240 <__smakebuf_r+0x44>
 800622c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006230:	059a      	lsls	r2, r3, #22
 8006232:	d4ef      	bmi.n	8006214 <__smakebuf_r+0x18>
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	f043 0302 	orr.w	r3, r3, #2
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	e7e3      	b.n	8006208 <__smakebuf_r+0xc>
 8006240:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <__smakebuf_r+0x7c>)
 8006242:	62b3      	str	r3, [r6, #40]	; 0x28
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	6020      	str	r0, [r4, #0]
 8006248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	9b00      	ldr	r3, [sp, #0]
 8006250:	6163      	str	r3, [r4, #20]
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	6120      	str	r0, [r4, #16]
 8006256:	b15b      	cbz	r3, 8006270 <__smakebuf_r+0x74>
 8006258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800625c:	4630      	mov	r0, r6
 800625e:	f000 feaf 	bl	8006fc0 <_isatty_r>
 8006262:	b128      	cbz	r0, 8006270 <__smakebuf_r+0x74>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	89a0      	ldrh	r0, [r4, #12]
 8006272:	4305      	orrs	r5, r0
 8006274:	81a5      	strh	r5, [r4, #12]
 8006276:	e7cd      	b.n	8006214 <__smakebuf_r+0x18>
 8006278:	08006001 	.word	0x08006001

0800627c <malloc>:
 800627c:	4b02      	ldr	r3, [pc, #8]	; (8006288 <malloc+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f000 bc17 	b.w	8006ab4 <_malloc_r>
 8006286:	bf00      	nop
 8006288:	20000020 	.word	0x20000020

0800628c <memcpy>:
 800628c:	440a      	add	r2, r1
 800628e:	4291      	cmp	r1, r2
 8006290:	f100 33ff 	add.w	r3, r0, #4294967295
 8006294:	d100      	bne.n	8006298 <memcpy+0xc>
 8006296:	4770      	bx	lr
 8006298:	b510      	push	{r4, lr}
 800629a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800629e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062a2:	4291      	cmp	r1, r2
 80062a4:	d1f9      	bne.n	800629a <memcpy+0xe>
 80062a6:	bd10      	pop	{r4, pc}

080062a8 <_Balloc>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	b976      	cbnz	r6, 80062d0 <_Balloc+0x28>
 80062b2:	2010      	movs	r0, #16
 80062b4:	f7ff ffe2 	bl	800627c <malloc>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6260      	str	r0, [r4, #36]	; 0x24
 80062bc:	b920      	cbnz	r0, 80062c8 <_Balloc+0x20>
 80062be:	4b18      	ldr	r3, [pc, #96]	; (8006320 <_Balloc+0x78>)
 80062c0:	4818      	ldr	r0, [pc, #96]	; (8006324 <_Balloc+0x7c>)
 80062c2:	2166      	movs	r1, #102	; 0x66
 80062c4:	f000 fe2a 	bl	8006f1c <__assert_func>
 80062c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062cc:	6006      	str	r6, [r0, #0]
 80062ce:	60c6      	str	r6, [r0, #12]
 80062d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062d2:	68f3      	ldr	r3, [r6, #12]
 80062d4:	b183      	cbz	r3, 80062f8 <_Balloc+0x50>
 80062d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062de:	b9b8      	cbnz	r0, 8006310 <_Balloc+0x68>
 80062e0:	2101      	movs	r1, #1
 80062e2:	fa01 f605 	lsl.w	r6, r1, r5
 80062e6:	1d72      	adds	r2, r6, #5
 80062e8:	0092      	lsls	r2, r2, #2
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fb60 	bl	80069b0 <_calloc_r>
 80062f0:	b160      	cbz	r0, 800630c <_Balloc+0x64>
 80062f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062f6:	e00e      	b.n	8006316 <_Balloc+0x6e>
 80062f8:	2221      	movs	r2, #33	; 0x21
 80062fa:	2104      	movs	r1, #4
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 fb57 	bl	80069b0 <_calloc_r>
 8006302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006304:	60f0      	str	r0, [r6, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e4      	bne.n	80062d6 <_Balloc+0x2e>
 800630c:	2000      	movs	r0, #0
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	6802      	ldr	r2, [r0, #0]
 8006312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006316:	2300      	movs	r3, #0
 8006318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800631c:	e7f7      	b.n	800630e <_Balloc+0x66>
 800631e:	bf00      	nop
 8006320:	0800737d 	.word	0x0800737d
 8006324:	08007460 	.word	0x08007460

08006328 <_Bfree>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800632c:	4605      	mov	r5, r0
 800632e:	460c      	mov	r4, r1
 8006330:	b976      	cbnz	r6, 8006350 <_Bfree+0x28>
 8006332:	2010      	movs	r0, #16
 8006334:	f7ff ffa2 	bl	800627c <malloc>
 8006338:	4602      	mov	r2, r0
 800633a:	6268      	str	r0, [r5, #36]	; 0x24
 800633c:	b920      	cbnz	r0, 8006348 <_Bfree+0x20>
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <_Bfree+0x3c>)
 8006340:	4809      	ldr	r0, [pc, #36]	; (8006368 <_Bfree+0x40>)
 8006342:	218a      	movs	r1, #138	; 0x8a
 8006344:	f000 fdea 	bl	8006f1c <__assert_func>
 8006348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800634c:	6006      	str	r6, [r0, #0]
 800634e:	60c6      	str	r6, [r0, #12]
 8006350:	b13c      	cbz	r4, 8006362 <_Bfree+0x3a>
 8006352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006354:	6862      	ldr	r2, [r4, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800635c:	6021      	str	r1, [r4, #0]
 800635e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	0800737d 	.word	0x0800737d
 8006368:	08007460 	.word	0x08007460

0800636c <__multadd>:
 800636c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006370:	690d      	ldr	r5, [r1, #16]
 8006372:	4607      	mov	r7, r0
 8006374:	460c      	mov	r4, r1
 8006376:	461e      	mov	r6, r3
 8006378:	f101 0c14 	add.w	ip, r1, #20
 800637c:	2000      	movs	r0, #0
 800637e:	f8dc 3000 	ldr.w	r3, [ip]
 8006382:	b299      	uxth	r1, r3
 8006384:	fb02 6101 	mla	r1, r2, r1, r6
 8006388:	0c1e      	lsrs	r6, r3, #16
 800638a:	0c0b      	lsrs	r3, r1, #16
 800638c:	fb02 3306 	mla	r3, r2, r6, r3
 8006390:	b289      	uxth	r1, r1
 8006392:	3001      	adds	r0, #1
 8006394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006398:	4285      	cmp	r5, r0
 800639a:	f84c 1b04 	str.w	r1, [ip], #4
 800639e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063a2:	dcec      	bgt.n	800637e <__multadd+0x12>
 80063a4:	b30e      	cbz	r6, 80063ea <__multadd+0x7e>
 80063a6:	68a3      	ldr	r3, [r4, #8]
 80063a8:	42ab      	cmp	r3, r5
 80063aa:	dc19      	bgt.n	80063e0 <__multadd+0x74>
 80063ac:	6861      	ldr	r1, [r4, #4]
 80063ae:	4638      	mov	r0, r7
 80063b0:	3101      	adds	r1, #1
 80063b2:	f7ff ff79 	bl	80062a8 <_Balloc>
 80063b6:	4680      	mov	r8, r0
 80063b8:	b928      	cbnz	r0, 80063c6 <__multadd+0x5a>
 80063ba:	4602      	mov	r2, r0
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <__multadd+0x84>)
 80063be:	480d      	ldr	r0, [pc, #52]	; (80063f4 <__multadd+0x88>)
 80063c0:	21b5      	movs	r1, #181	; 0xb5
 80063c2:	f000 fdab 	bl	8006f1c <__assert_func>
 80063c6:	6922      	ldr	r2, [r4, #16]
 80063c8:	3202      	adds	r2, #2
 80063ca:	f104 010c 	add.w	r1, r4, #12
 80063ce:	0092      	lsls	r2, r2, #2
 80063d0:	300c      	adds	r0, #12
 80063d2:	f7ff ff5b 	bl	800628c <memcpy>
 80063d6:	4621      	mov	r1, r4
 80063d8:	4638      	mov	r0, r7
 80063da:	f7ff ffa5 	bl	8006328 <_Bfree>
 80063de:	4644      	mov	r4, r8
 80063e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063e4:	3501      	adds	r5, #1
 80063e6:	615e      	str	r6, [r3, #20]
 80063e8:	6125      	str	r5, [r4, #16]
 80063ea:	4620      	mov	r0, r4
 80063ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f0:	080073ef 	.word	0x080073ef
 80063f4:	08007460 	.word	0x08007460

080063f8 <__hi0bits>:
 80063f8:	0c03      	lsrs	r3, r0, #16
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	b9d3      	cbnz	r3, 8006434 <__hi0bits+0x3c>
 80063fe:	0400      	lsls	r0, r0, #16
 8006400:	2310      	movs	r3, #16
 8006402:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006406:	bf04      	itt	eq
 8006408:	0200      	lsleq	r0, r0, #8
 800640a:	3308      	addeq	r3, #8
 800640c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006410:	bf04      	itt	eq
 8006412:	0100      	lsleq	r0, r0, #4
 8006414:	3304      	addeq	r3, #4
 8006416:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800641a:	bf04      	itt	eq
 800641c:	0080      	lsleq	r0, r0, #2
 800641e:	3302      	addeq	r3, #2
 8006420:	2800      	cmp	r0, #0
 8006422:	db05      	blt.n	8006430 <__hi0bits+0x38>
 8006424:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006428:	f103 0301 	add.w	r3, r3, #1
 800642c:	bf08      	it	eq
 800642e:	2320      	moveq	r3, #32
 8006430:	4618      	mov	r0, r3
 8006432:	4770      	bx	lr
 8006434:	2300      	movs	r3, #0
 8006436:	e7e4      	b.n	8006402 <__hi0bits+0xa>

08006438 <__lo0bits>:
 8006438:	6803      	ldr	r3, [r0, #0]
 800643a:	f013 0207 	ands.w	r2, r3, #7
 800643e:	4601      	mov	r1, r0
 8006440:	d00b      	beq.n	800645a <__lo0bits+0x22>
 8006442:	07da      	lsls	r2, r3, #31
 8006444:	d423      	bmi.n	800648e <__lo0bits+0x56>
 8006446:	0798      	lsls	r0, r3, #30
 8006448:	bf49      	itett	mi
 800644a:	085b      	lsrmi	r3, r3, #1
 800644c:	089b      	lsrpl	r3, r3, #2
 800644e:	2001      	movmi	r0, #1
 8006450:	600b      	strmi	r3, [r1, #0]
 8006452:	bf5c      	itt	pl
 8006454:	600b      	strpl	r3, [r1, #0]
 8006456:	2002      	movpl	r0, #2
 8006458:	4770      	bx	lr
 800645a:	b298      	uxth	r0, r3
 800645c:	b9a8      	cbnz	r0, 800648a <__lo0bits+0x52>
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	2010      	movs	r0, #16
 8006462:	b2da      	uxtb	r2, r3
 8006464:	b90a      	cbnz	r2, 800646a <__lo0bits+0x32>
 8006466:	3008      	adds	r0, #8
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	071a      	lsls	r2, r3, #28
 800646c:	bf04      	itt	eq
 800646e:	091b      	lsreq	r3, r3, #4
 8006470:	3004      	addeq	r0, #4
 8006472:	079a      	lsls	r2, r3, #30
 8006474:	bf04      	itt	eq
 8006476:	089b      	lsreq	r3, r3, #2
 8006478:	3002      	addeq	r0, #2
 800647a:	07da      	lsls	r2, r3, #31
 800647c:	d403      	bmi.n	8006486 <__lo0bits+0x4e>
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	f100 0001 	add.w	r0, r0, #1
 8006484:	d005      	beq.n	8006492 <__lo0bits+0x5a>
 8006486:	600b      	str	r3, [r1, #0]
 8006488:	4770      	bx	lr
 800648a:	4610      	mov	r0, r2
 800648c:	e7e9      	b.n	8006462 <__lo0bits+0x2a>
 800648e:	2000      	movs	r0, #0
 8006490:	4770      	bx	lr
 8006492:	2020      	movs	r0, #32
 8006494:	4770      	bx	lr
	...

08006498 <__i2b>:
 8006498:	b510      	push	{r4, lr}
 800649a:	460c      	mov	r4, r1
 800649c:	2101      	movs	r1, #1
 800649e:	f7ff ff03 	bl	80062a8 <_Balloc>
 80064a2:	4602      	mov	r2, r0
 80064a4:	b928      	cbnz	r0, 80064b2 <__i2b+0x1a>
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <__i2b+0x24>)
 80064a8:	4805      	ldr	r0, [pc, #20]	; (80064c0 <__i2b+0x28>)
 80064aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064ae:	f000 fd35 	bl	8006f1c <__assert_func>
 80064b2:	2301      	movs	r3, #1
 80064b4:	6144      	str	r4, [r0, #20]
 80064b6:	6103      	str	r3, [r0, #16]
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	bf00      	nop
 80064bc:	080073ef 	.word	0x080073ef
 80064c0:	08007460 	.word	0x08007460

080064c4 <__multiply>:
 80064c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c8:	4691      	mov	r9, r2
 80064ca:	690a      	ldr	r2, [r1, #16]
 80064cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	bfb8      	it	lt
 80064d4:	460b      	movlt	r3, r1
 80064d6:	460c      	mov	r4, r1
 80064d8:	bfbc      	itt	lt
 80064da:	464c      	movlt	r4, r9
 80064dc:	4699      	movlt	r9, r3
 80064de:	6927      	ldr	r7, [r4, #16]
 80064e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	6861      	ldr	r1, [r4, #4]
 80064e8:	eb07 060a 	add.w	r6, r7, sl
 80064ec:	42b3      	cmp	r3, r6
 80064ee:	b085      	sub	sp, #20
 80064f0:	bfb8      	it	lt
 80064f2:	3101      	addlt	r1, #1
 80064f4:	f7ff fed8 	bl	80062a8 <_Balloc>
 80064f8:	b930      	cbnz	r0, 8006508 <__multiply+0x44>
 80064fa:	4602      	mov	r2, r0
 80064fc:	4b44      	ldr	r3, [pc, #272]	; (8006610 <__multiply+0x14c>)
 80064fe:	4845      	ldr	r0, [pc, #276]	; (8006614 <__multiply+0x150>)
 8006500:	f240 115d 	movw	r1, #349	; 0x15d
 8006504:	f000 fd0a 	bl	8006f1c <__assert_func>
 8006508:	f100 0514 	add.w	r5, r0, #20
 800650c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006510:	462b      	mov	r3, r5
 8006512:	2200      	movs	r2, #0
 8006514:	4543      	cmp	r3, r8
 8006516:	d321      	bcc.n	800655c <__multiply+0x98>
 8006518:	f104 0314 	add.w	r3, r4, #20
 800651c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006520:	f109 0314 	add.w	r3, r9, #20
 8006524:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006528:	9202      	str	r2, [sp, #8]
 800652a:	1b3a      	subs	r2, r7, r4
 800652c:	3a15      	subs	r2, #21
 800652e:	f022 0203 	bic.w	r2, r2, #3
 8006532:	3204      	adds	r2, #4
 8006534:	f104 0115 	add.w	r1, r4, #21
 8006538:	428f      	cmp	r7, r1
 800653a:	bf38      	it	cc
 800653c:	2204      	movcc	r2, #4
 800653e:	9201      	str	r2, [sp, #4]
 8006540:	9a02      	ldr	r2, [sp, #8]
 8006542:	9303      	str	r3, [sp, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d80c      	bhi.n	8006562 <__multiply+0x9e>
 8006548:	2e00      	cmp	r6, #0
 800654a:	dd03      	ble.n	8006554 <__multiply+0x90>
 800654c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05a      	beq.n	800660a <__multiply+0x146>
 8006554:	6106      	str	r6, [r0, #16]
 8006556:	b005      	add	sp, #20
 8006558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655c:	f843 2b04 	str.w	r2, [r3], #4
 8006560:	e7d8      	b.n	8006514 <__multiply+0x50>
 8006562:	f8b3 a000 	ldrh.w	sl, [r3]
 8006566:	f1ba 0f00 	cmp.w	sl, #0
 800656a:	d024      	beq.n	80065b6 <__multiply+0xf2>
 800656c:	f104 0e14 	add.w	lr, r4, #20
 8006570:	46a9      	mov	r9, r5
 8006572:	f04f 0c00 	mov.w	ip, #0
 8006576:	f85e 2b04 	ldr.w	r2, [lr], #4
 800657a:	f8d9 1000 	ldr.w	r1, [r9]
 800657e:	fa1f fb82 	uxth.w	fp, r2
 8006582:	b289      	uxth	r1, r1
 8006584:	fb0a 110b 	mla	r1, sl, fp, r1
 8006588:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800658c:	f8d9 2000 	ldr.w	r2, [r9]
 8006590:	4461      	add	r1, ip
 8006592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006596:	fb0a c20b 	mla	r2, sl, fp, ip
 800659a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800659e:	b289      	uxth	r1, r1
 80065a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065a4:	4577      	cmp	r7, lr
 80065a6:	f849 1b04 	str.w	r1, [r9], #4
 80065aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065ae:	d8e2      	bhi.n	8006576 <__multiply+0xb2>
 80065b0:	9a01      	ldr	r2, [sp, #4]
 80065b2:	f845 c002 	str.w	ip, [r5, r2]
 80065b6:	9a03      	ldr	r2, [sp, #12]
 80065b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065bc:	3304      	adds	r3, #4
 80065be:	f1b9 0f00 	cmp.w	r9, #0
 80065c2:	d020      	beq.n	8006606 <__multiply+0x142>
 80065c4:	6829      	ldr	r1, [r5, #0]
 80065c6:	f104 0c14 	add.w	ip, r4, #20
 80065ca:	46ae      	mov	lr, r5
 80065cc:	f04f 0a00 	mov.w	sl, #0
 80065d0:	f8bc b000 	ldrh.w	fp, [ip]
 80065d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065d8:	fb09 220b 	mla	r2, r9, fp, r2
 80065dc:	4492      	add	sl, r2
 80065de:	b289      	uxth	r1, r1
 80065e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80065e4:	f84e 1b04 	str.w	r1, [lr], #4
 80065e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065ec:	f8be 1000 	ldrh.w	r1, [lr]
 80065f0:	0c12      	lsrs	r2, r2, #16
 80065f2:	fb09 1102 	mla	r1, r9, r2, r1
 80065f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065fa:	4567      	cmp	r7, ip
 80065fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006600:	d8e6      	bhi.n	80065d0 <__multiply+0x10c>
 8006602:	9a01      	ldr	r2, [sp, #4]
 8006604:	50a9      	str	r1, [r5, r2]
 8006606:	3504      	adds	r5, #4
 8006608:	e79a      	b.n	8006540 <__multiply+0x7c>
 800660a:	3e01      	subs	r6, #1
 800660c:	e79c      	b.n	8006548 <__multiply+0x84>
 800660e:	bf00      	nop
 8006610:	080073ef 	.word	0x080073ef
 8006614:	08007460 	.word	0x08007460

08006618 <__pow5mult>:
 8006618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800661c:	4615      	mov	r5, r2
 800661e:	f012 0203 	ands.w	r2, r2, #3
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	d007      	beq.n	8006638 <__pow5mult+0x20>
 8006628:	4c25      	ldr	r4, [pc, #148]	; (80066c0 <__pow5mult+0xa8>)
 800662a:	3a01      	subs	r2, #1
 800662c:	2300      	movs	r3, #0
 800662e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006632:	f7ff fe9b 	bl	800636c <__multadd>
 8006636:	4607      	mov	r7, r0
 8006638:	10ad      	asrs	r5, r5, #2
 800663a:	d03d      	beq.n	80066b8 <__pow5mult+0xa0>
 800663c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800663e:	b97c      	cbnz	r4, 8006660 <__pow5mult+0x48>
 8006640:	2010      	movs	r0, #16
 8006642:	f7ff fe1b 	bl	800627c <malloc>
 8006646:	4602      	mov	r2, r0
 8006648:	6270      	str	r0, [r6, #36]	; 0x24
 800664a:	b928      	cbnz	r0, 8006658 <__pow5mult+0x40>
 800664c:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <__pow5mult+0xac>)
 800664e:	481e      	ldr	r0, [pc, #120]	; (80066c8 <__pow5mult+0xb0>)
 8006650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006654:	f000 fc62 	bl	8006f1c <__assert_func>
 8006658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800665c:	6004      	str	r4, [r0, #0]
 800665e:	60c4      	str	r4, [r0, #12]
 8006660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006668:	b94c      	cbnz	r4, 800667e <__pow5mult+0x66>
 800666a:	f240 2171 	movw	r1, #625	; 0x271
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff ff12 	bl	8006498 <__i2b>
 8006674:	2300      	movs	r3, #0
 8006676:	f8c8 0008 	str.w	r0, [r8, #8]
 800667a:	4604      	mov	r4, r0
 800667c:	6003      	str	r3, [r0, #0]
 800667e:	f04f 0900 	mov.w	r9, #0
 8006682:	07eb      	lsls	r3, r5, #31
 8006684:	d50a      	bpl.n	800669c <__pow5mult+0x84>
 8006686:	4639      	mov	r1, r7
 8006688:	4622      	mov	r2, r4
 800668a:	4630      	mov	r0, r6
 800668c:	f7ff ff1a 	bl	80064c4 <__multiply>
 8006690:	4639      	mov	r1, r7
 8006692:	4680      	mov	r8, r0
 8006694:	4630      	mov	r0, r6
 8006696:	f7ff fe47 	bl	8006328 <_Bfree>
 800669a:	4647      	mov	r7, r8
 800669c:	106d      	asrs	r5, r5, #1
 800669e:	d00b      	beq.n	80066b8 <__pow5mult+0xa0>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	b938      	cbnz	r0, 80066b4 <__pow5mult+0x9c>
 80066a4:	4622      	mov	r2, r4
 80066a6:	4621      	mov	r1, r4
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff ff0b 	bl	80064c4 <__multiply>
 80066ae:	6020      	str	r0, [r4, #0]
 80066b0:	f8c0 9000 	str.w	r9, [r0]
 80066b4:	4604      	mov	r4, r0
 80066b6:	e7e4      	b.n	8006682 <__pow5mult+0x6a>
 80066b8:	4638      	mov	r0, r7
 80066ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066be:	bf00      	nop
 80066c0:	080075b0 	.word	0x080075b0
 80066c4:	0800737d 	.word	0x0800737d
 80066c8:	08007460 	.word	0x08007460

080066cc <__lshift>:
 80066cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	460c      	mov	r4, r1
 80066d2:	6849      	ldr	r1, [r1, #4]
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066da:	68a3      	ldr	r3, [r4, #8]
 80066dc:	4607      	mov	r7, r0
 80066de:	4691      	mov	r9, r2
 80066e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066e4:	f108 0601 	add.w	r6, r8, #1
 80066e8:	42b3      	cmp	r3, r6
 80066ea:	db0b      	blt.n	8006704 <__lshift+0x38>
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7ff fddb 	bl	80062a8 <_Balloc>
 80066f2:	4605      	mov	r5, r0
 80066f4:	b948      	cbnz	r0, 800670a <__lshift+0x3e>
 80066f6:	4602      	mov	r2, r0
 80066f8:	4b2a      	ldr	r3, [pc, #168]	; (80067a4 <__lshift+0xd8>)
 80066fa:	482b      	ldr	r0, [pc, #172]	; (80067a8 <__lshift+0xdc>)
 80066fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006700:	f000 fc0c 	bl	8006f1c <__assert_func>
 8006704:	3101      	adds	r1, #1
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	e7ee      	b.n	80066e8 <__lshift+0x1c>
 800670a:	2300      	movs	r3, #0
 800670c:	f100 0114 	add.w	r1, r0, #20
 8006710:	f100 0210 	add.w	r2, r0, #16
 8006714:	4618      	mov	r0, r3
 8006716:	4553      	cmp	r3, sl
 8006718:	db37      	blt.n	800678a <__lshift+0xbe>
 800671a:	6920      	ldr	r0, [r4, #16]
 800671c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006720:	f104 0314 	add.w	r3, r4, #20
 8006724:	f019 091f 	ands.w	r9, r9, #31
 8006728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800672c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006730:	d02f      	beq.n	8006792 <__lshift+0xc6>
 8006732:	f1c9 0e20 	rsb	lr, r9, #32
 8006736:	468a      	mov	sl, r1
 8006738:	f04f 0c00 	mov.w	ip, #0
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	fa02 f209 	lsl.w	r2, r2, r9
 8006742:	ea42 020c 	orr.w	r2, r2, ip
 8006746:	f84a 2b04 	str.w	r2, [sl], #4
 800674a:	f853 2b04 	ldr.w	r2, [r3], #4
 800674e:	4298      	cmp	r0, r3
 8006750:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006754:	d8f2      	bhi.n	800673c <__lshift+0x70>
 8006756:	1b03      	subs	r3, r0, r4
 8006758:	3b15      	subs	r3, #21
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	3304      	adds	r3, #4
 8006760:	f104 0215 	add.w	r2, r4, #21
 8006764:	4290      	cmp	r0, r2
 8006766:	bf38      	it	cc
 8006768:	2304      	movcc	r3, #4
 800676a:	f841 c003 	str.w	ip, [r1, r3]
 800676e:	f1bc 0f00 	cmp.w	ip, #0
 8006772:	d001      	beq.n	8006778 <__lshift+0xac>
 8006774:	f108 0602 	add.w	r6, r8, #2
 8006778:	3e01      	subs	r6, #1
 800677a:	4638      	mov	r0, r7
 800677c:	612e      	str	r6, [r5, #16]
 800677e:	4621      	mov	r1, r4
 8006780:	f7ff fdd2 	bl	8006328 <_Bfree>
 8006784:	4628      	mov	r0, r5
 8006786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678a:	f842 0f04 	str.w	r0, [r2, #4]!
 800678e:	3301      	adds	r3, #1
 8006790:	e7c1      	b.n	8006716 <__lshift+0x4a>
 8006792:	3904      	subs	r1, #4
 8006794:	f853 2b04 	ldr.w	r2, [r3], #4
 8006798:	f841 2f04 	str.w	r2, [r1, #4]!
 800679c:	4298      	cmp	r0, r3
 800679e:	d8f9      	bhi.n	8006794 <__lshift+0xc8>
 80067a0:	e7ea      	b.n	8006778 <__lshift+0xac>
 80067a2:	bf00      	nop
 80067a4:	080073ef 	.word	0x080073ef
 80067a8:	08007460 	.word	0x08007460

080067ac <__mcmp>:
 80067ac:	b530      	push	{r4, r5, lr}
 80067ae:	6902      	ldr	r2, [r0, #16]
 80067b0:	690c      	ldr	r4, [r1, #16]
 80067b2:	1b12      	subs	r2, r2, r4
 80067b4:	d10e      	bne.n	80067d4 <__mcmp+0x28>
 80067b6:	f100 0314 	add.w	r3, r0, #20
 80067ba:	3114      	adds	r1, #20
 80067bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067cc:	42a5      	cmp	r5, r4
 80067ce:	d003      	beq.n	80067d8 <__mcmp+0x2c>
 80067d0:	d305      	bcc.n	80067de <__mcmp+0x32>
 80067d2:	2201      	movs	r2, #1
 80067d4:	4610      	mov	r0, r2
 80067d6:	bd30      	pop	{r4, r5, pc}
 80067d8:	4283      	cmp	r3, r0
 80067da:	d3f3      	bcc.n	80067c4 <__mcmp+0x18>
 80067dc:	e7fa      	b.n	80067d4 <__mcmp+0x28>
 80067de:	f04f 32ff 	mov.w	r2, #4294967295
 80067e2:	e7f7      	b.n	80067d4 <__mcmp+0x28>

080067e4 <__mdiff>:
 80067e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	460c      	mov	r4, r1
 80067ea:	4606      	mov	r6, r0
 80067ec:	4611      	mov	r1, r2
 80067ee:	4620      	mov	r0, r4
 80067f0:	4690      	mov	r8, r2
 80067f2:	f7ff ffdb 	bl	80067ac <__mcmp>
 80067f6:	1e05      	subs	r5, r0, #0
 80067f8:	d110      	bne.n	800681c <__mdiff+0x38>
 80067fa:	4629      	mov	r1, r5
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7ff fd53 	bl	80062a8 <_Balloc>
 8006802:	b930      	cbnz	r0, 8006812 <__mdiff+0x2e>
 8006804:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <__mdiff+0x10c>)
 8006806:	4602      	mov	r2, r0
 8006808:	f240 2132 	movw	r1, #562	; 0x232
 800680c:	4839      	ldr	r0, [pc, #228]	; (80068f4 <__mdiff+0x110>)
 800680e:	f000 fb85 	bl	8006f1c <__assert_func>
 8006812:	2301      	movs	r3, #1
 8006814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	bfa4      	itt	ge
 800681e:	4643      	movge	r3, r8
 8006820:	46a0      	movge	r8, r4
 8006822:	4630      	mov	r0, r6
 8006824:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006828:	bfa6      	itte	ge
 800682a:	461c      	movge	r4, r3
 800682c:	2500      	movge	r5, #0
 800682e:	2501      	movlt	r5, #1
 8006830:	f7ff fd3a 	bl	80062a8 <_Balloc>
 8006834:	b920      	cbnz	r0, 8006840 <__mdiff+0x5c>
 8006836:	4b2e      	ldr	r3, [pc, #184]	; (80068f0 <__mdiff+0x10c>)
 8006838:	4602      	mov	r2, r0
 800683a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800683e:	e7e5      	b.n	800680c <__mdiff+0x28>
 8006840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006844:	6926      	ldr	r6, [r4, #16]
 8006846:	60c5      	str	r5, [r0, #12]
 8006848:	f104 0914 	add.w	r9, r4, #20
 800684c:	f108 0514 	add.w	r5, r8, #20
 8006850:	f100 0e14 	add.w	lr, r0, #20
 8006854:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800685c:	f108 0210 	add.w	r2, r8, #16
 8006860:	46f2      	mov	sl, lr
 8006862:	2100      	movs	r1, #0
 8006864:	f859 3b04 	ldr.w	r3, [r9], #4
 8006868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800686c:	fa1f f883 	uxth.w	r8, r3
 8006870:	fa11 f18b 	uxtah	r1, r1, fp
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	eba1 0808 	sub.w	r8, r1, r8
 800687a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800687e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006882:	fa1f f888 	uxth.w	r8, r8
 8006886:	1419      	asrs	r1, r3, #16
 8006888:	454e      	cmp	r6, r9
 800688a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800688e:	f84a 3b04 	str.w	r3, [sl], #4
 8006892:	d8e7      	bhi.n	8006864 <__mdiff+0x80>
 8006894:	1b33      	subs	r3, r6, r4
 8006896:	3b15      	subs	r3, #21
 8006898:	f023 0303 	bic.w	r3, r3, #3
 800689c:	3304      	adds	r3, #4
 800689e:	3415      	adds	r4, #21
 80068a0:	42a6      	cmp	r6, r4
 80068a2:	bf38      	it	cc
 80068a4:	2304      	movcc	r3, #4
 80068a6:	441d      	add	r5, r3
 80068a8:	4473      	add	r3, lr
 80068aa:	469e      	mov	lr, r3
 80068ac:	462e      	mov	r6, r5
 80068ae:	4566      	cmp	r6, ip
 80068b0:	d30e      	bcc.n	80068d0 <__mdiff+0xec>
 80068b2:	f10c 0203 	add.w	r2, ip, #3
 80068b6:	1b52      	subs	r2, r2, r5
 80068b8:	f022 0203 	bic.w	r2, r2, #3
 80068bc:	3d03      	subs	r5, #3
 80068be:	45ac      	cmp	ip, r5
 80068c0:	bf38      	it	cc
 80068c2:	2200      	movcc	r2, #0
 80068c4:	441a      	add	r2, r3
 80068c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068ca:	b17b      	cbz	r3, 80068ec <__mdiff+0x108>
 80068cc:	6107      	str	r7, [r0, #16]
 80068ce:	e7a3      	b.n	8006818 <__mdiff+0x34>
 80068d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80068d4:	fa11 f288 	uxtah	r2, r1, r8
 80068d8:	1414      	asrs	r4, r2, #16
 80068da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80068de:	b292      	uxth	r2, r2
 80068e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80068e4:	f84e 2b04 	str.w	r2, [lr], #4
 80068e8:	1421      	asrs	r1, r4, #16
 80068ea:	e7e0      	b.n	80068ae <__mdiff+0xca>
 80068ec:	3f01      	subs	r7, #1
 80068ee:	e7ea      	b.n	80068c6 <__mdiff+0xe2>
 80068f0:	080073ef 	.word	0x080073ef
 80068f4:	08007460 	.word	0x08007460

080068f8 <__d2b>:
 80068f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068fc:	4689      	mov	r9, r1
 80068fe:	2101      	movs	r1, #1
 8006900:	ec57 6b10 	vmov	r6, r7, d0
 8006904:	4690      	mov	r8, r2
 8006906:	f7ff fccf 	bl	80062a8 <_Balloc>
 800690a:	4604      	mov	r4, r0
 800690c:	b930      	cbnz	r0, 800691c <__d2b+0x24>
 800690e:	4602      	mov	r2, r0
 8006910:	4b25      	ldr	r3, [pc, #148]	; (80069a8 <__d2b+0xb0>)
 8006912:	4826      	ldr	r0, [pc, #152]	; (80069ac <__d2b+0xb4>)
 8006914:	f240 310a 	movw	r1, #778	; 0x30a
 8006918:	f000 fb00 	bl	8006f1c <__assert_func>
 800691c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006924:	bb35      	cbnz	r5, 8006974 <__d2b+0x7c>
 8006926:	2e00      	cmp	r6, #0
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	d028      	beq.n	800697e <__d2b+0x86>
 800692c:	4668      	mov	r0, sp
 800692e:	9600      	str	r6, [sp, #0]
 8006930:	f7ff fd82 	bl	8006438 <__lo0bits>
 8006934:	9900      	ldr	r1, [sp, #0]
 8006936:	b300      	cbz	r0, 800697a <__d2b+0x82>
 8006938:	9a01      	ldr	r2, [sp, #4]
 800693a:	f1c0 0320 	rsb	r3, r0, #32
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	430b      	orrs	r3, r1
 8006944:	40c2      	lsrs	r2, r0
 8006946:	6163      	str	r3, [r4, #20]
 8006948:	9201      	str	r2, [sp, #4]
 800694a:	9b01      	ldr	r3, [sp, #4]
 800694c:	61a3      	str	r3, [r4, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf14      	ite	ne
 8006952:	2202      	movne	r2, #2
 8006954:	2201      	moveq	r2, #1
 8006956:	6122      	str	r2, [r4, #16]
 8006958:	b1d5      	cbz	r5, 8006990 <__d2b+0x98>
 800695a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800695e:	4405      	add	r5, r0
 8006960:	f8c9 5000 	str.w	r5, [r9]
 8006964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006968:	f8c8 0000 	str.w	r0, [r8]
 800696c:	4620      	mov	r0, r4
 800696e:	b003      	add	sp, #12
 8006970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006978:	e7d5      	b.n	8006926 <__d2b+0x2e>
 800697a:	6161      	str	r1, [r4, #20]
 800697c:	e7e5      	b.n	800694a <__d2b+0x52>
 800697e:	a801      	add	r0, sp, #4
 8006980:	f7ff fd5a 	bl	8006438 <__lo0bits>
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	6163      	str	r3, [r4, #20]
 8006988:	2201      	movs	r2, #1
 800698a:	6122      	str	r2, [r4, #16]
 800698c:	3020      	adds	r0, #32
 800698e:	e7e3      	b.n	8006958 <__d2b+0x60>
 8006990:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006994:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006998:	f8c9 0000 	str.w	r0, [r9]
 800699c:	6918      	ldr	r0, [r3, #16]
 800699e:	f7ff fd2b 	bl	80063f8 <__hi0bits>
 80069a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069a6:	e7df      	b.n	8006968 <__d2b+0x70>
 80069a8:	080073ef 	.word	0x080073ef
 80069ac:	08007460 	.word	0x08007460

080069b0 <_calloc_r>:
 80069b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069b2:	fba1 2402 	umull	r2, r4, r1, r2
 80069b6:	b94c      	cbnz	r4, 80069cc <_calloc_r+0x1c>
 80069b8:	4611      	mov	r1, r2
 80069ba:	9201      	str	r2, [sp, #4]
 80069bc:	f000 f87a 	bl	8006ab4 <_malloc_r>
 80069c0:	9a01      	ldr	r2, [sp, #4]
 80069c2:	4605      	mov	r5, r0
 80069c4:	b930      	cbnz	r0, 80069d4 <_calloc_r+0x24>
 80069c6:	4628      	mov	r0, r5
 80069c8:	b003      	add	sp, #12
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	220c      	movs	r2, #12
 80069ce:	6002      	str	r2, [r0, #0]
 80069d0:	2500      	movs	r5, #0
 80069d2:	e7f8      	b.n	80069c6 <_calloc_r+0x16>
 80069d4:	4621      	mov	r1, r4
 80069d6:	f7fd fdf1 	bl	80045bc <memset>
 80069da:	e7f4      	b.n	80069c6 <_calloc_r+0x16>

080069dc <_free_r>:
 80069dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069de:	2900      	cmp	r1, #0
 80069e0:	d044      	beq.n	8006a6c <_free_r+0x90>
 80069e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e6:	9001      	str	r0, [sp, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f1a1 0404 	sub.w	r4, r1, #4
 80069ee:	bfb8      	it	lt
 80069f0:	18e4      	addlt	r4, r4, r3
 80069f2:	f000 fb19 	bl	8007028 <__malloc_lock>
 80069f6:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <_free_r+0x94>)
 80069f8:	9801      	ldr	r0, [sp, #4]
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	b933      	cbnz	r3, 8006a0c <_free_r+0x30>
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	6014      	str	r4, [r2, #0]
 8006a02:	b003      	add	sp, #12
 8006a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a08:	f000 bb14 	b.w	8007034 <__malloc_unlock>
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d908      	bls.n	8006a22 <_free_r+0x46>
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	428b      	cmp	r3, r1
 8006a16:	bf01      	itttt	eq
 8006a18:	6819      	ldreq	r1, [r3, #0]
 8006a1a:	685b      	ldreq	r3, [r3, #4]
 8006a1c:	1949      	addeq	r1, r1, r5
 8006a1e:	6021      	streq	r1, [r4, #0]
 8006a20:	e7ed      	b.n	80069fe <_free_r+0x22>
 8006a22:	461a      	mov	r2, r3
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b10b      	cbz	r3, 8006a2c <_free_r+0x50>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d9fa      	bls.n	8006a22 <_free_r+0x46>
 8006a2c:	6811      	ldr	r1, [r2, #0]
 8006a2e:	1855      	adds	r5, r2, r1
 8006a30:	42a5      	cmp	r5, r4
 8006a32:	d10b      	bne.n	8006a4c <_free_r+0x70>
 8006a34:	6824      	ldr	r4, [r4, #0]
 8006a36:	4421      	add	r1, r4
 8006a38:	1854      	adds	r4, r2, r1
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	d1e0      	bne.n	8006a02 <_free_r+0x26>
 8006a40:	681c      	ldr	r4, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	6053      	str	r3, [r2, #4]
 8006a46:	4421      	add	r1, r4
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	e7da      	b.n	8006a02 <_free_r+0x26>
 8006a4c:	d902      	bls.n	8006a54 <_free_r+0x78>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	6003      	str	r3, [r0, #0]
 8006a52:	e7d6      	b.n	8006a02 <_free_r+0x26>
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	1961      	adds	r1, r4, r5
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	bf04      	itt	eq
 8006a5c:	6819      	ldreq	r1, [r3, #0]
 8006a5e:	685b      	ldreq	r3, [r3, #4]
 8006a60:	6063      	str	r3, [r4, #4]
 8006a62:	bf04      	itt	eq
 8006a64:	1949      	addeq	r1, r1, r5
 8006a66:	6021      	streq	r1, [r4, #0]
 8006a68:	6054      	str	r4, [r2, #4]
 8006a6a:	e7ca      	b.n	8006a02 <_free_r+0x26>
 8006a6c:	b003      	add	sp, #12
 8006a6e:	bd30      	pop	{r4, r5, pc}
 8006a70:	20000334 	.word	0x20000334

08006a74 <sbrk_aligned>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	4e0e      	ldr	r6, [pc, #56]	; (8006ab0 <sbrk_aligned+0x3c>)
 8006a78:	460c      	mov	r4, r1
 8006a7a:	6831      	ldr	r1, [r6, #0]
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	b911      	cbnz	r1, 8006a86 <sbrk_aligned+0x12>
 8006a80:	f000 f9e6 	bl	8006e50 <_sbrk_r>
 8006a84:	6030      	str	r0, [r6, #0]
 8006a86:	4621      	mov	r1, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 f9e1 	bl	8006e50 <_sbrk_r>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d00a      	beq.n	8006aa8 <sbrk_aligned+0x34>
 8006a92:	1cc4      	adds	r4, r0, #3
 8006a94:	f024 0403 	bic.w	r4, r4, #3
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d007      	beq.n	8006aac <sbrk_aligned+0x38>
 8006a9c:	1a21      	subs	r1, r4, r0
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f9d6 	bl	8006e50 <_sbrk_r>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d101      	bne.n	8006aac <sbrk_aligned+0x38>
 8006aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8006aac:	4620      	mov	r0, r4
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	20000338 	.word	0x20000338

08006ab4 <_malloc_r>:
 8006ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab8:	1ccd      	adds	r5, r1, #3
 8006aba:	f025 0503 	bic.w	r5, r5, #3
 8006abe:	3508      	adds	r5, #8
 8006ac0:	2d0c      	cmp	r5, #12
 8006ac2:	bf38      	it	cc
 8006ac4:	250c      	movcc	r5, #12
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	4607      	mov	r7, r0
 8006aca:	db01      	blt.n	8006ad0 <_malloc_r+0x1c>
 8006acc:	42a9      	cmp	r1, r5
 8006ace:	d905      	bls.n	8006adc <_malloc_r+0x28>
 8006ad0:	230c      	movs	r3, #12
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	4e2e      	ldr	r6, [pc, #184]	; (8006b98 <_malloc_r+0xe4>)
 8006ade:	f000 faa3 	bl	8007028 <__malloc_lock>
 8006ae2:	6833      	ldr	r3, [r6, #0]
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	bb34      	cbnz	r4, 8006b36 <_malloc_r+0x82>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4638      	mov	r0, r7
 8006aec:	f7ff ffc2 	bl	8006a74 <sbrk_aligned>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	4604      	mov	r4, r0
 8006af4:	d14d      	bne.n	8006b92 <_malloc_r+0xde>
 8006af6:	6834      	ldr	r4, [r6, #0]
 8006af8:	4626      	mov	r6, r4
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d140      	bne.n	8006b80 <_malloc_r+0xcc>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	4631      	mov	r1, r6
 8006b02:	4638      	mov	r0, r7
 8006b04:	eb04 0803 	add.w	r8, r4, r3
 8006b08:	f000 f9a2 	bl	8006e50 <_sbrk_r>
 8006b0c:	4580      	cmp	r8, r0
 8006b0e:	d13a      	bne.n	8006b86 <_malloc_r+0xd2>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	3503      	adds	r5, #3
 8006b14:	1a6d      	subs	r5, r5, r1
 8006b16:	f025 0503 	bic.w	r5, r5, #3
 8006b1a:	3508      	adds	r5, #8
 8006b1c:	2d0c      	cmp	r5, #12
 8006b1e:	bf38      	it	cc
 8006b20:	250c      	movcc	r5, #12
 8006b22:	4629      	mov	r1, r5
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff ffa5 	bl	8006a74 <sbrk_aligned>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d02b      	beq.n	8006b86 <_malloc_r+0xd2>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	442b      	add	r3, r5
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	e00e      	b.n	8006b54 <_malloc_r+0xa0>
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	1b52      	subs	r2, r2, r5
 8006b3a:	d41e      	bmi.n	8006b7a <_malloc_r+0xc6>
 8006b3c:	2a0b      	cmp	r2, #11
 8006b3e:	d916      	bls.n	8006b6e <_malloc_r+0xba>
 8006b40:	1961      	adds	r1, r4, r5
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	6025      	str	r5, [r4, #0]
 8006b46:	bf18      	it	ne
 8006b48:	6059      	strne	r1, [r3, #4]
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	bf08      	it	eq
 8006b4e:	6031      	streq	r1, [r6, #0]
 8006b50:	5162      	str	r2, [r4, r5]
 8006b52:	604b      	str	r3, [r1, #4]
 8006b54:	4638      	mov	r0, r7
 8006b56:	f104 060b 	add.w	r6, r4, #11
 8006b5a:	f000 fa6b 	bl	8007034 <__malloc_unlock>
 8006b5e:	f026 0607 	bic.w	r6, r6, #7
 8006b62:	1d23      	adds	r3, r4, #4
 8006b64:	1af2      	subs	r2, r6, r3
 8006b66:	d0b6      	beq.n	8006ad6 <_malloc_r+0x22>
 8006b68:	1b9b      	subs	r3, r3, r6
 8006b6a:	50a3      	str	r3, [r4, r2]
 8006b6c:	e7b3      	b.n	8006ad6 <_malloc_r+0x22>
 8006b6e:	6862      	ldr	r2, [r4, #4]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	bf0c      	ite	eq
 8006b74:	6032      	streq	r2, [r6, #0]
 8006b76:	605a      	strne	r2, [r3, #4]
 8006b78:	e7ec      	b.n	8006b54 <_malloc_r+0xa0>
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	6864      	ldr	r4, [r4, #4]
 8006b7e:	e7b2      	b.n	8006ae6 <_malloc_r+0x32>
 8006b80:	4634      	mov	r4, r6
 8006b82:	6876      	ldr	r6, [r6, #4]
 8006b84:	e7b9      	b.n	8006afa <_malloc_r+0x46>
 8006b86:	230c      	movs	r3, #12
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f000 fa52 	bl	8007034 <__malloc_unlock>
 8006b90:	e7a1      	b.n	8006ad6 <_malloc_r+0x22>
 8006b92:	6025      	str	r5, [r4, #0]
 8006b94:	e7de      	b.n	8006b54 <_malloc_r+0xa0>
 8006b96:	bf00      	nop
 8006b98:	20000334 	.word	0x20000334

08006b9c <__sfputc_r>:
 8006b9c:	6893      	ldr	r3, [r2, #8]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	b410      	push	{r4}
 8006ba4:	6093      	str	r3, [r2, #8]
 8006ba6:	da08      	bge.n	8006bba <__sfputc_r+0x1e>
 8006ba8:	6994      	ldr	r4, [r2, #24]
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	db01      	blt.n	8006bb2 <__sfputc_r+0x16>
 8006bae:	290a      	cmp	r1, #10
 8006bb0:	d103      	bne.n	8006bba <__sfputc_r+0x1e>
 8006bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb6:	f7fe ba01 	b.w	8004fbc <__swbuf_r>
 8006bba:	6813      	ldr	r3, [r2, #0]
 8006bbc:	1c58      	adds	r0, r3, #1
 8006bbe:	6010      	str	r0, [r2, #0]
 8006bc0:	7019      	strb	r1, [r3, #0]
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <__sfputs_r>:
 8006bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	18d5      	adds	r5, r2, r3
 8006bd4:	42ac      	cmp	r4, r5
 8006bd6:	d101      	bne.n	8006bdc <__sfputs_r+0x12>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e007      	b.n	8006bec <__sfputs_r+0x22>
 8006bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be0:	463a      	mov	r2, r7
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7ff ffda 	bl	8006b9c <__sfputc_r>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d1f3      	bne.n	8006bd4 <__sfputs_r+0xa>
 8006bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bf0 <_vfiprintf_r>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	b09d      	sub	sp, #116	; 0x74
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	4698      	mov	r8, r3
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	b118      	cbz	r0, 8006c08 <_vfiprintf_r+0x18>
 8006c00:	6983      	ldr	r3, [r0, #24]
 8006c02:	b90b      	cbnz	r3, 8006c08 <_vfiprintf_r+0x18>
 8006c04:	f7ff fa30 	bl	8006068 <__sinit>
 8006c08:	4b89      	ldr	r3, [pc, #548]	; (8006e30 <_vfiprintf_r+0x240>)
 8006c0a:	429d      	cmp	r5, r3
 8006c0c:	d11b      	bne.n	8006c46 <_vfiprintf_r+0x56>
 8006c0e:	6875      	ldr	r5, [r6, #4]
 8006c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c12:	07d9      	lsls	r1, r3, #31
 8006c14:	d405      	bmi.n	8006c22 <_vfiprintf_r+0x32>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	059a      	lsls	r2, r3, #22
 8006c1a:	d402      	bmi.n	8006c22 <_vfiprintf_r+0x32>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1e:	f7ff fac6 	bl	80061ae <__retarget_lock_acquire_recursive>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	071b      	lsls	r3, r3, #28
 8006c26:	d501      	bpl.n	8006c2c <_vfiprintf_r+0x3c>
 8006c28:	692b      	ldr	r3, [r5, #16]
 8006c2a:	b9eb      	cbnz	r3, 8006c68 <_vfiprintf_r+0x78>
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f7fe fa16 	bl	8005060 <__swsetup_r>
 8006c34:	b1c0      	cbz	r0, 8006c68 <_vfiprintf_r+0x78>
 8006c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c38:	07dc      	lsls	r4, r3, #31
 8006c3a:	d50e      	bpl.n	8006c5a <_vfiprintf_r+0x6a>
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	b01d      	add	sp, #116	; 0x74
 8006c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c46:	4b7b      	ldr	r3, [pc, #492]	; (8006e34 <_vfiprintf_r+0x244>)
 8006c48:	429d      	cmp	r5, r3
 8006c4a:	d101      	bne.n	8006c50 <_vfiprintf_r+0x60>
 8006c4c:	68b5      	ldr	r5, [r6, #8]
 8006c4e:	e7df      	b.n	8006c10 <_vfiprintf_r+0x20>
 8006c50:	4b79      	ldr	r3, [pc, #484]	; (8006e38 <_vfiprintf_r+0x248>)
 8006c52:	429d      	cmp	r5, r3
 8006c54:	bf08      	it	eq
 8006c56:	68f5      	ldreq	r5, [r6, #12]
 8006c58:	e7da      	b.n	8006c10 <_vfiprintf_r+0x20>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	0598      	lsls	r0, r3, #22
 8006c5e:	d4ed      	bmi.n	8006c3c <_vfiprintf_r+0x4c>
 8006c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c62:	f7ff faa5 	bl	80061b0 <__retarget_lock_release_recursive>
 8006c66:	e7e9      	b.n	8006c3c <_vfiprintf_r+0x4c>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	2320      	movs	r3, #32
 8006c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c76:	2330      	movs	r3, #48	; 0x30
 8006c78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e3c <_vfiprintf_r+0x24c>
 8006c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c80:	f04f 0901 	mov.w	r9, #1
 8006c84:	4623      	mov	r3, r4
 8006c86:	469a      	mov	sl, r3
 8006c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c8c:	b10a      	cbz	r2, 8006c92 <_vfiprintf_r+0xa2>
 8006c8e:	2a25      	cmp	r2, #37	; 0x25
 8006c90:	d1f9      	bne.n	8006c86 <_vfiprintf_r+0x96>
 8006c92:	ebba 0b04 	subs.w	fp, sl, r4
 8006c96:	d00b      	beq.n	8006cb0 <_vfiprintf_r+0xc0>
 8006c98:	465b      	mov	r3, fp
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f7ff ff93 	bl	8006bca <__sfputs_r>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f000 80aa 	beq.w	8006dfe <_vfiprintf_r+0x20e>
 8006caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cac:	445a      	add	r2, fp
 8006cae:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80a2 	beq.w	8006dfe <_vfiprintf_r+0x20e>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc4:	f10a 0a01 	add.w	sl, sl, #1
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	9307      	str	r3, [sp, #28]
 8006ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd2:	4654      	mov	r4, sl
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cda:	4858      	ldr	r0, [pc, #352]	; (8006e3c <_vfiprintf_r+0x24c>)
 8006cdc:	f7f9 fa90 	bl	8000200 <memchr>
 8006ce0:	9a04      	ldr	r2, [sp, #16]
 8006ce2:	b9d8      	cbnz	r0, 8006d1c <_vfiprintf_r+0x12c>
 8006ce4:	06d1      	lsls	r1, r2, #27
 8006ce6:	bf44      	itt	mi
 8006ce8:	2320      	movmi	r3, #32
 8006cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cee:	0713      	lsls	r3, r2, #28
 8006cf0:	bf44      	itt	mi
 8006cf2:	232b      	movmi	r3, #43	; 0x2b
 8006cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfe:	d015      	beq.n	8006d2c <_vfiprintf_r+0x13c>
 8006d00:	9a07      	ldr	r2, [sp, #28]
 8006d02:	4654      	mov	r4, sl
 8006d04:	2000      	movs	r0, #0
 8006d06:	f04f 0c0a 	mov.w	ip, #10
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d10:	3b30      	subs	r3, #48	; 0x30
 8006d12:	2b09      	cmp	r3, #9
 8006d14:	d94e      	bls.n	8006db4 <_vfiprintf_r+0x1c4>
 8006d16:	b1b0      	cbz	r0, 8006d46 <_vfiprintf_r+0x156>
 8006d18:	9207      	str	r2, [sp, #28]
 8006d1a:	e014      	b.n	8006d46 <_vfiprintf_r+0x156>
 8006d1c:	eba0 0308 	sub.w	r3, r0, r8
 8006d20:	fa09 f303 	lsl.w	r3, r9, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	9304      	str	r3, [sp, #16]
 8006d28:	46a2      	mov	sl, r4
 8006d2a:	e7d2      	b.n	8006cd2 <_vfiprintf_r+0xe2>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	1d19      	adds	r1, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	9103      	str	r1, [sp, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfbb      	ittet	lt
 8006d38:	425b      	neglt	r3, r3
 8006d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d3e:	9307      	strge	r3, [sp, #28]
 8006d40:	9307      	strlt	r3, [sp, #28]
 8006d42:	bfb8      	it	lt
 8006d44:	9204      	strlt	r2, [sp, #16]
 8006d46:	7823      	ldrb	r3, [r4, #0]
 8006d48:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4a:	d10c      	bne.n	8006d66 <_vfiprintf_r+0x176>
 8006d4c:	7863      	ldrb	r3, [r4, #1]
 8006d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d50:	d135      	bne.n	8006dbe <_vfiprintf_r+0x1ce>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	9203      	str	r2, [sp, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bfb8      	it	lt
 8006d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d62:	3402      	adds	r4, #2
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e4c <_vfiprintf_r+0x25c>
 8006d6a:	7821      	ldrb	r1, [r4, #0]
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	4650      	mov	r0, sl
 8006d70:	f7f9 fa46 	bl	8000200 <memchr>
 8006d74:	b140      	cbz	r0, 8006d88 <_vfiprintf_r+0x198>
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	eba0 000a 	sub.w	r0, r0, sl
 8006d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	4303      	orrs	r3, r0
 8006d84:	3401      	adds	r4, #1
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8c:	482c      	ldr	r0, [pc, #176]	; (8006e40 <_vfiprintf_r+0x250>)
 8006d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d92:	2206      	movs	r2, #6
 8006d94:	f7f9 fa34 	bl	8000200 <memchr>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d03f      	beq.n	8006e1c <_vfiprintf_r+0x22c>
 8006d9c:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <_vfiprintf_r+0x254>)
 8006d9e:	bb1b      	cbnz	r3, 8006de8 <_vfiprintf_r+0x1f8>
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	3307      	adds	r3, #7
 8006da4:	f023 0307 	bic.w	r3, r3, #7
 8006da8:	3308      	adds	r3, #8
 8006daa:	9303      	str	r3, [sp, #12]
 8006dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dae:	443b      	add	r3, r7
 8006db0:	9309      	str	r3, [sp, #36]	; 0x24
 8006db2:	e767      	b.n	8006c84 <_vfiprintf_r+0x94>
 8006db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006db8:	460c      	mov	r4, r1
 8006dba:	2001      	movs	r0, #1
 8006dbc:	e7a5      	b.n	8006d0a <_vfiprintf_r+0x11a>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	3401      	adds	r4, #1
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	f04f 0c0a 	mov.w	ip, #10
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd0:	3a30      	subs	r2, #48	; 0x30
 8006dd2:	2a09      	cmp	r2, #9
 8006dd4:	d903      	bls.n	8006dde <_vfiprintf_r+0x1ee>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0c5      	beq.n	8006d66 <_vfiprintf_r+0x176>
 8006dda:	9105      	str	r1, [sp, #20]
 8006ddc:	e7c3      	b.n	8006d66 <_vfiprintf_r+0x176>
 8006dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8006de2:	4604      	mov	r4, r0
 8006de4:	2301      	movs	r3, #1
 8006de6:	e7f0      	b.n	8006dca <_vfiprintf_r+0x1da>
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	462a      	mov	r2, r5
 8006dee:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <_vfiprintf_r+0x258>)
 8006df0:	a904      	add	r1, sp, #16
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7fd fc8a 	bl	800470c <_printf_float>
 8006df8:	4607      	mov	r7, r0
 8006dfa:	1c78      	adds	r0, r7, #1
 8006dfc:	d1d6      	bne.n	8006dac <_vfiprintf_r+0x1bc>
 8006dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e00:	07d9      	lsls	r1, r3, #31
 8006e02:	d405      	bmi.n	8006e10 <_vfiprintf_r+0x220>
 8006e04:	89ab      	ldrh	r3, [r5, #12]
 8006e06:	059a      	lsls	r2, r3, #22
 8006e08:	d402      	bmi.n	8006e10 <_vfiprintf_r+0x220>
 8006e0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e0c:	f7ff f9d0 	bl	80061b0 <__retarget_lock_release_recursive>
 8006e10:	89ab      	ldrh	r3, [r5, #12]
 8006e12:	065b      	lsls	r3, r3, #25
 8006e14:	f53f af12 	bmi.w	8006c3c <_vfiprintf_r+0x4c>
 8006e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1a:	e711      	b.n	8006c40 <_vfiprintf_r+0x50>
 8006e1c:	ab03      	add	r3, sp, #12
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <_vfiprintf_r+0x258>)
 8006e24:	a904      	add	r1, sp, #16
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7fd ff14 	bl	8004c54 <_printf_i>
 8006e2c:	e7e4      	b.n	8006df8 <_vfiprintf_r+0x208>
 8006e2e:	bf00      	nop
 8006e30:	08007420 	.word	0x08007420
 8006e34:	08007440 	.word	0x08007440
 8006e38:	08007400 	.word	0x08007400
 8006e3c:	080075bc 	.word	0x080075bc
 8006e40:	080075c6 	.word	0x080075c6
 8006e44:	0800470d 	.word	0x0800470d
 8006e48:	08006bcb 	.word	0x08006bcb
 8006e4c:	080075c2 	.word	0x080075c2

08006e50 <_sbrk_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d06      	ldr	r5, [pc, #24]	; (8006e6c <_sbrk_r+0x1c>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	f7fa fe46 	bl	8001aec <_sbrk>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_sbrk_r+0x1a>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_sbrk_r+0x1a>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	2000033c 	.word	0x2000033c

08006e70 <__sread>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f8e2 	bl	8007040 <_read_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	bfab      	itete	ge
 8006e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e82:	89a3      	ldrhlt	r3, [r4, #12]
 8006e84:	181b      	addge	r3, r3, r0
 8006e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e8a:	bfac      	ite	ge
 8006e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e8e:	81a3      	strhlt	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__swrite>:
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	461f      	mov	r7, r3
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	05db      	lsls	r3, r3, #23
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	d505      	bpl.n	8006eb0 <__swrite+0x1e>
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f000 f898 	bl	8006fe0 <_lseek_r>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f000 b817 	b.w	8006ef8 <_write_r>

08006eca <__sseek>:
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 f885 	bl	8006fe0 <_lseek_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	bf15      	itete	ne
 8006edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ee6:	81a3      	strheq	r3, [r4, #12]
 8006ee8:	bf18      	it	ne
 8006eea:	81a3      	strhne	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__sclose>:
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 b831 	b.w	8006f58 <_close_r>
	...

08006ef8 <_write_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d07      	ldr	r5, [pc, #28]	; (8006f18 <_write_r+0x20>)
 8006efc:	4604      	mov	r4, r0
 8006efe:	4608      	mov	r0, r1
 8006f00:	4611      	mov	r1, r2
 8006f02:	2200      	movs	r2, #0
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f7fa fd9f 	bl	8001a4a <_write>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_write_r+0x1e>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_write_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	2000033c 	.word	0x2000033c

08006f1c <__assert_func>:
 8006f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f1e:	4614      	mov	r4, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <__assert_func+0x2c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4605      	mov	r5, r0
 8006f28:	68d8      	ldr	r0, [r3, #12]
 8006f2a:	b14c      	cbz	r4, 8006f40 <__assert_func+0x24>
 8006f2c:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <__assert_func+0x30>)
 8006f2e:	9100      	str	r1, [sp, #0]
 8006f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f34:	4906      	ldr	r1, [pc, #24]	; (8006f50 <__assert_func+0x34>)
 8006f36:	462b      	mov	r3, r5
 8006f38:	f000 f81e 	bl	8006f78 <fiprintf>
 8006f3c:	f000 f89f 	bl	800707e <abort>
 8006f40:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <__assert_func+0x38>)
 8006f42:	461c      	mov	r4, r3
 8006f44:	e7f3      	b.n	8006f2e <__assert_func+0x12>
 8006f46:	bf00      	nop
 8006f48:	20000020 	.word	0x20000020
 8006f4c:	080075cd 	.word	0x080075cd
 8006f50:	080075da 	.word	0x080075da
 8006f54:	08007608 	.word	0x08007608

08006f58 <_close_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d06      	ldr	r5, [pc, #24]	; (8006f74 <_close_r+0x1c>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7fa fd8d 	bl	8001a82 <_close>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_close_r+0x1a>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_close_r+0x1a>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	2000033c 	.word	0x2000033c

08006f78 <fiprintf>:
 8006f78:	b40e      	push	{r1, r2, r3}
 8006f7a:	b503      	push	{r0, r1, lr}
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	ab03      	add	r3, sp, #12
 8006f80:	4805      	ldr	r0, [pc, #20]	; (8006f98 <fiprintf+0x20>)
 8006f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f86:	6800      	ldr	r0, [r0, #0]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	f7ff fe31 	bl	8006bf0 <_vfiprintf_r>
 8006f8e:	b002      	add	sp, #8
 8006f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f94:	b003      	add	sp, #12
 8006f96:	4770      	bx	lr
 8006f98:	20000020 	.word	0x20000020

08006f9c <_fstat_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d07      	ldr	r5, [pc, #28]	; (8006fbc <_fstat_r+0x20>)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	f7fa fd76 	bl	8001a9a <_fstat>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d102      	bne.n	8006fb8 <_fstat_r+0x1c>
 8006fb2:	682b      	ldr	r3, [r5, #0]
 8006fb4:	b103      	cbz	r3, 8006fb8 <_fstat_r+0x1c>
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	bd38      	pop	{r3, r4, r5, pc}
 8006fba:	bf00      	nop
 8006fbc:	2000033c 	.word	0x2000033c

08006fc0 <_isatty_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d06      	ldr	r5, [pc, #24]	; (8006fdc <_isatty_r+0x1c>)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	f7fa fd75 	bl	8001aba <_isatty>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_isatty_r+0x1a>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_isatty_r+0x1a>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	2000033c 	.word	0x2000033c

08006fe0 <_lseek_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	; (8007000 <_lseek_r+0x20>)
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7fa fd6e 	bl	8001ad0 <_lseek>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_lseek_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_lseek_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	2000033c 	.word	0x2000033c

08007004 <__ascii_mbtowc>:
 8007004:	b082      	sub	sp, #8
 8007006:	b901      	cbnz	r1, 800700a <__ascii_mbtowc+0x6>
 8007008:	a901      	add	r1, sp, #4
 800700a:	b142      	cbz	r2, 800701e <__ascii_mbtowc+0x1a>
 800700c:	b14b      	cbz	r3, 8007022 <__ascii_mbtowc+0x1e>
 800700e:	7813      	ldrb	r3, [r2, #0]
 8007010:	600b      	str	r3, [r1, #0]
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	1e10      	subs	r0, r2, #0
 8007016:	bf18      	it	ne
 8007018:	2001      	movne	r0, #1
 800701a:	b002      	add	sp, #8
 800701c:	4770      	bx	lr
 800701e:	4610      	mov	r0, r2
 8007020:	e7fb      	b.n	800701a <__ascii_mbtowc+0x16>
 8007022:	f06f 0001 	mvn.w	r0, #1
 8007026:	e7f8      	b.n	800701a <__ascii_mbtowc+0x16>

08007028 <__malloc_lock>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__malloc_lock+0x8>)
 800702a:	f7ff b8c0 	b.w	80061ae <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	20000330 	.word	0x20000330

08007034 <__malloc_unlock>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__malloc_unlock+0x8>)
 8007036:	f7ff b8bb 	b.w	80061b0 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	20000330 	.word	0x20000330

08007040 <_read_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_read_r+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fa fcde 	bl	8001a10 <_read>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_read_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_read_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	2000033c 	.word	0x2000033c

08007064 <__ascii_wctomb>:
 8007064:	b149      	cbz	r1, 800707a <__ascii_wctomb+0x16>
 8007066:	2aff      	cmp	r2, #255	; 0xff
 8007068:	bf85      	ittet	hi
 800706a:	238a      	movhi	r3, #138	; 0x8a
 800706c:	6003      	strhi	r3, [r0, #0]
 800706e:	700a      	strbls	r2, [r1, #0]
 8007070:	f04f 30ff 	movhi.w	r0, #4294967295
 8007074:	bf98      	it	ls
 8007076:	2001      	movls	r0, #1
 8007078:	4770      	bx	lr
 800707a:	4608      	mov	r0, r1
 800707c:	4770      	bx	lr

0800707e <abort>:
 800707e:	b508      	push	{r3, lr}
 8007080:	2006      	movs	r0, #6
 8007082:	f000 f82b 	bl	80070dc <raise>
 8007086:	2001      	movs	r0, #1
 8007088:	f7fa fcb8 	bl	80019fc <_exit>

0800708c <_raise_r>:
 800708c:	291f      	cmp	r1, #31
 800708e:	b538      	push	{r3, r4, r5, lr}
 8007090:	4604      	mov	r4, r0
 8007092:	460d      	mov	r5, r1
 8007094:	d904      	bls.n	80070a0 <_raise_r+0x14>
 8007096:	2316      	movs	r3, #22
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	f04f 30ff 	mov.w	r0, #4294967295
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070a2:	b112      	cbz	r2, 80070aa <_raise_r+0x1e>
 80070a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070a8:	b94b      	cbnz	r3, 80070be <_raise_r+0x32>
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 f830 	bl	8007110 <_getpid_r>
 80070b0:	462a      	mov	r2, r5
 80070b2:	4601      	mov	r1, r0
 80070b4:	4620      	mov	r0, r4
 80070b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ba:	f000 b817 	b.w	80070ec <_kill_r>
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d00a      	beq.n	80070d8 <_raise_r+0x4c>
 80070c2:	1c59      	adds	r1, r3, #1
 80070c4:	d103      	bne.n	80070ce <_raise_r+0x42>
 80070c6:	2316      	movs	r3, #22
 80070c8:	6003      	str	r3, [r0, #0]
 80070ca:	2001      	movs	r0, #1
 80070cc:	e7e7      	b.n	800709e <_raise_r+0x12>
 80070ce:	2400      	movs	r4, #0
 80070d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070d4:	4628      	mov	r0, r5
 80070d6:	4798      	blx	r3
 80070d8:	2000      	movs	r0, #0
 80070da:	e7e0      	b.n	800709e <_raise_r+0x12>

080070dc <raise>:
 80070dc:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <raise+0xc>)
 80070de:	4601      	mov	r1, r0
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	f7ff bfd3 	b.w	800708c <_raise_r>
 80070e6:	bf00      	nop
 80070e8:	20000020 	.word	0x20000020

080070ec <_kill_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d07      	ldr	r5, [pc, #28]	; (800710c <_kill_r+0x20>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	f7fa fc6f 	bl	80019dc <_kill>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d102      	bne.n	8007108 <_kill_r+0x1c>
 8007102:	682b      	ldr	r3, [r5, #0]
 8007104:	b103      	cbz	r3, 8007108 <_kill_r+0x1c>
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	bd38      	pop	{r3, r4, r5, pc}
 800710a:	bf00      	nop
 800710c:	2000033c 	.word	0x2000033c

08007110 <_getpid_r>:
 8007110:	f7fa bc5c 	b.w	80019cc <_getpid>

08007114 <_init>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr

08007120 <_fini>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr
