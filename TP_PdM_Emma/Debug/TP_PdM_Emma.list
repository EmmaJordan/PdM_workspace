
TP_PdM_Emma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000446c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f0  080047f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080047f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000130  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c568  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002492  00000000  00000000  0002c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000928  00000000  00000000  0002f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002867e  00000000  00000000  0002fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d12  00000000  00000000  00058496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0116  00000000  00000000  000691a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001592be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002efc  00000000  00000000  00159310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004604 	.word	0x08004604

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08004604 	.word	0x08004604

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <iniciaADC>:

/* Variable used to get converted value */
__IO uint16_t uhADCxConvertedValue = 0;

void iniciaADC()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;

	//##-1- Configure the ADC peripheral #######################################
	AdcHandle.Instance                   = ADC1;
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <iniciaADC+0x80>)
 800059c:	4a1e      	ldr	r2, [pc, #120]	; (8000618 <iniciaADC+0x84>)
 800059e:	601a      	str	r2, [r3, #0]
	AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <iniciaADC+0x80>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
	AdcHandle.Init.Resolution            = ADC_RESOLUTION12b;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <iniciaADC+0x80>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
	AdcHandle.Init.ScanConvMode          = DISABLE;                       // Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1)
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <iniciaADC+0x80>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
	AdcHandle.Init.ContinuousConvMode    = ENABLE;                        // Continuous mode disabled to have only 1 conversion at each conversion trig
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <iniciaADC+0x80>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	761a      	strb	r2, [r3, #24]
	AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       // Parameter discarded because sequencer is disabled
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <iniciaADC+0x80>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
	AdcHandle.Init.NbrOfDiscConversion   = 0;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <iniciaADC+0x80>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
	AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;        // Conversion start trigged at each external event
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <iniciaADC+0x80>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
	AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <iniciaADC+0x80>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
	AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <iniciaADC+0x80>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
	AdcHandle.Init.NbrOfConversion       = 1;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <iniciaADC+0x80>)
 80005da:	2201      	movs	r2, #1
 80005dc:	61da      	str	r2, [r3, #28]
	AdcHandle.Init.DMAContinuousRequests = ENABLE;
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <iniciaADC+0x80>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	AdcHandle.Init.EOCSelection          = DISABLE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <iniciaADC+0x80>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <iniciaADC+0x80>)
 80005ee:	f000 fb9d 	bl	8000d2c <HAL_ADC_Init>
	}

	//printf("HAL_ADC_Init OK\r\n");

	//##-2- Configure ADC regular channel ######################################
	sConfig.Channel      = ADC_CHANNEL_3;
 80005f2:	2303      	movs	r3, #3
 80005f4:	603b      	str	r3, [r7, #0]
	sConfig.Rank         = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
	sConfig.Offset       = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <iniciaADC+0x80>)
 8000608:	f000 fd72 	bl	80010f0 <HAL_ADC_ConfigChannel>
	//{
		 //Start Conversation Error
		//Error_Handler();
	//}
	//printf("HAL_ADC_Start_DMA OK\r\n");
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000009c 	.word	0x2000009c
 8000618:	40012000 	.word	0x40012000

0800061c <myADCread>:

uint32_t myADCread()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	uint32_t valorLeidoADC;
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <myADCread+0x38>)
 8000624:	f000 fd56 	bl	80010d4 <HAL_ADC_GetValue>
 8000628:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&AdcHandle);
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <myADCread+0x38>)
 800062c:	f000 fbc2 	bl	8000db4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&AdcHandle,0xFFF);
 8000630:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <myADCread+0x38>)
 8000636:	f000 fcc2 	bl	8000fbe <HAL_ADC_PollForConversion>
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <myADCread+0x38>)
 800063c:	f000 fd4a 	bl	80010d4 <HAL_ADC_GetValue>
 8000640:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&AdcHandle);
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <myADCread+0x38>)
 8000644:	f000 fc88 	bl	8000f58 <HAL_ADC_Stop>
	return valorLeidoADC;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000009c 	.word	0x2000009c

08000658 <debounceFSM_update>:
//Entrada: ninguna
//Salida: ninguna
//Nota: es una función pública porque se llama desde fuera del módulo (main)
static bool_t flancoDescendente = 0;
void debounceFSM_update()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if ( BUTTON_menosTiempo_PRESSED )
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <debounceFSM_update+0x40>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <debounceFSM_update+0x16>
	{
		BSP_LED_Toggle(LED1);
 8000668:	2000      	movs	r0, #0
 800066a:	f000 f94b 	bl	8000904 <BSP_LED_Toggle>
	}
	if ( BUTTON_masTiempo_PRESSED )
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <debounceFSM_update+0x40>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <debounceFSM_update+0x28>
	{
		BSP_LED_Toggle(LED2);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f942 	bl	8000904 <BSP_LED_Toggle>
	}
	if ( BUTTON_Disparo_PRESSED )
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <debounceFSM_update+0x44>)
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <debounceFSM_update+0x3a>
	{
		BSP_LED_Toggle(LED3);
 800068c:	2002      	movs	r0, #2
 800068e:	f000 f939 	bl	8000904 <BSP_LED_Toggle>
					}
					break;
		default:
					break;
	}*/
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021800 	.word	0x40021800
 800069c:	40020800 	.word	0x40020800

080006a0 <debounceFSM_init>:
//Función: carga el estado inicial
//Entrada: ninguna
//Salida:  ninguna
//Nota: es una función pública porque se llama desde fuera del módulo (main)
void debounceFSM_init()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	delayInit(&delayAntiRebote, TIME_ANTIREBOTE);
 80006a4:	2128      	movs	r1, #40	; 0x28
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <debounceFSM_init+0x18>)
 80006a8:	f000 f80a 	bl	80006c0 <delayInit>
	actualState = BUTTON_UP;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <debounceFSM_init+0x1c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000e4 	.word	0x200000e4
 80006bc:	200000f0 	.word	0x200000f0

080006c0 <delayInit>:

// Entrada: Puntero al delay y su duración en ms
// Salida: Ninguna
// Función: Inicializa los parámetros internos del delay
void delayInit( delay_t * delay, tick_t duration )
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	if((delay != NULL) && (duration > 0))			// Verifica que el puntero sea valido y que la duracion sea un valor positivo
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00b      	beq.n	80006e8 <delayInit+0x28>
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d008      	beq.n	80006e8 <delayInit+0x28>
	{
		delay->startTime = 0;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
		delay->duration = duration;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	605a      	str	r2, [r3, #4]
		delay->running = false;						// Inicializa el delay detenido
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	721a      	strb	r2, [r3, #8]
	}
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <inputsInit>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de los leds de mi placa (diferente a Nucleo)
void inputsInit()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f91c 	bl	8000938 <BSP_PB_Init>

	/* Initialize Button for -Time & +Time */
	RCC->AHB1ENR |= (1<<6); //Habilita puerto G
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <inputsInit+0x64>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <inputsInit+0x64>)
 8000706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070a:	6313      	str	r3, [r2, #48]	; 0x30

	//PG0 -Time
	GPIOG->MODER &=~ (3<<0);   			//00 --> entrada
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <inputsInit+0x68>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <inputsInit+0x68>)
 8000712:	f023 0303 	bic.w	r3, r3, #3
 8000716:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<0);			//10 --> pull down
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <inputsInit+0x68>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	4a0f      	ldr	r2, [pc, #60]	; (800075c <inputsInit+0x68>)
 800071e:	f023 0301 	bic.w	r3, r3, #1
 8000722:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<1);
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <inputsInit+0x68>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <inputsInit+0x68>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	60d3      	str	r3, [r2, #12]

	//PG1 +Time
	GPIOG->MODER &=~ (3<<2);   			//00 --> entrada
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <inputsInit+0x68>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a09      	ldr	r2, [pc, #36]	; (800075c <inputsInit+0x68>)
 8000736:	f023 030c 	bic.w	r3, r3, #12
 800073a:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<2);			//10 --> pull down
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <inputsInit+0x68>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <inputsInit+0x68>)
 8000742:	f023 0304 	bic.w	r3, r3, #4
 8000746:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<3);
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <inputsInit+0x68>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <inputsInit+0x68>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40021800 	.word	0x40021800

08000760 <outputsInit>:

void outputsInit()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f863 	bl	8000830 <BSP_LED_Init>
	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED2);
 800076a:	2001      	movs	r0, #1
 800076c:	f000 f860 	bl	8000830 <BSP_LED_Init>
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED3);
 8000770:	2002      	movs	r0, #2
 8000772:	f000 f85d 	bl	8000830 <BSP_LED_Init>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <uartinit>:
 	 Salida: booleando TRUE si se inicializó correctamente, FALSE si falló
*/
#define myBaudRate 9600
#define UARTn 3
bool_t uartinit()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	UartHandle.Instance        = USART3; //uart 1 para placa discovery
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <uartinit+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <uartinit+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = myBaudRate;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <uartinit+0x74>)
 8000788:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800078c:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <uartinit+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <uartinit+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_ODD;
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <uartinit+0x74>)
 800079c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80007a0:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <uartinit+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <uartinit+0x74>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <uartinit+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80007b4:	480e      	ldr	r0, [pc, #56]	; (80007f0 <uartinit+0x74>)
 80007b6:	f002 fa6b 	bl	8002c90 <HAL_UART_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d004      	beq.n	80007ca <uartinit+0x4e>
	{
		/* Initialization Error */
		//Error_Handler();
		printf("Error en la inicializacion de la UART\n\r");
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <uartinit+0x7c>)
 80007c2:	f002 ff1b 	bl	80035fc <iprintf>
		return false;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e00f      	b.n	80007ea <uartinit+0x6e>
	}
	printf("UART inicializada correctamente\n\r");
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <uartinit+0x80>)
 80007cc:	f002 ff16 	bl	80035fc <iprintf>
	printf("Parametros de configuracion:\n\r");
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <uartinit+0x84>)
 80007d2:	f002 ff13 	bl	80035fc <iprintf>
	printf("Instancia: USART%d\n\r",UARTn);
 80007d6:	2103      	movs	r1, #3
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <uartinit+0x88>)
 80007da:	f002 ff0f 	bl	80035fc <iprintf>
	printf("Baudrate: %d\n\r",myBaudRate);
 80007de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80007e2:	4809      	ldr	r0, [pc, #36]	; (8000808 <uartinit+0x8c>)
 80007e4:	f002 ff0a 	bl	80035fc <iprintf>

	return true;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000f4 	.word	0x200000f4
 80007f4:	40004800 	.word	0x40004800
 80007f8:	0800461c 	.word	0x0800461c
 80007fc:	08004644 	.word	0x08004644
 8000800:	08004668 	.word	0x08004668
 8000804:	08004688 	.word	0x08004688
 8000808:	080046a0 	.word	0x080046a0

0800080c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  // Place your implementation of fputc here
  // e.g. write a character to the USART3 and Loop until the end of transmission
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8000814:	1d39      	adds	r1, r7, #4
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	2201      	movs	r2, #1
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <__io_putchar+0x20>)
 800081e:	f002 fa84 	bl	8002d2a <HAL_UART_Transmit>

  return ch;
 8000822:	687b      	ldr	r3, [r7, #4]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000f4 	.word	0x200000f4

08000830 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10e      	bne.n	800085e <BSP_LED_Init+0x2e>
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <BSP_LED_Init+0x94>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <BSP_LED_Init+0x94>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <BSP_LED_Init+0x94>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f003 0302 	and.w	r3, r3, #2
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	e00d      	b.n	800087a <BSP_LED_Init+0x4a>
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <BSP_LED_Init+0x94>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <BSP_LED_Init+0x94>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <BSP_LED_Init+0x94>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <BSP_LED_Init+0x98>)
 800087e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <BSP_LED_Init+0x9c>)
 8000894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000898:	f107 0214 	add.w	r2, r7, #20
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fa50 	bl	8001d44 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4a09      	ldr	r2, [pc, #36]	; (80008cc <BSP_LED_Init+0x9c>)
 80008a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <BSP_LED_Init+0x98>)
 80008b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	f001 fbf0 	bl	800209c <HAL_GPIO_WritePin>
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	08004728 	.word	0x08004728
 80008cc:	20000000 	.word	0x20000000

080008d0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <BSP_LED_On+0x2c>)
 80008de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <BSP_LED_On+0x30>)
 80008e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	f001 fbd5 	bl	800209c <HAL_GPIO_WritePin>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000
 8000900:	08004728 	.word	0x08004728

08000904 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <BSP_LED_Toggle+0x2c>)
 8000912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4906      	ldr	r1, [pc, #24]	; (8000934 <BSP_LED_Toggle+0x30>)
 800091a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f001 fbd4 	bl	80020ce <HAL_GPIO_TogglePin>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000000 	.word	0x20000000
 8000934:	08004728 	.word	0x08004728

08000938 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <BSP_PB_Init+0xa4>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <BSP_PB_Init+0xa4>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <BSP_PB_Init+0xa4>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d112      	bne.n	8000990 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <BSP_PB_Init+0xa8>)
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	f107 020c 	add.w	r2, r7, #12
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f9da 	bl	8001d44 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d11d      	bne.n	80009d2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80009a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <BSP_PB_Init+0xa8>)
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	f107 020c 	add.w	r2, r7, #12
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f9c5 	bl	8001d44 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009ba:	2328      	movs	r3, #40	; 0x28
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fe9d 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80009c8:	2328      	movs	r3, #40	; 0x28
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 feb4 	bl	800173a <HAL_NVIC_EnableIRQ>
  }
}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	2000000c 	.word	0x2000000c

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <SystemInit+0x60>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <SystemInit+0x60>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <SystemInit+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <SystemInit+0x64>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <SystemInit+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SystemInit+0x64>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <SystemInit+0x64>)
 8000a10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <SystemInit+0x64>)
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <SystemInit+0x68>)
 8000a1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <SystemInit+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <SystemInit+0x64>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SystemInit+0x60>)
 8000a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a38:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	24003010 	.word	0x24003010

08000a50 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000aa4:	f000 f8fe 	bl	8000ca4 <HAL_IncTick>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <DMA2_Stream0_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <DMA2_Stream0_IRQHandler+0x14>)
 8000ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 ff09 	bl	80018cc <HAL_DMA_IRQHandler>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000009c 	.word	0x2000009c

08000ac4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad6:	f3af 8000 	nop.w
 8000ada:	4601      	mov	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
	}

return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fe77 	bl	800080c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
	}
	return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 fce2 	bl	8003598 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20030000 	.word	0x20030000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000138 	.word	0x20000138
 8000c08:	200001b0 	.word	0x200001b0

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x34>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x34>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x34>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x34>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 fd5f 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f001 fb3c 	bl	80022b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fd77 	bl	8001756 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 fd3f 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000010 	.word	0x20000010
 8000c9c:	20000018 	.word	0x20000018
 8000ca0:	20000014 	.word	0x20000014

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000018 	.word	0x20000018
 8000cc8:	2000013c 	.word	0x2000013c

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000013c 	.word	0x2000013c

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000018 	.word	0x20000018

08000d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e033      	b.n	8000daa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f001 f9da 	bl	8002104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d118      	bne.n	8000d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d72:	f023 0302 	bic.w	r3, r3, #2
 8000d76:	f043 0202 	orr.w	r2, r3, #2
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fae8 	bl	8001354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f023 0303 	bic.w	r3, r3, #3
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9a:	e001      	b.n	8000da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Start+0x1a>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e0b2      	b.n	8000f34 <HAL_ADC_Start+0x180>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d018      	beq.n	8000e16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000df4:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <HAL_ADC_Start+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <HAL_ADC_Start+0x190>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0c9a      	lsrs	r2, r3, #18
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e08:	e002      	b.n	8000e10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f9      	bne.n	8000e0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d17a      	bne.n	8000f1a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e62:	d106      	bne.n	8000e72 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	f023 0206 	bic.w	r2, r3, #6
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e70:	e002      	b.n	8000e78 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <HAL_ADC_Start+0x194>)
 8000e82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d12a      	bne.n	8000ef0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <HAL_ADC_Start+0x198>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d015      	beq.n	8000ed0 <HAL_ADC_Start+0x11c>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <HAL_ADC_Start+0x19c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d105      	bne.n	8000eba <HAL_ADC_Start+0x106>
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_ADC_Start+0x194>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00a      	beq.n	8000ed0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <HAL_ADC_Start+0x1a0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d136      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_ADC_Start+0x194>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d130      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d129      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	e020      	b.n	8000f32 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_ADC_Start+0x198>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d11b      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d114      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	e00b      	b.n	8000f32 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f043 0210 	orr.w	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f043 0201 	orr.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000010 	.word	0x20000010
 8000f44:	431bde83 	.word	0x431bde83
 8000f48:	40012300 	.word	0x40012300
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	40012100 	.word	0x40012100
 8000f54:	40012200 	.word	0x40012200

08000f58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Stop+0x16>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e021      	b.n	8000fb2 <HAL_ADC_Stop+0x5a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d109      	bne.n	8000fa8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d113      	bne.n	8001004 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fea:	d10b      	bne.n	8001004 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f043 0220 	orr.w	r2, r3, #32
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e063      	b.n	80010cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001004:	f7ff fe62 	bl	8000ccc <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800100a:	e021      	b.n	8001050 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001012:	d01d      	beq.n	8001050 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <HAL_ADC_PollForConversion+0x6c>
 800101a:	f7ff fe57 	bl	8000ccc <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d212      	bcs.n	8001050 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b02      	cmp	r3, #2
 8001036:	d00b      	beq.n	8001050 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f043 0204 	orr.w	r2, r3, #4
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e03d      	b.n	80010cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d1d6      	bne.n	800100c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f06f 0212 	mvn.w	r2, #18
 8001066:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d123      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d11f      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d111      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_ADC_ConfigChannel+0x1c>
 8001108:	2302      	movs	r3, #2
 800110a:	e113      	b.n	8001334 <HAL_ADC_ConfigChannel+0x244>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b09      	cmp	r3, #9
 800111a:	d925      	bls.n	8001168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68d9      	ldr	r1, [r3, #12]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	3b1e      	subs	r3, #30
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43da      	mvns	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	400a      	ands	r2, r1
 8001140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	4603      	mov	r3, r0
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4403      	add	r3, r0
 800115a:	3b1e      	subs	r3, #30
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	e022      	b.n	80011ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6919      	ldr	r1, [r3, #16]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	2207      	movs	r2, #7
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6919      	ldr	r1, [r3, #16]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4403      	add	r3, r0
 80011a4:	409a      	lsls	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d824      	bhi.n	8001200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	3b05      	subs	r3, #5
 80011c8:	221f      	movs	r2, #31
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	400a      	ands	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b05      	subs	r3, #5
 80011f2:	fa00 f203 	lsl.w	r2, r0, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
 80011fe:	e04c      	b.n	800129a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d824      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b23      	subs	r3, #35	; 0x23
 800121a:	221f      	movs	r2, #31
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43da      	mvns	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	400a      	ands	r2, r1
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b23      	subs	r3, #35	; 0x23
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
 8001250:	e023      	b.n	800129a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	3b41      	subs	r3, #65	; 0x41
 8001264:	221f      	movs	r2, #31
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	400a      	ands	r2, r1
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	4618      	mov	r0, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	3b41      	subs	r3, #65	; 0x41
 800128e:	fa00 f203 	lsl.w	r2, r0, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_ADC_ConfigChannel+0x250>)
 800129c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a28      	ldr	r2, [pc, #160]	; (8001344 <HAL_ADC_ConfigChannel+0x254>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d10f      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1d8>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b12      	cmp	r3, #18
 80012ae:	d10b      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_ADC_ConfigChannel+0x254>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12b      	bne.n	800132a <HAL_ADC_ConfigChannel+0x23a>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_ADC_ConfigChannel+0x258>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d003      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x1f4>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b11      	cmp	r3, #17
 80012e2:	d122      	bne.n	800132a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <HAL_ADC_ConfigChannel+0x258>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d111      	bne.n	800132a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_ADC_ConfigChannel+0x25c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_ADC_ConfigChannel+0x260>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9a      	lsrs	r2, r3, #18
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800131c:	e002      	b.n	8001324 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	3b01      	subs	r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f9      	bne.n	800131e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40012300 	.word	0x40012300
 8001344:	40012000 	.word	0x40012000
 8001348:	10000012 	.word	0x10000012
 800134c:	20000010 	.word	0x20000010
 8001350:	431bde83 	.word	0x431bde83

08001354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800135c:	4b79      	ldr	r3, [pc, #484]	; (8001544 <ADC_Init+0x1f0>)
 800135e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	431a      	orrs	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	021a      	lsls	r2, r3, #8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	4a58      	ldr	r2, [pc, #352]	; (8001548 <ADC_Init+0x1f4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d022      	beq.n	8001432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6899      	ldr	r1, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800141c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6899      	ldr	r1, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	e00f      	b.n	8001452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001450:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0202 	bic.w	r2, r2, #2
 8001460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6899      	ldr	r1, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7e1b      	ldrb	r3, [r3, #24]
 800146c:	005a      	lsls	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d01b      	beq.n	80014b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800148e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800149e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6859      	ldr	r1, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	3b01      	subs	r3, #1
 80014ac:	035a      	lsls	r2, r3, #13
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	e007      	b.n	80014c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	051a      	lsls	r2, r3, #20
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6899      	ldr	r1, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800150a:	025a      	lsls	r2, r3, #9
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	029a      	lsls	r2, r3, #10
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	609a      	str	r2, [r3, #8]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40012300 	.word	0x40012300
 8001548:	0f000001 	.word	0x0f000001

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff3e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff31 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff faa6 	bl	8000ccc <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e099      	b.n	80018c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ac:	e00f      	b.n	80017ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ae:	f7ff fa8d 	bl	8000ccc <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d908      	bls.n	80017ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2220      	movs	r2, #32
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e078      	b.n	80018c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e8      	bne.n	80017ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_DMA_Init+0x158>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2b04      	cmp	r3, #4
 8001826:	d107      	bne.n	8001838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4313      	orrs	r3, r2
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4313      	orrs	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f023 0307 	bic.w	r3, r3, #7
 800184e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	2b04      	cmp	r3, #4
 8001860:	d117      	bne.n	8001892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4313      	orrs	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f9e9 	bl	8001c4c <DMA_CheckFifoParam>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800188e:	2301      	movs	r3, #1
 8001890:	e016      	b.n	80018c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f9a0 	bl	8001be0 <DMA_CalcBaseAndBitshift>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	223f      	movs	r2, #63	; 0x3f
 80018aa:	409a      	lsls	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	f010803f 	.word	0xf010803f

080018cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018d8:	4b8e      	ldr	r3, [pc, #568]	; (8001b14 <HAL_DMA_IRQHandler+0x248>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a8e      	ldr	r2, [pc, #568]	; (8001b18 <HAL_DMA_IRQHandler+0x24c>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0a9b      	lsrs	r3, r3, #10
 80018e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f6:	2208      	movs	r2, #8
 80018f8:	409a      	lsls	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01a      	beq.n	8001938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0204 	bic.w	r2, r2, #4
 800191e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	2208      	movs	r2, #8
 8001926:	409a      	lsls	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2201      	movs	r2, #1
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d012      	beq.n	800196e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	2201      	movs	r2, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	f043 0202 	orr.w	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2204      	movs	r2, #4
 8001974:	409a      	lsls	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d012      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00b      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2204      	movs	r2, #4
 8001992:	409a      	lsls	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2210      	movs	r2, #16
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d043      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d03c      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2210      	movs	r2, #16
 80019c8:	409a      	lsls	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d018      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d108      	bne.n	80019fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d024      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
 80019fa:	e01f      	b.n	8001a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01b      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
 8001a0c:	e016      	b.n	8001a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d107      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0208 	bic.w	r2, r2, #8
 8001a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2220      	movs	r2, #32
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 808f 	beq.w	8001b6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8087 	beq.w	8001b6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	2220      	movs	r2, #32
 8001a64:	409a      	lsls	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d136      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0216 	bic.w	r2, r2, #22
 8001a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x1da>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0208 	bic.w	r2, r2, #8
 8001ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	223f      	movs	r2, #63	; 0x3f
 8001abc:	409a      	lsls	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d07e      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
        }
        return;
 8001ae2:	e079      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01d      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10d      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d031      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
 8001b10:	e02c      	b.n	8001b6c <HAL_DMA_IRQHandler+0x2a0>
 8001b12:	bf00      	nop
 8001b14:	20000010 	.word	0x20000010
 8001b18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d023      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
 8001b2c:	e01e      	b.n	8001b6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0210 	bic.w	r2, r2, #16
 8001b4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d032      	beq.n	8001bda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d022      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2205      	movs	r2, #5
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d307      	bcc.n	8001bb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f2      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x2cc>
 8001bb2:	e000      	b.n	8001bb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
 8001bd6:	e000      	b.n	8001bda <HAL_DMA_IRQHandler+0x30e>
        return;
 8001bd8:	bf00      	nop
    }
  }
}
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3b10      	subs	r3, #16
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <DMA_CalcBaseAndBitshift+0x64>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <DMA_CalcBaseAndBitshift+0x68>)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d909      	bls.n	8001c22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	1d1a      	adds	r2, r3, #4
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c20:	e007      	b.n	8001c32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	aaaaaaab 	.word	0xaaaaaaab
 8001c48:	08004748 	.word	0x08004748

08001c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d11f      	bne.n	8001ca6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d856      	bhi.n	8001d1a <DMA_CheckFifoParam+0xce>
 8001c6c:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <DMA_CheckFifoParam+0x28>)
 8001c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c72:	bf00      	nop
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c97 	.word	0x08001c97
 8001c7c:	08001c85 	.word	0x08001c85
 8001c80:	08001d1b 	.word	0x08001d1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d046      	beq.n	8001d1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c94:	e043      	b.n	8001d1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c9e:	d140      	bne.n	8001d22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca4:	e03d      	b.n	8001d22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cae:	d121      	bne.n	8001cf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d837      	bhi.n	8001d26 <DMA_CheckFifoParam+0xda>
 8001cb6:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <DMA_CheckFifoParam+0x70>)
 8001cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cbc:	08001ccd 	.word	0x08001ccd
 8001cc0:	08001cd3 	.word	0x08001cd3
 8001cc4:	08001ccd 	.word	0x08001ccd
 8001cc8:	08001ce5 	.word	0x08001ce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd0:	e030      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d025      	beq.n	8001d2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce2:	e022      	b.n	8001d2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cec:	d11f      	bne.n	8001d2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cf2:	e01c      	b.n	8001d2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d903      	bls.n	8001d02 <DMA_CheckFifoParam+0xb6>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d003      	beq.n	8001d08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d00:	e018      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
      break;
 8001d06:	e015      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00e      	beq.n	8001d32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      break;
 8001d18:	e00b      	b.n	8001d32 <DMA_CheckFifoParam+0xe6>
      break;
 8001d1a:	bf00      	nop
 8001d1c:	e00a      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1e:	bf00      	nop
 8001d20:	e008      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      break;
 8001d22:	bf00      	nop
 8001d24:	e006      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
 8001d28:	e004      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e002      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d2e:	bf00      	nop
 8001d30:	e000      	b.n	8001d34 <DMA_CheckFifoParam+0xe8>
      break;
 8001d32:	bf00      	nop
    }
  } 
  
  return status; 
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e177      	b.n	8002050 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 8166 	bne.w	800204a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d005      	beq.n	8001d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d130      	bne.n	8001df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80c0 	beq.w	800204a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee6:	4a61      	ldr	r2, [pc, #388]	; (800206c <HAL_GPIO_Init+0x328>)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_GPIO_Init+0x32c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d037      	beq.n	8001f82 <HAL_GPIO_Init+0x23e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a57      	ldr	r2, [pc, #348]	; (8002074 <HAL_GPIO_Init+0x330>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d031      	beq.n	8001f7e <HAL_GPIO_Init+0x23a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a56      	ldr	r2, [pc, #344]	; (8002078 <HAL_GPIO_Init+0x334>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <HAL_GPIO_Init+0x236>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a55      	ldr	r2, [pc, #340]	; (800207c <HAL_GPIO_Init+0x338>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d025      	beq.n	8001f76 <HAL_GPIO_Init+0x232>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a54      	ldr	r2, [pc, #336]	; (8002080 <HAL_GPIO_Init+0x33c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <HAL_GPIO_Init+0x22e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a53      	ldr	r2, [pc, #332]	; (8002084 <HAL_GPIO_Init+0x340>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x22a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x344>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a51      	ldr	r2, [pc, #324]	; (800208c <HAL_GPIO_Init+0x348>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x222>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_GPIO_Init+0x34c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x21e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4f      	ldr	r2, [pc, #316]	; (8002094 <HAL_GPIO_Init+0x350>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x21a>
 8001f5a:	2309      	movs	r3, #9
 8001f5c:	e012      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f5e:	230a      	movs	r3, #10
 8001f60:	e010      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f62:	2308      	movs	r3, #8
 8001f64:	e00e      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x240>
 8001f82:	2300      	movs	r3, #0
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <HAL_GPIO_Init+0x328>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_GPIO_Init+0x354>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc6:	4a34      	ldr	r2, [pc, #208]	; (8002098 <HAL_GPIO_Init+0x354>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fcc:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_GPIO_Init+0x354>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff0:	4a29      	ldr	r2, [pc, #164]	; (8002098 <HAL_GPIO_Init+0x354>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_GPIO_Init+0x354>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_GPIO_Init+0x354>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_GPIO_Init+0x354>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_GPIO_Init+0x354>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	f67f ae84 	bls.w	8001d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40021400 	.word	0x40021400
 8002088:	40021800 	.word	0x40021800
 800208c:	40021c00 	.word	0x40021c00
 8002090:	40022000 	.word	0x40022000
 8002094:	40022400 	.word	0x40022400
 8002098:	40013c00 	.word	0x40013c00

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	400b      	ands	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_ADC_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* ADC1 Periph clock enable */
  ADCx_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	4a39      	ldr	r2, [pc, #228]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211a:	6453      	str	r3, [r2, #68]	; 0x44
 800211c:	4b37      	ldr	r3, [pc, #220]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
  /* Enable GPIO clock ****************************************/
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6313      	str	r3, [r2, #48]	; 0x30
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
  /* Enable DMA2 clock */
  DMAx_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 800214e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002152:	6313      	str	r3, [r2, #48]	; 0x30
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_ADC_MspInit+0xf8>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* ADC Channel GPIO pin configuration */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
 8002160:	2308      	movs	r3, #8
 8002162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002164:	2303      	movs	r3, #3
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4823      	ldr	r0, [pc, #140]	; (8002200 <HAL_ADC_MspInit+0xfc>)
 8002174:	f7ff fde6 	bl	8001d44 <HAL_GPIO_Init>

  /*##-3- Configure the DMA streams ##########################################*/
  /* Set the parameters to be configured */
  hdma_adc.Instance = ADCx_DMA_STREAM;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <HAL_ADC_MspInit+0x100>)
 800217a:	4a23      	ldr	r2, [pc, #140]	; (8002208 <HAL_ADC_MspInit+0x104>)
 800217c:	601a      	str	r2, [r3, #0]
  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_ADC_MspInit+0x100>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
  hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_ADC_MspInit+0x100>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_ADC_MspInit+0x100>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_ADC_MspInit+0x100>)
 8002192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002196:	611a      	str	r2, [r3, #16]
  hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_ADC_MspInit+0x100>)
 800219a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800219e:	615a      	str	r2, [r3, #20]
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021a6:	619a      	str	r2, [r3, #24]
  hdma_adc.Init.Mode = DMA_CIRCULAR;
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	61da      	str	r2, [r3, #28]
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b6:	621a      	str	r2, [r3, #32]
  hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30

  HAL_DMA_Init(&hdma_adc);
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021d2:	f7ff facd 	bl	8001770 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
 80021dc:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_ADC_MspInit+0x100>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6393      	str	r3, [r2, #56]	; 0x38

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2038      	movs	r0, #56	; 0x38
 80021e8:	f7ff fa8b 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 80021ec:	2038      	movs	r0, #56	; 0x38
 80021ee:	f7ff faa4 	bl	800173a <HAL_NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020000 	.word	0x40020000
 8002204:	20000140 	.word	0x20000140
 8002208:	40026410 	.word	0x40026410

0800220c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6313      	str	r3, [r2, #48]	; 0x30
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 8002256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225a:	6413      	str	r3, [r2, #64]	; 0x40
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_UART_MspInit+0x9c>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002272:	2301      	movs	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800227a:	2307      	movs	r3, #7
 800227c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4809      	ldr	r0, [pc, #36]	; (80022ac <HAL_UART_MspInit+0xa0>)
 8002286:	f7ff fd5d 	bl	8001d44 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800228a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002290:	2307      	movs	r3, #7
 8002292:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4804      	ldr	r0, [pc, #16]	; (80022ac <HAL_UART_MspInit+0xa0>)
 800229c:	f7ff fd52 	bl	8001d44 <HAL_GPIO_Init>
}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020c00 	.word	0x40020c00

080022b0 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_PWREx_EnableOverDrive+0x90>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_PWREx_EnableOverDrive+0x90>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_PWREx_EnableOverDrive+0x90>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_PWREx_EnableOverDrive+0x94>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ec:	f7fe fcee 	bl	8000ccc <HAL_GetTick>
 80022f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022f2:	e009      	b.n	8002308 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022f4:	f7fe fcea 	bl	8000ccc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002302:	d901      	bls.n	8002308 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e01f      	b.n	8002348 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_PWREx_EnableOverDrive+0x98>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002314:	d1ee      	bne.n	80022f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800231c:	f7fe fcd6 	bl	8000ccc <HAL_GetTick>
 8002320:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002322:	e009      	b.n	8002338 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002324:	f7fe fcd2 	bl	8000ccc <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002332:	d901      	bls.n	8002338 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e007      	b.n	8002348 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_PWREx_EnableOverDrive+0x98>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002344:	d1ee      	bne.n	8002324 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	420e0040 	.word	0x420e0040
 8002358:	40007000 	.word	0x40007000
 800235c:	420e0044 	.word	0x420e0044

08002360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e267      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d075      	beq.n	800246a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b04      	cmp	r3, #4
 8002388:	d00c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238a:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002392:	2b08      	cmp	r3, #8
 8002394:	d112      	bne.n	80023bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002396:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a2:	d10b      	bne.n	80023bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	4b7e      	ldr	r3, [pc, #504]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05b      	beq.n	8002468 <HAL_RCC_OscConfig+0x108>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d157      	bne.n	8002468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e242      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x74>
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a75      	ldr	r2, [pc, #468]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6f      	ldr	r2, [pc, #444]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6d      	ldr	r3, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6c      	ldr	r2, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xb0>
 80023f8:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a68      	ldr	r2, [pc, #416]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fc58 	bl	8000ccc <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fc54 	bl	8000ccc <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e207      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xc0>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fc44 	bl	8000ccc <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe fc40 	bl	8000ccc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1f3      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b51      	ldr	r3, [pc, #324]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0xe8>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002476:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248e:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x152>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c7      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_OscConfig+0x244>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe fbf9 	bl	8000ccc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe fbf5 	bl	8000ccc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1a8      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4925      	ldr	r1, [pc, #148]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fbd8 	bl	8000ccc <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe fbd4 	bl	8000ccc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e187      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d036      	beq.n	80025b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_RCC_OscConfig+0x248>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fbb8 	bl	8000ccc <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fbb4 	bl	8000ccc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e167      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x240>)
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x200>
 800257e:	e01b      	b.n	80025b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_OscConfig+0x248>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7fe fba1 	bl	8000ccc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	e00e      	b.n	80025ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258e:	f7fe fb9d 	bl	8000ccc <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d907      	bls.n	80025ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e150      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
 80025a0:	40023800 	.word	0x40023800
 80025a4:	42470000 	.word	0x42470000
 80025a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ea      	bne.n	800258e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8097 	beq.w	80026f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b7d      	ldr	r3, [pc, #500]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b7a      	ldr	r3, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	4b77      	ldr	r3, [pc, #476]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002602:	4b74      	ldr	r3, [pc, #464]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a73      	ldr	r2, [pc, #460]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260e:	f7fe fb5d 	bl	8000ccc <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7fe fb59 	bl	8000ccc <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e10c      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_RCC_OscConfig+0x474>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x2ea>
 800263c:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a63      	ldr	r2, [pc, #396]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x324>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x30c>
 8002652:	4b5f      	ldr	r3, [pc, #380]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a5e      	ldr	r2, [pc, #376]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a5b      	ldr	r2, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0x324>
 800266c:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	4b55      	ldr	r3, [pc, #340]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a54      	ldr	r2, [pc, #336]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800267e:	f023 0304 	bic.w	r3, r3, #4
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d015      	beq.n	80026b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fb1e 	bl	8000ccc <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fb1a 	bl	8000ccc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0cb      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ee      	beq.n	8002694 <HAL_RCC_OscConfig+0x334>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7fe fb08 	bl	8000ccc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fb04 	bl	8000ccc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0b5      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1ee      	bne.n	80026c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a38      	ldr	r2, [pc, #224]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a1 	beq.w	8002840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b08      	cmp	r3, #8
 8002708:	d05c      	beq.n	80027c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d141      	bne.n	8002796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_OscConfig+0x478>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fad8 	bl	8000ccc <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fad4 	bl	8000ccc <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e087      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	041b      	lsls	r3, r3, #16
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	491b      	ldr	r1, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x478>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7fe faad 	bl	8000ccc <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe faa9 	bl	8000ccc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e05c      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x416>
 8002794:	e054      	b.n	8002840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_RCC_OscConfig+0x478>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe fa96 	bl	8000ccc <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fa92 	bl	8000ccc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e045      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x444>
 80027c2:	e03d      	b.n	8002840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e038      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40007000 	.word	0x40007000
 80027d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x4ec>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d028      	beq.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d121      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d11a      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002814:	4293      	cmp	r3, r2
 8002816:	d111      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	3b01      	subs	r3, #1
 8002826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0cc      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d90c      	bls.n	800288c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0b8      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	494d      	ldr	r1, [pc, #308]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d044      	beq.n	8002970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d119      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d003      	beq.n	800290e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290a:	2b03      	cmp	r3, #3
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e067      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4934      	ldr	r1, [pc, #208]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7fe f9c4 	bl	8000ccc <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe f9c0 	bl	8000ccc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e04f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d20c      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e032      	b.n	80029fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4916      	ldr	r1, [pc, #88]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029d6:	f000 f821 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80029da:	4602      	mov	r2, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	490a      	ldr	r1, [pc, #40]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	5ccb      	ldrb	r3, [r1, r3]
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe f924 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08004730 	.word	0x08004730
 8002a14:	20000010 	.word	0x20000010
 8002a18:	20000014 	.word	0x20000014

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a20:	b094      	sub	sp, #80	; 0x50
 8002a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a34:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x40>
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	f200 80e1 	bhi.w	8002c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a4e:	e0db      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b73      	ldr	r3, [pc, #460]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a54:	e0db      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a56:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5a:	e0d8      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a5c:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d063      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	2200      	movs	r2, #0
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
 8002a86:	2300      	movs	r3, #0
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f04f 0100 	mov.w	r1, #0
 8002a9a:	0159      	lsls	r1, r3, #5
 8002a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa0:	0150      	lsls	r0, r2, #5
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	1a51      	subs	r1, r2, r1
 8002aaa:	6139      	str	r1, [r7, #16]
 8002aac:	4629      	mov	r1, r5
 8002aae:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac0:	4659      	mov	r1, fp
 8002ac2:	018b      	lsls	r3, r1, #6
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aca:	4651      	mov	r1, sl
 8002acc:	018a      	lsls	r2, r1, #6
 8002ace:	4651      	mov	r1, sl
 8002ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aee:	4690      	mov	r8, r2
 8002af0:	4699      	mov	r9, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	eb18 0303 	adds.w	r3, r8, r3
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	462b      	mov	r3, r5
 8002afc:	eb49 0303 	adc.w	r3, r9, r3
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b0e:	4629      	mov	r1, r5
 8002b10:	024b      	lsls	r3, r1, #9
 8002b12:	4621      	mov	r1, r4
 8002b14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b18:	4621      	mov	r1, r4
 8002b1a:	024a      	lsls	r2, r1, #9
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b22:	2200      	movs	r2, #0
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b2c:	f7fd fbb0 	bl	8000290 <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4613      	mov	r3, r2
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b38:	e058      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	2200      	movs	r2, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	4611      	mov	r1, r2
 8002b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b4a:	623b      	str	r3, [r7, #32]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b54:	4642      	mov	r2, r8
 8002b56:	464b      	mov	r3, r9
 8002b58:	f04f 0000 	mov.w	r0, #0
 8002b5c:	f04f 0100 	mov.w	r1, #0
 8002b60:	0159      	lsls	r1, r3, #5
 8002b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b66:	0150      	lsls	r0, r2, #5
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b72:	4649      	mov	r1, r9
 8002b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b90:	eb63 050b 	sbc.w	r5, r3, fp
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	00eb      	lsls	r3, r5, #3
 8002b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba2:	00e2      	lsls	r2, r4, #3
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	4643      	mov	r3, r8
 8002baa:	18e3      	adds	r3, r4, r3
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	464b      	mov	r3, r9
 8002bb0:	eb45 0303 	adc.w	r3, r5, r3
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	028b      	lsls	r3, r1, #10
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bcc:	4621      	mov	r1, r4
 8002bce:	028a      	lsls	r2, r1, #10
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	61fa      	str	r2, [r7, #28]
 8002bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be0:	f7fd fb56 	bl	8000290 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4613      	mov	r3, r2
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3750      	adds	r7, #80	; 0x50
 8002c14:	46bd      	mov	sp, r7
 8002c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200

08002c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000010 	.word	0x20000010

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff0 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	08004740 	.word	0x08004740

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c6c:	f7ff ffdc 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0b5b      	lsrs	r3, r3, #13
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4903      	ldr	r1, [pc, #12]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08004740 	.word	0x08004740

08002c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e03f      	b.n	8002d22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff faa8 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f929 	bl	8002f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b08a      	sub	sp, #40	; 0x28
 8002d2e:	af02      	add	r7, sp, #8
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d17c      	bne.n	8002e44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Transmit+0x2c>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e075      	b.n	8002e46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Transmit+0x3e>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e06e      	b.n	8002e46 <HAL_UART_Transmit+0x11c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd ffa5 	bl	8000ccc <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	88fa      	ldrh	r2, [r7, #6]
 8002d88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d98:	d108      	bne.n	8002dac <HAL_UART_Transmit+0x82>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e003      	b.n	8002db4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dbc:	e02a      	b.n	8002e14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f840 	bl	8002e4e <UART_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e036      	b.n	8002e46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	3302      	adds	r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	e007      	b.n	8002e06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3301      	adds	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cf      	bne.n	8002dbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	2140      	movs	r1, #64	; 0x40
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f810 	bl	8002e4e <UART_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e006      	b.n	8002e46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b090      	sub	sp, #64	; 0x40
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5e:	e050      	b.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d04c      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e6e:	f7fd ff2d 	bl	8000ccc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d241      	bcs.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e9e:	637a      	str	r2, [r7, #52]	; 0x34
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e5      	bne.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	e853 3f00 	ldrex	r3, [r3]
 8002ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ed2:	623a      	str	r2, [r7, #32]
 8002ed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	69f9      	ldr	r1, [r7, #28]
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e5      	bne.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e00f      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d09f      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3740      	adds	r7, #64	; 0x40
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f30:	b0c0      	sub	sp, #256	; 0x100
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	68d9      	ldr	r1, [r3, #12]
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	ea40 0301 	orr.w	r3, r0, r1
 8002f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f84:	f021 010c 	bic.w	r1, r1, #12
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f92:	430b      	orrs	r3, r1
 8002f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	6999      	ldr	r1, [r3, #24]
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	ea40 0301 	orr.w	r3, r0, r1
 8002fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4b8f      	ldr	r3, [pc, #572]	; (80031f8 <UART_SetConfig+0x2cc>)
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d005      	beq.n	8002fcc <UART_SetConfig+0xa0>
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b8d      	ldr	r3, [pc, #564]	; (80031fc <UART_SetConfig+0x2d0>)
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d104      	bne.n	8002fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fcc:	f7ff fe4c 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8002fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fd4:	e003      	b.n	8002fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fd6:	f7ff fe33 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8002fda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe8:	f040 810c 	bne.w	8003204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ffe:	4622      	mov	r2, r4
 8003000:	462b      	mov	r3, r5
 8003002:	1891      	adds	r1, r2, r2
 8003004:	65b9      	str	r1, [r7, #88]	; 0x58
 8003006:	415b      	adcs	r3, r3
 8003008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800300a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800300e:	4621      	mov	r1, r4
 8003010:	eb12 0801 	adds.w	r8, r2, r1
 8003014:	4629      	mov	r1, r5
 8003016:	eb43 0901 	adc.w	r9, r3, r1
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800302a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800302e:	4690      	mov	r8, r2
 8003030:	4699      	mov	r9, r3
 8003032:	4623      	mov	r3, r4
 8003034:	eb18 0303 	adds.w	r3, r8, r3
 8003038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800303c:	462b      	mov	r3, r5
 800303e:	eb49 0303 	adc.w	r3, r9, r3
 8003042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003052:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800305a:	460b      	mov	r3, r1
 800305c:	18db      	adds	r3, r3, r3
 800305e:	653b      	str	r3, [r7, #80]	; 0x50
 8003060:	4613      	mov	r3, r2
 8003062:	eb42 0303 	adc.w	r3, r2, r3
 8003066:	657b      	str	r3, [r7, #84]	; 0x54
 8003068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800306c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003070:	f7fd f90e 	bl	8000290 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <UART_SetConfig+0x2d4>)
 800307a:	fba3 2302 	umull	r2, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	011c      	lsls	r4, r3, #4
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800308c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	1891      	adds	r1, r2, r2
 800309a:	64b9      	str	r1, [r7, #72]	; 0x48
 800309c:	415b      	adcs	r3, r3
 800309e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030a4:	4641      	mov	r1, r8
 80030a6:	eb12 0a01 	adds.w	sl, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb43 0b01 	adc.w	fp, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030c4:	4692      	mov	sl, r2
 80030c6:	469b      	mov	fp, r3
 80030c8:	4643      	mov	r3, r8
 80030ca:	eb1a 0303 	adds.w	r3, sl, r3
 80030ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030d2:	464b      	mov	r3, r9
 80030d4:	eb4b 0303 	adc.w	r3, fp, r3
 80030d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030f0:	460b      	mov	r3, r1
 80030f2:	18db      	adds	r3, r3, r3
 80030f4:	643b      	str	r3, [r7, #64]	; 0x40
 80030f6:	4613      	mov	r3, r2
 80030f8:	eb42 0303 	adc.w	r3, r2, r3
 80030fc:	647b      	str	r3, [r7, #68]	; 0x44
 80030fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003106:	f7fd f8c3 	bl	8000290 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4611      	mov	r1, r2
 8003110:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <UART_SetConfig+0x2d4>)
 8003112:	fba3 2301 	umull	r2, r3, r3, r1
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2264      	movs	r2, #100	; 0x64
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	1acb      	subs	r3, r1, r3
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <UART_SetConfig+0x2d4>)
 8003128:	fba3 2302 	umull	r2, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003134:	441c      	add	r4, r3
 8003136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313a:	2200      	movs	r2, #0
 800313c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003140:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003148:	4642      	mov	r2, r8
 800314a:	464b      	mov	r3, r9
 800314c:	1891      	adds	r1, r2, r2
 800314e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003150:	415b      	adcs	r3, r3
 8003152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003158:	4641      	mov	r1, r8
 800315a:	1851      	adds	r1, r2, r1
 800315c:	6339      	str	r1, [r7, #48]	; 0x30
 800315e:	4649      	mov	r1, r9
 8003160:	414b      	adcs	r3, r1
 8003162:	637b      	str	r3, [r7, #52]	; 0x34
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003170:	4659      	mov	r1, fp
 8003172:	00cb      	lsls	r3, r1, #3
 8003174:	4651      	mov	r1, sl
 8003176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800317a:	4651      	mov	r1, sl
 800317c:	00ca      	lsls	r2, r1, #3
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	4603      	mov	r3, r0
 8003184:	4642      	mov	r2, r8
 8003186:	189b      	adds	r3, r3, r2
 8003188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800318c:	464b      	mov	r3, r9
 800318e:	460a      	mov	r2, r1
 8003190:	eb42 0303 	adc.w	r3, r2, r3
 8003194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031ac:	460b      	mov	r3, r1
 80031ae:	18db      	adds	r3, r3, r3
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b2:	4613      	mov	r3, r2
 80031b4:	eb42 0303 	adc.w	r3, r2, r3
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031c2:	f7fd f865 	bl	8000290 <__aeabi_uldivmod>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <UART_SetConfig+0x2d4>)
 80031cc:	fba3 1302 	umull	r1, r3, r3, r2
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	2164      	movs	r1, #100	; 0x64
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	3332      	adds	r3, #50	; 0x32
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <UART_SetConfig+0x2d4>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	f003 0207 	and.w	r2, r3, #7
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4422      	add	r2, r4
 80031f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031f4:	e105      	b.n	8003402 <UART_SetConfig+0x4d6>
 80031f6:	bf00      	nop
 80031f8:	40011000 	.word	0x40011000
 80031fc:	40011400 	.word	0x40011400
 8003200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003208:	2200      	movs	r2, #0
 800320a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800320e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003216:	4642      	mov	r2, r8
 8003218:	464b      	mov	r3, r9
 800321a:	1891      	adds	r1, r2, r2
 800321c:	6239      	str	r1, [r7, #32]
 800321e:	415b      	adcs	r3, r3
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003226:	4641      	mov	r1, r8
 8003228:	1854      	adds	r4, r2, r1
 800322a:	4649      	mov	r1, r9
 800322c:	eb43 0501 	adc.w	r5, r3, r1
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	00eb      	lsls	r3, r5, #3
 800323a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800323e:	00e2      	lsls	r2, r4, #3
 8003240:	4614      	mov	r4, r2
 8003242:	461d      	mov	r5, r3
 8003244:	4643      	mov	r3, r8
 8003246:	18e3      	adds	r3, r4, r3
 8003248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800324c:	464b      	mov	r3, r9
 800324e:	eb45 0303 	adc.w	r3, r5, r3
 8003252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003262:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003272:	4629      	mov	r1, r5
 8003274:	008b      	lsls	r3, r1, #2
 8003276:	4621      	mov	r1, r4
 8003278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327c:	4621      	mov	r1, r4
 800327e:	008a      	lsls	r2, r1, #2
 8003280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003284:	f7fd f804 	bl	8000290 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4b60      	ldr	r3, [pc, #384]	; (8003410 <UART_SetConfig+0x4e4>)
 800328e:	fba3 2302 	umull	r2, r3, r3, r2
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	011c      	lsls	r4, r3, #4
 8003296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	61b9      	str	r1, [r7, #24]
 80032b0:	415b      	adcs	r3, r3
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b8:	4641      	mov	r1, r8
 80032ba:	1851      	adds	r1, r2, r1
 80032bc:	6139      	str	r1, [r7, #16]
 80032be:	4649      	mov	r1, r9
 80032c0:	414b      	adcs	r3, r1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032d0:	4659      	mov	r1, fp
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4651      	mov	r1, sl
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4642      	mov	r2, r8
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032ec:	464b      	mov	r3, r9
 80032ee:	460a      	mov	r2, r1
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	67bb      	str	r3, [r7, #120]	; 0x78
 8003302:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003310:	4649      	mov	r1, r9
 8003312:	008b      	lsls	r3, r1, #2
 8003314:	4641      	mov	r1, r8
 8003316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800331a:	4641      	mov	r1, r8
 800331c:	008a      	lsls	r2, r1, #2
 800331e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003322:	f7fc ffb5 	bl	8000290 <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4b39      	ldr	r3, [pc, #228]	; (8003410 <UART_SetConfig+0x4e4>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2164      	movs	r1, #100	; 0x64
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a34      	ldr	r2, [pc, #208]	; (8003410 <UART_SetConfig+0x4e4>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800334a:	441c      	add	r4, r3
 800334c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003350:	2200      	movs	r2, #0
 8003352:	673b      	str	r3, [r7, #112]	; 0x70
 8003354:	677a      	str	r2, [r7, #116]	; 0x74
 8003356:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800335a:	4642      	mov	r2, r8
 800335c:	464b      	mov	r3, r9
 800335e:	1891      	adds	r1, r2, r2
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	415b      	adcs	r3, r3
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800336a:	4641      	mov	r1, r8
 800336c:	1851      	adds	r1, r2, r1
 800336e:	6039      	str	r1, [r7, #0]
 8003370:	4649      	mov	r1, r9
 8003372:	414b      	adcs	r3, r1
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003382:	4659      	mov	r1, fp
 8003384:	00cb      	lsls	r3, r1, #3
 8003386:	4651      	mov	r1, sl
 8003388:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800338c:	4651      	mov	r1, sl
 800338e:	00ca      	lsls	r2, r1, #3
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	4603      	mov	r3, r0
 8003396:	4642      	mov	r2, r8
 8003398:	189b      	adds	r3, r3, r2
 800339a:	66bb      	str	r3, [r7, #104]	; 0x68
 800339c:	464b      	mov	r3, r9
 800339e:	460a      	mov	r2, r1
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	663b      	str	r3, [r7, #96]	; 0x60
 80033b0:	667a      	str	r2, [r7, #100]	; 0x64
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033be:	4649      	mov	r1, r9
 80033c0:	008b      	lsls	r3, r1, #2
 80033c2:	4641      	mov	r1, r8
 80033c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033c8:	4641      	mov	r1, r8
 80033ca:	008a      	lsls	r2, r1, #2
 80033cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033d0:	f7fc ff5e 	bl	8000290 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <UART_SetConfig+0x4e4>)
 80033da:	fba3 1302 	umull	r1, r3, r3, r2
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2164      	movs	r1, #100	; 0x64
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	3332      	adds	r3, #50	; 0x32
 80033ec:	4a08      	ldr	r2, [pc, #32]	; (8003410 <UART_SetConfig+0x4e4>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4422      	add	r2, r4
 8003400:	609a      	str	r2, [r3, #8]
}
 8003402:	bf00      	nop
 8003404:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340e:	bf00      	nop
 8003410:	51eb851f 	.word	0x51eb851f

08003414 <main>:

#define TIME1 100
#define TIME2 500

int main(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
		 handled in milliseconds basis.
	   - Set NVIC Group Priority to 4
	   - Low Level Initialization
	 */

	HAL_Init();
 800341a:	f7fd fbf7 	bl	8000c0c <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800341e:	f000 f829 	bl	8003474 <SystemClock_Config>

	/* Initialize Inputs */
	inputsInit();
 8003422:	f7fd f967 	bl	80006f4 <inputsInit>

	/* Initialize Outputs */
	outputsInit();
 8003426:	f7fd f99b 	bl	8000760 <outputsInit>

	delay_t delayLED2;
	tick_t  timeLED2 = 100;
 800342a:	2364      	movs	r3, #100	; 0x64
 800342c:	617b      	str	r3, [r7, #20]
	delayInit(&delayLED2, timeLED2);
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd f944 	bl	80006c0 <delayInit>

	/* Initialize FSM */
	debounceFSM_init();
 8003438:	f7fd f932 	bl	80006a0 <debounceFSM_init>
					  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	  - Stop Bit    = One Stop bit
	  - Parity      = ODD parity
	  - BaudRate    = 9600 baud
	  - Hardware flow control disabled (RTS and CTS signals) */
	uartinit();
 800343c:	f7fd f99e 	bl	800077c <uartinit>
	printf("UART TP PdM Jordan OK\r\n");
 8003440:	480a      	ldr	r0, [pc, #40]	; (800346c <main+0x58>)
 8003442:	f000 f961 	bl	8003708 <puts>

	iniciaADC();
 8003446:	f7fd f8a5 	bl	8000594 <iniciaADC>

/* Infinite loop */
	uint32_t valorLeidoADC = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
	while (1)
	{
		valorLeidoADC = myADCread();
 800344e:	f7fd f8e5 	bl	800061c <myADCread>
 8003452:	6138      	str	r0, [r7, #16]

		printf("Valor leido = %lu\r\n", valorLeidoADC);
 8003454:	6939      	ldr	r1, [r7, #16]
 8003456:	4806      	ldr	r0, [pc, #24]	; (8003470 <main+0x5c>)
 8003458:	f000 f8d0 	bl	80035fc <iprintf>
		HAL_Delay(500);
 800345c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003460:	f7fd fc40 	bl	8000ce4 <HAL_Delay>

		debounceFSM_update();
 8003464:	f7fd f8f8 	bl	8000658 <debounceFSM_update>
		valorLeidoADC = myADCread();
 8003468:	e7f1      	b.n	800344e <main+0x3a>
 800346a:	bf00      	nop
 800346c:	080046fc 	.word	0x080046fc
 8003470:	08004714 	.word	0x08004714

08003474 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b094      	sub	sp, #80	; 0x50
 8003478:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <SystemClock_Config+0xbc>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <SystemClock_Config+0xbc>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <SystemClock_Config+0xbc>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <SystemClock_Config+0xc0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a25      	ldr	r2, [pc, #148]	; (8003534 <SystemClock_Config+0xc0>)
 80034a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <SystemClock_Config+0xc0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034b2:	2301      	movs	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80034b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80034ba:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034bc:	2302      	movs	r3, #2
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034c6:	2308      	movs	r3, #8
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80034ca:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034d0:	2302      	movs	r3, #2
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034d4:	2307      	movs	r3, #7
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe ff3f 	bl	8002360 <HAL_RCC_OscConfig>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 80034e8:	f000 f826 	bl	8003538 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80034ec:	f7fe fee8 	bl	80022c0 <HAL_PWREx_EnableOverDrive>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80034f6:	f000 f81f 	bl	8003538 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80034fa:	230f      	movs	r3, #15
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034fe:	2302      	movs	r3, #2
 8003500:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003502:	2300      	movs	r3, #0
 8003504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8003506:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800350c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003512:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003516:	2105      	movs	r1, #5
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f999 	bl	8002850 <HAL_RCC_ClockConfig>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8003524:	f000 f808 	bl	8003538 <Error_Handler>
  }
}
 8003528:	bf00      	nop
 800352a:	3750      	adds	r7, #80	; 0x50
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	40007000 	.word	0x40007000

08003538 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 800353c:	2001      	movs	r0, #1
 800353e:	f7fd f9c7 	bl	80008d0 <BSP_LED_On>
  while (1)
 8003542:	e7fe      	b.n	8003542 <Error_Handler+0xa>

08003544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800357c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003548:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800354a:	e003      	b.n	8003554 <LoopCopyDataInit>

0800354c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800354e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003550:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003552:	3104      	adds	r1, #4

08003554 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003554:	480b      	ldr	r0, [pc, #44]	; (8003584 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003558:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800355a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800355c:	d3f6      	bcc.n	800354c <CopyDataInit>
  ldr  r2, =_sbss
 800355e:	4a0b      	ldr	r2, [pc, #44]	; (800358c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003560:	e002      	b.n	8003568 <LoopFillZerobss>

08003562 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003562:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003564:	f842 3b04 	str.w	r3, [r2], #4

08003568 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800356a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800356c:	d3f9      	bcc.n	8003562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800356e:	f7fd fa39 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003572:	f000 f817 	bl	80035a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003576:	f7ff ff4d 	bl	8003414 <main>
  bx  lr    
 800357a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800357c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003580:	080047f8 	.word	0x080047f8
  ldr  r0, =_sdata
 8003584:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003588:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800358c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003590:	200001b0 	.word	0x200001b0

08003594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003594:	e7fe      	b.n	8003594 <ADC_IRQHandler>
	...

08003598 <__errno>:
 8003598:	4b01      	ldr	r3, [pc, #4]	; (80035a0 <__errno+0x8>)
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	2000001c 	.word	0x2000001c

080035a4 <__libc_init_array>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	4d0d      	ldr	r5, [pc, #52]	; (80035dc <__libc_init_array+0x38>)
 80035a8:	4c0d      	ldr	r4, [pc, #52]	; (80035e0 <__libc_init_array+0x3c>)
 80035aa:	1b64      	subs	r4, r4, r5
 80035ac:	10a4      	asrs	r4, r4, #2
 80035ae:	2600      	movs	r6, #0
 80035b0:	42a6      	cmp	r6, r4
 80035b2:	d109      	bne.n	80035c8 <__libc_init_array+0x24>
 80035b4:	4d0b      	ldr	r5, [pc, #44]	; (80035e4 <__libc_init_array+0x40>)
 80035b6:	4c0c      	ldr	r4, [pc, #48]	; (80035e8 <__libc_init_array+0x44>)
 80035b8:	f001 f824 	bl	8004604 <_init>
 80035bc:	1b64      	subs	r4, r4, r5
 80035be:	10a4      	asrs	r4, r4, #2
 80035c0:	2600      	movs	r6, #0
 80035c2:	42a6      	cmp	r6, r4
 80035c4:	d105      	bne.n	80035d2 <__libc_init_array+0x2e>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035cc:	4798      	blx	r3
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7ee      	b.n	80035b0 <__libc_init_array+0xc>
 80035d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d6:	4798      	blx	r3
 80035d8:	3601      	adds	r6, #1
 80035da:	e7f2      	b.n	80035c2 <__libc_init_array+0x1e>
 80035dc:	080047f0 	.word	0x080047f0
 80035e0:	080047f0 	.word	0x080047f0
 80035e4:	080047f0 	.word	0x080047f0
 80035e8:	080047f4 	.word	0x080047f4

080035ec <memset>:
 80035ec:	4402      	add	r2, r0
 80035ee:	4603      	mov	r3, r0
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d100      	bne.n	80035f6 <memset+0xa>
 80035f4:	4770      	bx	lr
 80035f6:	f803 1b01 	strb.w	r1, [r3], #1
 80035fa:	e7f9      	b.n	80035f0 <memset+0x4>

080035fc <iprintf>:
 80035fc:	b40f      	push	{r0, r1, r2, r3}
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <iprintf+0x2c>)
 8003600:	b513      	push	{r0, r1, r4, lr}
 8003602:	681c      	ldr	r4, [r3, #0]
 8003604:	b124      	cbz	r4, 8003610 <iprintf+0x14>
 8003606:	69a3      	ldr	r3, [r4, #24]
 8003608:	b913      	cbnz	r3, 8003610 <iprintf+0x14>
 800360a:	4620      	mov	r0, r4
 800360c:	f000 fa5e 	bl	8003acc <__sinit>
 8003610:	ab05      	add	r3, sp, #20
 8003612:	9a04      	ldr	r2, [sp, #16]
 8003614:	68a1      	ldr	r1, [r4, #8]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	4620      	mov	r0, r4
 800361a:	f000 fc67 	bl	8003eec <_vfiprintf_r>
 800361e:	b002      	add	sp, #8
 8003620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003624:	b004      	add	sp, #16
 8003626:	4770      	bx	lr
 8003628:	2000001c 	.word	0x2000001c

0800362c <_puts_r>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	460e      	mov	r6, r1
 8003630:	4605      	mov	r5, r0
 8003632:	b118      	cbz	r0, 800363c <_puts_r+0x10>
 8003634:	6983      	ldr	r3, [r0, #24]
 8003636:	b90b      	cbnz	r3, 800363c <_puts_r+0x10>
 8003638:	f000 fa48 	bl	8003acc <__sinit>
 800363c:	69ab      	ldr	r3, [r5, #24]
 800363e:	68ac      	ldr	r4, [r5, #8]
 8003640:	b913      	cbnz	r3, 8003648 <_puts_r+0x1c>
 8003642:	4628      	mov	r0, r5
 8003644:	f000 fa42 	bl	8003acc <__sinit>
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <_puts_r+0xd0>)
 800364a:	429c      	cmp	r4, r3
 800364c:	d120      	bne.n	8003690 <_puts_r+0x64>
 800364e:	686c      	ldr	r4, [r5, #4]
 8003650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003652:	07db      	lsls	r3, r3, #31
 8003654:	d405      	bmi.n	8003662 <_puts_r+0x36>
 8003656:	89a3      	ldrh	r3, [r4, #12]
 8003658:	0598      	lsls	r0, r3, #22
 800365a:	d402      	bmi.n	8003662 <_puts_r+0x36>
 800365c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800365e:	f000 fad3 	bl	8003c08 <__retarget_lock_acquire_recursive>
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	0719      	lsls	r1, r3, #28
 8003666:	d51d      	bpl.n	80036a4 <_puts_r+0x78>
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	b1db      	cbz	r3, 80036a4 <_puts_r+0x78>
 800366c:	3e01      	subs	r6, #1
 800366e:	68a3      	ldr	r3, [r4, #8]
 8003670:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003674:	3b01      	subs	r3, #1
 8003676:	60a3      	str	r3, [r4, #8]
 8003678:	bb39      	cbnz	r1, 80036ca <_puts_r+0x9e>
 800367a:	2b00      	cmp	r3, #0
 800367c:	da38      	bge.n	80036f0 <_puts_r+0xc4>
 800367e:	4622      	mov	r2, r4
 8003680:	210a      	movs	r1, #10
 8003682:	4628      	mov	r0, r5
 8003684:	f000 f848 	bl	8003718 <__swbuf_r>
 8003688:	3001      	adds	r0, #1
 800368a:	d011      	beq.n	80036b0 <_puts_r+0x84>
 800368c:	250a      	movs	r5, #10
 800368e:	e011      	b.n	80036b4 <_puts_r+0x88>
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <_puts_r+0xd4>)
 8003692:	429c      	cmp	r4, r3
 8003694:	d101      	bne.n	800369a <_puts_r+0x6e>
 8003696:	68ac      	ldr	r4, [r5, #8]
 8003698:	e7da      	b.n	8003650 <_puts_r+0x24>
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <_puts_r+0xd8>)
 800369c:	429c      	cmp	r4, r3
 800369e:	bf08      	it	eq
 80036a0:	68ec      	ldreq	r4, [r5, #12]
 80036a2:	e7d5      	b.n	8003650 <_puts_r+0x24>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	f000 f888 	bl	80037bc <__swsetup_r>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d0dd      	beq.n	800366c <_puts_r+0x40>
 80036b0:	f04f 35ff 	mov.w	r5, #4294967295
 80036b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036b6:	07da      	lsls	r2, r3, #31
 80036b8:	d405      	bmi.n	80036c6 <_puts_r+0x9a>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	059b      	lsls	r3, r3, #22
 80036be:	d402      	bmi.n	80036c6 <_puts_r+0x9a>
 80036c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036c2:	f000 faa2 	bl	8003c0a <__retarget_lock_release_recursive>
 80036c6:	4628      	mov	r0, r5
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da04      	bge.n	80036d8 <_puts_r+0xac>
 80036ce:	69a2      	ldr	r2, [r4, #24]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dc06      	bgt.n	80036e2 <_puts_r+0xb6>
 80036d4:	290a      	cmp	r1, #10
 80036d6:	d004      	beq.n	80036e2 <_puts_r+0xb6>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	6022      	str	r2, [r4, #0]
 80036de:	7019      	strb	r1, [r3, #0]
 80036e0:	e7c5      	b.n	800366e <_puts_r+0x42>
 80036e2:	4622      	mov	r2, r4
 80036e4:	4628      	mov	r0, r5
 80036e6:	f000 f817 	bl	8003718 <__swbuf_r>
 80036ea:	3001      	adds	r0, #1
 80036ec:	d1bf      	bne.n	800366e <_puts_r+0x42>
 80036ee:	e7df      	b.n	80036b0 <_puts_r+0x84>
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	250a      	movs	r5, #10
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	6022      	str	r2, [r4, #0]
 80036f8:	701d      	strb	r5, [r3, #0]
 80036fa:	e7db      	b.n	80036b4 <_puts_r+0x88>
 80036fc:	08004774 	.word	0x08004774
 8003700:	08004794 	.word	0x08004794
 8003704:	08004754 	.word	0x08004754

08003708 <puts>:
 8003708:	4b02      	ldr	r3, [pc, #8]	; (8003714 <puts+0xc>)
 800370a:	4601      	mov	r1, r0
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	f7ff bf8d 	b.w	800362c <_puts_r>
 8003712:	bf00      	nop
 8003714:	2000001c 	.word	0x2000001c

08003718 <__swbuf_r>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	460e      	mov	r6, r1
 800371c:	4614      	mov	r4, r2
 800371e:	4605      	mov	r5, r0
 8003720:	b118      	cbz	r0, 800372a <__swbuf_r+0x12>
 8003722:	6983      	ldr	r3, [r0, #24]
 8003724:	b90b      	cbnz	r3, 800372a <__swbuf_r+0x12>
 8003726:	f000 f9d1 	bl	8003acc <__sinit>
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <__swbuf_r+0x98>)
 800372c:	429c      	cmp	r4, r3
 800372e:	d12b      	bne.n	8003788 <__swbuf_r+0x70>
 8003730:	686c      	ldr	r4, [r5, #4]
 8003732:	69a3      	ldr	r3, [r4, #24]
 8003734:	60a3      	str	r3, [r4, #8]
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	071a      	lsls	r2, r3, #28
 800373a:	d52f      	bpl.n	800379c <__swbuf_r+0x84>
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	b36b      	cbz	r3, 800379c <__swbuf_r+0x84>
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	6820      	ldr	r0, [r4, #0]
 8003744:	1ac0      	subs	r0, r0, r3
 8003746:	6963      	ldr	r3, [r4, #20]
 8003748:	b2f6      	uxtb	r6, r6
 800374a:	4283      	cmp	r3, r0
 800374c:	4637      	mov	r7, r6
 800374e:	dc04      	bgt.n	800375a <__swbuf_r+0x42>
 8003750:	4621      	mov	r1, r4
 8003752:	4628      	mov	r0, r5
 8003754:	f000 f926 	bl	80039a4 <_fflush_r>
 8003758:	bb30      	cbnz	r0, 80037a8 <__swbuf_r+0x90>
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	3b01      	subs	r3, #1
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	6022      	str	r2, [r4, #0]
 8003766:	701e      	strb	r6, [r3, #0]
 8003768:	6963      	ldr	r3, [r4, #20]
 800376a:	3001      	adds	r0, #1
 800376c:	4283      	cmp	r3, r0
 800376e:	d004      	beq.n	800377a <__swbuf_r+0x62>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	07db      	lsls	r3, r3, #31
 8003774:	d506      	bpl.n	8003784 <__swbuf_r+0x6c>
 8003776:	2e0a      	cmp	r6, #10
 8003778:	d104      	bne.n	8003784 <__swbuf_r+0x6c>
 800377a:	4621      	mov	r1, r4
 800377c:	4628      	mov	r0, r5
 800377e:	f000 f911 	bl	80039a4 <_fflush_r>
 8003782:	b988      	cbnz	r0, 80037a8 <__swbuf_r+0x90>
 8003784:	4638      	mov	r0, r7
 8003786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <__swbuf_r+0x9c>)
 800378a:	429c      	cmp	r4, r3
 800378c:	d101      	bne.n	8003792 <__swbuf_r+0x7a>
 800378e:	68ac      	ldr	r4, [r5, #8]
 8003790:	e7cf      	b.n	8003732 <__swbuf_r+0x1a>
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <__swbuf_r+0xa0>)
 8003794:	429c      	cmp	r4, r3
 8003796:	bf08      	it	eq
 8003798:	68ec      	ldreq	r4, [r5, #12]
 800379a:	e7ca      	b.n	8003732 <__swbuf_r+0x1a>
 800379c:	4621      	mov	r1, r4
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 f80c 	bl	80037bc <__swsetup_r>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d0cb      	beq.n	8003740 <__swbuf_r+0x28>
 80037a8:	f04f 37ff 	mov.w	r7, #4294967295
 80037ac:	e7ea      	b.n	8003784 <__swbuf_r+0x6c>
 80037ae:	bf00      	nop
 80037b0:	08004774 	.word	0x08004774
 80037b4:	08004794 	.word	0x08004794
 80037b8:	08004754 	.word	0x08004754

080037bc <__swsetup_r>:
 80037bc:	4b32      	ldr	r3, [pc, #200]	; (8003888 <__swsetup_r+0xcc>)
 80037be:	b570      	push	{r4, r5, r6, lr}
 80037c0:	681d      	ldr	r5, [r3, #0]
 80037c2:	4606      	mov	r6, r0
 80037c4:	460c      	mov	r4, r1
 80037c6:	b125      	cbz	r5, 80037d2 <__swsetup_r+0x16>
 80037c8:	69ab      	ldr	r3, [r5, #24]
 80037ca:	b913      	cbnz	r3, 80037d2 <__swsetup_r+0x16>
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 f97d 	bl	8003acc <__sinit>
 80037d2:	4b2e      	ldr	r3, [pc, #184]	; (800388c <__swsetup_r+0xd0>)
 80037d4:	429c      	cmp	r4, r3
 80037d6:	d10f      	bne.n	80037f8 <__swsetup_r+0x3c>
 80037d8:	686c      	ldr	r4, [r5, #4]
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037e0:	0719      	lsls	r1, r3, #28
 80037e2:	d42c      	bmi.n	800383e <__swsetup_r+0x82>
 80037e4:	06dd      	lsls	r5, r3, #27
 80037e6:	d411      	bmi.n	800380c <__swsetup_r+0x50>
 80037e8:	2309      	movs	r3, #9
 80037ea:	6033      	str	r3, [r6, #0]
 80037ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	f04f 30ff 	mov.w	r0, #4294967295
 80037f6:	e03e      	b.n	8003876 <__swsetup_r+0xba>
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <__swsetup_r+0xd4>)
 80037fa:	429c      	cmp	r4, r3
 80037fc:	d101      	bne.n	8003802 <__swsetup_r+0x46>
 80037fe:	68ac      	ldr	r4, [r5, #8]
 8003800:	e7eb      	b.n	80037da <__swsetup_r+0x1e>
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <__swsetup_r+0xd8>)
 8003804:	429c      	cmp	r4, r3
 8003806:	bf08      	it	eq
 8003808:	68ec      	ldreq	r4, [r5, #12]
 800380a:	e7e6      	b.n	80037da <__swsetup_r+0x1e>
 800380c:	0758      	lsls	r0, r3, #29
 800380e:	d512      	bpl.n	8003836 <__swsetup_r+0x7a>
 8003810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003812:	b141      	cbz	r1, 8003826 <__swsetup_r+0x6a>
 8003814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003818:	4299      	cmp	r1, r3
 800381a:	d002      	beq.n	8003822 <__swsetup_r+0x66>
 800381c:	4630      	mov	r0, r6
 800381e:	f000 fa5b 	bl	8003cd8 <_free_r>
 8003822:	2300      	movs	r3, #0
 8003824:	6363      	str	r3, [r4, #52]	; 0x34
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	2300      	movs	r3, #0
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	6923      	ldr	r3, [r4, #16]
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f043 0308 	orr.w	r3, r3, #8
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	6923      	ldr	r3, [r4, #16]
 8003840:	b94b      	cbnz	r3, 8003856 <__swsetup_r+0x9a>
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384c:	d003      	beq.n	8003856 <__swsetup_r+0x9a>
 800384e:	4621      	mov	r1, r4
 8003850:	4630      	mov	r0, r6
 8003852:	f000 fa01 	bl	8003c58 <__smakebuf_r>
 8003856:	89a0      	ldrh	r0, [r4, #12]
 8003858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800385c:	f010 0301 	ands.w	r3, r0, #1
 8003860:	d00a      	beq.n	8003878 <__swsetup_r+0xbc>
 8003862:	2300      	movs	r3, #0
 8003864:	60a3      	str	r3, [r4, #8]
 8003866:	6963      	ldr	r3, [r4, #20]
 8003868:	425b      	negs	r3, r3
 800386a:	61a3      	str	r3, [r4, #24]
 800386c:	6923      	ldr	r3, [r4, #16]
 800386e:	b943      	cbnz	r3, 8003882 <__swsetup_r+0xc6>
 8003870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003874:	d1ba      	bne.n	80037ec <__swsetup_r+0x30>
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	0781      	lsls	r1, r0, #30
 800387a:	bf58      	it	pl
 800387c:	6963      	ldrpl	r3, [r4, #20]
 800387e:	60a3      	str	r3, [r4, #8]
 8003880:	e7f4      	b.n	800386c <__swsetup_r+0xb0>
 8003882:	2000      	movs	r0, #0
 8003884:	e7f7      	b.n	8003876 <__swsetup_r+0xba>
 8003886:	bf00      	nop
 8003888:	2000001c 	.word	0x2000001c
 800388c:	08004774 	.word	0x08004774
 8003890:	08004794 	.word	0x08004794
 8003894:	08004754 	.word	0x08004754

08003898 <__sflush_r>:
 8003898:	898a      	ldrh	r2, [r1, #12]
 800389a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389e:	4605      	mov	r5, r0
 80038a0:	0710      	lsls	r0, r2, #28
 80038a2:	460c      	mov	r4, r1
 80038a4:	d458      	bmi.n	8003958 <__sflush_r+0xc0>
 80038a6:	684b      	ldr	r3, [r1, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dc05      	bgt.n	80038b8 <__sflush_r+0x20>
 80038ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	dc02      	bgt.n	80038b8 <__sflush_r+0x20>
 80038b2:	2000      	movs	r0, #0
 80038b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038ba:	2e00      	cmp	r6, #0
 80038bc:	d0f9      	beq.n	80038b2 <__sflush_r+0x1a>
 80038be:	2300      	movs	r3, #0
 80038c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038c4:	682f      	ldr	r7, [r5, #0]
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	d032      	beq.n	8003930 <__sflush_r+0x98>
 80038ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038cc:	89a3      	ldrh	r3, [r4, #12]
 80038ce:	075a      	lsls	r2, r3, #29
 80038d0:	d505      	bpl.n	80038de <__sflush_r+0x46>
 80038d2:	6863      	ldr	r3, [r4, #4]
 80038d4:	1ac0      	subs	r0, r0, r3
 80038d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038d8:	b10b      	cbz	r3, 80038de <__sflush_r+0x46>
 80038da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038dc:	1ac0      	subs	r0, r0, r3
 80038de:	2300      	movs	r3, #0
 80038e0:	4602      	mov	r2, r0
 80038e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038e4:	6a21      	ldr	r1, [r4, #32]
 80038e6:	4628      	mov	r0, r5
 80038e8:	47b0      	blx	r6
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	d106      	bne.n	80038fe <__sflush_r+0x66>
 80038f0:	6829      	ldr	r1, [r5, #0]
 80038f2:	291d      	cmp	r1, #29
 80038f4:	d82c      	bhi.n	8003950 <__sflush_r+0xb8>
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <__sflush_r+0x108>)
 80038f8:	40ca      	lsrs	r2, r1
 80038fa:	07d6      	lsls	r6, r2, #31
 80038fc:	d528      	bpl.n	8003950 <__sflush_r+0xb8>
 80038fe:	2200      	movs	r2, #0
 8003900:	6062      	str	r2, [r4, #4]
 8003902:	04d9      	lsls	r1, r3, #19
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	6022      	str	r2, [r4, #0]
 8003908:	d504      	bpl.n	8003914 <__sflush_r+0x7c>
 800390a:	1c42      	adds	r2, r0, #1
 800390c:	d101      	bne.n	8003912 <__sflush_r+0x7a>
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	b903      	cbnz	r3, 8003914 <__sflush_r+0x7c>
 8003912:	6560      	str	r0, [r4, #84]	; 0x54
 8003914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003916:	602f      	str	r7, [r5, #0]
 8003918:	2900      	cmp	r1, #0
 800391a:	d0ca      	beq.n	80038b2 <__sflush_r+0x1a>
 800391c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003920:	4299      	cmp	r1, r3
 8003922:	d002      	beq.n	800392a <__sflush_r+0x92>
 8003924:	4628      	mov	r0, r5
 8003926:	f000 f9d7 	bl	8003cd8 <_free_r>
 800392a:	2000      	movs	r0, #0
 800392c:	6360      	str	r0, [r4, #52]	; 0x34
 800392e:	e7c1      	b.n	80038b4 <__sflush_r+0x1c>
 8003930:	6a21      	ldr	r1, [r4, #32]
 8003932:	2301      	movs	r3, #1
 8003934:	4628      	mov	r0, r5
 8003936:	47b0      	blx	r6
 8003938:	1c41      	adds	r1, r0, #1
 800393a:	d1c7      	bne.n	80038cc <__sflush_r+0x34>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0c4      	beq.n	80038cc <__sflush_r+0x34>
 8003942:	2b1d      	cmp	r3, #29
 8003944:	d001      	beq.n	800394a <__sflush_r+0xb2>
 8003946:	2b16      	cmp	r3, #22
 8003948:	d101      	bne.n	800394e <__sflush_r+0xb6>
 800394a:	602f      	str	r7, [r5, #0]
 800394c:	e7b1      	b.n	80038b2 <__sflush_r+0x1a>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	e7ad      	b.n	80038b4 <__sflush_r+0x1c>
 8003958:	690f      	ldr	r7, [r1, #16]
 800395a:	2f00      	cmp	r7, #0
 800395c:	d0a9      	beq.n	80038b2 <__sflush_r+0x1a>
 800395e:	0793      	lsls	r3, r2, #30
 8003960:	680e      	ldr	r6, [r1, #0]
 8003962:	bf08      	it	eq
 8003964:	694b      	ldreq	r3, [r1, #20]
 8003966:	600f      	str	r7, [r1, #0]
 8003968:	bf18      	it	ne
 800396a:	2300      	movne	r3, #0
 800396c:	eba6 0807 	sub.w	r8, r6, r7
 8003970:	608b      	str	r3, [r1, #8]
 8003972:	f1b8 0f00 	cmp.w	r8, #0
 8003976:	dd9c      	ble.n	80038b2 <__sflush_r+0x1a>
 8003978:	6a21      	ldr	r1, [r4, #32]
 800397a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800397c:	4643      	mov	r3, r8
 800397e:	463a      	mov	r2, r7
 8003980:	4628      	mov	r0, r5
 8003982:	47b0      	blx	r6
 8003984:	2800      	cmp	r0, #0
 8003986:	dc06      	bgt.n	8003996 <__sflush_r+0xfe>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398e:	81a3      	strh	r3, [r4, #12]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	e78e      	b.n	80038b4 <__sflush_r+0x1c>
 8003996:	4407      	add	r7, r0
 8003998:	eba8 0800 	sub.w	r8, r8, r0
 800399c:	e7e9      	b.n	8003972 <__sflush_r+0xda>
 800399e:	bf00      	nop
 80039a0:	20400001 	.word	0x20400001

080039a4 <_fflush_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	690b      	ldr	r3, [r1, #16]
 80039a8:	4605      	mov	r5, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	b913      	cbnz	r3, 80039b4 <_fflush_r+0x10>
 80039ae:	2500      	movs	r5, #0
 80039b0:	4628      	mov	r0, r5
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	b118      	cbz	r0, 80039be <_fflush_r+0x1a>
 80039b6:	6983      	ldr	r3, [r0, #24]
 80039b8:	b90b      	cbnz	r3, 80039be <_fflush_r+0x1a>
 80039ba:	f000 f887 	bl	8003acc <__sinit>
 80039be:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <_fflush_r+0x6c>)
 80039c0:	429c      	cmp	r4, r3
 80039c2:	d11b      	bne.n	80039fc <_fflush_r+0x58>
 80039c4:	686c      	ldr	r4, [r5, #4]
 80039c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ef      	beq.n	80039ae <_fflush_r+0xa>
 80039ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039d0:	07d0      	lsls	r0, r2, #31
 80039d2:	d404      	bmi.n	80039de <_fflush_r+0x3a>
 80039d4:	0599      	lsls	r1, r3, #22
 80039d6:	d402      	bmi.n	80039de <_fflush_r+0x3a>
 80039d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039da:	f000 f915 	bl	8003c08 <__retarget_lock_acquire_recursive>
 80039de:	4628      	mov	r0, r5
 80039e0:	4621      	mov	r1, r4
 80039e2:	f7ff ff59 	bl	8003898 <__sflush_r>
 80039e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039e8:	07da      	lsls	r2, r3, #31
 80039ea:	4605      	mov	r5, r0
 80039ec:	d4e0      	bmi.n	80039b0 <_fflush_r+0xc>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	059b      	lsls	r3, r3, #22
 80039f2:	d4dd      	bmi.n	80039b0 <_fflush_r+0xc>
 80039f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039f6:	f000 f908 	bl	8003c0a <__retarget_lock_release_recursive>
 80039fa:	e7d9      	b.n	80039b0 <_fflush_r+0xc>
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <_fflush_r+0x70>)
 80039fe:	429c      	cmp	r4, r3
 8003a00:	d101      	bne.n	8003a06 <_fflush_r+0x62>
 8003a02:	68ac      	ldr	r4, [r5, #8]
 8003a04:	e7df      	b.n	80039c6 <_fflush_r+0x22>
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <_fflush_r+0x74>)
 8003a08:	429c      	cmp	r4, r3
 8003a0a:	bf08      	it	eq
 8003a0c:	68ec      	ldreq	r4, [r5, #12]
 8003a0e:	e7da      	b.n	80039c6 <_fflush_r+0x22>
 8003a10:	08004774 	.word	0x08004774
 8003a14:	08004794 	.word	0x08004794
 8003a18:	08004754 	.word	0x08004754

08003a1c <std>:
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	4604      	mov	r4, r0
 8003a22:	e9c0 3300 	strd	r3, r3, [r0]
 8003a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a2a:	6083      	str	r3, [r0, #8]
 8003a2c:	8181      	strh	r1, [r0, #12]
 8003a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a30:	81c2      	strh	r2, [r0, #14]
 8003a32:	6183      	str	r3, [r0, #24]
 8003a34:	4619      	mov	r1, r3
 8003a36:	2208      	movs	r2, #8
 8003a38:	305c      	adds	r0, #92	; 0x5c
 8003a3a:	f7ff fdd7 	bl	80035ec <memset>
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <std+0x38>)
 8003a40:	6263      	str	r3, [r4, #36]	; 0x24
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <std+0x3c>)
 8003a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <std+0x40>)
 8003a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <std+0x44>)
 8003a4c:	6224      	str	r4, [r4, #32]
 8003a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8003a50:	bd10      	pop	{r4, pc}
 8003a52:	bf00      	nop
 8003a54:	08004495 	.word	0x08004495
 8003a58:	080044b7 	.word	0x080044b7
 8003a5c:	080044ef 	.word	0x080044ef
 8003a60:	08004513 	.word	0x08004513

08003a64 <_cleanup_r>:
 8003a64:	4901      	ldr	r1, [pc, #4]	; (8003a6c <_cleanup_r+0x8>)
 8003a66:	f000 b8af 	b.w	8003bc8 <_fwalk_reent>
 8003a6a:	bf00      	nop
 8003a6c:	080039a5 	.word	0x080039a5

08003a70 <__sfmoreglue>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	2268      	movs	r2, #104	; 0x68
 8003a74:	1e4d      	subs	r5, r1, #1
 8003a76:	4355      	muls	r5, r2
 8003a78:	460e      	mov	r6, r1
 8003a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a7e:	f000 f997 	bl	8003db0 <_malloc_r>
 8003a82:	4604      	mov	r4, r0
 8003a84:	b140      	cbz	r0, 8003a98 <__sfmoreglue+0x28>
 8003a86:	2100      	movs	r1, #0
 8003a88:	e9c0 1600 	strd	r1, r6, [r0]
 8003a8c:	300c      	adds	r0, #12
 8003a8e:	60a0      	str	r0, [r4, #8]
 8003a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a94:	f7ff fdaa 	bl	80035ec <memset>
 8003a98:	4620      	mov	r0, r4
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}

08003a9c <__sfp_lock_acquire>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__sfp_lock_acquire+0x8>)
 8003a9e:	f000 b8b3 	b.w	8003c08 <__retarget_lock_acquire_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	200001a1 	.word	0x200001a1

08003aa8 <__sfp_lock_release>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__sfp_lock_release+0x8>)
 8003aaa:	f000 b8ae 	b.w	8003c0a <__retarget_lock_release_recursive>
 8003aae:	bf00      	nop
 8003ab0:	200001a1 	.word	0x200001a1

08003ab4 <__sinit_lock_acquire>:
 8003ab4:	4801      	ldr	r0, [pc, #4]	; (8003abc <__sinit_lock_acquire+0x8>)
 8003ab6:	f000 b8a7 	b.w	8003c08 <__retarget_lock_acquire_recursive>
 8003aba:	bf00      	nop
 8003abc:	200001a2 	.word	0x200001a2

08003ac0 <__sinit_lock_release>:
 8003ac0:	4801      	ldr	r0, [pc, #4]	; (8003ac8 <__sinit_lock_release+0x8>)
 8003ac2:	f000 b8a2 	b.w	8003c0a <__retarget_lock_release_recursive>
 8003ac6:	bf00      	nop
 8003ac8:	200001a2 	.word	0x200001a2

08003acc <__sinit>:
 8003acc:	b510      	push	{r4, lr}
 8003ace:	4604      	mov	r4, r0
 8003ad0:	f7ff fff0 	bl	8003ab4 <__sinit_lock_acquire>
 8003ad4:	69a3      	ldr	r3, [r4, #24]
 8003ad6:	b11b      	cbz	r3, 8003ae0 <__sinit+0x14>
 8003ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003adc:	f7ff bff0 	b.w	8003ac0 <__sinit_lock_release>
 8003ae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ae4:	6523      	str	r3, [r4, #80]	; 0x50
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <__sinit+0x68>)
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <__sinit+0x6c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	62a2      	str	r2, [r4, #40]	; 0x28
 8003aee:	42a3      	cmp	r3, r4
 8003af0:	bf04      	itt	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	61a3      	streq	r3, [r4, #24]
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 f820 	bl	8003b3c <__sfp>
 8003afc:	6060      	str	r0, [r4, #4]
 8003afe:	4620      	mov	r0, r4
 8003b00:	f000 f81c 	bl	8003b3c <__sfp>
 8003b04:	60a0      	str	r0, [r4, #8]
 8003b06:	4620      	mov	r0, r4
 8003b08:	f000 f818 	bl	8003b3c <__sfp>
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60e0      	str	r0, [r4, #12]
 8003b10:	2104      	movs	r1, #4
 8003b12:	6860      	ldr	r0, [r4, #4]
 8003b14:	f7ff ff82 	bl	8003a1c <std>
 8003b18:	68a0      	ldr	r0, [r4, #8]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	2109      	movs	r1, #9
 8003b1e:	f7ff ff7d 	bl	8003a1c <std>
 8003b22:	68e0      	ldr	r0, [r4, #12]
 8003b24:	2202      	movs	r2, #2
 8003b26:	2112      	movs	r1, #18
 8003b28:	f7ff ff78 	bl	8003a1c <std>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	61a3      	str	r3, [r4, #24]
 8003b30:	e7d2      	b.n	8003ad8 <__sinit+0xc>
 8003b32:	bf00      	nop
 8003b34:	08004750 	.word	0x08004750
 8003b38:	08003a65 	.word	0x08003a65

08003b3c <__sfp>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	4607      	mov	r7, r0
 8003b40:	f7ff ffac 	bl	8003a9c <__sfp_lock_acquire>
 8003b44:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <__sfp+0x84>)
 8003b46:	681e      	ldr	r6, [r3, #0]
 8003b48:	69b3      	ldr	r3, [r6, #24]
 8003b4a:	b913      	cbnz	r3, 8003b52 <__sfp+0x16>
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f7ff ffbd 	bl	8003acc <__sinit>
 8003b52:	3648      	adds	r6, #72	; 0x48
 8003b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	d503      	bpl.n	8003b64 <__sfp+0x28>
 8003b5c:	6833      	ldr	r3, [r6, #0]
 8003b5e:	b30b      	cbz	r3, 8003ba4 <__sfp+0x68>
 8003b60:	6836      	ldr	r6, [r6, #0]
 8003b62:	e7f7      	b.n	8003b54 <__sfp+0x18>
 8003b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b68:	b9d5      	cbnz	r5, 8003ba0 <__sfp+0x64>
 8003b6a:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <__sfp+0x88>)
 8003b6c:	60e3      	str	r3, [r4, #12]
 8003b6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b72:	6665      	str	r5, [r4, #100]	; 0x64
 8003b74:	f000 f847 	bl	8003c06 <__retarget_lock_init_recursive>
 8003b78:	f7ff ff96 	bl	8003aa8 <__sfp_lock_release>
 8003b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b84:	6025      	str	r5, [r4, #0]
 8003b86:	61a5      	str	r5, [r4, #24]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b90:	f7ff fd2c 	bl	80035ec <memset>
 8003b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba0:	3468      	adds	r4, #104	; 0x68
 8003ba2:	e7d9      	b.n	8003b58 <__sfp+0x1c>
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	f7ff ff62 	bl	8003a70 <__sfmoreglue>
 8003bac:	4604      	mov	r4, r0
 8003bae:	6030      	str	r0, [r6, #0]
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d1d5      	bne.n	8003b60 <__sfp+0x24>
 8003bb4:	f7ff ff78 	bl	8003aa8 <__sfp_lock_release>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	e7ee      	b.n	8003b9c <__sfp+0x60>
 8003bbe:	bf00      	nop
 8003bc0:	08004750 	.word	0x08004750
 8003bc4:	ffff0001 	.word	0xffff0001

08003bc8 <_fwalk_reent>:
 8003bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bcc:	4606      	mov	r6, r0
 8003bce:	4688      	mov	r8, r1
 8003bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bd4:	2700      	movs	r7, #0
 8003bd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bda:	f1b9 0901 	subs.w	r9, r9, #1
 8003bde:	d505      	bpl.n	8003bec <_fwalk_reent+0x24>
 8003be0:	6824      	ldr	r4, [r4, #0]
 8003be2:	2c00      	cmp	r4, #0
 8003be4:	d1f7      	bne.n	8003bd6 <_fwalk_reent+0xe>
 8003be6:	4638      	mov	r0, r7
 8003be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bec:	89ab      	ldrh	r3, [r5, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d907      	bls.n	8003c02 <_fwalk_reent+0x3a>
 8003bf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	d003      	beq.n	8003c02 <_fwalk_reent+0x3a>
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	47c0      	blx	r8
 8003c00:	4307      	orrs	r7, r0
 8003c02:	3568      	adds	r5, #104	; 0x68
 8003c04:	e7e9      	b.n	8003bda <_fwalk_reent+0x12>

08003c06 <__retarget_lock_init_recursive>:
 8003c06:	4770      	bx	lr

08003c08 <__retarget_lock_acquire_recursive>:
 8003c08:	4770      	bx	lr

08003c0a <__retarget_lock_release_recursive>:
 8003c0a:	4770      	bx	lr

08003c0c <__swhatbuf_r>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	460e      	mov	r6, r1
 8003c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c14:	2900      	cmp	r1, #0
 8003c16:	b096      	sub	sp, #88	; 0x58
 8003c18:	4614      	mov	r4, r2
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	da08      	bge.n	8003c30 <__swhatbuf_r+0x24>
 8003c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	602a      	str	r2, [r5, #0]
 8003c26:	061a      	lsls	r2, r3, #24
 8003c28:	d410      	bmi.n	8003c4c <__swhatbuf_r+0x40>
 8003c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2e:	e00e      	b.n	8003c4e <__swhatbuf_r+0x42>
 8003c30:	466a      	mov	r2, sp
 8003c32:	f000 fc95 	bl	8004560 <_fstat_r>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	dbf1      	blt.n	8003c1e <__swhatbuf_r+0x12>
 8003c3a:	9a01      	ldr	r2, [sp, #4]
 8003c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c44:	425a      	negs	r2, r3
 8003c46:	415a      	adcs	r2, r3
 8003c48:	602a      	str	r2, [r5, #0]
 8003c4a:	e7ee      	b.n	8003c2a <__swhatbuf_r+0x1e>
 8003c4c:	2340      	movs	r3, #64	; 0x40
 8003c4e:	2000      	movs	r0, #0
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	b016      	add	sp, #88	; 0x58
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c58 <__smakebuf_r>:
 8003c58:	898b      	ldrh	r3, [r1, #12]
 8003c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c5c:	079d      	lsls	r5, r3, #30
 8003c5e:	4606      	mov	r6, r0
 8003c60:	460c      	mov	r4, r1
 8003c62:	d507      	bpl.n	8003c74 <__smakebuf_r+0x1c>
 8003c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	6123      	str	r3, [r4, #16]
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	6163      	str	r3, [r4, #20]
 8003c70:	b002      	add	sp, #8
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	ab01      	add	r3, sp, #4
 8003c76:	466a      	mov	r2, sp
 8003c78:	f7ff ffc8 	bl	8003c0c <__swhatbuf_r>
 8003c7c:	9900      	ldr	r1, [sp, #0]
 8003c7e:	4605      	mov	r5, r0
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 f895 	bl	8003db0 <_malloc_r>
 8003c86:	b948      	cbnz	r0, 8003c9c <__smakebuf_r+0x44>
 8003c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c8c:	059a      	lsls	r2, r3, #22
 8003c8e:	d4ef      	bmi.n	8003c70 <__smakebuf_r+0x18>
 8003c90:	f023 0303 	bic.w	r3, r3, #3
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	81a3      	strh	r3, [r4, #12]
 8003c9a:	e7e3      	b.n	8003c64 <__smakebuf_r+0xc>
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <__smakebuf_r+0x7c>)
 8003c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	6020      	str	r0, [r4, #0]
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	9b00      	ldr	r3, [sp, #0]
 8003cac:	6163      	str	r3, [r4, #20]
 8003cae:	9b01      	ldr	r3, [sp, #4]
 8003cb0:	6120      	str	r0, [r4, #16]
 8003cb2:	b15b      	cbz	r3, 8003ccc <__smakebuf_r+0x74>
 8003cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb8:	4630      	mov	r0, r6
 8003cba:	f000 fc63 	bl	8004584 <_isatty_r>
 8003cbe:	b128      	cbz	r0, 8003ccc <__smakebuf_r+0x74>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	81a3      	strh	r3, [r4, #12]
 8003ccc:	89a0      	ldrh	r0, [r4, #12]
 8003cce:	4305      	orrs	r5, r0
 8003cd0:	81a5      	strh	r5, [r4, #12]
 8003cd2:	e7cd      	b.n	8003c70 <__smakebuf_r+0x18>
 8003cd4:	08003a65 	.word	0x08003a65

08003cd8 <_free_r>:
 8003cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	d044      	beq.n	8003d68 <_free_r+0x90>
 8003cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce2:	9001      	str	r0, [sp, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8003cea:	bfb8      	it	lt
 8003cec:	18e4      	addlt	r4, r4, r3
 8003cee:	f000 fc6b 	bl	80045c8 <__malloc_lock>
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <_free_r+0x94>)
 8003cf4:	9801      	ldr	r0, [sp, #4]
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	b933      	cbnz	r3, 8003d08 <_free_r+0x30>
 8003cfa:	6063      	str	r3, [r4, #4]
 8003cfc:	6014      	str	r4, [r2, #0]
 8003cfe:	b003      	add	sp, #12
 8003d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d04:	f000 bc66 	b.w	80045d4 <__malloc_unlock>
 8003d08:	42a3      	cmp	r3, r4
 8003d0a:	d908      	bls.n	8003d1e <_free_r+0x46>
 8003d0c:	6825      	ldr	r5, [r4, #0]
 8003d0e:	1961      	adds	r1, r4, r5
 8003d10:	428b      	cmp	r3, r1
 8003d12:	bf01      	itttt	eq
 8003d14:	6819      	ldreq	r1, [r3, #0]
 8003d16:	685b      	ldreq	r3, [r3, #4]
 8003d18:	1949      	addeq	r1, r1, r5
 8003d1a:	6021      	streq	r1, [r4, #0]
 8003d1c:	e7ed      	b.n	8003cfa <_free_r+0x22>
 8003d1e:	461a      	mov	r2, r3
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b10b      	cbz	r3, 8003d28 <_free_r+0x50>
 8003d24:	42a3      	cmp	r3, r4
 8003d26:	d9fa      	bls.n	8003d1e <_free_r+0x46>
 8003d28:	6811      	ldr	r1, [r2, #0]
 8003d2a:	1855      	adds	r5, r2, r1
 8003d2c:	42a5      	cmp	r5, r4
 8003d2e:	d10b      	bne.n	8003d48 <_free_r+0x70>
 8003d30:	6824      	ldr	r4, [r4, #0]
 8003d32:	4421      	add	r1, r4
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	6011      	str	r1, [r2, #0]
 8003d3a:	d1e0      	bne.n	8003cfe <_free_r+0x26>
 8003d3c:	681c      	ldr	r4, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	6053      	str	r3, [r2, #4]
 8003d42:	4421      	add	r1, r4
 8003d44:	6011      	str	r1, [r2, #0]
 8003d46:	e7da      	b.n	8003cfe <_free_r+0x26>
 8003d48:	d902      	bls.n	8003d50 <_free_r+0x78>
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	6003      	str	r3, [r0, #0]
 8003d4e:	e7d6      	b.n	8003cfe <_free_r+0x26>
 8003d50:	6825      	ldr	r5, [r4, #0]
 8003d52:	1961      	adds	r1, r4, r5
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf04      	itt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	6063      	str	r3, [r4, #4]
 8003d5e:	bf04      	itt	eq
 8003d60:	1949      	addeq	r1, r1, r5
 8003d62:	6021      	streq	r1, [r4, #0]
 8003d64:	6054      	str	r4, [r2, #4]
 8003d66:	e7ca      	b.n	8003cfe <_free_r+0x26>
 8003d68:	b003      	add	sp, #12
 8003d6a:	bd30      	pop	{r4, r5, pc}
 8003d6c:	200001a4 	.word	0x200001a4

08003d70 <sbrk_aligned>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4e0e      	ldr	r6, [pc, #56]	; (8003dac <sbrk_aligned+0x3c>)
 8003d74:	460c      	mov	r4, r1
 8003d76:	6831      	ldr	r1, [r6, #0]
 8003d78:	4605      	mov	r5, r0
 8003d7a:	b911      	cbnz	r1, 8003d82 <sbrk_aligned+0x12>
 8003d7c:	f000 fb7a 	bl	8004474 <_sbrk_r>
 8003d80:	6030      	str	r0, [r6, #0]
 8003d82:	4621      	mov	r1, r4
 8003d84:	4628      	mov	r0, r5
 8003d86:	f000 fb75 	bl	8004474 <_sbrk_r>
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d00a      	beq.n	8003da4 <sbrk_aligned+0x34>
 8003d8e:	1cc4      	adds	r4, r0, #3
 8003d90:	f024 0403 	bic.w	r4, r4, #3
 8003d94:	42a0      	cmp	r0, r4
 8003d96:	d007      	beq.n	8003da8 <sbrk_aligned+0x38>
 8003d98:	1a21      	subs	r1, r4, r0
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f000 fb6a 	bl	8004474 <_sbrk_r>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d101      	bne.n	8003da8 <sbrk_aligned+0x38>
 8003da4:	f04f 34ff 	mov.w	r4, #4294967295
 8003da8:	4620      	mov	r0, r4
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	200001a8 	.word	0x200001a8

08003db0 <_malloc_r>:
 8003db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db4:	1ccd      	adds	r5, r1, #3
 8003db6:	f025 0503 	bic.w	r5, r5, #3
 8003dba:	3508      	adds	r5, #8
 8003dbc:	2d0c      	cmp	r5, #12
 8003dbe:	bf38      	it	cc
 8003dc0:	250c      	movcc	r5, #12
 8003dc2:	2d00      	cmp	r5, #0
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	db01      	blt.n	8003dcc <_malloc_r+0x1c>
 8003dc8:	42a9      	cmp	r1, r5
 8003dca:	d905      	bls.n	8003dd8 <_malloc_r+0x28>
 8003dcc:	230c      	movs	r3, #12
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	2600      	movs	r6, #0
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd8:	4e2e      	ldr	r6, [pc, #184]	; (8003e94 <_malloc_r+0xe4>)
 8003dda:	f000 fbf5 	bl	80045c8 <__malloc_lock>
 8003dde:	6833      	ldr	r3, [r6, #0]
 8003de0:	461c      	mov	r4, r3
 8003de2:	bb34      	cbnz	r4, 8003e32 <_malloc_r+0x82>
 8003de4:	4629      	mov	r1, r5
 8003de6:	4638      	mov	r0, r7
 8003de8:	f7ff ffc2 	bl	8003d70 <sbrk_aligned>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	4604      	mov	r4, r0
 8003df0:	d14d      	bne.n	8003e8e <_malloc_r+0xde>
 8003df2:	6834      	ldr	r4, [r6, #0]
 8003df4:	4626      	mov	r6, r4
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	d140      	bne.n	8003e7c <_malloc_r+0xcc>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	4638      	mov	r0, r7
 8003e00:	eb04 0803 	add.w	r8, r4, r3
 8003e04:	f000 fb36 	bl	8004474 <_sbrk_r>
 8003e08:	4580      	cmp	r8, r0
 8003e0a:	d13a      	bne.n	8003e82 <_malloc_r+0xd2>
 8003e0c:	6821      	ldr	r1, [r4, #0]
 8003e0e:	3503      	adds	r5, #3
 8003e10:	1a6d      	subs	r5, r5, r1
 8003e12:	f025 0503 	bic.w	r5, r5, #3
 8003e16:	3508      	adds	r5, #8
 8003e18:	2d0c      	cmp	r5, #12
 8003e1a:	bf38      	it	cc
 8003e1c:	250c      	movcc	r5, #12
 8003e1e:	4629      	mov	r1, r5
 8003e20:	4638      	mov	r0, r7
 8003e22:	f7ff ffa5 	bl	8003d70 <sbrk_aligned>
 8003e26:	3001      	adds	r0, #1
 8003e28:	d02b      	beq.n	8003e82 <_malloc_r+0xd2>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	442b      	add	r3, r5
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	e00e      	b.n	8003e50 <_malloc_r+0xa0>
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	1b52      	subs	r2, r2, r5
 8003e36:	d41e      	bmi.n	8003e76 <_malloc_r+0xc6>
 8003e38:	2a0b      	cmp	r2, #11
 8003e3a:	d916      	bls.n	8003e6a <_malloc_r+0xba>
 8003e3c:	1961      	adds	r1, r4, r5
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	6025      	str	r5, [r4, #0]
 8003e42:	bf18      	it	ne
 8003e44:	6059      	strne	r1, [r3, #4]
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	bf08      	it	eq
 8003e4a:	6031      	streq	r1, [r6, #0]
 8003e4c:	5162      	str	r2, [r4, r5]
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	4638      	mov	r0, r7
 8003e52:	f104 060b 	add.w	r6, r4, #11
 8003e56:	f000 fbbd 	bl	80045d4 <__malloc_unlock>
 8003e5a:	f026 0607 	bic.w	r6, r6, #7
 8003e5e:	1d23      	adds	r3, r4, #4
 8003e60:	1af2      	subs	r2, r6, r3
 8003e62:	d0b6      	beq.n	8003dd2 <_malloc_r+0x22>
 8003e64:	1b9b      	subs	r3, r3, r6
 8003e66:	50a3      	str	r3, [r4, r2]
 8003e68:	e7b3      	b.n	8003dd2 <_malloc_r+0x22>
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	bf0c      	ite	eq
 8003e70:	6032      	streq	r2, [r6, #0]
 8003e72:	605a      	strne	r2, [r3, #4]
 8003e74:	e7ec      	b.n	8003e50 <_malloc_r+0xa0>
 8003e76:	4623      	mov	r3, r4
 8003e78:	6864      	ldr	r4, [r4, #4]
 8003e7a:	e7b2      	b.n	8003de2 <_malloc_r+0x32>
 8003e7c:	4634      	mov	r4, r6
 8003e7e:	6876      	ldr	r6, [r6, #4]
 8003e80:	e7b9      	b.n	8003df6 <_malloc_r+0x46>
 8003e82:	230c      	movs	r3, #12
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4638      	mov	r0, r7
 8003e88:	f000 fba4 	bl	80045d4 <__malloc_unlock>
 8003e8c:	e7a1      	b.n	8003dd2 <_malloc_r+0x22>
 8003e8e:	6025      	str	r5, [r4, #0]
 8003e90:	e7de      	b.n	8003e50 <_malloc_r+0xa0>
 8003e92:	bf00      	nop
 8003e94:	200001a4 	.word	0x200001a4

08003e98 <__sfputc_r>:
 8003e98:	6893      	ldr	r3, [r2, #8]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	b410      	push	{r4}
 8003ea0:	6093      	str	r3, [r2, #8]
 8003ea2:	da08      	bge.n	8003eb6 <__sfputc_r+0x1e>
 8003ea4:	6994      	ldr	r4, [r2, #24]
 8003ea6:	42a3      	cmp	r3, r4
 8003ea8:	db01      	blt.n	8003eae <__sfputc_r+0x16>
 8003eaa:	290a      	cmp	r1, #10
 8003eac:	d103      	bne.n	8003eb6 <__sfputc_r+0x1e>
 8003eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb2:	f7ff bc31 	b.w	8003718 <__swbuf_r>
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	1c58      	adds	r0, r3, #1
 8003eba:	6010      	str	r0, [r2, #0]
 8003ebc:	7019      	strb	r1, [r3, #0]
 8003ebe:	4608      	mov	r0, r1
 8003ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <__sfputs_r>:
 8003ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec8:	4606      	mov	r6, r0
 8003eca:	460f      	mov	r7, r1
 8003ecc:	4614      	mov	r4, r2
 8003ece:	18d5      	adds	r5, r2, r3
 8003ed0:	42ac      	cmp	r4, r5
 8003ed2:	d101      	bne.n	8003ed8 <__sfputs_r+0x12>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e007      	b.n	8003ee8 <__sfputs_r+0x22>
 8003ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003edc:	463a      	mov	r2, r7
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff ffda 	bl	8003e98 <__sfputc_r>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d1f3      	bne.n	8003ed0 <__sfputs_r+0xa>
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eec <_vfiprintf_r>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	b09d      	sub	sp, #116	; 0x74
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	4698      	mov	r8, r3
 8003ef8:	4606      	mov	r6, r0
 8003efa:	b118      	cbz	r0, 8003f04 <_vfiprintf_r+0x18>
 8003efc:	6983      	ldr	r3, [r0, #24]
 8003efe:	b90b      	cbnz	r3, 8003f04 <_vfiprintf_r+0x18>
 8003f00:	f7ff fde4 	bl	8003acc <__sinit>
 8003f04:	4b89      	ldr	r3, [pc, #548]	; (800412c <_vfiprintf_r+0x240>)
 8003f06:	429d      	cmp	r5, r3
 8003f08:	d11b      	bne.n	8003f42 <_vfiprintf_r+0x56>
 8003f0a:	6875      	ldr	r5, [r6, #4]
 8003f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f0e:	07d9      	lsls	r1, r3, #31
 8003f10:	d405      	bmi.n	8003f1e <_vfiprintf_r+0x32>
 8003f12:	89ab      	ldrh	r3, [r5, #12]
 8003f14:	059a      	lsls	r2, r3, #22
 8003f16:	d402      	bmi.n	8003f1e <_vfiprintf_r+0x32>
 8003f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f1a:	f7ff fe75 	bl	8003c08 <__retarget_lock_acquire_recursive>
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	071b      	lsls	r3, r3, #28
 8003f22:	d501      	bpl.n	8003f28 <_vfiprintf_r+0x3c>
 8003f24:	692b      	ldr	r3, [r5, #16]
 8003f26:	b9eb      	cbnz	r3, 8003f64 <_vfiprintf_r+0x78>
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f7ff fc46 	bl	80037bc <__swsetup_r>
 8003f30:	b1c0      	cbz	r0, 8003f64 <_vfiprintf_r+0x78>
 8003f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f34:	07dc      	lsls	r4, r3, #31
 8003f36:	d50e      	bpl.n	8003f56 <_vfiprintf_r+0x6a>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	b01d      	add	sp, #116	; 0x74
 8003f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f42:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <_vfiprintf_r+0x244>)
 8003f44:	429d      	cmp	r5, r3
 8003f46:	d101      	bne.n	8003f4c <_vfiprintf_r+0x60>
 8003f48:	68b5      	ldr	r5, [r6, #8]
 8003f4a:	e7df      	b.n	8003f0c <_vfiprintf_r+0x20>
 8003f4c:	4b79      	ldr	r3, [pc, #484]	; (8004134 <_vfiprintf_r+0x248>)
 8003f4e:	429d      	cmp	r5, r3
 8003f50:	bf08      	it	eq
 8003f52:	68f5      	ldreq	r5, [r6, #12]
 8003f54:	e7da      	b.n	8003f0c <_vfiprintf_r+0x20>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	0598      	lsls	r0, r3, #22
 8003f5a:	d4ed      	bmi.n	8003f38 <_vfiprintf_r+0x4c>
 8003f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f5e:	f7ff fe54 	bl	8003c0a <__retarget_lock_release_recursive>
 8003f62:	e7e9      	b.n	8003f38 <_vfiprintf_r+0x4c>
 8003f64:	2300      	movs	r3, #0
 8003f66:	9309      	str	r3, [sp, #36]	; 0x24
 8003f68:	2320      	movs	r3, #32
 8003f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f72:	2330      	movs	r3, #48	; 0x30
 8003f74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004138 <_vfiprintf_r+0x24c>
 8003f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f7c:	f04f 0901 	mov.w	r9, #1
 8003f80:	4623      	mov	r3, r4
 8003f82:	469a      	mov	sl, r3
 8003f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f88:	b10a      	cbz	r2, 8003f8e <_vfiprintf_r+0xa2>
 8003f8a:	2a25      	cmp	r2, #37	; 0x25
 8003f8c:	d1f9      	bne.n	8003f82 <_vfiprintf_r+0x96>
 8003f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f92:	d00b      	beq.n	8003fac <_vfiprintf_r+0xc0>
 8003f94:	465b      	mov	r3, fp
 8003f96:	4622      	mov	r2, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f7ff ff93 	bl	8003ec6 <__sfputs_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f000 80aa 	beq.w	80040fa <_vfiprintf_r+0x20e>
 8003fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fa8:	445a      	add	r2, fp
 8003faa:	9209      	str	r2, [sp, #36]	; 0x24
 8003fac:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a2 	beq.w	80040fa <_vfiprintf_r+0x20e>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fc0:	f10a 0a01 	add.w	sl, sl, #1
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	9307      	str	r3, [sp, #28]
 8003fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8003fce:	4654      	mov	r4, sl
 8003fd0:	2205      	movs	r2, #5
 8003fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd6:	4858      	ldr	r0, [pc, #352]	; (8004138 <_vfiprintf_r+0x24c>)
 8003fd8:	f7fc f90a 	bl	80001f0 <memchr>
 8003fdc:	9a04      	ldr	r2, [sp, #16]
 8003fde:	b9d8      	cbnz	r0, 8004018 <_vfiprintf_r+0x12c>
 8003fe0:	06d1      	lsls	r1, r2, #27
 8003fe2:	bf44      	itt	mi
 8003fe4:	2320      	movmi	r3, #32
 8003fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fea:	0713      	lsls	r3, r2, #28
 8003fec:	bf44      	itt	mi
 8003fee:	232b      	movmi	r3, #43	; 0x2b
 8003ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffa:	d015      	beq.n	8004028 <_vfiprintf_r+0x13c>
 8003ffc:	9a07      	ldr	r2, [sp, #28]
 8003ffe:	4654      	mov	r4, sl
 8004000:	2000      	movs	r0, #0
 8004002:	f04f 0c0a 	mov.w	ip, #10
 8004006:	4621      	mov	r1, r4
 8004008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800400c:	3b30      	subs	r3, #48	; 0x30
 800400e:	2b09      	cmp	r3, #9
 8004010:	d94e      	bls.n	80040b0 <_vfiprintf_r+0x1c4>
 8004012:	b1b0      	cbz	r0, 8004042 <_vfiprintf_r+0x156>
 8004014:	9207      	str	r2, [sp, #28]
 8004016:	e014      	b.n	8004042 <_vfiprintf_r+0x156>
 8004018:	eba0 0308 	sub.w	r3, r0, r8
 800401c:	fa09 f303 	lsl.w	r3, r9, r3
 8004020:	4313      	orrs	r3, r2
 8004022:	9304      	str	r3, [sp, #16]
 8004024:	46a2      	mov	sl, r4
 8004026:	e7d2      	b.n	8003fce <_vfiprintf_r+0xe2>
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	1d19      	adds	r1, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	9103      	str	r1, [sp, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfbb      	ittet	lt
 8004034:	425b      	neglt	r3, r3
 8004036:	f042 0202 	orrlt.w	r2, r2, #2
 800403a:	9307      	strge	r3, [sp, #28]
 800403c:	9307      	strlt	r3, [sp, #28]
 800403e:	bfb8      	it	lt
 8004040:	9204      	strlt	r2, [sp, #16]
 8004042:	7823      	ldrb	r3, [r4, #0]
 8004044:	2b2e      	cmp	r3, #46	; 0x2e
 8004046:	d10c      	bne.n	8004062 <_vfiprintf_r+0x176>
 8004048:	7863      	ldrb	r3, [r4, #1]
 800404a:	2b2a      	cmp	r3, #42	; 0x2a
 800404c:	d135      	bne.n	80040ba <_vfiprintf_r+0x1ce>
 800404e:	9b03      	ldr	r3, [sp, #12]
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	9203      	str	r2, [sp, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	bfb8      	it	lt
 800405a:	f04f 33ff 	movlt.w	r3, #4294967295
 800405e:	3402      	adds	r4, #2
 8004060:	9305      	str	r3, [sp, #20]
 8004062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004148 <_vfiprintf_r+0x25c>
 8004066:	7821      	ldrb	r1, [r4, #0]
 8004068:	2203      	movs	r2, #3
 800406a:	4650      	mov	r0, sl
 800406c:	f7fc f8c0 	bl	80001f0 <memchr>
 8004070:	b140      	cbz	r0, 8004084 <_vfiprintf_r+0x198>
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	eba0 000a 	sub.w	r0, r0, sl
 8004078:	fa03 f000 	lsl.w	r0, r3, r0
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	4303      	orrs	r3, r0
 8004080:	3401      	adds	r4, #1
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004088:	482c      	ldr	r0, [pc, #176]	; (800413c <_vfiprintf_r+0x250>)
 800408a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800408e:	2206      	movs	r2, #6
 8004090:	f7fc f8ae 	bl	80001f0 <memchr>
 8004094:	2800      	cmp	r0, #0
 8004096:	d03f      	beq.n	8004118 <_vfiprintf_r+0x22c>
 8004098:	4b29      	ldr	r3, [pc, #164]	; (8004140 <_vfiprintf_r+0x254>)
 800409a:	bb1b      	cbnz	r3, 80040e4 <_vfiprintf_r+0x1f8>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	3307      	adds	r3, #7
 80040a0:	f023 0307 	bic.w	r3, r3, #7
 80040a4:	3308      	adds	r3, #8
 80040a6:	9303      	str	r3, [sp, #12]
 80040a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040aa:	443b      	add	r3, r7
 80040ac:	9309      	str	r3, [sp, #36]	; 0x24
 80040ae:	e767      	b.n	8003f80 <_vfiprintf_r+0x94>
 80040b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80040b4:	460c      	mov	r4, r1
 80040b6:	2001      	movs	r0, #1
 80040b8:	e7a5      	b.n	8004006 <_vfiprintf_r+0x11a>
 80040ba:	2300      	movs	r3, #0
 80040bc:	3401      	adds	r4, #1
 80040be:	9305      	str	r3, [sp, #20]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f04f 0c0a 	mov.w	ip, #10
 80040c6:	4620      	mov	r0, r4
 80040c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040cc:	3a30      	subs	r2, #48	; 0x30
 80040ce:	2a09      	cmp	r2, #9
 80040d0:	d903      	bls.n	80040da <_vfiprintf_r+0x1ee>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0c5      	beq.n	8004062 <_vfiprintf_r+0x176>
 80040d6:	9105      	str	r1, [sp, #20]
 80040d8:	e7c3      	b.n	8004062 <_vfiprintf_r+0x176>
 80040da:	fb0c 2101 	mla	r1, ip, r1, r2
 80040de:	4604      	mov	r4, r0
 80040e0:	2301      	movs	r3, #1
 80040e2:	e7f0      	b.n	80040c6 <_vfiprintf_r+0x1da>
 80040e4:	ab03      	add	r3, sp, #12
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	462a      	mov	r2, r5
 80040ea:	4b16      	ldr	r3, [pc, #88]	; (8004144 <_vfiprintf_r+0x258>)
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	4630      	mov	r0, r6
 80040f0:	f3af 8000 	nop.w
 80040f4:	4607      	mov	r7, r0
 80040f6:	1c78      	adds	r0, r7, #1
 80040f8:	d1d6      	bne.n	80040a8 <_vfiprintf_r+0x1bc>
 80040fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040fc:	07d9      	lsls	r1, r3, #31
 80040fe:	d405      	bmi.n	800410c <_vfiprintf_r+0x220>
 8004100:	89ab      	ldrh	r3, [r5, #12]
 8004102:	059a      	lsls	r2, r3, #22
 8004104:	d402      	bmi.n	800410c <_vfiprintf_r+0x220>
 8004106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004108:	f7ff fd7f 	bl	8003c0a <__retarget_lock_release_recursive>
 800410c:	89ab      	ldrh	r3, [r5, #12]
 800410e:	065b      	lsls	r3, r3, #25
 8004110:	f53f af12 	bmi.w	8003f38 <_vfiprintf_r+0x4c>
 8004114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004116:	e711      	b.n	8003f3c <_vfiprintf_r+0x50>
 8004118:	ab03      	add	r3, sp, #12
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	462a      	mov	r2, r5
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <_vfiprintf_r+0x258>)
 8004120:	a904      	add	r1, sp, #16
 8004122:	4630      	mov	r0, r6
 8004124:	f000 f880 	bl	8004228 <_printf_i>
 8004128:	e7e4      	b.n	80040f4 <_vfiprintf_r+0x208>
 800412a:	bf00      	nop
 800412c:	08004774 	.word	0x08004774
 8004130:	08004794 	.word	0x08004794
 8004134:	08004754 	.word	0x08004754
 8004138:	080047b4 	.word	0x080047b4
 800413c:	080047be 	.word	0x080047be
 8004140:	00000000 	.word	0x00000000
 8004144:	08003ec7 	.word	0x08003ec7
 8004148:	080047ba 	.word	0x080047ba

0800414c <_printf_common>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	4616      	mov	r6, r2
 8004152:	4699      	mov	r9, r3
 8004154:	688a      	ldr	r2, [r1, #8]
 8004156:	690b      	ldr	r3, [r1, #16]
 8004158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800415c:	4293      	cmp	r3, r2
 800415e:	bfb8      	it	lt
 8004160:	4613      	movlt	r3, r2
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004168:	4607      	mov	r7, r0
 800416a:	460c      	mov	r4, r1
 800416c:	b10a      	cbz	r2, 8004172 <_printf_common+0x26>
 800416e:	3301      	adds	r3, #1
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	0699      	lsls	r1, r3, #26
 8004176:	bf42      	ittt	mi
 8004178:	6833      	ldrmi	r3, [r6, #0]
 800417a:	3302      	addmi	r3, #2
 800417c:	6033      	strmi	r3, [r6, #0]
 800417e:	6825      	ldr	r5, [r4, #0]
 8004180:	f015 0506 	ands.w	r5, r5, #6
 8004184:	d106      	bne.n	8004194 <_printf_common+0x48>
 8004186:	f104 0a19 	add.w	sl, r4, #25
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	6832      	ldr	r2, [r6, #0]
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	42ab      	cmp	r3, r5
 8004192:	dc26      	bgt.n	80041e2 <_printf_common+0x96>
 8004194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004198:	1e13      	subs	r3, r2, #0
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	bf18      	it	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	0692      	lsls	r2, r2, #26
 80041a2:	d42b      	bmi.n	80041fc <_printf_common+0xb0>
 80041a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041a8:	4649      	mov	r1, r9
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c0      	blx	r8
 80041ae:	3001      	adds	r0, #1
 80041b0:	d01e      	beq.n	80041f0 <_printf_common+0xa4>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	68e5      	ldr	r5, [r4, #12]
 80041b6:	6832      	ldr	r2, [r6, #0]
 80041b8:	f003 0306 	and.w	r3, r3, #6
 80041bc:	2b04      	cmp	r3, #4
 80041be:	bf08      	it	eq
 80041c0:	1aad      	subeq	r5, r5, r2
 80041c2:	68a3      	ldr	r3, [r4, #8]
 80041c4:	6922      	ldr	r2, [r4, #16]
 80041c6:	bf0c      	ite	eq
 80041c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041cc:	2500      	movne	r5, #0
 80041ce:	4293      	cmp	r3, r2
 80041d0:	bfc4      	itt	gt
 80041d2:	1a9b      	subgt	r3, r3, r2
 80041d4:	18ed      	addgt	r5, r5, r3
 80041d6:	2600      	movs	r6, #0
 80041d8:	341a      	adds	r4, #26
 80041da:	42b5      	cmp	r5, r6
 80041dc:	d11a      	bne.n	8004214 <_printf_common+0xc8>
 80041de:	2000      	movs	r0, #0
 80041e0:	e008      	b.n	80041f4 <_printf_common+0xa8>
 80041e2:	2301      	movs	r3, #1
 80041e4:	4652      	mov	r2, sl
 80041e6:	4649      	mov	r1, r9
 80041e8:	4638      	mov	r0, r7
 80041ea:	47c0      	blx	r8
 80041ec:	3001      	adds	r0, #1
 80041ee:	d103      	bne.n	80041f8 <_printf_common+0xac>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	3501      	adds	r5, #1
 80041fa:	e7c6      	b.n	800418a <_printf_common+0x3e>
 80041fc:	18e1      	adds	r1, r4, r3
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	2030      	movs	r0, #48	; 0x30
 8004202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004206:	4422      	add	r2, r4
 8004208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800420c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004210:	3302      	adds	r3, #2
 8004212:	e7c7      	b.n	80041a4 <_printf_common+0x58>
 8004214:	2301      	movs	r3, #1
 8004216:	4622      	mov	r2, r4
 8004218:	4649      	mov	r1, r9
 800421a:	4638      	mov	r0, r7
 800421c:	47c0      	blx	r8
 800421e:	3001      	adds	r0, #1
 8004220:	d0e6      	beq.n	80041f0 <_printf_common+0xa4>
 8004222:	3601      	adds	r6, #1
 8004224:	e7d9      	b.n	80041da <_printf_common+0x8e>
	...

08004228 <_printf_i>:
 8004228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	7e0f      	ldrb	r7, [r1, #24]
 800422e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004230:	2f78      	cmp	r7, #120	; 0x78
 8004232:	4691      	mov	r9, r2
 8004234:	4680      	mov	r8, r0
 8004236:	460c      	mov	r4, r1
 8004238:	469a      	mov	sl, r3
 800423a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800423e:	d807      	bhi.n	8004250 <_printf_i+0x28>
 8004240:	2f62      	cmp	r7, #98	; 0x62
 8004242:	d80a      	bhi.n	800425a <_printf_i+0x32>
 8004244:	2f00      	cmp	r7, #0
 8004246:	f000 80d8 	beq.w	80043fa <_printf_i+0x1d2>
 800424a:	2f58      	cmp	r7, #88	; 0x58
 800424c:	f000 80a3 	beq.w	8004396 <_printf_i+0x16e>
 8004250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004258:	e03a      	b.n	80042d0 <_printf_i+0xa8>
 800425a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800425e:	2b15      	cmp	r3, #21
 8004260:	d8f6      	bhi.n	8004250 <_printf_i+0x28>
 8004262:	a101      	add	r1, pc, #4	; (adr r1, 8004268 <_printf_i+0x40>)
 8004264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004268:	080042c1 	.word	0x080042c1
 800426c:	080042d5 	.word	0x080042d5
 8004270:	08004251 	.word	0x08004251
 8004274:	08004251 	.word	0x08004251
 8004278:	08004251 	.word	0x08004251
 800427c:	08004251 	.word	0x08004251
 8004280:	080042d5 	.word	0x080042d5
 8004284:	08004251 	.word	0x08004251
 8004288:	08004251 	.word	0x08004251
 800428c:	08004251 	.word	0x08004251
 8004290:	08004251 	.word	0x08004251
 8004294:	080043e1 	.word	0x080043e1
 8004298:	08004305 	.word	0x08004305
 800429c:	080043c3 	.word	0x080043c3
 80042a0:	08004251 	.word	0x08004251
 80042a4:	08004251 	.word	0x08004251
 80042a8:	08004403 	.word	0x08004403
 80042ac:	08004251 	.word	0x08004251
 80042b0:	08004305 	.word	0x08004305
 80042b4:	08004251 	.word	0x08004251
 80042b8:	08004251 	.word	0x08004251
 80042bc:	080043cb 	.word	0x080043cb
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	602a      	str	r2, [r5, #0]
 80042c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0a3      	b.n	800441c <_printf_i+0x1f4>
 80042d4:	6820      	ldr	r0, [r4, #0]
 80042d6:	6829      	ldr	r1, [r5, #0]
 80042d8:	0606      	lsls	r6, r0, #24
 80042da:	f101 0304 	add.w	r3, r1, #4
 80042de:	d50a      	bpl.n	80042f6 <_printf_i+0xce>
 80042e0:	680e      	ldr	r6, [r1, #0]
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	2e00      	cmp	r6, #0
 80042e6:	da03      	bge.n	80042f0 <_printf_i+0xc8>
 80042e8:	232d      	movs	r3, #45	; 0x2d
 80042ea:	4276      	negs	r6, r6
 80042ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f0:	485e      	ldr	r0, [pc, #376]	; (800446c <_printf_i+0x244>)
 80042f2:	230a      	movs	r3, #10
 80042f4:	e019      	b.n	800432a <_printf_i+0x102>
 80042f6:	680e      	ldr	r6, [r1, #0]
 80042f8:	602b      	str	r3, [r5, #0]
 80042fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042fe:	bf18      	it	ne
 8004300:	b236      	sxthne	r6, r6
 8004302:	e7ef      	b.n	80042e4 <_printf_i+0xbc>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	6820      	ldr	r0, [r4, #0]
 8004308:	1d19      	adds	r1, r3, #4
 800430a:	6029      	str	r1, [r5, #0]
 800430c:	0601      	lsls	r1, r0, #24
 800430e:	d501      	bpl.n	8004314 <_printf_i+0xec>
 8004310:	681e      	ldr	r6, [r3, #0]
 8004312:	e002      	b.n	800431a <_printf_i+0xf2>
 8004314:	0646      	lsls	r6, r0, #25
 8004316:	d5fb      	bpl.n	8004310 <_printf_i+0xe8>
 8004318:	881e      	ldrh	r6, [r3, #0]
 800431a:	4854      	ldr	r0, [pc, #336]	; (800446c <_printf_i+0x244>)
 800431c:	2f6f      	cmp	r7, #111	; 0x6f
 800431e:	bf0c      	ite	eq
 8004320:	2308      	moveq	r3, #8
 8004322:	230a      	movne	r3, #10
 8004324:	2100      	movs	r1, #0
 8004326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800432a:	6865      	ldr	r5, [r4, #4]
 800432c:	60a5      	str	r5, [r4, #8]
 800432e:	2d00      	cmp	r5, #0
 8004330:	bfa2      	ittt	ge
 8004332:	6821      	ldrge	r1, [r4, #0]
 8004334:	f021 0104 	bicge.w	r1, r1, #4
 8004338:	6021      	strge	r1, [r4, #0]
 800433a:	b90e      	cbnz	r6, 8004340 <_printf_i+0x118>
 800433c:	2d00      	cmp	r5, #0
 800433e:	d04d      	beq.n	80043dc <_printf_i+0x1b4>
 8004340:	4615      	mov	r5, r2
 8004342:	fbb6 f1f3 	udiv	r1, r6, r3
 8004346:	fb03 6711 	mls	r7, r3, r1, r6
 800434a:	5dc7      	ldrb	r7, [r0, r7]
 800434c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004350:	4637      	mov	r7, r6
 8004352:	42bb      	cmp	r3, r7
 8004354:	460e      	mov	r6, r1
 8004356:	d9f4      	bls.n	8004342 <_printf_i+0x11a>
 8004358:	2b08      	cmp	r3, #8
 800435a:	d10b      	bne.n	8004374 <_printf_i+0x14c>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	07de      	lsls	r6, r3, #31
 8004360:	d508      	bpl.n	8004374 <_printf_i+0x14c>
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	6861      	ldr	r1, [r4, #4]
 8004366:	4299      	cmp	r1, r3
 8004368:	bfde      	ittt	le
 800436a:	2330      	movle	r3, #48	; 0x30
 800436c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004374:	1b52      	subs	r2, r2, r5
 8004376:	6122      	str	r2, [r4, #16]
 8004378:	f8cd a000 	str.w	sl, [sp]
 800437c:	464b      	mov	r3, r9
 800437e:	aa03      	add	r2, sp, #12
 8004380:	4621      	mov	r1, r4
 8004382:	4640      	mov	r0, r8
 8004384:	f7ff fee2 	bl	800414c <_printf_common>
 8004388:	3001      	adds	r0, #1
 800438a:	d14c      	bne.n	8004426 <_printf_i+0x1fe>
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	b004      	add	sp, #16
 8004392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004396:	4835      	ldr	r0, [pc, #212]	; (800446c <_printf_i+0x244>)
 8004398:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800439c:	6829      	ldr	r1, [r5, #0]
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80043a4:	6029      	str	r1, [r5, #0]
 80043a6:	061d      	lsls	r5, r3, #24
 80043a8:	d514      	bpl.n	80043d4 <_printf_i+0x1ac>
 80043aa:	07df      	lsls	r7, r3, #31
 80043ac:	bf44      	itt	mi
 80043ae:	f043 0320 	orrmi.w	r3, r3, #32
 80043b2:	6023      	strmi	r3, [r4, #0]
 80043b4:	b91e      	cbnz	r6, 80043be <_printf_i+0x196>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f023 0320 	bic.w	r3, r3, #32
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	2310      	movs	r3, #16
 80043c0:	e7b0      	b.n	8004324 <_printf_i+0xfc>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	f043 0320 	orr.w	r3, r3, #32
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	2378      	movs	r3, #120	; 0x78
 80043cc:	4828      	ldr	r0, [pc, #160]	; (8004470 <_printf_i+0x248>)
 80043ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043d2:	e7e3      	b.n	800439c <_printf_i+0x174>
 80043d4:	0659      	lsls	r1, r3, #25
 80043d6:	bf48      	it	mi
 80043d8:	b2b6      	uxthmi	r6, r6
 80043da:	e7e6      	b.n	80043aa <_printf_i+0x182>
 80043dc:	4615      	mov	r5, r2
 80043de:	e7bb      	b.n	8004358 <_printf_i+0x130>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	6826      	ldr	r6, [r4, #0]
 80043e4:	6961      	ldr	r1, [r4, #20]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6028      	str	r0, [r5, #0]
 80043ea:	0635      	lsls	r5, r6, #24
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	d501      	bpl.n	80043f4 <_printf_i+0x1cc>
 80043f0:	6019      	str	r1, [r3, #0]
 80043f2:	e002      	b.n	80043fa <_printf_i+0x1d2>
 80043f4:	0670      	lsls	r0, r6, #25
 80043f6:	d5fb      	bpl.n	80043f0 <_printf_i+0x1c8>
 80043f8:	8019      	strh	r1, [r3, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	4615      	mov	r5, r2
 8004400:	e7ba      	b.n	8004378 <_printf_i+0x150>
 8004402:	682b      	ldr	r3, [r5, #0]
 8004404:	1d1a      	adds	r2, r3, #4
 8004406:	602a      	str	r2, [r5, #0]
 8004408:	681d      	ldr	r5, [r3, #0]
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	2100      	movs	r1, #0
 800440e:	4628      	mov	r0, r5
 8004410:	f7fb feee 	bl	80001f0 <memchr>
 8004414:	b108      	cbz	r0, 800441a <_printf_i+0x1f2>
 8004416:	1b40      	subs	r0, r0, r5
 8004418:	6060      	str	r0, [r4, #4]
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	6123      	str	r3, [r4, #16]
 800441e:	2300      	movs	r3, #0
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004424:	e7a8      	b.n	8004378 <_printf_i+0x150>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	462a      	mov	r2, r5
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	47d0      	blx	sl
 8004430:	3001      	adds	r0, #1
 8004432:	d0ab      	beq.n	800438c <_printf_i+0x164>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	079b      	lsls	r3, r3, #30
 8004438:	d413      	bmi.n	8004462 <_printf_i+0x23a>
 800443a:	68e0      	ldr	r0, [r4, #12]
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	4298      	cmp	r0, r3
 8004440:	bfb8      	it	lt
 8004442:	4618      	movlt	r0, r3
 8004444:	e7a4      	b.n	8004390 <_printf_i+0x168>
 8004446:	2301      	movs	r3, #1
 8004448:	4632      	mov	r2, r6
 800444a:	4649      	mov	r1, r9
 800444c:	4640      	mov	r0, r8
 800444e:	47d0      	blx	sl
 8004450:	3001      	adds	r0, #1
 8004452:	d09b      	beq.n	800438c <_printf_i+0x164>
 8004454:	3501      	adds	r5, #1
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	9903      	ldr	r1, [sp, #12]
 800445a:	1a5b      	subs	r3, r3, r1
 800445c:	42ab      	cmp	r3, r5
 800445e:	dcf2      	bgt.n	8004446 <_printf_i+0x21e>
 8004460:	e7eb      	b.n	800443a <_printf_i+0x212>
 8004462:	2500      	movs	r5, #0
 8004464:	f104 0619 	add.w	r6, r4, #25
 8004468:	e7f5      	b.n	8004456 <_printf_i+0x22e>
 800446a:	bf00      	nop
 800446c:	080047c5 	.word	0x080047c5
 8004470:	080047d6 	.word	0x080047d6

08004474 <_sbrk_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4d06      	ldr	r5, [pc, #24]	; (8004490 <_sbrk_r+0x1c>)
 8004478:	2300      	movs	r3, #0
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc fb8e 	bl	8000ba0 <_sbrk>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_sbrk_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_sbrk_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	200001ac 	.word	0x200001ac

08004494 <__sread>:
 8004494:	b510      	push	{r4, lr}
 8004496:	460c      	mov	r4, r1
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	f000 f8a0 	bl	80045e0 <_read_r>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	bfab      	itete	ge
 80044a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044a6:	89a3      	ldrhlt	r3, [r4, #12]
 80044a8:	181b      	addge	r3, r3, r0
 80044aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044ae:	bfac      	ite	ge
 80044b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80044b2:	81a3      	strhlt	r3, [r4, #12]
 80044b4:	bd10      	pop	{r4, pc}

080044b6 <__swrite>:
 80044b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ba:	461f      	mov	r7, r3
 80044bc:	898b      	ldrh	r3, [r1, #12]
 80044be:	05db      	lsls	r3, r3, #23
 80044c0:	4605      	mov	r5, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	4616      	mov	r6, r2
 80044c6:	d505      	bpl.n	80044d4 <__swrite+0x1e>
 80044c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044cc:	2302      	movs	r3, #2
 80044ce:	2200      	movs	r2, #0
 80044d0:	f000 f868 	bl	80045a4 <_lseek_r>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	4632      	mov	r2, r6
 80044e2:	463b      	mov	r3, r7
 80044e4:	4628      	mov	r0, r5
 80044e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ea:	f000 b817 	b.w	800451c <_write_r>

080044ee <__sseek>:
 80044ee:	b510      	push	{r4, lr}
 80044f0:	460c      	mov	r4, r1
 80044f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f6:	f000 f855 	bl	80045a4 <_lseek_r>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	bf15      	itete	ne
 8004500:	6560      	strne	r0, [r4, #84]	; 0x54
 8004502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800450a:	81a3      	strheq	r3, [r4, #12]
 800450c:	bf18      	it	ne
 800450e:	81a3      	strhne	r3, [r4, #12]
 8004510:	bd10      	pop	{r4, pc}

08004512 <__sclose>:
 8004512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004516:	f000 b813 	b.w	8004540 <_close_r>
	...

0800451c <_write_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d07      	ldr	r5, [pc, #28]	; (800453c <_write_r+0x20>)
 8004520:	4604      	mov	r4, r0
 8004522:	4608      	mov	r0, r1
 8004524:	4611      	mov	r1, r2
 8004526:	2200      	movs	r2, #0
 8004528:	602a      	str	r2, [r5, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f7fc fae7 	bl	8000afe <_write>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_write_r+0x1e>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_write_r+0x1e>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	200001ac 	.word	0x200001ac

08004540 <_close_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4d06      	ldr	r5, [pc, #24]	; (800455c <_close_r+0x1c>)
 8004544:	2300      	movs	r3, #0
 8004546:	4604      	mov	r4, r0
 8004548:	4608      	mov	r0, r1
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	f7fc faf3 	bl	8000b36 <_close>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_close_r+0x1a>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b103      	cbz	r3, 800455a <_close_r+0x1a>
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200001ac 	.word	0x200001ac

08004560 <_fstat_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d07      	ldr	r5, [pc, #28]	; (8004580 <_fstat_r+0x20>)
 8004564:	2300      	movs	r3, #0
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	f7fc faee 	bl	8000b4e <_fstat>
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	d102      	bne.n	800457c <_fstat_r+0x1c>
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	b103      	cbz	r3, 800457c <_fstat_r+0x1c>
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	bd38      	pop	{r3, r4, r5, pc}
 800457e:	bf00      	nop
 8004580:	200001ac 	.word	0x200001ac

08004584 <_isatty_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4d06      	ldr	r5, [pc, #24]	; (80045a0 <_isatty_r+0x1c>)
 8004588:	2300      	movs	r3, #0
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	f7fc faed 	bl	8000b6e <_isatty>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_isatty_r+0x1a>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_isatty_r+0x1a>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	200001ac 	.word	0x200001ac

080045a4 <_lseek_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	; (80045c4 <_lseek_r+0x20>)
 80045a8:	4604      	mov	r4, r0
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fc fae6 	bl	8000b84 <_lseek>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_lseek_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_lseek_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	200001ac 	.word	0x200001ac

080045c8 <__malloc_lock>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__malloc_lock+0x8>)
 80045ca:	f7ff bb1d 	b.w	8003c08 <__retarget_lock_acquire_recursive>
 80045ce:	bf00      	nop
 80045d0:	200001a0 	.word	0x200001a0

080045d4 <__malloc_unlock>:
 80045d4:	4801      	ldr	r0, [pc, #4]	; (80045dc <__malloc_unlock+0x8>)
 80045d6:	f7ff bb18 	b.w	8003c0a <__retarget_lock_release_recursive>
 80045da:	bf00      	nop
 80045dc:	200001a0 	.word	0x200001a0

080045e0 <_read_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d07      	ldr	r5, [pc, #28]	; (8004600 <_read_r+0x20>)
 80045e4:	4604      	mov	r4, r0
 80045e6:	4608      	mov	r0, r1
 80045e8:	4611      	mov	r1, r2
 80045ea:	2200      	movs	r2, #0
 80045ec:	602a      	str	r2, [r5, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f7fc fa68 	bl	8000ac4 <_read>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_read_r+0x1e>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_read_r+0x1e>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	200001ac 	.word	0x200001ac

08004604 <_init>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr

08004610 <_fini>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr
