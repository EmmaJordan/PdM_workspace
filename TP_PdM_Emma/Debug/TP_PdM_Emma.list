
TP_PdM_Emma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  080070e0  080070e0  000170e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c4  080076c4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076cc  080076cc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080076d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000154  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c695  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024eb  00000000  00000000  0002c8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028683  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f93  00000000  00000000  000587cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0156  00000000  00000000  0006975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001598b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003880  00000000  00000000  00159904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080070c4 	.word	0x080070c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	080070c4 	.word	0x080070c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <myADC_init>:
/*	Función: inicialización de conversor AD en un canal (A0 de placa Nucleo)
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
void myADC_init()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;

	//##-1- Configure the ADC peripheral #######################################
	AdcHandle.Instance                   = ADC1;
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <myADC_init+0x98>)
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <myADC_init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
	AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <myADC_init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
	AdcHandle.Init.Resolution            = ADC_RESOLUTION12b;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <myADC_init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
	AdcHandle.Init.ScanConvMode          = DISABLE;                       // Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1)
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <myADC_init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
	AdcHandle.Init.ContinuousConvMode    = ENABLE;                        // Continuous mode disabled to have only 1 conversion at each conversion trig
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <myADC_init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	761a      	strb	r2, [r3, #24]
	AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       // Parameter discarded because sequencer is disabled
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <myADC_init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]
	AdcHandle.Init.NbrOfDiscConversion   = 0;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <myADC_init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
	AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;        // Conversion start trigged at each external event
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <myADC_init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
	AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <myADC_init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
	AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <myADC_init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
	AdcHandle.Init.NbrOfConversion       = 1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <myADC_init+0x98>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	61da      	str	r2, [r3, #28]
	AdcHandle.Init.DMAContinuousRequests = ENABLE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <myADC_init+0x98>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	AdcHandle.Init.EOCSelection          = DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <myADC_init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <myADC_init+0x98>)
 8000f66:	f000 fde5 	bl	8001b34 <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <myADC_init+0x6a>
	{
		printf("Error inicializacion ADC\r\n");
 8000f70:	480e      	ldr	r0, [pc, #56]	; (8000fac <myADC_init+0xa0>)
 8000f72:	f003 fff3 	bl	8004f5c <puts>
	}


	//##-2- Configure ADC regular channel ######################################
	sConfig.Channel      = ADC_CHANNEL_3;
 8000f76:	2303      	movs	r3, #3
 8000f78:	603b      	str	r3, [r7, #0]
	sConfig.Rank         = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
	sConfig.Offset       = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <myADC_init+0x98>)
 8000f8c:	f000 ffb4 	bl	8001ef8 <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <myADC_init+0x90>
	{
		printf("Error configuracion ADC\r\n");
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <myADC_init+0xa4>)
 8000f98:	f003 ffe0 	bl	8004f5c <puts>
	//        IRQHandler.
	/*if(HAL_ADC_Start_DMA(&AdcHandle, (uint32_t*)&uhADCxConvertedValue, 1) != HAL_OK)
	{
		printf("Error inicializacion DMA\r\n");
	}*/
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000208 	.word	0x20000208
 8000fa8:	40012000 	.word	0x40012000
 8000fac:	080070e0 	.word	0x080070e0
 8000fb0:	080070fc 	.word	0x080070fc

08000fb4 <myADC_read>:
 	siguiendo ejemplo ADC_RegularConversion_DMA de STM32Cube_FW_F4_V1.27.0
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
static uint32_t myADC_read()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	uint32_t valorLeidoADC;
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <myADC_read+0x38>)
 8000fbc:	f000 ff8e 	bl	8001edc <HAL_ADC_GetValue>
 8000fc0:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&AdcHandle);
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <myADC_read+0x38>)
 8000fc4:	f000 fdfa 	bl	8001bbc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&AdcHandle,0xFFF);
 8000fc8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <myADC_read+0x38>)
 8000fce:	f000 fefa 	bl	8001dc6 <HAL_ADC_PollForConversion>
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <myADC_read+0x38>)
 8000fd4:	f000 ff82 	bl	8001edc <HAL_ADC_GetValue>
 8000fd8:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&AdcHandle);
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <myADC_read+0x38>)
 8000fdc:	f000 fec0 	bl	8001d60 <HAL_ADC_Stop>
	return valorLeidoADC;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000208 	.word	0x20000208

08000ff0 <myADC_update>:
/*	Función: actualización de lectura AD para mostrar Línea por terminal
	Entrada: ninguna
	Salida: error (0:ok, 1:bloqueo por problema de Línea)
	Nota: es una función privada porque se llama internamente en API_adc */
bool_t myADC_update()
{
 8000ff0:	b598      	push	{r3, r4, r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	lecturaADC = ( myADC_read()+myADC_read()+myADC_read() ) / 3; 	//Promedio de 3 lecturas para disminuir oscilación
 8000ff4:	f7ff ffde 	bl	8000fb4 <myADC_read>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	f7ff ffdb 	bl	8000fb4 <myADC_read>
 8000ffe:	4603      	mov	r3, r0
 8001000:	441c      	add	r4, r3
 8001002:	f7ff ffd7 	bl	8000fb4 <myADC_read>
 8001006:	4603      	mov	r3, r0
 8001008:	4423      	add	r3, r4
 800100a:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <myADC_update+0xd0>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	4a2c      	ldr	r2, [pc, #176]	; (80010c4 <myADC_update+0xd4>)
 8001014:	6013      	str	r3, [r2, #0]
	valorADC   = ((float)lecturaADC/ADC_RESOLUTION)*AMPLITUD_LINEA;	//Escala Linea
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <myADC_update+0xd4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001022:	ee17 0a90 	vmov	r0, s15
 8001026:	f7ff fa9f 	bl	8000568 <__aeabi_f2d>
 800102a:	a323      	add	r3, pc, #140	; (adr r3, 80010b8 <myADC_update+0xc8>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc1c 	bl	800086c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <myADC_update+0xd8>)
 8001042:	f7ff fae9 	bl	8000618 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fdbb 	bl	8000bc8 <__aeabi_d2uiz>
 8001052:	4603      	mov	r3, r0
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <myADC_update+0xdc>)
 8001058:	701a      	strb	r2, [r3, #0]

	if(valorAnteriorADC != valorADC)
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <myADC_update+0xe0>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <myADC_update+0xdc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d01e      	beq.n	80010a4 <myADC_update+0xb4>
	{
		if(valorADC<MIN_LINEA)
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <myADC_update+0xdc>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2bc7      	cmp	r3, #199	; 0xc7
 800106c:	d806      	bhi.n	800107c <myADC_update+0x8c>
		{
			printf("Tension de alimentacion insuficiente!\r\n");
 800106e:	4819      	ldr	r0, [pc, #100]	; (80010d4 <myADC_update+0xe4>)
 8001070:	f003 ff74 	bl	8004f5c <puts>
			error = 1;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <myADC_update+0xe8>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e013      	b.n	80010a4 <myADC_update+0xb4>
		}
		else if(valorADC>MAX_LINEA)
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <myADC_update+0xdc>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2bf0      	cmp	r3, #240	; 0xf0
 8001082:	d906      	bls.n	8001092 <myADC_update+0xa2>
		{
			printf("Tension de alimentacion excedida!\r\n");
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <myADC_update+0xec>)
 8001086:	f003 ff69 	bl	8004f5c <puts>
			error = 1;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <myADC_update+0xe8>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e008      	b.n	80010a4 <myADC_update+0xb4>
		}
		else
		{
			printf("Linea = %dVca\r\n", valorADC);
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <myADC_update+0xdc>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <myADC_update+0xf0>)
 800109a:	f003 fed9 	bl	8004e50 <iprintf>
			error = 0;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <myADC_update+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
		}
	}
	valorAnteriorADC = valorADC; //Guarda valor anterior para evitar escrituras sucesivas iguales
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <myADC_update+0xdc>)
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <myADC_update+0xe0>)
 80010aa:	701a      	strb	r2, [r3, #0]
	return error;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <myADC_update+0xe8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd98      	pop	{r3, r4, r7, pc}
 80010b4:	f3af 8000 	nop.w
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40affe00 	.word	0x40affe00
 80010c0:	aaaaaaab 	.word	0xaaaaaaab
 80010c4:	20000250 	.word	0x20000250
 80010c8:	406f4000 	.word	0x406f4000
 80010cc:	20000255 	.word	0x20000255
 80010d0:	20000254 	.word	0x20000254
 80010d4:	08007118 	.word	0x08007118
 80010d8:	20000256 	.word	0x20000256
 80010dc:	08007140 	.word	0x08007140
 80010e0:	08007164 	.word	0x08007164

080010e4 <debounceFSM_update>:
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
static uint8_t changeState = 0;
uint8_t debounceFSM_update()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	changeState = 0;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <debounceFSM_update+0x20>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	debounceB1_update();
 80010ee:	f000 f80b 	bl	8001108 <debounceB1_update>
	debounceB2_update();
 80010f2:	f000 f86d 	bl	80011d0 <debounceB2_update>
	debounceB3_update();
 80010f6:	f000 f8cf 	bl	8001298 <debounceB3_update>
	return changeState;
 80010fa:	4b02      	ldr	r3, [pc, #8]	; (8001104 <debounceFSM_update+0x20>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000027f 	.word	0x2000027f

08001108 <debounceB1_update>:

void debounceB1_update()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	switch (actualB1State)
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <debounceB1_update+0xb8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d84a      	bhi.n	80011aa <debounceB1_update+0xa2>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <debounceB1_update+0x14>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001141 	.word	0x08001141
 8001124:	0800116f 	.word	0x0800116f
 8001128:	08001183 	.word	0x08001183
	{
		case BUTTON_UP:

					if ( BUTTON_menosTiempo_PRESSED )
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <debounceB1_update+0xbc>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d03a      	beq.n	80011ae <debounceB1_update+0xa6>
					{
						actualB1State = BUTTON_FALLING;
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <debounceB1_update+0xb8>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800113e:	e036      	b.n	80011ae <debounceB1_update+0xa6>

		case BUTTON_FALLING:

					if( delayRead(&delayAntiReboteB1) )
 8001140:	4821      	ldr	r0, [pc, #132]	; (80011c8 <debounceB1_update+0xc0>)
 8001142:	f000 f94b 	bl	80013dc <delayRead>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d032      	beq.n	80011b2 <debounceB1_update+0xaa>
					{
						if (BUTTON_menosTiempo_PRESSED )
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <debounceB1_update+0xbc>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <debounceB1_update+0x5e>
						{
							actualB1State = BUTTON_DOWN;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <debounceB1_update+0xb8>)
 800115a:	2202      	movs	r2, #2
 800115c:	701a      	strb	r2, [r3, #0]
							changeState = 1;
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <debounceB1_update+0xc4>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB1State = BUTTON_UP;
						}
					}
					break;
 8001164:	e025      	b.n	80011b2 <debounceB1_update+0xaa>
							actualB1State = BUTTON_UP;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <debounceB1_update+0xb8>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
					break;
 800116c:	e021      	b.n	80011b2 <debounceB1_update+0xaa>

		case BUTTON_DOWN:

					if ( !BUTTON_menosTiempo_PRESSED )
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <debounceB1_update+0xbc>)
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d11d      	bne.n	80011b6 <debounceB1_update+0xae>
					{
						actualB1State = BUTTON_RAISING;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <debounceB1_update+0xb8>)
 800117c:	2203      	movs	r2, #3
 800117e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001180:	e019      	b.n	80011b6 <debounceB1_update+0xae>

		case BUTTON_RAISING:

					if( delayRead(&delayAntiReboteB1) )
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <debounceB1_update+0xc0>)
 8001184:	f000 f92a 	bl	80013dc <delayRead>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d015      	beq.n	80011ba <debounceB1_update+0xb2>
					{
						if ( !BUTTON_menosTiempo_PRESSED )
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <debounceB1_update+0xbc>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <debounceB1_update+0x9a>
						{
							//buttonB1Released();
							actualB1State = BUTTON_UP;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <debounceB1_update+0xb8>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB1State = BUTTON_DOWN;
						}
					}
					break;
 80011a0:	e00b      	b.n	80011ba <debounceB1_update+0xb2>
							actualB1State = BUTTON_DOWN;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <debounceB1_update+0xb8>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	701a      	strb	r2, [r3, #0]
					break;
 80011a8:	e007      	b.n	80011ba <debounceB1_update+0xb2>
		default:
					break;
 80011aa:	bf00      	nop
 80011ac:	e006      	b.n	80011bc <debounceB1_update+0xb4>
					break;
 80011ae:	bf00      	nop
 80011b0:	e004      	b.n	80011bc <debounceB1_update+0xb4>
					break;
 80011b2:	bf00      	nop
 80011b4:	e002      	b.n	80011bc <debounceB1_update+0xb4>
					break;
 80011b6:	bf00      	nop
 80011b8:	e000      	b.n	80011bc <debounceB1_update+0xb4>
					break;
 80011ba:	bf00      	nop
	}
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000027c 	.word	0x2000027c
 80011c4:	40021800 	.word	0x40021800
 80011c8:	20000258 	.word	0x20000258
 80011cc:	2000027f 	.word	0x2000027f

080011d0 <debounceB2_update>:

void debounceB2_update()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	switch (actualB2State)
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <debounceB2_update+0xb8>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d84a      	bhi.n	8001272 <debounceB2_update+0xa2>
 80011dc:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <debounceB2_update+0x14>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	080011f5 	.word	0x080011f5
 80011e8:	08001209 	.word	0x08001209
 80011ec:	08001237 	.word	0x08001237
 80011f0:	0800124b 	.word	0x0800124b
	{
		case BUTTON_UP:

					if ( BUTTON_masTiempo_PRESSED )
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <debounceB2_update+0xbc>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03a      	beq.n	8001276 <debounceB2_update+0xa6>
					{
						actualB2State = BUTTON_FALLING;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <debounceB2_update+0xb8>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001206:	e036      	b.n	8001276 <debounceB2_update+0xa6>

		case BUTTON_FALLING:

					if( delayRead(&delayAntiReboteB2) )
 8001208:	4821      	ldr	r0, [pc, #132]	; (8001290 <debounceB2_update+0xc0>)
 800120a:	f000 f8e7 	bl	80013dc <delayRead>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d032      	beq.n	800127a <debounceB2_update+0xaa>
					{
						if (BUTTON_masTiempo_PRESSED )
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <debounceB2_update+0xbc>)
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <debounceB2_update+0x5e>
						{
							//buttonB2Pressed();
							actualB2State = BUTTON_DOWN;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <debounceB2_update+0xb8>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
							changeState = 2;
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <debounceB2_update+0xc4>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB2State = BUTTON_UP;
						}
					}
					break;
 800122c:	e025      	b.n	800127a <debounceB2_update+0xaa>
							actualB2State = BUTTON_UP;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <debounceB2_update+0xb8>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
					break;
 8001234:	e021      	b.n	800127a <debounceB2_update+0xaa>

		case BUTTON_DOWN:

					if ( !BUTTON_masTiempo_PRESSED )
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <debounceB2_update+0xbc>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d11d      	bne.n	800127e <debounceB2_update+0xae>
					{
						actualB2State = BUTTON_RAISING;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <debounceB2_update+0xb8>)
 8001244:	2203      	movs	r2, #3
 8001246:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001248:	e019      	b.n	800127e <debounceB2_update+0xae>

		case BUTTON_RAISING:

					if( delayRead(&delayAntiReboteB2) )
 800124a:	4811      	ldr	r0, [pc, #68]	; (8001290 <debounceB2_update+0xc0>)
 800124c:	f000 f8c6 	bl	80013dc <delayRead>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d015      	beq.n	8001282 <debounceB2_update+0xb2>
					{
						if ( !BUTTON_masTiempo_PRESSED )
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <debounceB2_update+0xbc>)
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <debounceB2_update+0x9a>
						{
							//buttonB2Released();
							actualB2State = BUTTON_UP;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <debounceB2_update+0xb8>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB2State = BUTTON_DOWN;
						}
					}
					break;
 8001268:	e00b      	b.n	8001282 <debounceB2_update+0xb2>
							actualB2State = BUTTON_DOWN;
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <debounceB2_update+0xb8>)
 800126c:	2202      	movs	r2, #2
 800126e:	701a      	strb	r2, [r3, #0]
					break;
 8001270:	e007      	b.n	8001282 <debounceB2_update+0xb2>
		default:
					break;
 8001272:	bf00      	nop
 8001274:	e006      	b.n	8001284 <debounceB2_update+0xb4>
					break;
 8001276:	bf00      	nop
 8001278:	e004      	b.n	8001284 <debounceB2_update+0xb4>
					break;
 800127a:	bf00      	nop
 800127c:	e002      	b.n	8001284 <debounceB2_update+0xb4>
					break;
 800127e:	bf00      	nop
 8001280:	e000      	b.n	8001284 <debounceB2_update+0xb4>
					break;
 8001282:	bf00      	nop
	}
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000027d 	.word	0x2000027d
 800128c:	40021800 	.word	0x40021800
 8001290:	20000264 	.word	0x20000264
 8001294:	2000027f 	.word	0x2000027f

08001298 <debounceB3_update>:

void debounceB3_update()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	switch (actualB3State)
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <debounceB3_update+0xb8>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d84a      	bhi.n	800133a <debounceB3_update+0xa2>
 80012a4:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <debounceB3_update+0x14>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012d1 	.word	0x080012d1
 80012b4:	080012ff 	.word	0x080012ff
 80012b8:	08001313 	.word	0x08001313
		{
			case BUTTON_UP:

						if ( BSP_PB_GetState(BUTTON_USER) )
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 fa5d 	bl	800177c <BSP_PB_GetState>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d03a      	beq.n	800133e <debounceB3_update+0xa6>
						{
							actualB3State = BUTTON_FALLING;
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <debounceB3_update+0xb8>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
						}
						break;
 80012ce:	e036      	b.n	800133e <debounceB3_update+0xa6>

			case BUTTON_FALLING:

						if( delayRead(&delayAntiReboteB3) )
 80012d0:	4820      	ldr	r0, [pc, #128]	; (8001354 <debounceB3_update+0xbc>)
 80012d2:	f000 f883 	bl	80013dc <delayRead>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d032      	beq.n	8001342 <debounceB3_update+0xaa>
						{
							if (BSP_PB_GetState(BUTTON_USER) )
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 fa4d 	bl	800177c <BSP_PB_GetState>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <debounceB3_update+0x5e>
							{
								//buttonB3Pressed();
								actualB3State = BUTTON_DOWN;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <debounceB3_update+0xb8>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	701a      	strb	r2, [r3, #0]
								changeState = 3;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <debounceB3_update+0xc0>)
 80012f0:	2203      	movs	r2, #3
 80012f2:	701a      	strb	r2, [r3, #0]
							else
							{
								actualB3State = BUTTON_UP;
							}
						}
						break;
 80012f4:	e025      	b.n	8001342 <debounceB3_update+0xaa>
								actualB3State = BUTTON_UP;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <debounceB3_update+0xb8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
						break;
 80012fc:	e021      	b.n	8001342 <debounceB3_update+0xaa>

			case BUTTON_DOWN:

						if ( !BSP_PB_GetState(BUTTON_USER) )
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 fa3c 	bl	800177c <BSP_PB_GetState>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11d      	bne.n	8001346 <debounceB3_update+0xae>
						{
							actualB3State = BUTTON_RAISING;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <debounceB3_update+0xb8>)
 800130c:	2203      	movs	r2, #3
 800130e:	701a      	strb	r2, [r3, #0]
						}
						break;
 8001310:	e019      	b.n	8001346 <debounceB3_update+0xae>

			case BUTTON_RAISING:

						if( delayRead(&delayAntiReboteB3) )
 8001312:	4810      	ldr	r0, [pc, #64]	; (8001354 <debounceB3_update+0xbc>)
 8001314:	f000 f862 	bl	80013dc <delayRead>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d015      	beq.n	800134a <debounceB3_update+0xb2>
						{
							if ( !BSP_PB_GetState(BUTTON_USER) )
 800131e:	2000      	movs	r0, #0
 8001320:	f000 fa2c 	bl	800177c <BSP_PB_GetState>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <debounceB3_update+0x9a>
							{
								//buttonB3Released();
								actualB3State = BUTTON_UP;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <debounceB3_update+0xb8>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
							else
							{
								actualB3State = BUTTON_DOWN;
							}
						}
						break;
 8001330:	e00b      	b.n	800134a <debounceB3_update+0xb2>
								actualB3State = BUTTON_DOWN;
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <debounceB3_update+0xb8>)
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
						break;
 8001338:	e007      	b.n	800134a <debounceB3_update+0xb2>
			default:
						break;
 800133a:	bf00      	nop
 800133c:	e006      	b.n	800134c <debounceB3_update+0xb4>
						break;
 800133e:	bf00      	nop
 8001340:	e004      	b.n	800134c <debounceB3_update+0xb4>
						break;
 8001342:	bf00      	nop
 8001344:	e002      	b.n	800134c <debounceB3_update+0xb4>
						break;
 8001346:	bf00      	nop
 8001348:	e000      	b.n	800134c <debounceB3_update+0xb4>
						break;
 800134a:	bf00      	nop
		}
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000027e 	.word	0x2000027e
 8001354:	20000270 	.word	0x20000270
 8001358:	2000027f 	.word	0x2000027f

0800135c <debounceFSM_init>:
//Función: carga el estado inicial
//Entrada: ninguna
//Salida:  ninguna
//Nota: es una función pública porque se llama desde fuera del módulo (main)
void debounceFSM_init()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	delayInit(&delayAntiReboteB1, TIME_ANTIREBOTE);
 8001360:	2128      	movs	r1, #40	; 0x28
 8001362:	480b      	ldr	r0, [pc, #44]	; (8001390 <debounceFSM_init+0x34>)
 8001364:	f000 f820 	bl	80013a8 <delayInit>
	delayInit(&delayAntiReboteB2, TIME_ANTIREBOTE);
 8001368:	2128      	movs	r1, #40	; 0x28
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <debounceFSM_init+0x38>)
 800136c:	f000 f81c 	bl	80013a8 <delayInit>
	delayInit(&delayAntiReboteB3, TIME_ANTIREBOTE);
 8001370:	2128      	movs	r1, #40	; 0x28
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <debounceFSM_init+0x3c>)
 8001374:	f000 f818 	bl	80013a8 <delayInit>
	actualB1State = BUTTON_UP;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <debounceFSM_init+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
	actualB2State = BUTTON_UP;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <debounceFSM_init+0x44>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	actualB3State = BUTTON_UP;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <debounceFSM_init+0x48>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000258 	.word	0x20000258
 8001394:	20000264 	.word	0x20000264
 8001398:	20000270 	.word	0x20000270
 800139c:	2000027c 	.word	0x2000027c
 80013a0:	2000027d 	.word	0x2000027d
 80013a4:	2000027e 	.word	0x2000027e

080013a8 <delayInit>:

// Entrada: Puntero al delay y su duración en ms
// Salida: Ninguna
// Función: Inicializa los parámetros internos del delay
void delayInit( delay_t * delay, tick_t duration )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	if((delay != NULL) && (duration > 0))			// Verifica que el puntero sea valido y que la duracion sea un valor positivo
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00b      	beq.n	80013d0 <delayInit+0x28>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <delayInit+0x28>
	{
		delay->startTime = 0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
		delay->duration = duration;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	605a      	str	r2, [r3, #4]
		delay->running = false;						// Inicializa el delay detenido
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	}
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <delayRead>:

// Entrada: Puntero al delay
// Salida: Bool que indica si ya transcurrió el tiempo del delay o no.
// Función: Comprueba si ya transcurrio el tiempo del delay
bool_t delayRead( delay_t * delay )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if((delay != NULL) && (delay > 0))			// Verifica que el puntero sea válido y que la duración sea un valor positivo
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d021      	beq.n	800142e <delayRead+0x52>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01e      	beq.n	800142e <delayRead+0x52>
	{
		if(delay->running)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7a1b      	ldrb	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d010      	beq.n	800141a <delayRead+0x3e>
		{
			if(HAL_GetTick() >= (delay->startTime + delay->duration))
 80013f8:	f000 fb6c 	bl	8001ad4 <HAL_GetTick>
 80013fc:	4601      	mov	r1, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4413      	add	r3, r2
 8001408:	4299      	cmp	r1, r3
 800140a:	d304      	bcc.n	8001416 <delayRead+0x3a>
			{
				delay->running = false;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	721a      	strb	r2, [r3, #8]
				return true;
 8001412:	2301      	movs	r3, #1
 8001414:	e00c      	b.n	8001430 <delayRead+0x54>
			}
			else
			{
				return false;
 8001416:	2300      	movs	r3, #0
 8001418:	e00a      	b.n	8001430 <delayRead+0x54>
			}
		}
		else
		{
			delay->startTime = HAL_GetTick();
 800141a:	f000 fb5b 	bl	8001ad4 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
			delay->running   = true;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	721a      	strb	r2, [r3, #8]
			return false;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <delayRead+0x54>
		}
	}
	else
	{
		return false;
 800142e:	2300      	movs	r3, #0
	}
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <inputsInit>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de los leds de mi placa (diferente a Nucleo)
void inputsInit()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f946 	bl	80016d0 <BSP_PB_Init>

	/* Initialize Button for -Time & +Time */
	RCC->AHB1ENR |= (1<<6); //Habilita puerto G
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <inputsInit+0x64>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <inputsInit+0x64>)
 800144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144e:	6313      	str	r3, [r2, #48]	; 0x30

	//PG0 -Time
	GPIOG->MODER &=~ (3<<0);   			//00 --> entrada
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <inputsInit+0x68>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <inputsInit+0x68>)
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<0);			//10 --> pull down
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <inputsInit+0x68>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <inputsInit+0x68>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<1);
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <inputsInit+0x68>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <inputsInit+0x68>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	60d3      	str	r3, [r2, #12]

	//PG1 +Time
	GPIOG->MODER &=~ (3<<2);   			//00 --> entrada
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <inputsInit+0x68>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <inputsInit+0x68>)
 800147a:	f023 030c 	bic.w	r3, r3, #12
 800147e:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<2);			//10 --> pull down
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <inputsInit+0x68>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <inputsInit+0x68>)
 8001486:	f023 0304 	bic.w	r3, r3, #4
 800148a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<3);
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <inputsInit+0x68>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <inputsInit+0x68>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40021800 	.word	0x40021800

080014a4 <outputsInit>:

#define pinBuzzer 2
void outputsInit()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f88d 	bl	80015c8 <BSP_LED_Init>
	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED2);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f000 f88a 	bl	80015c8 <BSP_LED_Init>
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED3);
 80014b4:	2002      	movs	r0, #2
 80014b6:	f000 f887 	bl	80015c8 <BSP_LED_Init>
	/* Initialize Buzzer */
	RCC->AHB1ENR   |=  (1<<4); //Habilita puerto E <-- para PE2 (buzzer)
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <outputsInit+0x64>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <outputsInit+0x64>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER   &=~ (1<<(pinBuzzer*2+1));
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <outputsInit+0x68>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <outputsInit+0x68>)
 80014cc:	f023 0320 	bic.w	r3, r3, #32
 80014d0:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |=  (1<<pinBuzzer*2);
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <outputsInit+0x68>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0d      	ldr	r2, [pc, #52]	; (800150c <outputsInit+0x68>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER  &=~ (1<<pinBuzzer);
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <outputsInit+0x68>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <outputsInit+0x68>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6053      	str	r3, [r2, #4]
	GPIOE->OSPEEDR &=~ (3<<pinBuzzer*3);
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <outputsInit+0x68>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <outputsInit+0x68>)
 80014f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80014f4:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR   &=~ (3<<pinBuzzer*3);
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <outputsInit+0x68>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <outputsInit+0x68>)
 80014fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001500:	60d3      	str	r3, [r2, #12]
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000

08001510 <myUART_init>:
 	 Entradas: ninguna
 	 Salida: booleando TRUE si se inicializó correctamente, FALSE si falló
 	 Es pública porque se llama desde fuera del módulo (main)
*/
bool_t myUART_init()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	UartHandle.Instance        = USART3; //uart 1 para placa discovery
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <myUART_init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <myUART_init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = myBaudRate;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <myUART_init+0x74>)
 800151c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001520:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <myUART_init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <myUART_init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_ODD;
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <myUART_init+0x74>)
 8001530:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001534:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <myUART_init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <myUART_init+0x74>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <myUART_init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <myUART_init+0x74>)
 800154a:	f002 faa3 	bl	8003a94 <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <myUART_init+0x4e>
	{
		printf("Error en la inicializacion de la UART\n\r");
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <myUART_init+0x7c>)
 8001556:	f003 fc7b 	bl	8004e50 <iprintf>
		return false;
 800155a:	2300      	movs	r3, #0
 800155c:	e00f      	b.n	800157e <myUART_init+0x6e>
	}
	printf("TP final PdM\r\n");
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <myUART_init+0x80>)
 8001560:	f003 fcfc 	bl	8004f5c <puts>
	printf("Programacion de Microcontroladores\r\n");
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <myUART_init+0x84>)
 8001566:	f003 fcf9 	bl	8004f5c <puts>
	printf("Carrera de Especializacion en Sistemas Embebidos\r\n");
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <myUART_init+0x88>)
 800156c:	f003 fcf6 	bl	8004f5c <puts>
	printf("Joan Emmanuel Jordan\r\n\r\n");
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <myUART_init+0x8c>)
 8001572:	f003 fcf3 	bl	8004f5c <puts>
	printf("Tiempo de disparo = 100ms\r\n");
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <myUART_init+0x90>)
 8001578:	f003 fcf0 	bl	8004f5c <puts>
	return true;
 800157c:	2301      	movs	r3, #1
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000280 	.word	0x20000280
 8001588:	40004800 	.word	0x40004800
 800158c:	08007174 	.word	0x08007174
 8001590:	0800719c 	.word	0x0800719c
 8001594:	080071ac 	.word	0x080071ac
 8001598:	080071d0 	.word	0x080071d0
 800159c:	08007204 	.word	0x08007204
 80015a0:	0800721c 	.word	0x0800721c

080015a4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  // Place your implementation of fputc here
  // e.g. write a character to the USART3 and Loop until the end of transmission
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 80015ac:	1d39      	adds	r1, r7, #4
 80015ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b2:	2201      	movs	r2, #1
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <__io_putchar+0x20>)
 80015b6:	f002 faba 	bl	8003b2e <HAL_UART_Transmit>

  return ch;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000280 	.word	0x20000280

080015c8 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10e      	bne.n	80015f6 <BSP_LED_Init+0x2e>
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <BSP_LED_Init+0x94>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a1e      	ldr	r2, [pc, #120]	; (800165c <BSP_LED_Init+0x94>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <BSP_LED_Init+0x94>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	e00d      	b.n	8001612 <BSP_LED_Init+0x4a>
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <BSP_LED_Init+0x94>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <BSP_LED_Init+0x94>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <BSP_LED_Init+0x94>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <BSP_LED_Init+0x98>)
 8001616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001624:	2302      	movs	r3, #2
 8001626:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <BSP_LED_Init+0x9c>)
 800162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001630:	f107 0214 	add.w	r2, r7, #20
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f001 fa88 	bl	8002b4c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <BSP_LED_Init+0x9c>)
 8001640:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4a06      	ldr	r2, [pc, #24]	; (8001660 <BSP_LED_Init+0x98>)
 8001648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164c:	2200      	movs	r2, #0
 800164e:	4619      	mov	r1, r3
 8001650:	f001 fc40 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	080072c0 	.word	0x080072c0
 8001664:	20000000 	.word	0x20000000

08001668 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <BSP_LED_On+0x2c>)
 8001676:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <BSP_LED_On+0x30>)
 800167e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	f001 fc25 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000000 	.word	0x20000000
 8001698:	080072c0 	.word	0x080072c0

0800169c <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <BSP_LED_Off+0x2c>)
 80016aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <BSP_LED_Off+0x30>)
 80016b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	f001 fc0b 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000000 	.word	0x20000000
 80016cc:	080072c0 	.word	0x080072c0

080016d0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <BSP_PB_Init+0xa4>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <BSP_PB_Init+0xa4>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6313      	str	r3, [r2, #48]	; 0x30
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <BSP_PB_Init+0xa4>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d112      	bne.n	8001728 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4a18      	ldr	r2, [pc, #96]	; (8001778 <BSP_PB_Init+0xa8>)
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	f107 020c 	add.w	r2, r7, #12
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fa12 	bl	8002b4c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001728:	79bb      	ldrb	r3, [r7, #6]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d11d      	bne.n	800176a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001738:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800173c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <BSP_PB_Init+0xa8>)
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	f107 020c 	add.w	r2, r7, #12
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f001 f9fd 	bl	8002b4c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001752:	2328      	movs	r3, #40	; 0x28
 8001754:	b25b      	sxtb	r3, r3
 8001756:	2200      	movs	r2, #0
 8001758:	210f      	movs	r1, #15
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fed5 	bl	800250a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001760:	2328      	movs	r3, #40	; 0x28
 8001762:	b25b      	sxtb	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f000 feec 	bl	8002542 <HAL_NVIC_EnableIRQ>
  }
}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	2000000c 	.word	0x2000000c

0800177c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <BSP_PB_GetState+0x28>)
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fb85 	bl	8002ea4 <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <SystemInit+0x60>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a15      	ldr	r2, [pc, #84]	; (8001808 <SystemInit+0x60>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <SystemInit+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <SystemInit+0x64>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <SystemInit+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <SystemInit+0x64>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <SystemInit+0x64>)
 80017d4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <SystemInit+0x64>)
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <SystemInit+0x68>)
 80017e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <SystemInit+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <SystemInit+0x64>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SystemInit+0x60>)
 80017f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017fc:	609a      	str	r2, [r3, #8]
#endif
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	40023800 	.word	0x40023800
 8001810:	24003010 	.word	0x24003010

08001814 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001868:	f000 f920 	bl	8001aac <HAL_IncTick>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <DMA2_Stream0_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <DMA2_Stream0_IRQHandler+0x14>)
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	4618      	mov	r0, r3
 800187a:	f000 ff2b 	bl	80026d4 <HAL_DMA_IRQHandler>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000208 	.word	0x20000208

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018a2:	f002 fe39 	bl	8004518 <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
	return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ca:	e7fe      	b.n	80018ca <_exit+0x12>

080018cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
	}

return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e009      	b.n	800192c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fe3f 	bl	80015a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf1      	blt.n	8001918 <_write+0x12>
	}
	return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_close>:

int _close(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001966:	605a      	str	r2, [r3, #4]
	return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f002 fd9e 	bl	8004518 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20030000 	.word	0x20030000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	200002c4 	.word	0x200002c4
 8001a10:	20000340 	.word	0x20000340

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_Init+0x34>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_Init+0x34>)
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a22:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_Init+0x34>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_Init+0x34>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 fd5f 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	200f      	movs	r0, #15
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f001 fb3a 	bl	80030b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fd77 	bl	800255e <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f000 fd3f 	bl	800250a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000010 	.word	0x20000010
 8001aa4:	20000018 	.word	0x20000018
 8001aa8:	20000014 	.word	0x20000014

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000018 	.word	0x20000018
 8001ad0:	200002c8 	.word	0x200002c8

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200002c8 	.word	0x200002c8

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000018 	.word	0x20000018

08001b34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e033      	b.n	8001bb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f001 f9d8 	bl	8002f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b7a:	f023 0302 	bic.w	r3, r3, #2
 8001b7e:	f043 0202 	orr.w	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fae8 	bl	800215c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f023 0303 	bic.w	r3, r3, #3
 8001b9a:	f043 0201 	orr.w	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba2:	e001      	b.n	8001ba8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_Start+0x1a>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e0b2      	b.n	8001d3c <HAL_ADC_Start+0x180>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d018      	beq.n	8001c1e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfc:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <HAL_ADC_Start+0x18c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_ADC_Start+0x190>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0c9a      	lsrs	r2, r3, #18
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d17a      	bne.n	8001d22 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c6a:	d106      	bne.n	8001c7a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f023 0206 	bic.w	r2, r3, #6
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
 8001c78:	e002      	b.n	8001c80 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_ADC_Start+0x194>)
 8001c8a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c94:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d12a      	bne.n	8001cf8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <HAL_ADC_Start+0x198>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d015      	beq.n	8001cd8 <HAL_ADC_Start+0x11c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <HAL_ADC_Start+0x19c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d105      	bne.n	8001cc2 <HAL_ADC_Start+0x106>
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_ADC_Start+0x194>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <HAL_ADC_Start+0x1a0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d136      	bne.n	8001d3a <HAL_ADC_Start+0x17e>
 8001ccc:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_ADC_Start+0x194>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d130      	bne.n	8001d3a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d129      	bne.n	8001d3a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	e020      	b.n	8001d3a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <HAL_ADC_Start+0x198>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d11b      	bne.n	8001d3a <HAL_ADC_Start+0x17e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d114      	bne.n	8001d3a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e00b      	b.n	8001d3a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	40012300 	.word	0x40012300
 8001d54:	40012000 	.word	0x40012000
 8001d58:	40012100 	.word	0x40012100
 8001d5c:	40012200 	.word	0x40012200

08001d60 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Stop+0x16>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e021      	b.n	8001dba <HAL_ADC_Stop+0x5a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de2:	d113      	bne.n	8001e0c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df2:	d10b      	bne.n	8001e0c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e063      	b.n	8001ed4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e0c:	f7ff fe62 	bl	8001ad4 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e12:	e021      	b.n	8001e58 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d01d      	beq.n	8001e58 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_PollForConversion+0x6c>
 8001e22:	f7ff fe57 	bl	8001ad4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d212      	bcs.n	8001e58 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d00b      	beq.n	8001e58 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e03d      	b.n	8001ed4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d1d6      	bne.n	8001e14 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 0212 	mvn.w	r2, #18
 8001e6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d123      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11f      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d111      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e113      	b.n	800213c <HAL_ADC_ConfigChannel+0x244>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d925      	bls.n	8001f70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	3b1e      	subs	r3, #30
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43da      	mvns	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	400a      	ands	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68d9      	ldr	r1, [r3, #12]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4403      	add	r3, r0
 8001f62:	3b1e      	subs	r3, #30
 8001f64:	409a      	lsls	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	e022      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6919      	ldr	r1, [r3, #16]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	2207      	movs	r2, #7
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	400a      	ands	r2, r1
 8001f92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6919      	ldr	r1, [r3, #16]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4403      	add	r3, r0
 8001fac:	409a      	lsls	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d824      	bhi.n	8002008 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b05      	subs	r3, #5
 8001fd0:	221f      	movs	r2, #31
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b05      	subs	r3, #5
 8001ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
 8002006:	e04c      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d824      	bhi.n	800205a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b23      	subs	r3, #35	; 0x23
 8002022:	221f      	movs	r2, #31
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43da      	mvns	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	400a      	ands	r2, r1
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b23      	subs	r3, #35	; 0x23
 800204c:	fa00 f203 	lsl.w	r2, r0, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
 8002058:	e023      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b41      	subs	r3, #65	; 0x41
 800206c:	221f      	movs	r2, #31
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	400a      	ands	r2, r1
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b41      	subs	r3, #65	; 0x41
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_ADC_ConfigChannel+0x250>)
 80020a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a28      	ldr	r2, [pc, #160]	; (800214c <HAL_ADC_ConfigChannel+0x254>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d10f      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1d8>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d10b      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_ADC_ConfigChannel+0x254>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d12b      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x23a>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_ADC_ConfigChannel+0x258>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x1f4>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b11      	cmp	r3, #17
 80020ea:	d122      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_ADC_ConfigChannel+0x258>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d111      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_ADC_ConfigChannel+0x25c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_ADC_ConfigChannel+0x260>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	0c9a      	lsrs	r2, r3, #18
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002124:	e002      	b.n	800212c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3b01      	subs	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40012300 	.word	0x40012300
 800214c:	40012000 	.word	0x40012000
 8002150:	10000012 	.word	0x10000012
 8002154:	20000010 	.word	0x20000010
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002164:	4b79      	ldr	r3, [pc, #484]	; (800234c <ADC_Init+0x1f0>)
 8002166:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	431a      	orrs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	021a      	lsls	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6899      	ldr	r1, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	4a58      	ldr	r2, [pc, #352]	; (8002350 <ADC_Init+0x1f4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d022      	beq.n	800223a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002202:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6899      	ldr	r1, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e00f      	b.n	800225a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002258:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0202 	bic.w	r2, r2, #2
 8002268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e1b      	ldrb	r3, [r3, #24]
 8002274:	005a      	lsls	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01b      	beq.n	80022c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002296:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	3b01      	subs	r3, #1
 80022b4:	035a      	lsls	r2, r3, #13
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e007      	b.n	80022d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	051a      	lsls	r2, r3, #20
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6899      	ldr	r1, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002312:	025a      	lsls	r2, r3, #9
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	029a      	lsls	r2, r3, #10
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40012300 	.word	0x40012300
 8002350:	0f000001 	.word	0x0f000001

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4907      	ldr	r1, [pc, #28]	; (80023f0 <__NVIC_EnableIRQ+0x38>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c0:	d301      	bcc.n	80024c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <SysTick_Config+0x40>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ce:	210f      	movs	r1, #15
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f7ff ff8e 	bl	80023f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <SysTick_Config+0x40>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <SysTick_Config+0x40>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff29 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff3e 	bl	800239c <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff8e 	bl	8002448 <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5d 	bl	80023f4 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff31 	bl	80023b8 <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffa2 	bl	80024b0 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff faa6 	bl	8001ad4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e099      	b.n	80026c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b4:	e00f      	b.n	80025d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b6:	f7ff fa8d 	bl	8001ad4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d908      	bls.n	80025d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e078      	b.n	80026c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e8      	bne.n	80025b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <HAL_DMA_Init+0x158>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4313      	orrs	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f023 0307 	bic.w	r3, r3, #7
 8002656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b04      	cmp	r3, #4
 8002668:	d117      	bne.n	800269a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f9e9 	bl	8002a54 <DMA_CheckFifoParam>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002696:	2301      	movs	r3, #1
 8002698:	e016      	b.n	80026c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f9a0 	bl	80029e8 <DMA_CalcBaseAndBitshift>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	223f      	movs	r2, #63	; 0x3f
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	f010803f 	.word	0xf010803f

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e0:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_DMA_IRQHandler+0x248>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a8e      	ldr	r2, [pc, #568]	; (8002920 <HAL_DMA_IRQHandler+0x24c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2208      	movs	r2, #8
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2204      	movs	r2, #4
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2204      	movs	r2, #4
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2210      	movs	r2, #16
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d043      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2210      	movs	r2, #16
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
 8002802:	e01f      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e016      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2220      	movs	r2, #32
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 808f 	beq.w	8002974 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8087 	beq.w	8002974 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2220      	movs	r2, #32
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b05      	cmp	r3, #5
 800287c:	d136      	bne.n	80028ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_IRQHandler+0x1da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0208 	bic.w	r2, r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07e      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
        }
        return;
 80028ea:	e079      	b.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01d      	beq.n	8002936 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d031      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e02c      	b.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
 800291a:	bf00      	nop
 800291c:	20000010 	.word	0x20000010
 8002920:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e01e      	b.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10f      	bne.n	8002964 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0210 	bic.w	r2, r2, #16
 8002952:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2b00      	cmp	r3, #0
 800297a:	d032      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2205      	movs	r2, #5
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3301      	adds	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d307      	bcc.n	80029bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f2      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x2cc>
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
 80029de:	e000      	b.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029e0:	bf00      	nop
    }
  }
}
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3b10      	subs	r3, #16
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <DMA_CalcBaseAndBitshift+0x64>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <DMA_CalcBaseAndBitshift+0x68>)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d909      	bls.n	8002a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	1d1a      	adds	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	659a      	str	r2, [r3, #88]	; 0x58
 8002a28:	e007      	b.n	8002a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	aaaaaaab 	.word	0xaaaaaaab
 8002a50:	080072e0 	.word	0x080072e0

08002a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11f      	bne.n	8002aae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d856      	bhi.n	8002b22 <DMA_CheckFifoParam+0xce>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <DMA_CheckFifoParam+0x28>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a9f 	.word	0x08002a9f
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002b23 	.word	0x08002b23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d046      	beq.n	8002b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9c:	e043      	b.n	8002b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aa6:	d140      	bne.n	8002b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aac:	e03d      	b.n	8002b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab6:	d121      	bne.n	8002afc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d837      	bhi.n	8002b2e <DMA_CheckFifoParam+0xda>
 8002abe:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <DMA_CheckFifoParam+0x70>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002adb 	.word	0x08002adb
 8002acc:	08002ad5 	.word	0x08002ad5
 8002ad0:	08002aed 	.word	0x08002aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e030      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d025      	beq.n	8002b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aea:	e022      	b.n	8002b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002af4:	d11f      	bne.n	8002b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002afa:	e01c      	b.n	8002b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d903      	bls.n	8002b0a <DMA_CheckFifoParam+0xb6>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d003      	beq.n	8002b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b08:	e018      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0e:	e015      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00e      	beq.n	8002b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e00b      	b.n	8002b3a <DMA_CheckFifoParam+0xe6>
      break;
 8002b22:	bf00      	nop
 8002b24:	e00a      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
 8002b28:	e008      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e006      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e004      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e177      	b.n	8002e58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f040 8166 	bne.w	8002e52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d005      	beq.n	8002b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d130      	bne.n	8002c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 0201 	and.w	r2, r3, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d017      	beq.n	8002c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d123      	bne.n	8002c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	08da      	lsrs	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3208      	adds	r2, #8
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80c0 	beq.w	8002e52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cee:	4a61      	ldr	r2, [pc, #388]	; (8002e74 <HAL_GPIO_Init+0x328>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d037      	beq.n	8002d8a <HAL_GPIO_Init+0x23e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_GPIO_Init+0x330>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_GPIO_Init+0x23a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a56      	ldr	r2, [pc, #344]	; (8002e80 <HAL_GPIO_Init+0x334>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <HAL_GPIO_Init+0x236>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a55      	ldr	r2, [pc, #340]	; (8002e84 <HAL_GPIO_Init+0x338>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x232>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a54      	ldr	r2, [pc, #336]	; (8002e88 <HAL_GPIO_Init+0x33c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x22e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a53      	ldr	r2, [pc, #332]	; (8002e8c <HAL_GPIO_Init+0x340>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x22a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_GPIO_Init+0x344>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <HAL_GPIO_Init+0x348>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_GPIO_Init+0x34c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d62:	2309      	movs	r3, #9
 8002d64:	e012      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d66:	230a      	movs	r3, #10
 8002d68:	e010      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00e      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00c      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4093      	lsls	r3, r2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d9c:	4935      	ldr	r1, [pc, #212]	; (8002e74 <HAL_GPIO_Init+0x328>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df8:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f ae84 	bls.w	8002b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40013800 	.word	0x40013800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	40021c00 	.word	0x40021c00
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40022400 	.word	0x40022400
 8002ea0:	40013c00 	.word	0x40013c00

08002ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	e001      	b.n	8002ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_ADC_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* ADC1 Periph clock enable */
  ADCx_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	4a39      	ldr	r2, [pc, #228]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f20:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
  /* Enable GPIO clock ****************************************/
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4b33      	ldr	r3, [pc, #204]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4a32      	ldr	r2, [pc, #200]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3c:	4b30      	ldr	r3, [pc, #192]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
  /* Enable DMA2 clock */
  DMAx_CLK_ENABLE();
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f56:	6313      	str	r3, [r2, #48]	; 0x30
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_ADC_MspInit+0xf8>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* ADC Channel GPIO pin configuration */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
 8002f64:	2308      	movs	r3, #8
 8002f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4619      	mov	r1, r3
 8002f76:	4823      	ldr	r0, [pc, #140]	; (8003004 <HAL_ADC_MspInit+0xfc>)
 8002f78:	f7ff fde8 	bl	8002b4c <HAL_GPIO_Init>

  /*##-3- Configure the DMA streams ##########################################*/
  /* Set the parameters to be configured */
  hdma_adc.Instance = ADCx_DMA_STREAM;
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002f7e:	4a23      	ldr	r2, [pc, #140]	; (800300c <HAL_ADC_MspInit+0x104>)
 8002f80:	601a      	str	r2, [r3, #0]
  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
  hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9a:	611a      	str	r2, [r3, #16]
  hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fa2:	615a      	str	r2, [r3, #20]
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002faa:	619a      	str	r2, [r3, #24]
  hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb2:	61da      	str	r2, [r3, #28]
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fba:	621a      	str	r2, [r3, #32]
  hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30

  HAL_DMA_Init(&hdma_adc);
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fd6:	f7ff facf 	bl	8002578 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe0:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_ADC_MspInit+0x100>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6393      	str	r3, [r2, #56]	; 0x38

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2038      	movs	r0, #56	; 0x38
 8002fec:	f7ff fa8d 	bl	800250a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 8002ff0:	2038      	movs	r0, #56	; 0x38
 8002ff2:	f7ff faa6 	bl	8002542 <HAL_NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3728      	adds	r7, #40	; 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000
 8003008:	200002cc 	.word	0x200002cc
 800300c:	40026410 	.word	0x40026410

08003010 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_UART_MspInit+0x9c>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <HAL_UART_MspInit+0x9c>)
 8003022:	f043 0308 	orr.w	r3, r3, #8
 8003026:	6313      	str	r3, [r2, #48]	; 0x30
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_UART_MspInit+0x9c>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_UART_MspInit+0x9c>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <HAL_UART_MspInit+0x9c>)
 800303e:	f043 0308 	orr.w	r3, r3, #8
 8003042:	6313      	str	r3, [r2, #48]	; 0x30
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_UART_MspInit+0x9c>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_UART_MspInit+0x9c>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a14      	ldr	r2, [pc, #80]	; (80030ac <HAL_UART_MspInit+0x9c>)
 800305a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_UART_MspInit+0x9c>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800306c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003076:	2301      	movs	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800307a:	2303      	movs	r3, #3
 800307c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800307e:	2307      	movs	r3, #7
 8003080:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	4809      	ldr	r0, [pc, #36]	; (80030b0 <HAL_UART_MspInit+0xa0>)
 800308a:	f7ff fd5f 	bl	8002b4c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800308e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003094:	2307      	movs	r3, #7
 8003096:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4619      	mov	r1, r3
 800309e:	4804      	ldr	r0, [pc, #16]	; (80030b0 <HAL_UART_MspInit+0xa0>)
 80030a0:	f7ff fd54 	bl	8002b4c <HAL_GPIO_Init>
}
 80030a4:	bf00      	nop
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020c00 	.word	0x40020c00

080030b4 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0

}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_PWREx_EnableOverDrive+0x90>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_PWREx_EnableOverDrive+0x90>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_PWREx_EnableOverDrive+0x90>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_PWREx_EnableOverDrive+0x94>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7fe fcf0 	bl	8001ad4 <HAL_GetTick>
 80030f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030f6:	e009      	b.n	800310c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030f8:	f7fe fcec 	bl	8001ad4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003106:	d901      	bls.n	800310c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e01f      	b.n	800314c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_PWREx_EnableOverDrive+0x98>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d1ee      	bne.n	80030f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_PWREx_EnableOverDrive+0x9c>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003120:	f7fe fcd8 	bl	8001ad4 <HAL_GetTick>
 8003124:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003126:	e009      	b.n	800313c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003128:	f7fe fcd4 	bl	8001ad4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003136:	d901      	bls.n	800313c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e007      	b.n	800314c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_PWREx_EnableOverDrive+0x98>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003148:	d1ee      	bne.n	8003128 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	420e0040 	.word	0x420e0040
 800315c:	40007000 	.word	0x40007000
 8003160:	420e0044 	.word	0x420e0044

08003164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e267      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d075      	beq.n	800326e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003182:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b04      	cmp	r3, #4
 800318c:	d00c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318e:	4b85      	ldr	r3, [pc, #532]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003196:	2b08      	cmp	r3, #8
 8003198:	d112      	bne.n	80031c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319a:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	4b7e      	ldr	r3, [pc, #504]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d05b      	beq.n	800326c <HAL_RCC_OscConfig+0x108>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d157      	bne.n	800326c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e242      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d106      	bne.n	80031d8 <HAL_RCC_OscConfig+0x74>
 80031ca:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a75      	ldr	r2, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e01d      	b.n	8003214 <HAL_RCC_OscConfig+0xb0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x98>
 80031e2:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6f      	ldr	r2, [pc, #444]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a6c      	ldr	r2, [pc, #432]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0xb0>
 80031fc:	4b69      	ldr	r3, [pc, #420]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a68      	ldr	r2, [pc, #416]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b66      	ldr	r3, [pc, #408]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a65      	ldr	r2, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fc5a 	bl	8001ad4 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003224:	f7fe fc56 	bl	8001ad4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e207      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b5b      	ldr	r3, [pc, #364]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0xc0>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe fc46 	bl	8001ad4 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe fc42 	bl	8001ad4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1f3      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	4b51      	ldr	r3, [pc, #324]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0xe8>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d063      	beq.n	8003342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327a:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800328e:	2b08      	cmp	r3, #8
 8003290:	d11c      	bne.n	80032cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d116      	bne.n	80032cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_RCC_OscConfig+0x152>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e1c7      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4937      	ldr	r1, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	e03a      	b.n	8003342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_OscConfig+0x244>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fbfb 	bl	8001ad4 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe fbf7 	bl	8001ad4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1a8      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4925      	ldr	r1, [pc, #148]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
 8003314:	e015      	b.n	8003342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_RCC_OscConfig+0x244>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fbda 	bl	8001ad4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003324:	f7fe fbd6 	bl	8001ad4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e187      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d036      	beq.n	80033bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_RCC_OscConfig+0x248>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fe fbba 	bl	8001ad4 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003364:	f7fe fbb6 	bl	8001ad4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e167      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCC_OscConfig+0x240>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x200>
 8003382:	e01b      	b.n	80033bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_RCC_OscConfig+0x248>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fe fba3 	bl	8001ad4 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	e00e      	b.n	80033b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003392:	f7fe fb9f 	bl	8001ad4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d907      	bls.n	80033b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e150      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470000 	.word	0x42470000
 80033ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b0:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ea      	bne.n	8003392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8097 	beq.w	80034f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4b81      	ldr	r3, [pc, #516]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	4b7d      	ldr	r3, [pc, #500]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a7c      	ldr	r2, [pc, #496]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b77      	ldr	r3, [pc, #476]	; (80035d8 <HAL_RCC_OscConfig+0x474>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d118      	bne.n	8003438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003406:	4b74      	ldr	r3, [pc, #464]	; (80035d8 <HAL_RCC_OscConfig+0x474>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a73      	ldr	r2, [pc, #460]	; (80035d8 <HAL_RCC_OscConfig+0x474>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003412:	f7fe fb5f 	bl	8001ad4 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fe fb5b 	bl	8001ad4 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e10c      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <HAL_RCC_OscConfig+0x474>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x2ea>
 8003440:	4b64      	ldr	r3, [pc, #400]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	4a63      	ldr	r2, [pc, #396]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6713      	str	r3, [r2, #112]	; 0x70
 800344c:	e01c      	b.n	8003488 <HAL_RCC_OscConfig+0x324>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x30c>
 8003456:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a5e      	ldr	r2, [pc, #376]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a5b      	ldr	r2, [pc, #364]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0x324>
 8003470:	4b58      	ldr	r3, [pc, #352]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a57      	ldr	r2, [pc, #348]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
 800347c:	4b55      	ldr	r3, [pc, #340]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	4a54      	ldr	r2, [pc, #336]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003482:	f023 0304 	bic.w	r3, r3, #4
 8003486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fe fb20 	bl	8001ad4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fe fb1c 	bl	8001ad4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0cb      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ee      	beq.n	8003498 <HAL_RCC_OscConfig+0x334>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fe fb0a 	bl	8001ad4 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fe fb06 	bl	8001ad4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e0b5      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034da:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ee      	bne.n	80034c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ec:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	4a38      	ldr	r2, [pc, #224]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a1 	beq.w	8003644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003502:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b08      	cmp	r3, #8
 800350c:	d05c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d141      	bne.n	800359a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_RCC_OscConfig+0x478>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe fada 	bl	8001ad4 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe fad6 	bl	8001ad4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e087      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	3b01      	subs	r3, #1
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	061b      	lsls	r3, r3, #24
 8003566:	491b      	ldr	r1, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_RCC_OscConfig+0x478>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe faaf 	bl	8001ad4 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe faab 	bl	8001ad4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e05c      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x416>
 8003598:	e054      	b.n	8003644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_RCC_OscConfig+0x478>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fa98 	bl	8001ad4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fa94 	bl	8001ad4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e045      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_OscConfig+0x470>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x444>
 80035c6:	e03d      	b.n	8003644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e038      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40007000 	.word	0x40007000
 80035dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e0:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x4ec>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d028      	beq.n	8003640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d121      	bne.n	8003640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d11a      	bne.n	8003640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003610:	4013      	ands	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003618:	4293      	cmp	r3, r2
 800361a:	d111      	bne.n	8003640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	3b01      	subs	r3, #1
 800362a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d107      	bne.n	8003640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800

08003654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0cc      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b68      	ldr	r3, [pc, #416]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d90c      	bls.n	8003690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b65      	ldr	r3, [pc, #404]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0b8      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a8:	4b59      	ldr	r3, [pc, #356]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a58      	ldr	r2, [pc, #352]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c0:	4b53      	ldr	r3, [pc, #332]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a52      	ldr	r2, [pc, #328]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	494d      	ldr	r1, [pc, #308]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d044      	beq.n	8003774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d119      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e07f      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d003      	beq.n	8003712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370e:	2b03      	cmp	r3, #3
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e06f      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e067      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4934      	ldr	r1, [pc, #208]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003744:	f7fe f9c6 	bl	8001ad4 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7fe f9c2 	bl	8001ad4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e04f      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 020c 	and.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	429a      	cmp	r2, r3
 8003772:	d1eb      	bne.n	800374c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003774:	4b25      	ldr	r3, [pc, #148]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d20c      	bcs.n	800379c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e032      	b.n	8003802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4916      	ldr	r1, [pc, #88]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	490e      	ldr	r1, [pc, #56]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037da:	f000 f821 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 80037de:	4602      	mov	r2, r0
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	490a      	ldr	r1, [pc, #40]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 80037ec:	5ccb      	ldrb	r3, [r1, r3]
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe f926 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023c00 	.word	0x40023c00
 8003810:	40023800 	.word	0x40023800
 8003814:	080072c8 	.word	0x080072c8
 8003818:	20000010 	.word	0x20000010
 800381c:	20000014 	.word	0x20000014

08003820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003824:	b094      	sub	sp, #80	; 0x50
 8003826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	647b      	str	r3, [r7, #68]	; 0x44
 800382c:	2300      	movs	r3, #0
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003830:	2300      	movs	r3, #0
 8003832:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003838:	4b79      	ldr	r3, [pc, #484]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b08      	cmp	r3, #8
 8003842:	d00d      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x40>
 8003844:	2b08      	cmp	r3, #8
 8003846:	f200 80e1 	bhi.w	8003a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x34>
 800384e:	2b04      	cmp	r3, #4
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0x3a>
 8003852:	e0db      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b73      	ldr	r3, [pc, #460]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003858:	e0db      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800385a:	4b73      	ldr	r3, [pc, #460]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800385e:	e0d8      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003860:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003868:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800386a:	4b6d      	ldr	r3, [pc, #436]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d063      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	2200      	movs	r2, #0
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003880:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
 800388a:	2300      	movs	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
 800388e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003892:	4622      	mov	r2, r4
 8003894:	462b      	mov	r3, r5
 8003896:	f04f 0000 	mov.w	r0, #0
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	0159      	lsls	r1, r3, #5
 80038a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a4:	0150      	lsls	r0, r2, #5
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4621      	mov	r1, r4
 80038ac:	1a51      	subs	r1, r2, r1
 80038ae:	6139      	str	r1, [r7, #16]
 80038b0:	4629      	mov	r1, r5
 80038b2:	eb63 0301 	sbc.w	r3, r3, r1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038c4:	4659      	mov	r1, fp
 80038c6:	018b      	lsls	r3, r1, #6
 80038c8:	4651      	mov	r1, sl
 80038ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ce:	4651      	mov	r1, sl
 80038d0:	018a      	lsls	r2, r1, #6
 80038d2:	4651      	mov	r1, sl
 80038d4:	ebb2 0801 	subs.w	r8, r2, r1
 80038d8:	4659      	mov	r1, fp
 80038da:	eb63 0901 	sbc.w	r9, r3, r1
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038f2:	4690      	mov	r8, r2
 80038f4:	4699      	mov	r9, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	eb18 0303 	adds.w	r3, r8, r3
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	462b      	mov	r3, r5
 8003900:	eb49 0303 	adc.w	r3, r9, r3
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003912:	4629      	mov	r1, r5
 8003914:	024b      	lsls	r3, r1, #9
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800391c:	4621      	mov	r1, r4
 800391e:	024a      	lsls	r2, r1, #9
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003926:	2200      	movs	r2, #0
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
 800392a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800392c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003930:	f7fd f96a 	bl	8000c08 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393c:	e058      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	2200      	movs	r2, #0
 8003946:	4618      	mov	r0, r3
 8003948:	4611      	mov	r1, r2
 800394a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	2300      	movs	r3, #0
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
 8003954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	f04f 0000 	mov.w	r0, #0
 8003960:	f04f 0100 	mov.w	r1, #0
 8003964:	0159      	lsls	r1, r3, #5
 8003966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396a:	0150      	lsls	r0, r2, #5
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4641      	mov	r1, r8
 8003972:	ebb2 0a01 	subs.w	sl, r2, r1
 8003976:	4649      	mov	r1, r9
 8003978:	eb63 0b01 	sbc.w	fp, r3, r1
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800398c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003990:	ebb2 040a 	subs.w	r4, r2, sl
 8003994:	eb63 050b 	sbc.w	r5, r3, fp
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	00eb      	lsls	r3, r5, #3
 80039a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a6:	00e2      	lsls	r2, r4, #3
 80039a8:	4614      	mov	r4, r2
 80039aa:	461d      	mov	r5, r3
 80039ac:	4643      	mov	r3, r8
 80039ae:	18e3      	adds	r3, r4, r3
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	464b      	mov	r3, r9
 80039b4:	eb45 0303 	adc.w	r3, r5, r3
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039c6:	4629      	mov	r1, r5
 80039c8:	028b      	lsls	r3, r1, #10
 80039ca:	4621      	mov	r1, r4
 80039cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039d0:	4621      	mov	r1, r4
 80039d2:	028a      	lsls	r2, r1, #10
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039da:	2200      	movs	r2, #0
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	61fa      	str	r2, [r7, #28]
 80039e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e4:	f7fd f910 	bl	8000c08 <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4613      	mov	r3, r2
 80039ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	3301      	adds	r3, #1
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a0a:	e002      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3750      	adds	r7, #80	; 0x50
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	00f42400 	.word	0x00f42400
 8003a28:	007a1200 	.word	0x007a1200

08003a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000010 	.word	0x20000010

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a48:	f7ff fff0 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	080072d8 	.word	0x080072d8

08003a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a70:	f7ff ffdc 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0b5b      	lsrs	r3, r3, #13
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	080072d8 	.word	0x080072d8

08003a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e03f      	b.n	8003b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff faa8 	bl	8003010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f929 	bl	8003d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b08a      	sub	sp, #40	; 0x28
 8003b32:	af02      	add	r7, sp, #8
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d17c      	bne.n	8003c48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_UART_Transmit+0x2c>
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e075      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_UART_Transmit+0x3e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e06e      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2221      	movs	r2, #33	; 0x21
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b82:	f7fd ffa7 	bl	8001ad4 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9c:	d108      	bne.n	8003bb0 <HAL_UART_Transmit+0x82>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	e003      	b.n	8003bb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bc0:	e02a      	b.n	8003c18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f840 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e036      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	e007      	b.n	8003c0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	3301      	adds	r3, #1
 8003c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1cf      	bne.n	8003bc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2140      	movs	r1, #64	; 0x40
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f810 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e006      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b090      	sub	sp, #64	; 0x40
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c62:	e050      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d04c      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c72:	f7fd ff2f 	bl	8001ad4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d241      	bcs.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca2:	637a      	str	r2, [r7, #52]	; 0x34
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3314      	adds	r3, #20
 8003cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd6:	623a      	str	r2, [r7, #32]
 8003cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	69f9      	ldr	r1, [r7, #28]
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d09f      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3740      	adds	r7, #64	; 0x40
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b0c0      	sub	sp, #256	; 0x100
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	68d9      	ldr	r1, [r3, #12]
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	ea40 0301 	orr.w	r3, r0, r1
 8003d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d88:	f021 010c 	bic.w	r1, r1, #12
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d96:	430b      	orrs	r3, r1
 8003d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003daa:	6999      	ldr	r1, [r3, #24]
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	ea40 0301 	orr.w	r3, r0, r1
 8003db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b8f      	ldr	r3, [pc, #572]	; (8003ffc <UART_SetConfig+0x2cc>)
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d005      	beq.n	8003dd0 <UART_SetConfig+0xa0>
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <UART_SetConfig+0x2d0>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d104      	bne.n	8003dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7ff fe4c 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8003dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dd8:	e003      	b.n	8003de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dda:	f7ff fe33 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8003dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dec:	f040 810c 	bne.w	8004008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e02:	4622      	mov	r2, r4
 8003e04:	462b      	mov	r3, r5
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e12:	4621      	mov	r1, r4
 8003e14:	eb12 0801 	adds.w	r8, r2, r1
 8003e18:	4629      	mov	r1, r5
 8003e1a:	eb43 0901 	adc.w	r9, r3, r1
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e32:	4690      	mov	r8, r2
 8003e34:	4699      	mov	r9, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	eb18 0303 	adds.w	r3, r8, r3
 8003e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e40:	462b      	mov	r3, r5
 8003e42:	eb49 0303 	adc.w	r3, r9, r3
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e5e:	460b      	mov	r3, r1
 8003e60:	18db      	adds	r3, r3, r3
 8003e62:	653b      	str	r3, [r7, #80]	; 0x50
 8003e64:	4613      	mov	r3, r2
 8003e66:	eb42 0303 	adc.w	r3, r2, r3
 8003e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e74:	f7fc fec8 	bl	8000c08 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4b61      	ldr	r3, [pc, #388]	; (8004004 <UART_SetConfig+0x2d4>)
 8003e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	011c      	lsls	r4, r3, #4
 8003e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	1891      	adds	r1, r2, r2
 8003e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ea0:	415b      	adcs	r3, r3
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8003eae:	4649      	mov	r1, r9
 8003eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec8:	4692      	mov	sl, r2
 8003eca:	469b      	mov	fp, r3
 8003ecc:	4643      	mov	r3, r8
 8003ece:	eb1a 0303 	adds.w	r3, sl, r3
 8003ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8003edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	18db      	adds	r3, r3, r3
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8003efa:	4613      	mov	r3, r2
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
 8003f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f0a:	f7fc fe7d 	bl	8000c08 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <UART_SetConfig+0x2d4>)
 8003f16:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2264      	movs	r2, #100	; 0x64
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	1acb      	subs	r3, r1, r3
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f2a:	4b36      	ldr	r3, [pc, #216]	; (8004004 <UART_SetConfig+0x2d4>)
 8003f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f54:	415b      	adcs	r3, r3
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	1851      	adds	r1, r2, r1
 8003f60:	6339      	str	r1, [r7, #48]	; 0x30
 8003f62:	4649      	mov	r1, r9
 8003f64:	414b      	adcs	r3, r1
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f74:	4659      	mov	r1, fp
 8003f76:	00cb      	lsls	r3, r1, #3
 8003f78:	4651      	mov	r1, sl
 8003f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7e:	4651      	mov	r1, sl
 8003f80:	00ca      	lsls	r2, r1, #3
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	4642      	mov	r2, r8
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f90:	464b      	mov	r3, r9
 8003f92:	460a      	mov	r2, r1
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	18db      	adds	r3, r3, r3
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fc6:	f7fc fe1f 	bl	8000c08 <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <UART_SetConfig+0x2d4>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2164      	movs	r1, #100	; 0x64
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	3332      	adds	r3, #50	; 0x32
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <UART_SetConfig+0x2d4>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f003 0207 	and.w	r2, r3, #7
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4422      	add	r2, r4
 8003ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ff8:	e105      	b.n	8004206 <UART_SetConfig+0x4d6>
 8003ffa:	bf00      	nop
 8003ffc:	40011000 	.word	0x40011000
 8004000:	40011400 	.word	0x40011400
 8004004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400c:	2200      	movs	r2, #0
 800400e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800401a:	4642      	mov	r2, r8
 800401c:	464b      	mov	r3, r9
 800401e:	1891      	adds	r1, r2, r2
 8004020:	6239      	str	r1, [r7, #32]
 8004022:	415b      	adcs	r3, r3
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800402a:	4641      	mov	r1, r8
 800402c:	1854      	adds	r4, r2, r1
 800402e:	4649      	mov	r1, r9
 8004030:	eb43 0501 	adc.w	r5, r3, r1
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	00eb      	lsls	r3, r5, #3
 800403e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004042:	00e2      	lsls	r2, r4, #3
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	4643      	mov	r3, r8
 800404a:	18e3      	adds	r3, r4, r3
 800404c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004050:	464b      	mov	r3, r9
 8004052:	eb45 0303 	adc.w	r3, r5, r3
 8004056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004076:	4629      	mov	r1, r5
 8004078:	008b      	lsls	r3, r1, #2
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004080:	4621      	mov	r1, r4
 8004082:	008a      	lsls	r2, r1, #2
 8004084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004088:	f7fc fdbe 	bl	8000c08 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4b60      	ldr	r3, [pc, #384]	; (8004214 <UART_SetConfig+0x4e4>)
 8004092:	fba3 2302 	umull	r2, r3, r3, r2
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	011c      	lsls	r4, r3, #4
 800409a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	1891      	adds	r1, r2, r2
 80040b2:	61b9      	str	r1, [r7, #24]
 80040b4:	415b      	adcs	r3, r3
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040bc:	4641      	mov	r1, r8
 80040be:	1851      	adds	r1, r2, r1
 80040c0:	6139      	str	r1, [r7, #16]
 80040c2:	4649      	mov	r1, r9
 80040c4:	414b      	adcs	r3, r1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d4:	4659      	mov	r1, fp
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	4651      	mov	r1, sl
 80040da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040de:	4651      	mov	r1, sl
 80040e0:	00ca      	lsls	r2, r1, #3
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	4642      	mov	r2, r8
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040f0:	464b      	mov	r3, r9
 80040f2:	460a      	mov	r2, r1
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	67bb      	str	r3, [r7, #120]	; 0x78
 8004106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004114:	4649      	mov	r1, r9
 8004116:	008b      	lsls	r3, r1, #2
 8004118:	4641      	mov	r1, r8
 800411a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411e:	4641      	mov	r1, r8
 8004120:	008a      	lsls	r2, r1, #2
 8004122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004126:	f7fc fd6f 	bl	8000c08 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <UART_SetConfig+0x4e4>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	; 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a34      	ldr	r2, [pc, #208]	; (8004214 <UART_SetConfig+0x4e4>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414e:	441c      	add	r4, r3
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	673b      	str	r3, [r7, #112]	; 0x70
 8004158:	677a      	str	r2, [r7, #116]	; 0x74
 800415a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800415e:	4642      	mov	r2, r8
 8004160:	464b      	mov	r3, r9
 8004162:	1891      	adds	r1, r2, r2
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	415b      	adcs	r3, r3
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800416e:	4641      	mov	r1, r8
 8004170:	1851      	adds	r1, r2, r1
 8004172:	6039      	str	r1, [r7, #0]
 8004174:	4649      	mov	r1, r9
 8004176:	414b      	adcs	r3, r1
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004186:	4659      	mov	r1, fp
 8004188:	00cb      	lsls	r3, r1, #3
 800418a:	4651      	mov	r1, sl
 800418c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004190:	4651      	mov	r1, sl
 8004192:	00ca      	lsls	r2, r1, #3
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	4603      	mov	r3, r0
 800419a:	4642      	mov	r2, r8
 800419c:	189b      	adds	r3, r3, r2
 800419e:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a0:	464b      	mov	r3, r9
 80041a2:	460a      	mov	r2, r1
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	663b      	str	r3, [r7, #96]	; 0x60
 80041b4:	667a      	str	r2, [r7, #100]	; 0x64
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041c2:	4649      	mov	r1, r9
 80041c4:	008b      	lsls	r3, r1, #2
 80041c6:	4641      	mov	r1, r8
 80041c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041cc:	4641      	mov	r1, r8
 80041ce:	008a      	lsls	r2, r1, #2
 80041d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041d4:	f7fc fd18 	bl	8000c08 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <UART_SetConfig+0x4e4>)
 80041de:	fba3 1302 	umull	r1, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2164      	movs	r1, #100	; 0x64
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	3332      	adds	r3, #50	; 0x32
 80041f0:	4a08      	ldr	r2, [pc, #32]	; (8004214 <UART_SetConfig+0x4e4>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	f003 020f 	and.w	r2, r3, #15
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4422      	add	r2, r4
 8004204:	609a      	str	r2, [r3, #8]
}
 8004206:	bf00      	nop
 8004208:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004212:	bf00      	nop
 8004214:	51eb851f 	.word	0x51eb851f

08004218 <main>:
void decreaseTime();
void increaseTime();
void applyRx();

int main(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
		 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
		 handled in milliseconds basis.
	   - Set NVIC Group Priority to 4
	   - Low Level Initialization
	 */
	HAL_Init();
 800421e:	f7fd fbf9 	bl	8001a14 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8004222:	f000 f8e7 	bl	80043f4 <SystemClock_Config>

	/* Initialize Inputs */
	inputsInit();
 8004226:	f7fd f907 	bl	8001438 <inputsInit>

	/* Initialize Outputs */
	outputsInit();
 800422a:	f7fd f93b 	bl	80014a4 <outputsInit>

	/* Initialize FSM */
	debounceFSM_init();
 800422e:	f7fd f895 	bl	800135c <debounceFSM_init>
					  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	  - Stop Bit    = One Stop bit
	  - Parity      = ODD parity
	  - BaudRate    = 9600 baud
	  - Hardware flow control disabled (RTS and CTS signals) */
	myUART_init();
 8004232:	f7fd f96d 	bl	8001510 <myUART_init>

	/* Initialize ADC */
	myADC_init();
 8004236:	f7fc fe69 	bl	8000f0c <myADC_init>

	/* Infinite loop */
	bool_t error;
	uint8_t state = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	71bb      	strb	r3, [r7, #6]
		s_increaseTime,
		s_alarm,
		s_Rx,
	} debounceState_t;

	debounceState_t mainState = s_rest;
 800423e:	2300      	movs	r3, #0
 8004240:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		switch (mainState)
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d855      	bhi.n	80042f4 <main+0xdc>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <main+0x38>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004265 	.word	0x08004265
 8004254:	080042b7 	.word	0x080042b7
 8004258:	080042c1 	.word	0x080042c1
 800425c:	080042cb 	.word	0x080042cb
 8004260:	080042e5 	.word	0x080042e5
		{
			case s_rest:

					error = myADC_update();
 8004264:	f7fc fec4 	bl	8000ff0 <myADC_update>
 8004268:	4603      	mov	r3, r0
 800426a:	717b      	strb	r3, [r7, #5]
					if(error==0)
 800426c:	797b      	ldrb	r3, [r7, #5]
 800426e:	f083 0301 	eor.w	r3, r3, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <main+0x98>
					{
						state = debounceFSM_update();
 8004278:	f7fc ff34 	bl	80010e4 <debounceFSM_update>
 800427c:	4603      	mov	r3, r0
 800427e:	71bb      	strb	r3, [r7, #6]
						if(state==0) 		mainState = s_rest;
 8004280:	79bb      	ldrb	r3, [r7, #6]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <main+0x74>
 8004286:	2300      	movs	r3, #0
 8004288:	71fb      	strb	r3, [r7, #7]
						else if(state==1) 	mainState = s_decreaseTime;
						else if(state==2)	mainState = s_increaseTime;
						else if(state==3)   mainState = s_Rx;
					}
					else mainState = s_alarm;
					break;
 800428a:	e030      	b.n	80042ee <main+0xd6>
						else if(state==1) 	mainState = s_decreaseTime;
 800428c:	79bb      	ldrb	r3, [r7, #6]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <main+0x80>
 8004292:	2301      	movs	r3, #1
 8004294:	71fb      	strb	r3, [r7, #7]
					break;
 8004296:	e02a      	b.n	80042ee <main+0xd6>
						else if(state==2)	mainState = s_increaseTime;
 8004298:	79bb      	ldrb	r3, [r7, #6]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d102      	bne.n	80042a4 <main+0x8c>
 800429e:	2302      	movs	r3, #2
 80042a0:	71fb      	strb	r3, [r7, #7]
					break;
 80042a2:	e024      	b.n	80042ee <main+0xd6>
						else if(state==3)   mainState = s_Rx;
 80042a4:	79bb      	ldrb	r3, [r7, #6]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d121      	bne.n	80042ee <main+0xd6>
 80042aa:	2304      	movs	r3, #4
 80042ac:	71fb      	strb	r3, [r7, #7]
					break;
 80042ae:	e01e      	b.n	80042ee <main+0xd6>
					else mainState = s_alarm;
 80042b0:	2303      	movs	r3, #3
 80042b2:	71fb      	strb	r3, [r7, #7]
					break;
 80042b4:	e01b      	b.n	80042ee <main+0xd6>

			case s_decreaseTime:

					decreaseTime();
 80042b6:	f000 f821 	bl	80042fc <decreaseTime>
					mainState = s_rest;
 80042ba:	2300      	movs	r3, #0
 80042bc:	71fb      	strb	r3, [r7, #7]
					break;
 80042be:	e019      	b.n	80042f4 <main+0xdc>

			case s_increaseTime:

					increaseTime();
 80042c0:	f000 f846 	bl	8004350 <increaseTime>
					mainState = s_rest;
 80042c4:	2300      	movs	r3, #0
 80042c6:	71fb      	strb	r3, [r7, #7]
					break;
 80042c8:	e014      	b.n	80042f4 <main+0xdc>

			case s_alarm:

					error = myADC_update();
 80042ca:	f7fc fe91 	bl	8000ff0 <myADC_update>
 80042ce:	4603      	mov	r3, r0
 80042d0:	717b      	strb	r3, [r7, #5]
					if(error==0) mainState = s_rest;
 80042d2:	797b      	ldrb	r3, [r7, #5]
 80042d4:	f083 0301 	eor.w	r3, r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <main+0xda>
 80042de:	2300      	movs	r3, #0
 80042e0:	71fb      	strb	r3, [r7, #7]
					break;
 80042e2:	e006      	b.n	80042f2 <main+0xda>

			case s_Rx:

					applyRx();
 80042e4:	f000 f860 	bl	80043a8 <applyRx>
					mainState = s_rest;
 80042e8:	2300      	movs	r3, #0
 80042ea:	71fb      	strb	r3, [r7, #7]
					break;
 80042ec:	e002      	b.n	80042f4 <main+0xdc>
					break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <main+0xdc>
					break;
 80042f2:	bf00      	nop
		}

		HAL_Delay(10);
 80042f4:	200a      	movs	r0, #10
 80042f6:	f7fd fbf9 	bl	8001aec <HAL_Delay>
		switch (mainState)
 80042fa:	e7a2      	b.n	8004242 <main+0x2a>

080042fc <decreaseTime>:

//Función: disminuye tiempo de Disparo de RX
//Entrada: ninguna
//Salida: ninguna
void decreaseTime()
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8004300:	2000      	movs	r0, #0
 8004302:	f7fd f9b1 	bl	8001668 <BSP_LED_On>
	if(tiempoDisparo>100) tiempoDisparo = tiempoDisparo-100;
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <decreaseTime+0x48>)
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d905      	bls.n	800431a <decreaseTime+0x1e>
 800430e:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <decreaseTime+0x48>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	3b64      	subs	r3, #100	; 0x64
 8004314:	b29a      	uxth	r2, r3
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <decreaseTime+0x48>)
 8004318:	801a      	strh	r2, [r3, #0]
	printf("Tiempo de disparo = %dms\r\n",tiempoDisparo);
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <decreaseTime+0x48>)
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4809      	ldr	r0, [pc, #36]	; (8004348 <decreaseTime+0x4c>)
 8004322:	f000 fd95 	bl	8004e50 <iprintf>
	while(BUTTON_menosTiempo_PRESSED);
 8004326:	bf00      	nop
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <decreaseTime+0x50>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f9      	bne.n	8004328 <decreaseTime+0x2c>
	BSP_LED_Off(LED1);
 8004334:	2000      	movs	r0, #0
 8004336:	f7fd f9b1 	bl	800169c <BSP_LED_Off>
	HAL_Delay(100);
 800433a:	2064      	movs	r0, #100	; 0x64
 800433c:	f7fd fbd6 	bl	8001aec <HAL_Delay>
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	2000032c 	.word	0x2000032c
 8004348:	08007288 	.word	0x08007288
 800434c:	40021800 	.word	0x40021800

08004350 <increaseTime>:

//Función: aumenta tiempo de Disparo de RX
//Entrada: ninguna
//Salida: ninguna
void increaseTime()
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8004354:	2001      	movs	r0, #1
 8004356:	f7fd f987 	bl	8001668 <BSP_LED_On>
	if(tiempoDisparo<3000) tiempoDisparo = tiempoDisparo+100;
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <increaseTime+0x4c>)
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004362:	4293      	cmp	r3, r2
 8004364:	d805      	bhi.n	8004372 <increaseTime+0x22>
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <increaseTime+0x4c>)
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	3364      	adds	r3, #100	; 0x64
 800436c:	b29a      	uxth	r2, r3
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <increaseTime+0x4c>)
 8004370:	801a      	strh	r2, [r3, #0]
	printf("Tiempo de disparo = %dms\r\n",tiempoDisparo);
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <increaseTime+0x4c>)
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	4809      	ldr	r0, [pc, #36]	; (80043a0 <increaseTime+0x50>)
 800437a:	f000 fd69 	bl	8004e50 <iprintf>
	while(BUTTON_masTiempo_PRESSED);
 800437e:	bf00      	nop
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <increaseTime+0x54>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f9      	bne.n	8004380 <increaseTime+0x30>
	BSP_LED_Off(LED2);
 800438c:	2001      	movs	r0, #1
 800438e:	f7fd f985 	bl	800169c <BSP_LED_Off>
	HAL_Delay(100);
 8004392:	2064      	movs	r0, #100	; 0x64
 8004394:	f7fd fbaa 	bl	8001aec <HAL_Delay>
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000032c 	.word	0x2000032c
 80043a0:	08007288 	.word	0x08007288
 80043a4:	40021800 	.word	0x40021800

080043a8 <applyRx>:

//Función: ejecucion de Disparo de RX
//Entrada: ninguna
//Salida: ninguna
void applyRx()
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
	printf("Disparo ON\r\n");
 80043ac:	480e      	ldr	r0, [pc, #56]	; (80043e8 <applyRx+0x40>)
 80043ae:	f000 fdd5 	bl	8004f5c <puts>
	BSP_LED_On(LED3);
 80043b2:	2002      	movs	r0, #2
 80043b4:	f7fd f958 	bl	8001668 <BSP_LED_On>
	HAL_Delay(tiempoDisparo);
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <applyRx+0x44>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd fb95 	bl	8001aec <HAL_Delay>
	BSP_LED_Off(LED3);
 80043c2:	2002      	movs	r0, #2
 80043c4:	f7fd f96a 	bl	800169c <BSP_LED_Off>
	printf("Disparo OFF\r\n");
 80043c8:	4809      	ldr	r0, [pc, #36]	; (80043f0 <applyRx+0x48>)
 80043ca:	f000 fdc7 	bl	8004f5c <puts>
	while(BSP_PB_GetState(BUTTON_USER)); //espera a que suelte disparo
 80043ce:	bf00      	nop
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7fd f9d3 	bl	800177c <BSP_PB_GetState>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f9      	bne.n	80043d0 <applyRx+0x28>
	HAL_Delay(200);
 80043dc:	20c8      	movs	r0, #200	; 0xc8
 80043de:	f7fd fb85 	bl	8001aec <HAL_Delay>
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	080072a4 	.word	0x080072a4
 80043ec:	2000032c 	.word	0x2000032c
 80043f0:	080072b0 	.word	0x080072b0

080043f4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b094      	sub	sp, #80	; 0x50
 80043f8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <SystemClock_Config+0xbc>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a2b      	ldr	r2, [pc, #172]	; (80044b0 <SystemClock_Config+0xbc>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <SystemClock_Config+0xbc>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <SystemClock_Config+0xc0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a25      	ldr	r2, [pc, #148]	; (80044b4 <SystemClock_Config+0xc0>)
 8004420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <SystemClock_Config+0xc0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004432:	2301      	movs	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004436:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800443a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800443c:	2302      	movs	r3, #2
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004446:	2308      	movs	r3, #8
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800444a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800444e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004450:	2302      	movs	r3, #2
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004454:	2307      	movs	r3, #7
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fe81 	bl	8003164 <HAL_RCC_OscConfig>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8004468:	f000 f826 	bl	80044b8 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800446c:	f7fe fe2a 	bl	80030c4 <HAL_PWREx_EnableOverDrive>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8004476:	f000 f81f 	bl	80044b8 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800447a:	230f      	movs	r3, #15
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800447e:	2302      	movs	r3, #2
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004482:	2300      	movs	r3, #0
 8004484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8004486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800448c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004490:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004496:	2105      	movs	r1, #5
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff f8db 	bl	8003654 <HAL_RCC_ClockConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80044a4:	f000 f808 	bl	80044b8 <Error_Handler>
  }
}
 80044a8:	bf00      	nop
 80044aa:	3750      	adds	r7, #80	; 0x50
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000

080044b8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80044bc:	2001      	movs	r0, #1
 80044be:	f7fd f8d3 	bl	8001668 <BSP_LED_On>
  while (1)
 80044c2:	e7fe      	b.n	80044c2 <Error_Handler+0xa>

080044c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80044c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044ca:	e003      	b.n	80044d4 <LoopCopyDataInit>

080044cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044d2:	3104      	adds	r1, #4

080044d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044d4:	480b      	ldr	r0, [pc, #44]	; (8004504 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044dc:	d3f6      	bcc.n	80044cc <CopyDataInit>
  ldr  r2, =_sbss
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044e0:	e002      	b.n	80044e8 <LoopFillZerobss>

080044e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044e4:	f842 3b04 	str.w	r3, [r2], #4

080044e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044ec:	d3f9      	bcc.n	80044e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044ee:	f7fd f95b 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f2:	f000 f817 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044f6:	f7ff fe8f 	bl	8004218 <main>
  bx  lr    
 80044fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80044fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004500:	080076d4 	.word	0x080076d4
  ldr  r0, =_sdata
 8004504:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004508:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800450c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8004510:	20000340 	.word	0x20000340

08004514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004514:	e7fe      	b.n	8004514 <ADC_IRQHandler>
	...

08004518 <__errno>:
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <__errno+0x8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	2000001c 	.word	0x2000001c

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4d0d      	ldr	r5, [pc, #52]	; (800455c <__libc_init_array+0x38>)
 8004528:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	2600      	movs	r6, #0
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	4d0b      	ldr	r5, [pc, #44]	; (8004564 <__libc_init_array+0x40>)
 8004536:	4c0c      	ldr	r4, [pc, #48]	; (8004568 <__libc_init_array+0x44>)
 8004538:	f002 fdc4 	bl	80070c4 <_init>
 800453c:	1b64      	subs	r4, r4, r5
 800453e:	10a4      	asrs	r4, r4, #2
 8004540:	2600      	movs	r6, #0
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	080076cc 	.word	0x080076cc
 8004560:	080076cc 	.word	0x080076cc
 8004564:	080076cc 	.word	0x080076cc
 8004568:	080076d0 	.word	0x080076d0

0800456c <memset>:
 800456c:	4402      	add	r2, r0
 800456e:	4603      	mov	r3, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <__cvt>:
 800457c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004580:	ec55 4b10 	vmov	r4, r5, d0
 8004584:	2d00      	cmp	r5, #0
 8004586:	460e      	mov	r6, r1
 8004588:	4619      	mov	r1, r3
 800458a:	462b      	mov	r3, r5
 800458c:	bfbb      	ittet	lt
 800458e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004592:	461d      	movlt	r5, r3
 8004594:	2300      	movge	r3, #0
 8004596:	232d      	movlt	r3, #45	; 0x2d
 8004598:	700b      	strb	r3, [r1, #0]
 800459a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800459c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045a0:	4691      	mov	r9, r2
 80045a2:	f023 0820 	bic.w	r8, r3, #32
 80045a6:	bfbc      	itt	lt
 80045a8:	4622      	movlt	r2, r4
 80045aa:	4614      	movlt	r4, r2
 80045ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045b0:	d005      	beq.n	80045be <__cvt+0x42>
 80045b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045b6:	d100      	bne.n	80045ba <__cvt+0x3e>
 80045b8:	3601      	adds	r6, #1
 80045ba:	2102      	movs	r1, #2
 80045bc:	e000      	b.n	80045c0 <__cvt+0x44>
 80045be:	2103      	movs	r1, #3
 80045c0:	ab03      	add	r3, sp, #12
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	ab02      	add	r3, sp, #8
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	ec45 4b10 	vmov	d0, r4, r5
 80045cc:	4653      	mov	r3, sl
 80045ce:	4632      	mov	r2, r6
 80045d0:	f000 fe1a 	bl	8005208 <_dtoa_r>
 80045d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045d8:	4607      	mov	r7, r0
 80045da:	d102      	bne.n	80045e2 <__cvt+0x66>
 80045dc:	f019 0f01 	tst.w	r9, #1
 80045e0:	d022      	beq.n	8004628 <__cvt+0xac>
 80045e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045e6:	eb07 0906 	add.w	r9, r7, r6
 80045ea:	d110      	bne.n	800460e <__cvt+0x92>
 80045ec:	783b      	ldrb	r3, [r7, #0]
 80045ee:	2b30      	cmp	r3, #48	; 0x30
 80045f0:	d10a      	bne.n	8004608 <__cvt+0x8c>
 80045f2:	2200      	movs	r2, #0
 80045f4:	2300      	movs	r3, #0
 80045f6:	4620      	mov	r0, r4
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7fc fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 80045fe:	b918      	cbnz	r0, 8004608 <__cvt+0x8c>
 8004600:	f1c6 0601 	rsb	r6, r6, #1
 8004604:	f8ca 6000 	str.w	r6, [sl]
 8004608:	f8da 3000 	ldr.w	r3, [sl]
 800460c:	4499      	add	r9, r3
 800460e:	2200      	movs	r2, #0
 8004610:	2300      	movs	r3, #0
 8004612:	4620      	mov	r0, r4
 8004614:	4629      	mov	r1, r5
 8004616:	f7fc fa67 	bl	8000ae8 <__aeabi_dcmpeq>
 800461a:	b108      	cbz	r0, 8004620 <__cvt+0xa4>
 800461c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004620:	2230      	movs	r2, #48	; 0x30
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	454b      	cmp	r3, r9
 8004626:	d307      	bcc.n	8004638 <__cvt+0xbc>
 8004628:	9b03      	ldr	r3, [sp, #12]
 800462a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800462c:	1bdb      	subs	r3, r3, r7
 800462e:	4638      	mov	r0, r7
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	b004      	add	sp, #16
 8004634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004638:	1c59      	adds	r1, r3, #1
 800463a:	9103      	str	r1, [sp, #12]
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e7f0      	b.n	8004622 <__cvt+0xa6>

08004640 <__exponent>:
 8004640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004642:	4603      	mov	r3, r0
 8004644:	2900      	cmp	r1, #0
 8004646:	bfb8      	it	lt
 8004648:	4249      	neglt	r1, r1
 800464a:	f803 2b02 	strb.w	r2, [r3], #2
 800464e:	bfb4      	ite	lt
 8004650:	222d      	movlt	r2, #45	; 0x2d
 8004652:	222b      	movge	r2, #43	; 0x2b
 8004654:	2909      	cmp	r1, #9
 8004656:	7042      	strb	r2, [r0, #1]
 8004658:	dd2a      	ble.n	80046b0 <__exponent+0x70>
 800465a:	f10d 0407 	add.w	r4, sp, #7
 800465e:	46a4      	mov	ip, r4
 8004660:	270a      	movs	r7, #10
 8004662:	46a6      	mov	lr, r4
 8004664:	460a      	mov	r2, r1
 8004666:	fb91 f6f7 	sdiv	r6, r1, r7
 800466a:	fb07 1516 	mls	r5, r7, r6, r1
 800466e:	3530      	adds	r5, #48	; 0x30
 8004670:	2a63      	cmp	r2, #99	; 0x63
 8004672:	f104 34ff 	add.w	r4, r4, #4294967295
 8004676:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800467a:	4631      	mov	r1, r6
 800467c:	dcf1      	bgt.n	8004662 <__exponent+0x22>
 800467e:	3130      	adds	r1, #48	; 0x30
 8004680:	f1ae 0502 	sub.w	r5, lr, #2
 8004684:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004688:	1c44      	adds	r4, r0, #1
 800468a:	4629      	mov	r1, r5
 800468c:	4561      	cmp	r1, ip
 800468e:	d30a      	bcc.n	80046a6 <__exponent+0x66>
 8004690:	f10d 0209 	add.w	r2, sp, #9
 8004694:	eba2 020e 	sub.w	r2, r2, lr
 8004698:	4565      	cmp	r5, ip
 800469a:	bf88      	it	hi
 800469c:	2200      	movhi	r2, #0
 800469e:	4413      	add	r3, r2
 80046a0:	1a18      	subs	r0, r3, r0
 80046a2:	b003      	add	sp, #12
 80046a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046ae:	e7ed      	b.n	800468c <__exponent+0x4c>
 80046b0:	2330      	movs	r3, #48	; 0x30
 80046b2:	3130      	adds	r1, #48	; 0x30
 80046b4:	7083      	strb	r3, [r0, #2]
 80046b6:	70c1      	strb	r1, [r0, #3]
 80046b8:	1d03      	adds	r3, r0, #4
 80046ba:	e7f1      	b.n	80046a0 <__exponent+0x60>

080046bc <_printf_float>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	ed2d 8b02 	vpush	{d8}
 80046c4:	b08d      	sub	sp, #52	; 0x34
 80046c6:	460c      	mov	r4, r1
 80046c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046cc:	4616      	mov	r6, r2
 80046ce:	461f      	mov	r7, r3
 80046d0:	4605      	mov	r5, r0
 80046d2:	f001 fd3f 	bl	8006154 <_localeconv_r>
 80046d6:	f8d0 a000 	ldr.w	sl, [r0]
 80046da:	4650      	mov	r0, sl
 80046dc:	f7fb fd88 	bl	80001f0 <strlen>
 80046e0:	2300      	movs	r3, #0
 80046e2:	930a      	str	r3, [sp, #40]	; 0x28
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	9305      	str	r3, [sp, #20]
 80046e8:	f8d8 3000 	ldr.w	r3, [r8]
 80046ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046f0:	3307      	adds	r3, #7
 80046f2:	f023 0307 	bic.w	r3, r3, #7
 80046f6:	f103 0208 	add.w	r2, r3, #8
 80046fa:	f8c8 2000 	str.w	r2, [r8]
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004706:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800470a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800470e:	9307      	str	r3, [sp, #28]
 8004710:	f8cd 8018 	str.w	r8, [sp, #24]
 8004714:	ee08 0a10 	vmov	s16, r0
 8004718:	4b9f      	ldr	r3, [pc, #636]	; (8004998 <_printf_float+0x2dc>)
 800471a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800471e:	f04f 32ff 	mov.w	r2, #4294967295
 8004722:	f7fc fa13 	bl	8000b4c <__aeabi_dcmpun>
 8004726:	bb88      	cbnz	r0, 800478c <_printf_float+0xd0>
 8004728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800472c:	4b9a      	ldr	r3, [pc, #616]	; (8004998 <_printf_float+0x2dc>)
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	f7fc f9ed 	bl	8000b10 <__aeabi_dcmple>
 8004736:	bb48      	cbnz	r0, 800478c <_printf_float+0xd0>
 8004738:	2200      	movs	r2, #0
 800473a:	2300      	movs	r3, #0
 800473c:	4640      	mov	r0, r8
 800473e:	4649      	mov	r1, r9
 8004740:	f7fc f9dc 	bl	8000afc <__aeabi_dcmplt>
 8004744:	b110      	cbz	r0, 800474c <_printf_float+0x90>
 8004746:	232d      	movs	r3, #45	; 0x2d
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800474c:	4b93      	ldr	r3, [pc, #588]	; (800499c <_printf_float+0x2e0>)
 800474e:	4894      	ldr	r0, [pc, #592]	; (80049a0 <_printf_float+0x2e4>)
 8004750:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004754:	bf94      	ite	ls
 8004756:	4698      	movls	r8, r3
 8004758:	4680      	movhi	r8, r0
 800475a:	2303      	movs	r3, #3
 800475c:	6123      	str	r3, [r4, #16]
 800475e:	9b05      	ldr	r3, [sp, #20]
 8004760:	f023 0204 	bic.w	r2, r3, #4
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	f04f 0900 	mov.w	r9, #0
 800476a:	9700      	str	r7, [sp, #0]
 800476c:	4633      	mov	r3, r6
 800476e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f000 f9d8 	bl	8004b28 <_printf_common>
 8004778:	3001      	adds	r0, #1
 800477a:	f040 8090 	bne.w	800489e <_printf_float+0x1e2>
 800477e:	f04f 30ff 	mov.w	r0, #4294967295
 8004782:	b00d      	add	sp, #52	; 0x34
 8004784:	ecbd 8b02 	vpop	{d8}
 8004788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	4640      	mov	r0, r8
 8004792:	4649      	mov	r1, r9
 8004794:	f7fc f9da 	bl	8000b4c <__aeabi_dcmpun>
 8004798:	b140      	cbz	r0, 80047ac <_printf_float+0xf0>
 800479a:	464b      	mov	r3, r9
 800479c:	2b00      	cmp	r3, #0
 800479e:	bfbc      	itt	lt
 80047a0:	232d      	movlt	r3, #45	; 0x2d
 80047a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047a6:	487f      	ldr	r0, [pc, #508]	; (80049a4 <_printf_float+0x2e8>)
 80047a8:	4b7f      	ldr	r3, [pc, #508]	; (80049a8 <_printf_float+0x2ec>)
 80047aa:	e7d1      	b.n	8004750 <_printf_float+0x94>
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047b2:	9206      	str	r2, [sp, #24]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	d13f      	bne.n	8004838 <_printf_float+0x17c>
 80047b8:	2306      	movs	r3, #6
 80047ba:	6063      	str	r3, [r4, #4]
 80047bc:	9b05      	ldr	r3, [sp, #20]
 80047be:	6861      	ldr	r1, [r4, #4]
 80047c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047c4:	2300      	movs	r3, #0
 80047c6:	9303      	str	r3, [sp, #12]
 80047c8:	ab0a      	add	r3, sp, #40	; 0x28
 80047ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047ce:	ab09      	add	r3, sp, #36	; 0x24
 80047d0:	ec49 8b10 	vmov	d0, r8, r9
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	6022      	str	r2, [r4, #0]
 80047d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047dc:	4628      	mov	r0, r5
 80047de:	f7ff fecd 	bl	800457c <__cvt>
 80047e2:	9b06      	ldr	r3, [sp, #24]
 80047e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047e6:	2b47      	cmp	r3, #71	; 0x47
 80047e8:	4680      	mov	r8, r0
 80047ea:	d108      	bne.n	80047fe <_printf_float+0x142>
 80047ec:	1cc8      	adds	r0, r1, #3
 80047ee:	db02      	blt.n	80047f6 <_printf_float+0x13a>
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	4299      	cmp	r1, r3
 80047f4:	dd41      	ble.n	800487a <_printf_float+0x1be>
 80047f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80047fa:	fa5f fb8b 	uxtb.w	fp, fp
 80047fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004802:	d820      	bhi.n	8004846 <_printf_float+0x18a>
 8004804:	3901      	subs	r1, #1
 8004806:	465a      	mov	r2, fp
 8004808:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800480c:	9109      	str	r1, [sp, #36]	; 0x24
 800480e:	f7ff ff17 	bl	8004640 <__exponent>
 8004812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004814:	1813      	adds	r3, r2, r0
 8004816:	2a01      	cmp	r2, #1
 8004818:	4681      	mov	r9, r0
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	dc02      	bgt.n	8004824 <_printf_float+0x168>
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	07d2      	lsls	r2, r2, #31
 8004822:	d501      	bpl.n	8004828 <_printf_float+0x16c>
 8004824:	3301      	adds	r3, #1
 8004826:	6123      	str	r3, [r4, #16]
 8004828:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800482c:	2b00      	cmp	r3, #0
 800482e:	d09c      	beq.n	800476a <_printf_float+0xae>
 8004830:	232d      	movs	r3, #45	; 0x2d
 8004832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004836:	e798      	b.n	800476a <_printf_float+0xae>
 8004838:	9a06      	ldr	r2, [sp, #24]
 800483a:	2a47      	cmp	r2, #71	; 0x47
 800483c:	d1be      	bne.n	80047bc <_printf_float+0x100>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1bc      	bne.n	80047bc <_printf_float+0x100>
 8004842:	2301      	movs	r3, #1
 8004844:	e7b9      	b.n	80047ba <_printf_float+0xfe>
 8004846:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800484a:	d118      	bne.n	800487e <_printf_float+0x1c2>
 800484c:	2900      	cmp	r1, #0
 800484e:	6863      	ldr	r3, [r4, #4]
 8004850:	dd0b      	ble.n	800486a <_printf_float+0x1ae>
 8004852:	6121      	str	r1, [r4, #16]
 8004854:	b913      	cbnz	r3, 800485c <_printf_float+0x1a0>
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	07d0      	lsls	r0, r2, #31
 800485a:	d502      	bpl.n	8004862 <_printf_float+0x1a6>
 800485c:	3301      	adds	r3, #1
 800485e:	440b      	add	r3, r1
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	65a1      	str	r1, [r4, #88]	; 0x58
 8004864:	f04f 0900 	mov.w	r9, #0
 8004868:	e7de      	b.n	8004828 <_printf_float+0x16c>
 800486a:	b913      	cbnz	r3, 8004872 <_printf_float+0x1b6>
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	07d2      	lsls	r2, r2, #31
 8004870:	d501      	bpl.n	8004876 <_printf_float+0x1ba>
 8004872:	3302      	adds	r3, #2
 8004874:	e7f4      	b.n	8004860 <_printf_float+0x1a4>
 8004876:	2301      	movs	r3, #1
 8004878:	e7f2      	b.n	8004860 <_printf_float+0x1a4>
 800487a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800487e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004880:	4299      	cmp	r1, r3
 8004882:	db05      	blt.n	8004890 <_printf_float+0x1d4>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	6121      	str	r1, [r4, #16]
 8004888:	07d8      	lsls	r0, r3, #31
 800488a:	d5ea      	bpl.n	8004862 <_printf_float+0x1a6>
 800488c:	1c4b      	adds	r3, r1, #1
 800488e:	e7e7      	b.n	8004860 <_printf_float+0x1a4>
 8004890:	2900      	cmp	r1, #0
 8004892:	bfd4      	ite	le
 8004894:	f1c1 0202 	rsble	r2, r1, #2
 8004898:	2201      	movgt	r2, #1
 800489a:	4413      	add	r3, r2
 800489c:	e7e0      	b.n	8004860 <_printf_float+0x1a4>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	055a      	lsls	r2, r3, #21
 80048a2:	d407      	bmi.n	80048b4 <_printf_float+0x1f8>
 80048a4:	6923      	ldr	r3, [r4, #16]
 80048a6:	4642      	mov	r2, r8
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	3001      	adds	r0, #1
 80048b0:	d12c      	bne.n	800490c <_printf_float+0x250>
 80048b2:	e764      	b.n	800477e <_printf_float+0xc2>
 80048b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048b8:	f240 80e0 	bls.w	8004a7c <_printf_float+0x3c0>
 80048bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048c0:	2200      	movs	r2, #0
 80048c2:	2300      	movs	r3, #0
 80048c4:	f7fc f910 	bl	8000ae8 <__aeabi_dcmpeq>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d034      	beq.n	8004936 <_printf_float+0x27a>
 80048cc:	4a37      	ldr	r2, [pc, #220]	; (80049ac <_printf_float+0x2f0>)
 80048ce:	2301      	movs	r3, #1
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b8      	blx	r7
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f af51 	beq.w	800477e <_printf_float+0xc2>
 80048dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e0:	429a      	cmp	r2, r3
 80048e2:	db02      	blt.n	80048ea <_printf_float+0x22e>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	07d8      	lsls	r0, r3, #31
 80048e8:	d510      	bpl.n	800490c <_printf_float+0x250>
 80048ea:	ee18 3a10 	vmov	r3, s16
 80048ee:	4652      	mov	r2, sl
 80048f0:	4631      	mov	r1, r6
 80048f2:	4628      	mov	r0, r5
 80048f4:	47b8      	blx	r7
 80048f6:	3001      	adds	r0, #1
 80048f8:	f43f af41 	beq.w	800477e <_printf_float+0xc2>
 80048fc:	f04f 0800 	mov.w	r8, #0
 8004900:	f104 091a 	add.w	r9, r4, #26
 8004904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	4543      	cmp	r3, r8
 800490a:	dc09      	bgt.n	8004920 <_printf_float+0x264>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	079b      	lsls	r3, r3, #30
 8004910:	f100 8105 	bmi.w	8004b1e <_printf_float+0x462>
 8004914:	68e0      	ldr	r0, [r4, #12]
 8004916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004918:	4298      	cmp	r0, r3
 800491a:	bfb8      	it	lt
 800491c:	4618      	movlt	r0, r3
 800491e:	e730      	b.n	8004782 <_printf_float+0xc6>
 8004920:	2301      	movs	r3, #1
 8004922:	464a      	mov	r2, r9
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f43f af27 	beq.w	800477e <_printf_float+0xc2>
 8004930:	f108 0801 	add.w	r8, r8, #1
 8004934:	e7e6      	b.n	8004904 <_printf_float+0x248>
 8004936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	dc39      	bgt.n	80049b0 <_printf_float+0x2f4>
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <_printf_float+0x2f0>)
 800493e:	2301      	movs	r3, #1
 8004940:	4631      	mov	r1, r6
 8004942:	4628      	mov	r0, r5
 8004944:	47b8      	blx	r7
 8004946:	3001      	adds	r0, #1
 8004948:	f43f af19 	beq.w	800477e <_printf_float+0xc2>
 800494c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004950:	4313      	orrs	r3, r2
 8004952:	d102      	bne.n	800495a <_printf_float+0x29e>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	07d9      	lsls	r1, r3, #31
 8004958:	d5d8      	bpl.n	800490c <_printf_float+0x250>
 800495a:	ee18 3a10 	vmov	r3, s16
 800495e:	4652      	mov	r2, sl
 8004960:	4631      	mov	r1, r6
 8004962:	4628      	mov	r0, r5
 8004964:	47b8      	blx	r7
 8004966:	3001      	adds	r0, #1
 8004968:	f43f af09 	beq.w	800477e <_printf_float+0xc2>
 800496c:	f04f 0900 	mov.w	r9, #0
 8004970:	f104 0a1a 	add.w	sl, r4, #26
 8004974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004976:	425b      	negs	r3, r3
 8004978:	454b      	cmp	r3, r9
 800497a:	dc01      	bgt.n	8004980 <_printf_float+0x2c4>
 800497c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800497e:	e792      	b.n	80048a6 <_printf_float+0x1ea>
 8004980:	2301      	movs	r3, #1
 8004982:	4652      	mov	r2, sl
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	f43f aef7 	beq.w	800477e <_printf_float+0xc2>
 8004990:	f109 0901 	add.w	r9, r9, #1
 8004994:	e7ee      	b.n	8004974 <_printf_float+0x2b8>
 8004996:	bf00      	nop
 8004998:	7fefffff 	.word	0x7fefffff
 800499c:	080072ec 	.word	0x080072ec
 80049a0:	080072f0 	.word	0x080072f0
 80049a4:	080072f8 	.word	0x080072f8
 80049a8:	080072f4 	.word	0x080072f4
 80049ac:	080072fc 	.word	0x080072fc
 80049b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b4:	429a      	cmp	r2, r3
 80049b6:	bfa8      	it	ge
 80049b8:	461a      	movge	r2, r3
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	4691      	mov	r9, r2
 80049be:	dc37      	bgt.n	8004a30 <_printf_float+0x374>
 80049c0:	f04f 0b00 	mov.w	fp, #0
 80049c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049c8:	f104 021a 	add.w	r2, r4, #26
 80049cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049ce:	9305      	str	r3, [sp, #20]
 80049d0:	eba3 0309 	sub.w	r3, r3, r9
 80049d4:	455b      	cmp	r3, fp
 80049d6:	dc33      	bgt.n	8004a40 <_printf_float+0x384>
 80049d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049dc:	429a      	cmp	r2, r3
 80049de:	db3b      	blt.n	8004a58 <_printf_float+0x39c>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	07da      	lsls	r2, r3, #31
 80049e4:	d438      	bmi.n	8004a58 <_printf_float+0x39c>
 80049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e8:	9a05      	ldr	r2, [sp, #20]
 80049ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ec:	1a9a      	subs	r2, r3, r2
 80049ee:	eba3 0901 	sub.w	r9, r3, r1
 80049f2:	4591      	cmp	r9, r2
 80049f4:	bfa8      	it	ge
 80049f6:	4691      	movge	r9, r2
 80049f8:	f1b9 0f00 	cmp.w	r9, #0
 80049fc:	dc35      	bgt.n	8004a6a <_printf_float+0x3ae>
 80049fe:	f04f 0800 	mov.w	r8, #0
 8004a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a06:	f104 0a1a 	add.w	sl, r4, #26
 8004a0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	eba3 0309 	sub.w	r3, r3, r9
 8004a14:	4543      	cmp	r3, r8
 8004a16:	f77f af79 	ble.w	800490c <_printf_float+0x250>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4652      	mov	r2, sl
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f aeaa 	beq.w	800477e <_printf_float+0xc2>
 8004a2a:	f108 0801 	add.w	r8, r8, #1
 8004a2e:	e7ec      	b.n	8004a0a <_printf_float+0x34e>
 8004a30:	4613      	mov	r3, r2
 8004a32:	4631      	mov	r1, r6
 8004a34:	4642      	mov	r2, r8
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d1c0      	bne.n	80049c0 <_printf_float+0x304>
 8004a3e:	e69e      	b.n	800477e <_printf_float+0xc2>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	9205      	str	r2, [sp, #20]
 8004a48:	47b8      	blx	r7
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	f43f ae97 	beq.w	800477e <_printf_float+0xc2>
 8004a50:	9a05      	ldr	r2, [sp, #20]
 8004a52:	f10b 0b01 	add.w	fp, fp, #1
 8004a56:	e7b9      	b.n	80049cc <_printf_float+0x310>
 8004a58:	ee18 3a10 	vmov	r3, s16
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b8      	blx	r7
 8004a64:	3001      	adds	r0, #1
 8004a66:	d1be      	bne.n	80049e6 <_printf_float+0x32a>
 8004a68:	e689      	b.n	800477e <_printf_float+0xc2>
 8004a6a:	9a05      	ldr	r2, [sp, #20]
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	4442      	add	r2, r8
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	d1c1      	bne.n	80049fe <_printf_float+0x342>
 8004a7a:	e680      	b.n	800477e <_printf_float+0xc2>
 8004a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a7e:	2a01      	cmp	r2, #1
 8004a80:	dc01      	bgt.n	8004a86 <_printf_float+0x3ca>
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d538      	bpl.n	8004af8 <_printf_float+0x43c>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4642      	mov	r2, r8
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f ae74 	beq.w	800477e <_printf_float+0xc2>
 8004a96:	ee18 3a10 	vmov	r3, s16
 8004a9a:	4652      	mov	r2, sl
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	f43f ae6b 	beq.w	800477e <_printf_float+0xc2>
 8004aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f7fc f81a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ab4:	b9d8      	cbnz	r0, 8004aee <_printf_float+0x432>
 8004ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab8:	f108 0201 	add.w	r2, r8, #1
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	47b8      	blx	r7
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d10e      	bne.n	8004ae6 <_printf_float+0x42a>
 8004ac8:	e659      	b.n	800477e <_printf_float+0xc2>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4652      	mov	r2, sl
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f43f ae52 	beq.w	800477e <_printf_float+0xc2>
 8004ada:	f108 0801 	add.w	r8, r8, #1
 8004ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4543      	cmp	r3, r8
 8004ae4:	dcf1      	bgt.n	8004aca <_printf_float+0x40e>
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004aec:	e6dc      	b.n	80048a8 <_printf_float+0x1ec>
 8004aee:	f04f 0800 	mov.w	r8, #0
 8004af2:	f104 0a1a 	add.w	sl, r4, #26
 8004af6:	e7f2      	b.n	8004ade <_printf_float+0x422>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4642      	mov	r2, r8
 8004afc:	e7df      	b.n	8004abe <_printf_float+0x402>
 8004afe:	2301      	movs	r3, #1
 8004b00:	464a      	mov	r2, r9
 8004b02:	4631      	mov	r1, r6
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b8      	blx	r7
 8004b08:	3001      	adds	r0, #1
 8004b0a:	f43f ae38 	beq.w	800477e <_printf_float+0xc2>
 8004b0e:	f108 0801 	add.w	r8, r8, #1
 8004b12:	68e3      	ldr	r3, [r4, #12]
 8004b14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b16:	1a5b      	subs	r3, r3, r1
 8004b18:	4543      	cmp	r3, r8
 8004b1a:	dcf0      	bgt.n	8004afe <_printf_float+0x442>
 8004b1c:	e6fa      	b.n	8004914 <_printf_float+0x258>
 8004b1e:	f04f 0800 	mov.w	r8, #0
 8004b22:	f104 0919 	add.w	r9, r4, #25
 8004b26:	e7f4      	b.n	8004b12 <_printf_float+0x456>

08004b28 <_printf_common>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	4699      	mov	r9, r3
 8004b30:	688a      	ldr	r2, [r1, #8]
 8004b32:	690b      	ldr	r3, [r1, #16]
 8004b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	bfb8      	it	lt
 8004b3c:	4613      	movlt	r3, r2
 8004b3e:	6033      	str	r3, [r6, #0]
 8004b40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b44:	4607      	mov	r7, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	b10a      	cbz	r2, 8004b4e <_printf_common+0x26>
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6033      	str	r3, [r6, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	0699      	lsls	r1, r3, #26
 8004b52:	bf42      	ittt	mi
 8004b54:	6833      	ldrmi	r3, [r6, #0]
 8004b56:	3302      	addmi	r3, #2
 8004b58:	6033      	strmi	r3, [r6, #0]
 8004b5a:	6825      	ldr	r5, [r4, #0]
 8004b5c:	f015 0506 	ands.w	r5, r5, #6
 8004b60:	d106      	bne.n	8004b70 <_printf_common+0x48>
 8004b62:	f104 0a19 	add.w	sl, r4, #25
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	6832      	ldr	r2, [r6, #0]
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	dc26      	bgt.n	8004bbe <_printf_common+0x96>
 8004b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b74:	1e13      	subs	r3, r2, #0
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	bf18      	it	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	0692      	lsls	r2, r2, #26
 8004b7e:	d42b      	bmi.n	8004bd8 <_printf_common+0xb0>
 8004b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b84:	4649      	mov	r1, r9
 8004b86:	4638      	mov	r0, r7
 8004b88:	47c0      	blx	r8
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d01e      	beq.n	8004bcc <_printf_common+0xa4>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	68e5      	ldr	r5, [r4, #12]
 8004b92:	6832      	ldr	r2, [r6, #0]
 8004b94:	f003 0306 	and.w	r3, r3, #6
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	bf08      	it	eq
 8004b9c:	1aad      	subeq	r5, r5, r2
 8004b9e:	68a3      	ldr	r3, [r4, #8]
 8004ba0:	6922      	ldr	r2, [r4, #16]
 8004ba2:	bf0c      	ite	eq
 8004ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba8:	2500      	movne	r5, #0
 8004baa:	4293      	cmp	r3, r2
 8004bac:	bfc4      	itt	gt
 8004bae:	1a9b      	subgt	r3, r3, r2
 8004bb0:	18ed      	addgt	r5, r5, r3
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	341a      	adds	r4, #26
 8004bb6:	42b5      	cmp	r5, r6
 8004bb8:	d11a      	bne.n	8004bf0 <_printf_common+0xc8>
 8004bba:	2000      	movs	r0, #0
 8004bbc:	e008      	b.n	8004bd0 <_printf_common+0xa8>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4652      	mov	r2, sl
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	47c0      	blx	r8
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d103      	bne.n	8004bd4 <_printf_common+0xac>
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd4:	3501      	adds	r5, #1
 8004bd6:	e7c6      	b.n	8004b66 <_printf_common+0x3e>
 8004bd8:	18e1      	adds	r1, r4, r3
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	2030      	movs	r0, #48	; 0x30
 8004bde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be2:	4422      	add	r2, r4
 8004be4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004be8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bec:	3302      	adds	r3, #2
 8004bee:	e7c7      	b.n	8004b80 <_printf_common+0x58>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	47c0      	blx	r8
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d0e6      	beq.n	8004bcc <_printf_common+0xa4>
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7d9      	b.n	8004bb6 <_printf_common+0x8e>
	...

08004c04 <_printf_i>:
 8004c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	7e0f      	ldrb	r7, [r1, #24]
 8004c0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c0c:	2f78      	cmp	r7, #120	; 0x78
 8004c0e:	4691      	mov	r9, r2
 8004c10:	4680      	mov	r8, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	469a      	mov	sl, r3
 8004c16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c1a:	d807      	bhi.n	8004c2c <_printf_i+0x28>
 8004c1c:	2f62      	cmp	r7, #98	; 0x62
 8004c1e:	d80a      	bhi.n	8004c36 <_printf_i+0x32>
 8004c20:	2f00      	cmp	r7, #0
 8004c22:	f000 80d8 	beq.w	8004dd6 <_printf_i+0x1d2>
 8004c26:	2f58      	cmp	r7, #88	; 0x58
 8004c28:	f000 80a3 	beq.w	8004d72 <_printf_i+0x16e>
 8004c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c34:	e03a      	b.n	8004cac <_printf_i+0xa8>
 8004c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c3a:	2b15      	cmp	r3, #21
 8004c3c:	d8f6      	bhi.n	8004c2c <_printf_i+0x28>
 8004c3e:	a101      	add	r1, pc, #4	; (adr r1, 8004c44 <_printf_i+0x40>)
 8004c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c44:	08004c9d 	.word	0x08004c9d
 8004c48:	08004cb1 	.word	0x08004cb1
 8004c4c:	08004c2d 	.word	0x08004c2d
 8004c50:	08004c2d 	.word	0x08004c2d
 8004c54:	08004c2d 	.word	0x08004c2d
 8004c58:	08004c2d 	.word	0x08004c2d
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004c2d 	.word	0x08004c2d
 8004c64:	08004c2d 	.word	0x08004c2d
 8004c68:	08004c2d 	.word	0x08004c2d
 8004c6c:	08004c2d 	.word	0x08004c2d
 8004c70:	08004dbd 	.word	0x08004dbd
 8004c74:	08004ce1 	.word	0x08004ce1
 8004c78:	08004d9f 	.word	0x08004d9f
 8004c7c:	08004c2d 	.word	0x08004c2d
 8004c80:	08004c2d 	.word	0x08004c2d
 8004c84:	08004ddf 	.word	0x08004ddf
 8004c88:	08004c2d 	.word	0x08004c2d
 8004c8c:	08004ce1 	.word	0x08004ce1
 8004c90:	08004c2d 	.word	0x08004c2d
 8004c94:	08004c2d 	.word	0x08004c2d
 8004c98:	08004da7 	.word	0x08004da7
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	1d1a      	adds	r2, r3, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	602a      	str	r2, [r5, #0]
 8004ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0a3      	b.n	8004df8 <_printf_i+0x1f4>
 8004cb0:	6820      	ldr	r0, [r4, #0]
 8004cb2:	6829      	ldr	r1, [r5, #0]
 8004cb4:	0606      	lsls	r6, r0, #24
 8004cb6:	f101 0304 	add.w	r3, r1, #4
 8004cba:	d50a      	bpl.n	8004cd2 <_printf_i+0xce>
 8004cbc:	680e      	ldr	r6, [r1, #0]
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	da03      	bge.n	8004ccc <_printf_i+0xc8>
 8004cc4:	232d      	movs	r3, #45	; 0x2d
 8004cc6:	4276      	negs	r6, r6
 8004cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ccc:	485e      	ldr	r0, [pc, #376]	; (8004e48 <_printf_i+0x244>)
 8004cce:	230a      	movs	r3, #10
 8004cd0:	e019      	b.n	8004d06 <_printf_i+0x102>
 8004cd2:	680e      	ldr	r6, [r1, #0]
 8004cd4:	602b      	str	r3, [r5, #0]
 8004cd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cda:	bf18      	it	ne
 8004cdc:	b236      	sxthne	r6, r6
 8004cde:	e7ef      	b.n	8004cc0 <_printf_i+0xbc>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	6820      	ldr	r0, [r4, #0]
 8004ce4:	1d19      	adds	r1, r3, #4
 8004ce6:	6029      	str	r1, [r5, #0]
 8004ce8:	0601      	lsls	r1, r0, #24
 8004cea:	d501      	bpl.n	8004cf0 <_printf_i+0xec>
 8004cec:	681e      	ldr	r6, [r3, #0]
 8004cee:	e002      	b.n	8004cf6 <_printf_i+0xf2>
 8004cf0:	0646      	lsls	r6, r0, #25
 8004cf2:	d5fb      	bpl.n	8004cec <_printf_i+0xe8>
 8004cf4:	881e      	ldrh	r6, [r3, #0]
 8004cf6:	4854      	ldr	r0, [pc, #336]	; (8004e48 <_printf_i+0x244>)
 8004cf8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2308      	moveq	r3, #8
 8004cfe:	230a      	movne	r3, #10
 8004d00:	2100      	movs	r1, #0
 8004d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d06:	6865      	ldr	r5, [r4, #4]
 8004d08:	60a5      	str	r5, [r4, #8]
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	bfa2      	ittt	ge
 8004d0e:	6821      	ldrge	r1, [r4, #0]
 8004d10:	f021 0104 	bicge.w	r1, r1, #4
 8004d14:	6021      	strge	r1, [r4, #0]
 8004d16:	b90e      	cbnz	r6, 8004d1c <_printf_i+0x118>
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	d04d      	beq.n	8004db8 <_printf_i+0x1b4>
 8004d1c:	4615      	mov	r5, r2
 8004d1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d22:	fb03 6711 	mls	r7, r3, r1, r6
 8004d26:	5dc7      	ldrb	r7, [r0, r7]
 8004d28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d2c:	4637      	mov	r7, r6
 8004d2e:	42bb      	cmp	r3, r7
 8004d30:	460e      	mov	r6, r1
 8004d32:	d9f4      	bls.n	8004d1e <_printf_i+0x11a>
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d10b      	bne.n	8004d50 <_printf_i+0x14c>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	07de      	lsls	r6, r3, #31
 8004d3c:	d508      	bpl.n	8004d50 <_printf_i+0x14c>
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	6861      	ldr	r1, [r4, #4]
 8004d42:	4299      	cmp	r1, r3
 8004d44:	bfde      	ittt	le
 8004d46:	2330      	movle	r3, #48	; 0x30
 8004d48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d50:	1b52      	subs	r2, r2, r5
 8004d52:	6122      	str	r2, [r4, #16]
 8004d54:	f8cd a000 	str.w	sl, [sp]
 8004d58:	464b      	mov	r3, r9
 8004d5a:	aa03      	add	r2, sp, #12
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4640      	mov	r0, r8
 8004d60:	f7ff fee2 	bl	8004b28 <_printf_common>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d14c      	bne.n	8004e02 <_printf_i+0x1fe>
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6c:	b004      	add	sp, #16
 8004d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d72:	4835      	ldr	r0, [pc, #212]	; (8004e48 <_printf_i+0x244>)
 8004d74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d78:	6829      	ldr	r1, [r5, #0]
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d80:	6029      	str	r1, [r5, #0]
 8004d82:	061d      	lsls	r5, r3, #24
 8004d84:	d514      	bpl.n	8004db0 <_printf_i+0x1ac>
 8004d86:	07df      	lsls	r7, r3, #31
 8004d88:	bf44      	itt	mi
 8004d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d8e:	6023      	strmi	r3, [r4, #0]
 8004d90:	b91e      	cbnz	r6, 8004d9a <_printf_i+0x196>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	f023 0320 	bic.w	r3, r3, #32
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	e7b0      	b.n	8004d00 <_printf_i+0xfc>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	f043 0320 	orr.w	r3, r3, #32
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	2378      	movs	r3, #120	; 0x78
 8004da8:	4828      	ldr	r0, [pc, #160]	; (8004e4c <_printf_i+0x248>)
 8004daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dae:	e7e3      	b.n	8004d78 <_printf_i+0x174>
 8004db0:	0659      	lsls	r1, r3, #25
 8004db2:	bf48      	it	mi
 8004db4:	b2b6      	uxthmi	r6, r6
 8004db6:	e7e6      	b.n	8004d86 <_printf_i+0x182>
 8004db8:	4615      	mov	r5, r2
 8004dba:	e7bb      	b.n	8004d34 <_printf_i+0x130>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	6826      	ldr	r6, [r4, #0]
 8004dc0:	6961      	ldr	r1, [r4, #20]
 8004dc2:	1d18      	adds	r0, r3, #4
 8004dc4:	6028      	str	r0, [r5, #0]
 8004dc6:	0635      	lsls	r5, r6, #24
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	d501      	bpl.n	8004dd0 <_printf_i+0x1cc>
 8004dcc:	6019      	str	r1, [r3, #0]
 8004dce:	e002      	b.n	8004dd6 <_printf_i+0x1d2>
 8004dd0:	0670      	lsls	r0, r6, #25
 8004dd2:	d5fb      	bpl.n	8004dcc <_printf_i+0x1c8>
 8004dd4:	8019      	strh	r1, [r3, #0]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	6123      	str	r3, [r4, #16]
 8004dda:	4615      	mov	r5, r2
 8004ddc:	e7ba      	b.n	8004d54 <_printf_i+0x150>
 8004dde:	682b      	ldr	r3, [r5, #0]
 8004de0:	1d1a      	adds	r2, r3, #4
 8004de2:	602a      	str	r2, [r5, #0]
 8004de4:	681d      	ldr	r5, [r3, #0]
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	2100      	movs	r1, #0
 8004dea:	4628      	mov	r0, r5
 8004dec:	f7fb fa08 	bl	8000200 <memchr>
 8004df0:	b108      	cbz	r0, 8004df6 <_printf_i+0x1f2>
 8004df2:	1b40      	subs	r0, r0, r5
 8004df4:	6060      	str	r0, [r4, #4]
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e00:	e7a8      	b.n	8004d54 <_printf_i+0x150>
 8004e02:	6923      	ldr	r3, [r4, #16]
 8004e04:	462a      	mov	r2, r5
 8004e06:	4649      	mov	r1, r9
 8004e08:	4640      	mov	r0, r8
 8004e0a:	47d0      	blx	sl
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d0ab      	beq.n	8004d68 <_printf_i+0x164>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	079b      	lsls	r3, r3, #30
 8004e14:	d413      	bmi.n	8004e3e <_printf_i+0x23a>
 8004e16:	68e0      	ldr	r0, [r4, #12]
 8004e18:	9b03      	ldr	r3, [sp, #12]
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	bfb8      	it	lt
 8004e1e:	4618      	movlt	r0, r3
 8004e20:	e7a4      	b.n	8004d6c <_printf_i+0x168>
 8004e22:	2301      	movs	r3, #1
 8004e24:	4632      	mov	r2, r6
 8004e26:	4649      	mov	r1, r9
 8004e28:	4640      	mov	r0, r8
 8004e2a:	47d0      	blx	sl
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d09b      	beq.n	8004d68 <_printf_i+0x164>
 8004e30:	3501      	adds	r5, #1
 8004e32:	68e3      	ldr	r3, [r4, #12]
 8004e34:	9903      	ldr	r1, [sp, #12]
 8004e36:	1a5b      	subs	r3, r3, r1
 8004e38:	42ab      	cmp	r3, r5
 8004e3a:	dcf2      	bgt.n	8004e22 <_printf_i+0x21e>
 8004e3c:	e7eb      	b.n	8004e16 <_printf_i+0x212>
 8004e3e:	2500      	movs	r5, #0
 8004e40:	f104 0619 	add.w	r6, r4, #25
 8004e44:	e7f5      	b.n	8004e32 <_printf_i+0x22e>
 8004e46:	bf00      	nop
 8004e48:	080072fe 	.word	0x080072fe
 8004e4c:	0800730f 	.word	0x0800730f

08004e50 <iprintf>:
 8004e50:	b40f      	push	{r0, r1, r2, r3}
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <iprintf+0x2c>)
 8004e54:	b513      	push	{r0, r1, r4, lr}
 8004e56:	681c      	ldr	r4, [r3, #0]
 8004e58:	b124      	cbz	r4, 8004e64 <iprintf+0x14>
 8004e5a:	69a3      	ldr	r3, [r4, #24]
 8004e5c:	b913      	cbnz	r3, 8004e64 <iprintf+0x14>
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f001 f8da 	bl	8006018 <__sinit>
 8004e64:	ab05      	add	r3, sp, #20
 8004e66:	9a04      	ldr	r2, [sp, #16]
 8004e68:	68a1      	ldr	r1, [r4, #8]
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f001 fe97 	bl	8006ba0 <_vfiprintf_r>
 8004e72:	b002      	add	sp, #8
 8004e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e78:	b004      	add	sp, #16
 8004e7a:	4770      	bx	lr
 8004e7c:	2000001c 	.word	0x2000001c

08004e80 <_puts_r>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	460e      	mov	r6, r1
 8004e84:	4605      	mov	r5, r0
 8004e86:	b118      	cbz	r0, 8004e90 <_puts_r+0x10>
 8004e88:	6983      	ldr	r3, [r0, #24]
 8004e8a:	b90b      	cbnz	r3, 8004e90 <_puts_r+0x10>
 8004e8c:	f001 f8c4 	bl	8006018 <__sinit>
 8004e90:	69ab      	ldr	r3, [r5, #24]
 8004e92:	68ac      	ldr	r4, [r5, #8]
 8004e94:	b913      	cbnz	r3, 8004e9c <_puts_r+0x1c>
 8004e96:	4628      	mov	r0, r5
 8004e98:	f001 f8be 	bl	8006018 <__sinit>
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <_puts_r+0xd0>)
 8004e9e:	429c      	cmp	r4, r3
 8004ea0:	d120      	bne.n	8004ee4 <_puts_r+0x64>
 8004ea2:	686c      	ldr	r4, [r5, #4]
 8004ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea6:	07db      	lsls	r3, r3, #31
 8004ea8:	d405      	bmi.n	8004eb6 <_puts_r+0x36>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	0598      	lsls	r0, r3, #22
 8004eae:	d402      	bmi.n	8004eb6 <_puts_r+0x36>
 8004eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eb2:	f001 f954 	bl	800615e <__retarget_lock_acquire_recursive>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	0719      	lsls	r1, r3, #28
 8004eba:	d51d      	bpl.n	8004ef8 <_puts_r+0x78>
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	b1db      	cbz	r3, 8004ef8 <_puts_r+0x78>
 8004ec0:	3e01      	subs	r6, #1
 8004ec2:	68a3      	ldr	r3, [r4, #8]
 8004ec4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	60a3      	str	r3, [r4, #8]
 8004ecc:	bb39      	cbnz	r1, 8004f1e <_puts_r+0x9e>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da38      	bge.n	8004f44 <_puts_r+0xc4>
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	210a      	movs	r1, #10
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 f848 	bl	8004f6c <__swbuf_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d011      	beq.n	8004f04 <_puts_r+0x84>
 8004ee0:	250a      	movs	r5, #10
 8004ee2:	e011      	b.n	8004f08 <_puts_r+0x88>
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <_puts_r+0xd4>)
 8004ee6:	429c      	cmp	r4, r3
 8004ee8:	d101      	bne.n	8004eee <_puts_r+0x6e>
 8004eea:	68ac      	ldr	r4, [r5, #8]
 8004eec:	e7da      	b.n	8004ea4 <_puts_r+0x24>
 8004eee:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <_puts_r+0xd8>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	bf08      	it	eq
 8004ef4:	68ec      	ldreq	r4, [r5, #12]
 8004ef6:	e7d5      	b.n	8004ea4 <_puts_r+0x24>
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f888 	bl	8005010 <__swsetup_r>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d0dd      	beq.n	8004ec0 <_puts_r+0x40>
 8004f04:	f04f 35ff 	mov.w	r5, #4294967295
 8004f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0a:	07da      	lsls	r2, r3, #31
 8004f0c:	d405      	bmi.n	8004f1a <_puts_r+0x9a>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	059b      	lsls	r3, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_puts_r+0x9a>
 8004f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f16:	f001 f923 	bl	8006160 <__retarget_lock_release_recursive>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da04      	bge.n	8004f2c <_puts_r+0xac>
 8004f22:	69a2      	ldr	r2, [r4, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	dc06      	bgt.n	8004f36 <_puts_r+0xb6>
 8004f28:	290a      	cmp	r1, #10
 8004f2a:	d004      	beq.n	8004f36 <_puts_r+0xb6>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	7019      	strb	r1, [r3, #0]
 8004f34:	e7c5      	b.n	8004ec2 <_puts_r+0x42>
 8004f36:	4622      	mov	r2, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 f817 	bl	8004f6c <__swbuf_r>
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d1bf      	bne.n	8004ec2 <_puts_r+0x42>
 8004f42:	e7df      	b.n	8004f04 <_puts_r+0x84>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	250a      	movs	r5, #10
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	6022      	str	r2, [r4, #0]
 8004f4c:	701d      	strb	r5, [r3, #0]
 8004f4e:	e7db      	b.n	8004f08 <_puts_r+0x88>
 8004f50:	080073d0 	.word	0x080073d0
 8004f54:	080073f0 	.word	0x080073f0
 8004f58:	080073b0 	.word	0x080073b0

08004f5c <puts>:
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <puts+0xc>)
 8004f5e:	4601      	mov	r1, r0
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f7ff bf8d 	b.w	8004e80 <_puts_r>
 8004f66:	bf00      	nop
 8004f68:	2000001c 	.word	0x2000001c

08004f6c <__swbuf_r>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	460e      	mov	r6, r1
 8004f70:	4614      	mov	r4, r2
 8004f72:	4605      	mov	r5, r0
 8004f74:	b118      	cbz	r0, 8004f7e <__swbuf_r+0x12>
 8004f76:	6983      	ldr	r3, [r0, #24]
 8004f78:	b90b      	cbnz	r3, 8004f7e <__swbuf_r+0x12>
 8004f7a:	f001 f84d 	bl	8006018 <__sinit>
 8004f7e:	4b21      	ldr	r3, [pc, #132]	; (8005004 <__swbuf_r+0x98>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	d12b      	bne.n	8004fdc <__swbuf_r+0x70>
 8004f84:	686c      	ldr	r4, [r5, #4]
 8004f86:	69a3      	ldr	r3, [r4, #24]
 8004f88:	60a3      	str	r3, [r4, #8]
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	071a      	lsls	r2, r3, #28
 8004f8e:	d52f      	bpl.n	8004ff0 <__swbuf_r+0x84>
 8004f90:	6923      	ldr	r3, [r4, #16]
 8004f92:	b36b      	cbz	r3, 8004ff0 <__swbuf_r+0x84>
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	1ac0      	subs	r0, r0, r3
 8004f9a:	6963      	ldr	r3, [r4, #20]
 8004f9c:	b2f6      	uxtb	r6, r6
 8004f9e:	4283      	cmp	r3, r0
 8004fa0:	4637      	mov	r7, r6
 8004fa2:	dc04      	bgt.n	8004fae <__swbuf_r+0x42>
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 ffa2 	bl	8005ef0 <_fflush_r>
 8004fac:	bb30      	cbnz	r0, 8004ffc <__swbuf_r+0x90>
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	60a3      	str	r3, [r4, #8]
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	6022      	str	r2, [r4, #0]
 8004fba:	701e      	strb	r6, [r3, #0]
 8004fbc:	6963      	ldr	r3, [r4, #20]
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	4283      	cmp	r3, r0
 8004fc2:	d004      	beq.n	8004fce <__swbuf_r+0x62>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	07db      	lsls	r3, r3, #31
 8004fc8:	d506      	bpl.n	8004fd8 <__swbuf_r+0x6c>
 8004fca:	2e0a      	cmp	r6, #10
 8004fcc:	d104      	bne.n	8004fd8 <__swbuf_r+0x6c>
 8004fce:	4621      	mov	r1, r4
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f000 ff8d 	bl	8005ef0 <_fflush_r>
 8004fd6:	b988      	cbnz	r0, 8004ffc <__swbuf_r+0x90>
 8004fd8:	4638      	mov	r0, r7
 8004fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <__swbuf_r+0x9c>)
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d101      	bne.n	8004fe6 <__swbuf_r+0x7a>
 8004fe2:	68ac      	ldr	r4, [r5, #8]
 8004fe4:	e7cf      	b.n	8004f86 <__swbuf_r+0x1a>
 8004fe6:	4b09      	ldr	r3, [pc, #36]	; (800500c <__swbuf_r+0xa0>)
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	bf08      	it	eq
 8004fec:	68ec      	ldreq	r4, [r5, #12]
 8004fee:	e7ca      	b.n	8004f86 <__swbuf_r+0x1a>
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 f80c 	bl	8005010 <__swsetup_r>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d0cb      	beq.n	8004f94 <__swbuf_r+0x28>
 8004ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8005000:	e7ea      	b.n	8004fd8 <__swbuf_r+0x6c>
 8005002:	bf00      	nop
 8005004:	080073d0 	.word	0x080073d0
 8005008:	080073f0 	.word	0x080073f0
 800500c:	080073b0 	.word	0x080073b0

08005010 <__swsetup_r>:
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <__swsetup_r+0xcc>)
 8005012:	b570      	push	{r4, r5, r6, lr}
 8005014:	681d      	ldr	r5, [r3, #0]
 8005016:	4606      	mov	r6, r0
 8005018:	460c      	mov	r4, r1
 800501a:	b125      	cbz	r5, 8005026 <__swsetup_r+0x16>
 800501c:	69ab      	ldr	r3, [r5, #24]
 800501e:	b913      	cbnz	r3, 8005026 <__swsetup_r+0x16>
 8005020:	4628      	mov	r0, r5
 8005022:	f000 fff9 	bl	8006018 <__sinit>
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <__swsetup_r+0xd0>)
 8005028:	429c      	cmp	r4, r3
 800502a:	d10f      	bne.n	800504c <__swsetup_r+0x3c>
 800502c:	686c      	ldr	r4, [r5, #4]
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005034:	0719      	lsls	r1, r3, #28
 8005036:	d42c      	bmi.n	8005092 <__swsetup_r+0x82>
 8005038:	06dd      	lsls	r5, r3, #27
 800503a:	d411      	bmi.n	8005060 <__swsetup_r+0x50>
 800503c:	2309      	movs	r3, #9
 800503e:	6033      	str	r3, [r6, #0]
 8005040:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005044:	81a3      	strh	r3, [r4, #12]
 8005046:	f04f 30ff 	mov.w	r0, #4294967295
 800504a:	e03e      	b.n	80050ca <__swsetup_r+0xba>
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <__swsetup_r+0xd4>)
 800504e:	429c      	cmp	r4, r3
 8005050:	d101      	bne.n	8005056 <__swsetup_r+0x46>
 8005052:	68ac      	ldr	r4, [r5, #8]
 8005054:	e7eb      	b.n	800502e <__swsetup_r+0x1e>
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <__swsetup_r+0xd8>)
 8005058:	429c      	cmp	r4, r3
 800505a:	bf08      	it	eq
 800505c:	68ec      	ldreq	r4, [r5, #12]
 800505e:	e7e6      	b.n	800502e <__swsetup_r+0x1e>
 8005060:	0758      	lsls	r0, r3, #29
 8005062:	d512      	bpl.n	800508a <__swsetup_r+0x7a>
 8005064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005066:	b141      	cbz	r1, 800507a <__swsetup_r+0x6a>
 8005068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800506c:	4299      	cmp	r1, r3
 800506e:	d002      	beq.n	8005076 <__swsetup_r+0x66>
 8005070:	4630      	mov	r0, r6
 8005072:	f001 fc8b 	bl	800698c <_free_r>
 8005076:	2300      	movs	r3, #0
 8005078:	6363      	str	r3, [r4, #52]	; 0x34
 800507a:	89a3      	ldrh	r3, [r4, #12]
 800507c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	2300      	movs	r3, #0
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f043 0308 	orr.w	r3, r3, #8
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	6923      	ldr	r3, [r4, #16]
 8005094:	b94b      	cbnz	r3, 80050aa <__swsetup_r+0x9a>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800509c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a0:	d003      	beq.n	80050aa <__swsetup_r+0x9a>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4630      	mov	r0, r6
 80050a6:	f001 f881 	bl	80061ac <__smakebuf_r>
 80050aa:	89a0      	ldrh	r0, [r4, #12]
 80050ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050b0:	f010 0301 	ands.w	r3, r0, #1
 80050b4:	d00a      	beq.n	80050cc <__swsetup_r+0xbc>
 80050b6:	2300      	movs	r3, #0
 80050b8:	60a3      	str	r3, [r4, #8]
 80050ba:	6963      	ldr	r3, [r4, #20]
 80050bc:	425b      	negs	r3, r3
 80050be:	61a3      	str	r3, [r4, #24]
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	b943      	cbnz	r3, 80050d6 <__swsetup_r+0xc6>
 80050c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050c8:	d1ba      	bne.n	8005040 <__swsetup_r+0x30>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	0781      	lsls	r1, r0, #30
 80050ce:	bf58      	it	pl
 80050d0:	6963      	ldrpl	r3, [r4, #20]
 80050d2:	60a3      	str	r3, [r4, #8]
 80050d4:	e7f4      	b.n	80050c0 <__swsetup_r+0xb0>
 80050d6:	2000      	movs	r0, #0
 80050d8:	e7f7      	b.n	80050ca <__swsetup_r+0xba>
 80050da:	bf00      	nop
 80050dc:	2000001c 	.word	0x2000001c
 80050e0:	080073d0 	.word	0x080073d0
 80050e4:	080073f0 	.word	0x080073f0
 80050e8:	080073b0 	.word	0x080073b0

080050ec <quorem>:
 80050ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	6903      	ldr	r3, [r0, #16]
 80050f2:	690c      	ldr	r4, [r1, #16]
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	4607      	mov	r7, r0
 80050f8:	f2c0 8081 	blt.w	80051fe <quorem+0x112>
 80050fc:	3c01      	subs	r4, #1
 80050fe:	f101 0814 	add.w	r8, r1, #20
 8005102:	f100 0514 	add.w	r5, r0, #20
 8005106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005114:	3301      	adds	r3, #1
 8005116:	429a      	cmp	r2, r3
 8005118:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800511c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005120:	fbb2 f6f3 	udiv	r6, r2, r3
 8005124:	d331      	bcc.n	800518a <quorem+0x9e>
 8005126:	f04f 0e00 	mov.w	lr, #0
 800512a:	4640      	mov	r0, r8
 800512c:	46ac      	mov	ip, r5
 800512e:	46f2      	mov	sl, lr
 8005130:	f850 2b04 	ldr.w	r2, [r0], #4
 8005134:	b293      	uxth	r3, r2
 8005136:	fb06 e303 	mla	r3, r6, r3, lr
 800513a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800513e:	b29b      	uxth	r3, r3
 8005140:	ebaa 0303 	sub.w	r3, sl, r3
 8005144:	f8dc a000 	ldr.w	sl, [ip]
 8005148:	0c12      	lsrs	r2, r2, #16
 800514a:	fa13 f38a 	uxtah	r3, r3, sl
 800514e:	fb06 e202 	mla	r2, r6, r2, lr
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	9b00      	ldr	r3, [sp, #0]
 8005156:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800515a:	b292      	uxth	r2, r2
 800515c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005164:	f8bd 3000 	ldrh.w	r3, [sp]
 8005168:	4581      	cmp	r9, r0
 800516a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800516e:	f84c 3b04 	str.w	r3, [ip], #4
 8005172:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005176:	d2db      	bcs.n	8005130 <quorem+0x44>
 8005178:	f855 300b 	ldr.w	r3, [r5, fp]
 800517c:	b92b      	cbnz	r3, 800518a <quorem+0x9e>
 800517e:	9b01      	ldr	r3, [sp, #4]
 8005180:	3b04      	subs	r3, #4
 8005182:	429d      	cmp	r5, r3
 8005184:	461a      	mov	r2, r3
 8005186:	d32e      	bcc.n	80051e6 <quorem+0xfa>
 8005188:	613c      	str	r4, [r7, #16]
 800518a:	4638      	mov	r0, r7
 800518c:	f001 fae6 	bl	800675c <__mcmp>
 8005190:	2800      	cmp	r0, #0
 8005192:	db24      	blt.n	80051de <quorem+0xf2>
 8005194:	3601      	adds	r6, #1
 8005196:	4628      	mov	r0, r5
 8005198:	f04f 0c00 	mov.w	ip, #0
 800519c:	f858 2b04 	ldr.w	r2, [r8], #4
 80051a0:	f8d0 e000 	ldr.w	lr, [r0]
 80051a4:	b293      	uxth	r3, r2
 80051a6:	ebac 0303 	sub.w	r3, ip, r3
 80051aa:	0c12      	lsrs	r2, r2, #16
 80051ac:	fa13 f38e 	uxtah	r3, r3, lr
 80051b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051be:	45c1      	cmp	r9, r8
 80051c0:	f840 3b04 	str.w	r3, [r0], #4
 80051c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051c8:	d2e8      	bcs.n	800519c <quorem+0xb0>
 80051ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051d2:	b922      	cbnz	r2, 80051de <quorem+0xf2>
 80051d4:	3b04      	subs	r3, #4
 80051d6:	429d      	cmp	r5, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	d30a      	bcc.n	80051f2 <quorem+0x106>
 80051dc:	613c      	str	r4, [r7, #16]
 80051de:	4630      	mov	r0, r6
 80051e0:	b003      	add	sp, #12
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	2a00      	cmp	r2, #0
 80051ec:	d1cc      	bne.n	8005188 <quorem+0x9c>
 80051ee:	3c01      	subs	r4, #1
 80051f0:	e7c7      	b.n	8005182 <quorem+0x96>
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	3b04      	subs	r3, #4
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	d1f0      	bne.n	80051dc <quorem+0xf0>
 80051fa:	3c01      	subs	r4, #1
 80051fc:	e7eb      	b.n	80051d6 <quorem+0xea>
 80051fe:	2000      	movs	r0, #0
 8005200:	e7ee      	b.n	80051e0 <quorem+0xf4>
 8005202:	0000      	movs	r0, r0
 8005204:	0000      	movs	r0, r0
	...

08005208 <_dtoa_r>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	ed2d 8b04 	vpush	{d8-d9}
 8005210:	ec57 6b10 	vmov	r6, r7, d0
 8005214:	b093      	sub	sp, #76	; 0x4c
 8005216:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005218:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800521c:	9106      	str	r1, [sp, #24]
 800521e:	ee10 aa10 	vmov	sl, s0
 8005222:	4604      	mov	r4, r0
 8005224:	9209      	str	r2, [sp, #36]	; 0x24
 8005226:	930c      	str	r3, [sp, #48]	; 0x30
 8005228:	46bb      	mov	fp, r7
 800522a:	b975      	cbnz	r5, 800524a <_dtoa_r+0x42>
 800522c:	2010      	movs	r0, #16
 800522e:	f000 fffd 	bl	800622c <malloc>
 8005232:	4602      	mov	r2, r0
 8005234:	6260      	str	r0, [r4, #36]	; 0x24
 8005236:	b920      	cbnz	r0, 8005242 <_dtoa_r+0x3a>
 8005238:	4ba7      	ldr	r3, [pc, #668]	; (80054d8 <_dtoa_r+0x2d0>)
 800523a:	21ea      	movs	r1, #234	; 0xea
 800523c:	48a7      	ldr	r0, [pc, #668]	; (80054dc <_dtoa_r+0x2d4>)
 800523e:	f001 fe45 	bl	8006ecc <__assert_func>
 8005242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005246:	6005      	str	r5, [r0, #0]
 8005248:	60c5      	str	r5, [r0, #12]
 800524a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	b151      	cbz	r1, 8005266 <_dtoa_r+0x5e>
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	604a      	str	r2, [r1, #4]
 8005254:	2301      	movs	r3, #1
 8005256:	4093      	lsls	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
 800525a:	4620      	mov	r0, r4
 800525c:	f001 f83c 	bl	80062d8 <_Bfree>
 8005260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	1e3b      	subs	r3, r7, #0
 8005268:	bfaa      	itet	ge
 800526a:	2300      	movge	r3, #0
 800526c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005270:	f8c8 3000 	strge.w	r3, [r8]
 8005274:	4b9a      	ldr	r3, [pc, #616]	; (80054e0 <_dtoa_r+0x2d8>)
 8005276:	bfbc      	itt	lt
 8005278:	2201      	movlt	r2, #1
 800527a:	f8c8 2000 	strlt.w	r2, [r8]
 800527e:	ea33 030b 	bics.w	r3, r3, fp
 8005282:	d11b      	bne.n	80052bc <_dtoa_r+0xb4>
 8005284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005286:	f242 730f 	movw	r3, #9999	; 0x270f
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005290:	4333      	orrs	r3, r6
 8005292:	f000 8592 	beq.w	8005dba <_dtoa_r+0xbb2>
 8005296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005298:	b963      	cbnz	r3, 80052b4 <_dtoa_r+0xac>
 800529a:	4b92      	ldr	r3, [pc, #584]	; (80054e4 <_dtoa_r+0x2dc>)
 800529c:	e022      	b.n	80052e4 <_dtoa_r+0xdc>
 800529e:	4b92      	ldr	r3, [pc, #584]	; (80054e8 <_dtoa_r+0x2e0>)
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	3308      	adds	r3, #8
 80052a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	9801      	ldr	r0, [sp, #4]
 80052aa:	b013      	add	sp, #76	; 0x4c
 80052ac:	ecbd 8b04 	vpop	{d8-d9}
 80052b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b4:	4b8b      	ldr	r3, [pc, #556]	; (80054e4 <_dtoa_r+0x2dc>)
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	3303      	adds	r3, #3
 80052ba:	e7f3      	b.n	80052a4 <_dtoa_r+0x9c>
 80052bc:	2200      	movs	r2, #0
 80052be:	2300      	movs	r3, #0
 80052c0:	4650      	mov	r0, sl
 80052c2:	4659      	mov	r1, fp
 80052c4:	f7fb fc10 	bl	8000ae8 <__aeabi_dcmpeq>
 80052c8:	ec4b ab19 	vmov	d9, sl, fp
 80052cc:	4680      	mov	r8, r0
 80052ce:	b158      	cbz	r0, 80052e8 <_dtoa_r+0xe0>
 80052d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052d2:	2301      	movs	r3, #1
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 856b 	beq.w	8005db4 <_dtoa_r+0xbac>
 80052de:	4883      	ldr	r0, [pc, #524]	; (80054ec <_dtoa_r+0x2e4>)
 80052e0:	6018      	str	r0, [r3, #0]
 80052e2:	1e43      	subs	r3, r0, #1
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	e7df      	b.n	80052a8 <_dtoa_r+0xa0>
 80052e8:	ec4b ab10 	vmov	d0, sl, fp
 80052ec:	aa10      	add	r2, sp, #64	; 0x40
 80052ee:	a911      	add	r1, sp, #68	; 0x44
 80052f0:	4620      	mov	r0, r4
 80052f2:	f001 fad9 	bl	80068a8 <__d2b>
 80052f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80052fa:	ee08 0a10 	vmov	s16, r0
 80052fe:	2d00      	cmp	r5, #0
 8005300:	f000 8084 	beq.w	800540c <_dtoa_r+0x204>
 8005304:	ee19 3a90 	vmov	r3, s19
 8005308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800530c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005310:	4656      	mov	r6, sl
 8005312:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800531a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800531e:	4b74      	ldr	r3, [pc, #464]	; (80054f0 <_dtoa_r+0x2e8>)
 8005320:	2200      	movs	r2, #0
 8005322:	4630      	mov	r0, r6
 8005324:	4639      	mov	r1, r7
 8005326:	f7fa ffbf 	bl	80002a8 <__aeabi_dsub>
 800532a:	a365      	add	r3, pc, #404	; (adr r3, 80054c0 <_dtoa_r+0x2b8>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f7fb f972 	bl	8000618 <__aeabi_dmul>
 8005334:	a364      	add	r3, pc, #400	; (adr r3, 80054c8 <_dtoa_r+0x2c0>)
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f7fa ffb7 	bl	80002ac <__adddf3>
 800533e:	4606      	mov	r6, r0
 8005340:	4628      	mov	r0, r5
 8005342:	460f      	mov	r7, r1
 8005344:	f7fb f8fe 	bl	8000544 <__aeabi_i2d>
 8005348:	a361      	add	r3, pc, #388	; (adr r3, 80054d0 <_dtoa_r+0x2c8>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fb f963 	bl	8000618 <__aeabi_dmul>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4630      	mov	r0, r6
 8005358:	4639      	mov	r1, r7
 800535a:	f7fa ffa7 	bl	80002ac <__adddf3>
 800535e:	4606      	mov	r6, r0
 8005360:	460f      	mov	r7, r1
 8005362:	f7fb fc09 	bl	8000b78 <__aeabi_d2iz>
 8005366:	2200      	movs	r2, #0
 8005368:	9000      	str	r0, [sp, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	4630      	mov	r0, r6
 800536e:	4639      	mov	r1, r7
 8005370:	f7fb fbc4 	bl	8000afc <__aeabi_dcmplt>
 8005374:	b150      	cbz	r0, 800538c <_dtoa_r+0x184>
 8005376:	9800      	ldr	r0, [sp, #0]
 8005378:	f7fb f8e4 	bl	8000544 <__aeabi_i2d>
 800537c:	4632      	mov	r2, r6
 800537e:	463b      	mov	r3, r7
 8005380:	f7fb fbb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005384:	b910      	cbnz	r0, 800538c <_dtoa_r+0x184>
 8005386:	9b00      	ldr	r3, [sp, #0]
 8005388:	3b01      	subs	r3, #1
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	9b00      	ldr	r3, [sp, #0]
 800538e:	2b16      	cmp	r3, #22
 8005390:	d85a      	bhi.n	8005448 <_dtoa_r+0x240>
 8005392:	9a00      	ldr	r2, [sp, #0]
 8005394:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <_dtoa_r+0x2ec>)
 8005396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	ec51 0b19 	vmov	r0, r1, d9
 80053a2:	f7fb fbab 	bl	8000afc <__aeabi_dcmplt>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d050      	beq.n	800544c <_dtoa_r+0x244>
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	2300      	movs	r3, #0
 80053b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053b6:	1b5d      	subs	r5, r3, r5
 80053b8:	1e6b      	subs	r3, r5, #1
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	bf45      	ittet	mi
 80053be:	f1c5 0301 	rsbmi	r3, r5, #1
 80053c2:	9304      	strmi	r3, [sp, #16]
 80053c4:	2300      	movpl	r3, #0
 80053c6:	2300      	movmi	r3, #0
 80053c8:	bf4c      	ite	mi
 80053ca:	9305      	strmi	r3, [sp, #20]
 80053cc:	9304      	strpl	r3, [sp, #16]
 80053ce:	9b00      	ldr	r3, [sp, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	db3d      	blt.n	8005450 <_dtoa_r+0x248>
 80053d4:	9b05      	ldr	r3, [sp, #20]
 80053d6:	9a00      	ldr	r2, [sp, #0]
 80053d8:	920a      	str	r2, [sp, #40]	; 0x28
 80053da:	4413      	add	r3, r2
 80053dc:	9305      	str	r3, [sp, #20]
 80053de:	2300      	movs	r3, #0
 80053e0:	9307      	str	r3, [sp, #28]
 80053e2:	9b06      	ldr	r3, [sp, #24]
 80053e4:	2b09      	cmp	r3, #9
 80053e6:	f200 8089 	bhi.w	80054fc <_dtoa_r+0x2f4>
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	bfc4      	itt	gt
 80053ee:	3b04      	subgt	r3, #4
 80053f0:	9306      	strgt	r3, [sp, #24]
 80053f2:	9b06      	ldr	r3, [sp, #24]
 80053f4:	f1a3 0302 	sub.w	r3, r3, #2
 80053f8:	bfcc      	ite	gt
 80053fa:	2500      	movgt	r5, #0
 80053fc:	2501      	movle	r5, #1
 80053fe:	2b03      	cmp	r3, #3
 8005400:	f200 8087 	bhi.w	8005512 <_dtoa_r+0x30a>
 8005404:	e8df f003 	tbb	[pc, r3]
 8005408:	59383a2d 	.word	0x59383a2d
 800540c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005410:	441d      	add	r5, r3
 8005412:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005416:	2b20      	cmp	r3, #32
 8005418:	bfc1      	itttt	gt
 800541a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800541e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005422:	fa0b f303 	lslgt.w	r3, fp, r3
 8005426:	fa26 f000 	lsrgt.w	r0, r6, r0
 800542a:	bfda      	itte	le
 800542c:	f1c3 0320 	rsble	r3, r3, #32
 8005430:	fa06 f003 	lslle.w	r0, r6, r3
 8005434:	4318      	orrgt	r0, r3
 8005436:	f7fb f875 	bl	8000524 <__aeabi_ui2d>
 800543a:	2301      	movs	r3, #1
 800543c:	4606      	mov	r6, r0
 800543e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005442:	3d01      	subs	r5, #1
 8005444:	930e      	str	r3, [sp, #56]	; 0x38
 8005446:	e76a      	b.n	800531e <_dtoa_r+0x116>
 8005448:	2301      	movs	r3, #1
 800544a:	e7b2      	b.n	80053b2 <_dtoa_r+0x1aa>
 800544c:	900b      	str	r0, [sp, #44]	; 0x2c
 800544e:	e7b1      	b.n	80053b4 <_dtoa_r+0x1ac>
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	9a00      	ldr	r2, [sp, #0]
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	4253      	negs	r3, r2
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	2300      	movs	r3, #0
 800545e:	930a      	str	r3, [sp, #40]	; 0x28
 8005460:	e7bf      	b.n	80053e2 <_dtoa_r+0x1da>
 8005462:	2300      	movs	r3, #0
 8005464:	9308      	str	r3, [sp, #32]
 8005466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	dc55      	bgt.n	8005518 <_dtoa_r+0x310>
 800546c:	2301      	movs	r3, #1
 800546e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005472:	461a      	mov	r2, r3
 8005474:	9209      	str	r2, [sp, #36]	; 0x24
 8005476:	e00c      	b.n	8005492 <_dtoa_r+0x28a>
 8005478:	2301      	movs	r3, #1
 800547a:	e7f3      	b.n	8005464 <_dtoa_r+0x25c>
 800547c:	2300      	movs	r3, #0
 800547e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005480:	9308      	str	r3, [sp, #32]
 8005482:	9b00      	ldr	r3, [sp, #0]
 8005484:	4413      	add	r3, r2
 8005486:	9302      	str	r3, [sp, #8]
 8005488:	3301      	adds	r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	9303      	str	r3, [sp, #12]
 800548e:	bfb8      	it	lt
 8005490:	2301      	movlt	r3, #1
 8005492:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005494:	2200      	movs	r2, #0
 8005496:	6042      	str	r2, [r0, #4]
 8005498:	2204      	movs	r2, #4
 800549a:	f102 0614 	add.w	r6, r2, #20
 800549e:	429e      	cmp	r6, r3
 80054a0:	6841      	ldr	r1, [r0, #4]
 80054a2:	d93d      	bls.n	8005520 <_dtoa_r+0x318>
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fed7 	bl	8006258 <_Balloc>
 80054aa:	9001      	str	r0, [sp, #4]
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d13b      	bne.n	8005528 <_dtoa_r+0x320>
 80054b0:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <_dtoa_r+0x2f0>)
 80054b2:	4602      	mov	r2, r0
 80054b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054b8:	e6c0      	b.n	800523c <_dtoa_r+0x34>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7df      	b.n	800547e <_dtoa_r+0x276>
 80054be:	bf00      	nop
 80054c0:	636f4361 	.word	0x636f4361
 80054c4:	3fd287a7 	.word	0x3fd287a7
 80054c8:	8b60c8b3 	.word	0x8b60c8b3
 80054cc:	3fc68a28 	.word	0x3fc68a28
 80054d0:	509f79fb 	.word	0x509f79fb
 80054d4:	3fd34413 	.word	0x3fd34413
 80054d8:	0800732d 	.word	0x0800732d
 80054dc:	08007344 	.word	0x08007344
 80054e0:	7ff00000 	.word	0x7ff00000
 80054e4:	08007329 	.word	0x08007329
 80054e8:	08007320 	.word	0x08007320
 80054ec:	080072fd 	.word	0x080072fd
 80054f0:	3ff80000 	.word	0x3ff80000
 80054f4:	08007498 	.word	0x08007498
 80054f8:	0800739f 	.word	0x0800739f
 80054fc:	2501      	movs	r5, #1
 80054fe:	2300      	movs	r3, #0
 8005500:	9306      	str	r3, [sp, #24]
 8005502:	9508      	str	r5, [sp, #32]
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800550c:	2200      	movs	r2, #0
 800550e:	2312      	movs	r3, #18
 8005510:	e7b0      	b.n	8005474 <_dtoa_r+0x26c>
 8005512:	2301      	movs	r3, #1
 8005514:	9308      	str	r3, [sp, #32]
 8005516:	e7f5      	b.n	8005504 <_dtoa_r+0x2fc>
 8005518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800551e:	e7b8      	b.n	8005492 <_dtoa_r+0x28a>
 8005520:	3101      	adds	r1, #1
 8005522:	6041      	str	r1, [r0, #4]
 8005524:	0052      	lsls	r2, r2, #1
 8005526:	e7b8      	b.n	800549a <_dtoa_r+0x292>
 8005528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552a:	9a01      	ldr	r2, [sp, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	2b0e      	cmp	r3, #14
 8005532:	f200 809d 	bhi.w	8005670 <_dtoa_r+0x468>
 8005536:	2d00      	cmp	r5, #0
 8005538:	f000 809a 	beq.w	8005670 <_dtoa_r+0x468>
 800553c:	9b00      	ldr	r3, [sp, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	dd32      	ble.n	80055a8 <_dtoa_r+0x3a0>
 8005542:	4ab7      	ldr	r2, [pc, #732]	; (8005820 <_dtoa_r+0x618>)
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800554c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005550:	9b00      	ldr	r3, [sp, #0]
 8005552:	05d8      	lsls	r0, r3, #23
 8005554:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005558:	d516      	bpl.n	8005588 <_dtoa_r+0x380>
 800555a:	4bb2      	ldr	r3, [pc, #712]	; (8005824 <_dtoa_r+0x61c>)
 800555c:	ec51 0b19 	vmov	r0, r1, d9
 8005560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005564:	f7fb f982 	bl	800086c <__aeabi_ddiv>
 8005568:	f007 070f 	and.w	r7, r7, #15
 800556c:	4682      	mov	sl, r0
 800556e:	468b      	mov	fp, r1
 8005570:	2503      	movs	r5, #3
 8005572:	4eac      	ldr	r6, [pc, #688]	; (8005824 <_dtoa_r+0x61c>)
 8005574:	b957      	cbnz	r7, 800558c <_dtoa_r+0x384>
 8005576:	4642      	mov	r2, r8
 8005578:	464b      	mov	r3, r9
 800557a:	4650      	mov	r0, sl
 800557c:	4659      	mov	r1, fp
 800557e:	f7fb f975 	bl	800086c <__aeabi_ddiv>
 8005582:	4682      	mov	sl, r0
 8005584:	468b      	mov	fp, r1
 8005586:	e028      	b.n	80055da <_dtoa_r+0x3d2>
 8005588:	2502      	movs	r5, #2
 800558a:	e7f2      	b.n	8005572 <_dtoa_r+0x36a>
 800558c:	07f9      	lsls	r1, r7, #31
 800558e:	d508      	bpl.n	80055a2 <_dtoa_r+0x39a>
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005598:	f7fb f83e 	bl	8000618 <__aeabi_dmul>
 800559c:	3501      	adds	r5, #1
 800559e:	4680      	mov	r8, r0
 80055a0:	4689      	mov	r9, r1
 80055a2:	107f      	asrs	r7, r7, #1
 80055a4:	3608      	adds	r6, #8
 80055a6:	e7e5      	b.n	8005574 <_dtoa_r+0x36c>
 80055a8:	f000 809b 	beq.w	80056e2 <_dtoa_r+0x4da>
 80055ac:	9b00      	ldr	r3, [sp, #0]
 80055ae:	4f9d      	ldr	r7, [pc, #628]	; (8005824 <_dtoa_r+0x61c>)
 80055b0:	425e      	negs	r6, r3
 80055b2:	4b9b      	ldr	r3, [pc, #620]	; (8005820 <_dtoa_r+0x618>)
 80055b4:	f006 020f 	and.w	r2, r6, #15
 80055b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	ec51 0b19 	vmov	r0, r1, d9
 80055c4:	f7fb f828 	bl	8000618 <__aeabi_dmul>
 80055c8:	1136      	asrs	r6, r6, #4
 80055ca:	4682      	mov	sl, r0
 80055cc:	468b      	mov	fp, r1
 80055ce:	2300      	movs	r3, #0
 80055d0:	2502      	movs	r5, #2
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	d17a      	bne.n	80056cc <_dtoa_r+0x4c4>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1d3      	bne.n	8005582 <_dtoa_r+0x37a>
 80055da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8082 	beq.w	80056e6 <_dtoa_r+0x4de>
 80055e2:	4b91      	ldr	r3, [pc, #580]	; (8005828 <_dtoa_r+0x620>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	4650      	mov	r0, sl
 80055e8:	4659      	mov	r1, fp
 80055ea:	f7fb fa87 	bl	8000afc <__aeabi_dcmplt>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d079      	beq.n	80056e6 <_dtoa_r+0x4de>
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d076      	beq.n	80056e6 <_dtoa_r+0x4de>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	dd36      	ble.n	800566c <_dtoa_r+0x464>
 80055fe:	9b00      	ldr	r3, [sp, #0]
 8005600:	4650      	mov	r0, sl
 8005602:	4659      	mov	r1, fp
 8005604:	1e5f      	subs	r7, r3, #1
 8005606:	2200      	movs	r2, #0
 8005608:	4b88      	ldr	r3, [pc, #544]	; (800582c <_dtoa_r+0x624>)
 800560a:	f7fb f805 	bl	8000618 <__aeabi_dmul>
 800560e:	9e02      	ldr	r6, [sp, #8]
 8005610:	4682      	mov	sl, r0
 8005612:	468b      	mov	fp, r1
 8005614:	3501      	adds	r5, #1
 8005616:	4628      	mov	r0, r5
 8005618:	f7fa ff94 	bl	8000544 <__aeabi_i2d>
 800561c:	4652      	mov	r2, sl
 800561e:	465b      	mov	r3, fp
 8005620:	f7fa fffa 	bl	8000618 <__aeabi_dmul>
 8005624:	4b82      	ldr	r3, [pc, #520]	; (8005830 <_dtoa_r+0x628>)
 8005626:	2200      	movs	r2, #0
 8005628:	f7fa fe40 	bl	80002ac <__adddf3>
 800562c:	46d0      	mov	r8, sl
 800562e:	46d9      	mov	r9, fp
 8005630:	4682      	mov	sl, r0
 8005632:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005636:	2e00      	cmp	r6, #0
 8005638:	d158      	bne.n	80056ec <_dtoa_r+0x4e4>
 800563a:	4b7e      	ldr	r3, [pc, #504]	; (8005834 <_dtoa_r+0x62c>)
 800563c:	2200      	movs	r2, #0
 800563e:	4640      	mov	r0, r8
 8005640:	4649      	mov	r1, r9
 8005642:	f7fa fe31 	bl	80002a8 <__aeabi_dsub>
 8005646:	4652      	mov	r2, sl
 8005648:	465b      	mov	r3, fp
 800564a:	4680      	mov	r8, r0
 800564c:	4689      	mov	r9, r1
 800564e:	f7fb fa73 	bl	8000b38 <__aeabi_dcmpgt>
 8005652:	2800      	cmp	r0, #0
 8005654:	f040 8295 	bne.w	8005b82 <_dtoa_r+0x97a>
 8005658:	4652      	mov	r2, sl
 800565a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800565e:	4640      	mov	r0, r8
 8005660:	4649      	mov	r1, r9
 8005662:	f7fb fa4b 	bl	8000afc <__aeabi_dcmplt>
 8005666:	2800      	cmp	r0, #0
 8005668:	f040 8289 	bne.w	8005b7e <_dtoa_r+0x976>
 800566c:	ec5b ab19 	vmov	sl, fp, d9
 8005670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005672:	2b00      	cmp	r3, #0
 8005674:	f2c0 8148 	blt.w	8005908 <_dtoa_r+0x700>
 8005678:	9a00      	ldr	r2, [sp, #0]
 800567a:	2a0e      	cmp	r2, #14
 800567c:	f300 8144 	bgt.w	8005908 <_dtoa_r+0x700>
 8005680:	4b67      	ldr	r3, [pc, #412]	; (8005820 <_dtoa_r+0x618>)
 8005682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005686:	e9d3 8900 	ldrd	r8, r9, [r3]
 800568a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	f280 80d5 	bge.w	800583c <_dtoa_r+0x634>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f300 80d1 	bgt.w	800583c <_dtoa_r+0x634>
 800569a:	f040 826f 	bne.w	8005b7c <_dtoa_r+0x974>
 800569e:	4b65      	ldr	r3, [pc, #404]	; (8005834 <_dtoa_r+0x62c>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	4640      	mov	r0, r8
 80056a4:	4649      	mov	r1, r9
 80056a6:	f7fa ffb7 	bl	8000618 <__aeabi_dmul>
 80056aa:	4652      	mov	r2, sl
 80056ac:	465b      	mov	r3, fp
 80056ae:	f7fb fa39 	bl	8000b24 <__aeabi_dcmpge>
 80056b2:	9e03      	ldr	r6, [sp, #12]
 80056b4:	4637      	mov	r7, r6
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f040 8245 	bne.w	8005b46 <_dtoa_r+0x93e>
 80056bc:	9d01      	ldr	r5, [sp, #4]
 80056be:	2331      	movs	r3, #49	; 0x31
 80056c0:	f805 3b01 	strb.w	r3, [r5], #1
 80056c4:	9b00      	ldr	r3, [sp, #0]
 80056c6:	3301      	adds	r3, #1
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	e240      	b.n	8005b4e <_dtoa_r+0x946>
 80056cc:	07f2      	lsls	r2, r6, #31
 80056ce:	d505      	bpl.n	80056dc <_dtoa_r+0x4d4>
 80056d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056d4:	f7fa ffa0 	bl	8000618 <__aeabi_dmul>
 80056d8:	3501      	adds	r5, #1
 80056da:	2301      	movs	r3, #1
 80056dc:	1076      	asrs	r6, r6, #1
 80056de:	3708      	adds	r7, #8
 80056e0:	e777      	b.n	80055d2 <_dtoa_r+0x3ca>
 80056e2:	2502      	movs	r5, #2
 80056e4:	e779      	b.n	80055da <_dtoa_r+0x3d2>
 80056e6:	9f00      	ldr	r7, [sp, #0]
 80056e8:	9e03      	ldr	r6, [sp, #12]
 80056ea:	e794      	b.n	8005616 <_dtoa_r+0x40e>
 80056ec:	9901      	ldr	r1, [sp, #4]
 80056ee:	4b4c      	ldr	r3, [pc, #304]	; (8005820 <_dtoa_r+0x618>)
 80056f0:	4431      	add	r1, r6
 80056f2:	910d      	str	r1, [sp, #52]	; 0x34
 80056f4:	9908      	ldr	r1, [sp, #32]
 80056f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80056fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056fe:	2900      	cmp	r1, #0
 8005700:	d043      	beq.n	800578a <_dtoa_r+0x582>
 8005702:	494d      	ldr	r1, [pc, #308]	; (8005838 <_dtoa_r+0x630>)
 8005704:	2000      	movs	r0, #0
 8005706:	f7fb f8b1 	bl	800086c <__aeabi_ddiv>
 800570a:	4652      	mov	r2, sl
 800570c:	465b      	mov	r3, fp
 800570e:	f7fa fdcb 	bl	80002a8 <__aeabi_dsub>
 8005712:	9d01      	ldr	r5, [sp, #4]
 8005714:	4682      	mov	sl, r0
 8005716:	468b      	mov	fp, r1
 8005718:	4649      	mov	r1, r9
 800571a:	4640      	mov	r0, r8
 800571c:	f7fb fa2c 	bl	8000b78 <__aeabi_d2iz>
 8005720:	4606      	mov	r6, r0
 8005722:	f7fa ff0f 	bl	8000544 <__aeabi_i2d>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4640      	mov	r0, r8
 800572c:	4649      	mov	r1, r9
 800572e:	f7fa fdbb 	bl	80002a8 <__aeabi_dsub>
 8005732:	3630      	adds	r6, #48	; 0x30
 8005734:	f805 6b01 	strb.w	r6, [r5], #1
 8005738:	4652      	mov	r2, sl
 800573a:	465b      	mov	r3, fp
 800573c:	4680      	mov	r8, r0
 800573e:	4689      	mov	r9, r1
 8005740:	f7fb f9dc 	bl	8000afc <__aeabi_dcmplt>
 8005744:	2800      	cmp	r0, #0
 8005746:	d163      	bne.n	8005810 <_dtoa_r+0x608>
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	4936      	ldr	r1, [pc, #216]	; (8005828 <_dtoa_r+0x620>)
 800574e:	2000      	movs	r0, #0
 8005750:	f7fa fdaa 	bl	80002a8 <__aeabi_dsub>
 8005754:	4652      	mov	r2, sl
 8005756:	465b      	mov	r3, fp
 8005758:	f7fb f9d0 	bl	8000afc <__aeabi_dcmplt>
 800575c:	2800      	cmp	r0, #0
 800575e:	f040 80b5 	bne.w	80058cc <_dtoa_r+0x6c4>
 8005762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005764:	429d      	cmp	r5, r3
 8005766:	d081      	beq.n	800566c <_dtoa_r+0x464>
 8005768:	4b30      	ldr	r3, [pc, #192]	; (800582c <_dtoa_r+0x624>)
 800576a:	2200      	movs	r2, #0
 800576c:	4650      	mov	r0, sl
 800576e:	4659      	mov	r1, fp
 8005770:	f7fa ff52 	bl	8000618 <__aeabi_dmul>
 8005774:	4b2d      	ldr	r3, [pc, #180]	; (800582c <_dtoa_r+0x624>)
 8005776:	4682      	mov	sl, r0
 8005778:	468b      	mov	fp, r1
 800577a:	4640      	mov	r0, r8
 800577c:	4649      	mov	r1, r9
 800577e:	2200      	movs	r2, #0
 8005780:	f7fa ff4a 	bl	8000618 <__aeabi_dmul>
 8005784:	4680      	mov	r8, r0
 8005786:	4689      	mov	r9, r1
 8005788:	e7c6      	b.n	8005718 <_dtoa_r+0x510>
 800578a:	4650      	mov	r0, sl
 800578c:	4659      	mov	r1, fp
 800578e:	f7fa ff43 	bl	8000618 <__aeabi_dmul>
 8005792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005794:	9d01      	ldr	r5, [sp, #4]
 8005796:	930f      	str	r3, [sp, #60]	; 0x3c
 8005798:	4682      	mov	sl, r0
 800579a:	468b      	mov	fp, r1
 800579c:	4649      	mov	r1, r9
 800579e:	4640      	mov	r0, r8
 80057a0:	f7fb f9ea 	bl	8000b78 <__aeabi_d2iz>
 80057a4:	4606      	mov	r6, r0
 80057a6:	f7fa fecd 	bl	8000544 <__aeabi_i2d>
 80057aa:	3630      	adds	r6, #48	; 0x30
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f7fa fd78 	bl	80002a8 <__aeabi_dsub>
 80057b8:	f805 6b01 	strb.w	r6, [r5], #1
 80057bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057be:	429d      	cmp	r5, r3
 80057c0:	4680      	mov	r8, r0
 80057c2:	4689      	mov	r9, r1
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	d124      	bne.n	8005814 <_dtoa_r+0x60c>
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <_dtoa_r+0x630>)
 80057cc:	4650      	mov	r0, sl
 80057ce:	4659      	mov	r1, fp
 80057d0:	f7fa fd6c 	bl	80002ac <__adddf3>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fb f9ac 	bl	8000b38 <__aeabi_dcmpgt>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d173      	bne.n	80058cc <_dtoa_r+0x6c4>
 80057e4:	4652      	mov	r2, sl
 80057e6:	465b      	mov	r3, fp
 80057e8:	4913      	ldr	r1, [pc, #76]	; (8005838 <_dtoa_r+0x630>)
 80057ea:	2000      	movs	r0, #0
 80057ec:	f7fa fd5c 	bl	80002a8 <__aeabi_dsub>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4640      	mov	r0, r8
 80057f6:	4649      	mov	r1, r9
 80057f8:	f7fb f980 	bl	8000afc <__aeabi_dcmplt>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f43f af35 	beq.w	800566c <_dtoa_r+0x464>
 8005802:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005804:	1e6b      	subs	r3, r5, #1
 8005806:	930f      	str	r3, [sp, #60]	; 0x3c
 8005808:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d0f8      	beq.n	8005802 <_dtoa_r+0x5fa>
 8005810:	9700      	str	r7, [sp, #0]
 8005812:	e049      	b.n	80058a8 <_dtoa_r+0x6a0>
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <_dtoa_r+0x624>)
 8005816:	f7fa feff 	bl	8000618 <__aeabi_dmul>
 800581a:	4680      	mov	r8, r0
 800581c:	4689      	mov	r9, r1
 800581e:	e7bd      	b.n	800579c <_dtoa_r+0x594>
 8005820:	08007498 	.word	0x08007498
 8005824:	08007470 	.word	0x08007470
 8005828:	3ff00000 	.word	0x3ff00000
 800582c:	40240000 	.word	0x40240000
 8005830:	401c0000 	.word	0x401c0000
 8005834:	40140000 	.word	0x40140000
 8005838:	3fe00000 	.word	0x3fe00000
 800583c:	9d01      	ldr	r5, [sp, #4]
 800583e:	4656      	mov	r6, sl
 8005840:	465f      	mov	r7, fp
 8005842:	4642      	mov	r2, r8
 8005844:	464b      	mov	r3, r9
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7fb f80f 	bl	800086c <__aeabi_ddiv>
 800584e:	f7fb f993 	bl	8000b78 <__aeabi_d2iz>
 8005852:	4682      	mov	sl, r0
 8005854:	f7fa fe76 	bl	8000544 <__aeabi_i2d>
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	f7fa fedc 	bl	8000618 <__aeabi_dmul>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800586c:	f7fa fd1c 	bl	80002a8 <__aeabi_dsub>
 8005870:	f805 6b01 	strb.w	r6, [r5], #1
 8005874:	9e01      	ldr	r6, [sp, #4]
 8005876:	9f03      	ldr	r7, [sp, #12]
 8005878:	1bae      	subs	r6, r5, r6
 800587a:	42b7      	cmp	r7, r6
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	d135      	bne.n	80058ee <_dtoa_r+0x6e6>
 8005882:	f7fa fd13 	bl	80002ac <__adddf3>
 8005886:	4642      	mov	r2, r8
 8005888:	464b      	mov	r3, r9
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	f7fb f953 	bl	8000b38 <__aeabi_dcmpgt>
 8005892:	b9d0      	cbnz	r0, 80058ca <_dtoa_r+0x6c2>
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	4630      	mov	r0, r6
 800589a:	4639      	mov	r1, r7
 800589c:	f7fb f924 	bl	8000ae8 <__aeabi_dcmpeq>
 80058a0:	b110      	cbz	r0, 80058a8 <_dtoa_r+0x6a0>
 80058a2:	f01a 0f01 	tst.w	sl, #1
 80058a6:	d110      	bne.n	80058ca <_dtoa_r+0x6c2>
 80058a8:	4620      	mov	r0, r4
 80058aa:	ee18 1a10 	vmov	r1, s16
 80058ae:	f000 fd13 	bl	80062d8 <_Bfree>
 80058b2:	2300      	movs	r3, #0
 80058b4:	9800      	ldr	r0, [sp, #0]
 80058b6:	702b      	strb	r3, [r5, #0]
 80058b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058ba:	3001      	adds	r0, #1
 80058bc:	6018      	str	r0, [r3, #0]
 80058be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f43f acf1 	beq.w	80052a8 <_dtoa_r+0xa0>
 80058c6:	601d      	str	r5, [r3, #0]
 80058c8:	e4ee      	b.n	80052a8 <_dtoa_r+0xa0>
 80058ca:	9f00      	ldr	r7, [sp, #0]
 80058cc:	462b      	mov	r3, r5
 80058ce:	461d      	mov	r5, r3
 80058d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058d4:	2a39      	cmp	r2, #57	; 0x39
 80058d6:	d106      	bne.n	80058e6 <_dtoa_r+0x6de>
 80058d8:	9a01      	ldr	r2, [sp, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d1f7      	bne.n	80058ce <_dtoa_r+0x6c6>
 80058de:	9901      	ldr	r1, [sp, #4]
 80058e0:	2230      	movs	r2, #48	; 0x30
 80058e2:	3701      	adds	r7, #1
 80058e4:	700a      	strb	r2, [r1, #0]
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	3201      	adds	r2, #1
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e790      	b.n	8005810 <_dtoa_r+0x608>
 80058ee:	4ba6      	ldr	r3, [pc, #664]	; (8005b88 <_dtoa_r+0x980>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	f7fa fe91 	bl	8000618 <__aeabi_dmul>
 80058f6:	2200      	movs	r2, #0
 80058f8:	2300      	movs	r3, #0
 80058fa:	4606      	mov	r6, r0
 80058fc:	460f      	mov	r7, r1
 80058fe:	f7fb f8f3 	bl	8000ae8 <__aeabi_dcmpeq>
 8005902:	2800      	cmp	r0, #0
 8005904:	d09d      	beq.n	8005842 <_dtoa_r+0x63a>
 8005906:	e7cf      	b.n	80058a8 <_dtoa_r+0x6a0>
 8005908:	9a08      	ldr	r2, [sp, #32]
 800590a:	2a00      	cmp	r2, #0
 800590c:	f000 80d7 	beq.w	8005abe <_dtoa_r+0x8b6>
 8005910:	9a06      	ldr	r2, [sp, #24]
 8005912:	2a01      	cmp	r2, #1
 8005914:	f300 80ba 	bgt.w	8005a8c <_dtoa_r+0x884>
 8005918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800591a:	2a00      	cmp	r2, #0
 800591c:	f000 80b2 	beq.w	8005a84 <_dtoa_r+0x87c>
 8005920:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005924:	9e07      	ldr	r6, [sp, #28]
 8005926:	9d04      	ldr	r5, [sp, #16]
 8005928:	9a04      	ldr	r2, [sp, #16]
 800592a:	441a      	add	r2, r3
 800592c:	9204      	str	r2, [sp, #16]
 800592e:	9a05      	ldr	r2, [sp, #20]
 8005930:	2101      	movs	r1, #1
 8005932:	441a      	add	r2, r3
 8005934:	4620      	mov	r0, r4
 8005936:	9205      	str	r2, [sp, #20]
 8005938:	f000 fd86 	bl	8006448 <__i2b>
 800593c:	4607      	mov	r7, r0
 800593e:	2d00      	cmp	r5, #0
 8005940:	dd0c      	ble.n	800595c <_dtoa_r+0x754>
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	dd09      	ble.n	800595c <_dtoa_r+0x754>
 8005948:	42ab      	cmp	r3, r5
 800594a:	9a04      	ldr	r2, [sp, #16]
 800594c:	bfa8      	it	ge
 800594e:	462b      	movge	r3, r5
 8005950:	1ad2      	subs	r2, r2, r3
 8005952:	9204      	str	r2, [sp, #16]
 8005954:	9a05      	ldr	r2, [sp, #20]
 8005956:	1aed      	subs	r5, r5, r3
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	9305      	str	r3, [sp, #20]
 800595c:	9b07      	ldr	r3, [sp, #28]
 800595e:	b31b      	cbz	r3, 80059a8 <_dtoa_r+0x7a0>
 8005960:	9b08      	ldr	r3, [sp, #32]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80af 	beq.w	8005ac6 <_dtoa_r+0x8be>
 8005968:	2e00      	cmp	r6, #0
 800596a:	dd13      	ble.n	8005994 <_dtoa_r+0x78c>
 800596c:	4639      	mov	r1, r7
 800596e:	4632      	mov	r2, r6
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fe29 	bl	80065c8 <__pow5mult>
 8005976:	ee18 2a10 	vmov	r2, s16
 800597a:	4601      	mov	r1, r0
 800597c:	4607      	mov	r7, r0
 800597e:	4620      	mov	r0, r4
 8005980:	f000 fd78 	bl	8006474 <__multiply>
 8005984:	ee18 1a10 	vmov	r1, s16
 8005988:	4680      	mov	r8, r0
 800598a:	4620      	mov	r0, r4
 800598c:	f000 fca4 	bl	80062d8 <_Bfree>
 8005990:	ee08 8a10 	vmov	s16, r8
 8005994:	9b07      	ldr	r3, [sp, #28]
 8005996:	1b9a      	subs	r2, r3, r6
 8005998:	d006      	beq.n	80059a8 <_dtoa_r+0x7a0>
 800599a:	ee18 1a10 	vmov	r1, s16
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 fe12 	bl	80065c8 <__pow5mult>
 80059a4:	ee08 0a10 	vmov	s16, r0
 80059a8:	2101      	movs	r1, #1
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 fd4c 	bl	8006448 <__i2b>
 80059b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	4606      	mov	r6, r0
 80059b6:	f340 8088 	ble.w	8005aca <_dtoa_r+0x8c2>
 80059ba:	461a      	mov	r2, r3
 80059bc:	4601      	mov	r1, r0
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 fe02 	bl	80065c8 <__pow5mult>
 80059c4:	9b06      	ldr	r3, [sp, #24]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	4606      	mov	r6, r0
 80059ca:	f340 8081 	ble.w	8005ad0 <_dtoa_r+0x8c8>
 80059ce:	f04f 0800 	mov.w	r8, #0
 80059d2:	6933      	ldr	r3, [r6, #16]
 80059d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059d8:	6918      	ldr	r0, [r3, #16]
 80059da:	f000 fce5 	bl	80063a8 <__hi0bits>
 80059de:	f1c0 0020 	rsb	r0, r0, #32
 80059e2:	9b05      	ldr	r3, [sp, #20]
 80059e4:	4418      	add	r0, r3
 80059e6:	f010 001f 	ands.w	r0, r0, #31
 80059ea:	f000 8092 	beq.w	8005b12 <_dtoa_r+0x90a>
 80059ee:	f1c0 0320 	rsb	r3, r0, #32
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	f340 808a 	ble.w	8005b0c <_dtoa_r+0x904>
 80059f8:	f1c0 001c 	rsb	r0, r0, #28
 80059fc:	9b04      	ldr	r3, [sp, #16]
 80059fe:	4403      	add	r3, r0
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	9b05      	ldr	r3, [sp, #20]
 8005a04:	4403      	add	r3, r0
 8005a06:	4405      	add	r5, r0
 8005a08:	9305      	str	r3, [sp, #20]
 8005a0a:	9b04      	ldr	r3, [sp, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	dd07      	ble.n	8005a20 <_dtoa_r+0x818>
 8005a10:	ee18 1a10 	vmov	r1, s16
 8005a14:	461a      	mov	r2, r3
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 fe30 	bl	800667c <__lshift>
 8005a1c:	ee08 0a10 	vmov	s16, r0
 8005a20:	9b05      	ldr	r3, [sp, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dd05      	ble.n	8005a32 <_dtoa_r+0x82a>
 8005a26:	4631      	mov	r1, r6
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 fe26 	bl	800667c <__lshift>
 8005a30:	4606      	mov	r6, r0
 8005a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d06e      	beq.n	8005b16 <_dtoa_r+0x90e>
 8005a38:	ee18 0a10 	vmov	r0, s16
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	f000 fe8d 	bl	800675c <__mcmp>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	da67      	bge.n	8005b16 <_dtoa_r+0x90e>
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	ee18 1a10 	vmov	r1, s16
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	220a      	movs	r2, #10
 8005a52:	2300      	movs	r3, #0
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 fc61 	bl	800631c <__multadd>
 8005a5a:	9b08      	ldr	r3, [sp, #32]
 8005a5c:	ee08 0a10 	vmov	s16, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 81b1 	beq.w	8005dc8 <_dtoa_r+0xbc0>
 8005a66:	2300      	movs	r3, #0
 8005a68:	4639      	mov	r1, r7
 8005a6a:	220a      	movs	r2, #10
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 fc55 	bl	800631c <__multadd>
 8005a72:	9b02      	ldr	r3, [sp, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	4607      	mov	r7, r0
 8005a78:	f300 808e 	bgt.w	8005b98 <_dtoa_r+0x990>
 8005a7c:	9b06      	ldr	r3, [sp, #24]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	dc51      	bgt.n	8005b26 <_dtoa_r+0x91e>
 8005a82:	e089      	b.n	8005b98 <_dtoa_r+0x990>
 8005a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a8a:	e74b      	b.n	8005924 <_dtoa_r+0x71c>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	1e5e      	subs	r6, r3, #1
 8005a90:	9b07      	ldr	r3, [sp, #28]
 8005a92:	42b3      	cmp	r3, r6
 8005a94:	bfbf      	itttt	lt
 8005a96:	9b07      	ldrlt	r3, [sp, #28]
 8005a98:	9607      	strlt	r6, [sp, #28]
 8005a9a:	1af2      	sublt	r2, r6, r3
 8005a9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a9e:	bfb6      	itet	lt
 8005aa0:	189b      	addlt	r3, r3, r2
 8005aa2:	1b9e      	subge	r6, r3, r6
 8005aa4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	bfb8      	it	lt
 8005aaa:	2600      	movlt	r6, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bfb7      	itett	lt
 8005ab0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ab4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ab8:	1a9d      	sublt	r5, r3, r2
 8005aba:	2300      	movlt	r3, #0
 8005abc:	e734      	b.n	8005928 <_dtoa_r+0x720>
 8005abe:	9e07      	ldr	r6, [sp, #28]
 8005ac0:	9d04      	ldr	r5, [sp, #16]
 8005ac2:	9f08      	ldr	r7, [sp, #32]
 8005ac4:	e73b      	b.n	800593e <_dtoa_r+0x736>
 8005ac6:	9a07      	ldr	r2, [sp, #28]
 8005ac8:	e767      	b.n	800599a <_dtoa_r+0x792>
 8005aca:	9b06      	ldr	r3, [sp, #24]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	dc18      	bgt.n	8005b02 <_dtoa_r+0x8fa>
 8005ad0:	f1ba 0f00 	cmp.w	sl, #0
 8005ad4:	d115      	bne.n	8005b02 <_dtoa_r+0x8fa>
 8005ad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ada:	b993      	cbnz	r3, 8005b02 <_dtoa_r+0x8fa>
 8005adc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ae0:	0d1b      	lsrs	r3, r3, #20
 8005ae2:	051b      	lsls	r3, r3, #20
 8005ae4:	b183      	cbz	r3, 8005b08 <_dtoa_r+0x900>
 8005ae6:	9b04      	ldr	r3, [sp, #16]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	9b05      	ldr	r3, [sp, #20]
 8005aee:	3301      	adds	r3, #1
 8005af0:	9305      	str	r3, [sp, #20]
 8005af2:	f04f 0801 	mov.w	r8, #1
 8005af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f47f af6a 	bne.w	80059d2 <_dtoa_r+0x7ca>
 8005afe:	2001      	movs	r0, #1
 8005b00:	e76f      	b.n	80059e2 <_dtoa_r+0x7da>
 8005b02:	f04f 0800 	mov.w	r8, #0
 8005b06:	e7f6      	b.n	8005af6 <_dtoa_r+0x8ee>
 8005b08:	4698      	mov	r8, r3
 8005b0a:	e7f4      	b.n	8005af6 <_dtoa_r+0x8ee>
 8005b0c:	f43f af7d 	beq.w	8005a0a <_dtoa_r+0x802>
 8005b10:	4618      	mov	r0, r3
 8005b12:	301c      	adds	r0, #28
 8005b14:	e772      	b.n	80059fc <_dtoa_r+0x7f4>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	dc37      	bgt.n	8005b8c <_dtoa_r+0x984>
 8005b1c:	9b06      	ldr	r3, [sp, #24]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	dd34      	ble.n	8005b8c <_dtoa_r+0x984>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	9302      	str	r3, [sp, #8]
 8005b26:	9b02      	ldr	r3, [sp, #8]
 8005b28:	b96b      	cbnz	r3, 8005b46 <_dtoa_r+0x93e>
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	2205      	movs	r2, #5
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fbf4 	bl	800631c <__multadd>
 8005b34:	4601      	mov	r1, r0
 8005b36:	4606      	mov	r6, r0
 8005b38:	ee18 0a10 	vmov	r0, s16
 8005b3c:	f000 fe0e 	bl	800675c <__mcmp>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f73f adbb 	bgt.w	80056bc <_dtoa_r+0x4b4>
 8005b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b48:	9d01      	ldr	r5, [sp, #4]
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	f04f 0800 	mov.w	r8, #0
 8005b52:	4631      	mov	r1, r6
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 fbbf 	bl	80062d8 <_Bfree>
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	f43f aea4 	beq.w	80058a8 <_dtoa_r+0x6a0>
 8005b60:	f1b8 0f00 	cmp.w	r8, #0
 8005b64:	d005      	beq.n	8005b72 <_dtoa_r+0x96a>
 8005b66:	45b8      	cmp	r8, r7
 8005b68:	d003      	beq.n	8005b72 <_dtoa_r+0x96a>
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 fbb3 	bl	80062d8 <_Bfree>
 8005b72:	4639      	mov	r1, r7
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fbaf 	bl	80062d8 <_Bfree>
 8005b7a:	e695      	b.n	80058a8 <_dtoa_r+0x6a0>
 8005b7c:	2600      	movs	r6, #0
 8005b7e:	4637      	mov	r7, r6
 8005b80:	e7e1      	b.n	8005b46 <_dtoa_r+0x93e>
 8005b82:	9700      	str	r7, [sp, #0]
 8005b84:	4637      	mov	r7, r6
 8005b86:	e599      	b.n	80056bc <_dtoa_r+0x4b4>
 8005b88:	40240000 	.word	0x40240000
 8005b8c:	9b08      	ldr	r3, [sp, #32]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80ca 	beq.w	8005d28 <_dtoa_r+0xb20>
 8005b94:	9b03      	ldr	r3, [sp, #12]
 8005b96:	9302      	str	r3, [sp, #8]
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	dd05      	ble.n	8005ba8 <_dtoa_r+0x9a0>
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	462a      	mov	r2, r5
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f000 fd6b 	bl	800667c <__lshift>
 8005ba6:	4607      	mov	r7, r0
 8005ba8:	f1b8 0f00 	cmp.w	r8, #0
 8005bac:	d05b      	beq.n	8005c66 <_dtoa_r+0xa5e>
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 fb51 	bl	8006258 <_Balloc>
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	b928      	cbnz	r0, 8005bc6 <_dtoa_r+0x9be>
 8005bba:	4b87      	ldr	r3, [pc, #540]	; (8005dd8 <_dtoa_r+0xbd0>)
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005bc2:	f7ff bb3b 	b.w	800523c <_dtoa_r+0x34>
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	3202      	adds	r2, #2
 8005bca:	0092      	lsls	r2, r2, #2
 8005bcc:	f107 010c 	add.w	r1, r7, #12
 8005bd0:	300c      	adds	r0, #12
 8005bd2:	f000 fb33 	bl	800623c <memcpy>
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 fd4e 	bl	800667c <__lshift>
 8005be0:	9b01      	ldr	r3, [sp, #4]
 8005be2:	f103 0901 	add.w	r9, r3, #1
 8005be6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	9305      	str	r3, [sp, #20]
 8005bee:	f00a 0301 	and.w	r3, sl, #1
 8005bf2:	46b8      	mov	r8, r7
 8005bf4:	9304      	str	r3, [sp, #16]
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	ee18 0a10 	vmov	r0, s16
 8005bfe:	f7ff fa75 	bl	80050ec <quorem>
 8005c02:	4641      	mov	r1, r8
 8005c04:	9002      	str	r0, [sp, #8]
 8005c06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c0a:	ee18 0a10 	vmov	r0, s16
 8005c0e:	f000 fda5 	bl	800675c <__mcmp>
 8005c12:	463a      	mov	r2, r7
 8005c14:	9003      	str	r0, [sp, #12]
 8005c16:	4631      	mov	r1, r6
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fdbb 	bl	8006794 <__mdiff>
 8005c1e:	68c2      	ldr	r2, [r0, #12]
 8005c20:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c24:	4605      	mov	r5, r0
 8005c26:	bb02      	cbnz	r2, 8005c6a <_dtoa_r+0xa62>
 8005c28:	4601      	mov	r1, r0
 8005c2a:	ee18 0a10 	vmov	r0, s16
 8005c2e:	f000 fd95 	bl	800675c <__mcmp>
 8005c32:	4602      	mov	r2, r0
 8005c34:	4629      	mov	r1, r5
 8005c36:	4620      	mov	r0, r4
 8005c38:	9207      	str	r2, [sp, #28]
 8005c3a:	f000 fb4d 	bl	80062d8 <_Bfree>
 8005c3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005c42:	ea43 0102 	orr.w	r1, r3, r2
 8005c46:	9b04      	ldr	r3, [sp, #16]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	464d      	mov	r5, r9
 8005c4c:	d10f      	bne.n	8005c6e <_dtoa_r+0xa66>
 8005c4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c52:	d02a      	beq.n	8005caa <_dtoa_r+0xaa2>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	dd02      	ble.n	8005c60 <_dtoa_r+0xa58>
 8005c5a:	9b02      	ldr	r3, [sp, #8]
 8005c5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005c60:	f88b a000 	strb.w	sl, [fp]
 8005c64:	e775      	b.n	8005b52 <_dtoa_r+0x94a>
 8005c66:	4638      	mov	r0, r7
 8005c68:	e7ba      	b.n	8005be0 <_dtoa_r+0x9d8>
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	e7e2      	b.n	8005c34 <_dtoa_r+0xa2c>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	db04      	blt.n	8005c7e <_dtoa_r+0xa76>
 8005c74:	9906      	ldr	r1, [sp, #24]
 8005c76:	430b      	orrs	r3, r1
 8005c78:	9904      	ldr	r1, [sp, #16]
 8005c7a:	430b      	orrs	r3, r1
 8005c7c:	d122      	bne.n	8005cc4 <_dtoa_r+0xabc>
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	ddee      	ble.n	8005c60 <_dtoa_r+0xa58>
 8005c82:	ee18 1a10 	vmov	r1, s16
 8005c86:	2201      	movs	r2, #1
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fcf7 	bl	800667c <__lshift>
 8005c8e:	4631      	mov	r1, r6
 8005c90:	ee08 0a10 	vmov	s16, r0
 8005c94:	f000 fd62 	bl	800675c <__mcmp>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	dc03      	bgt.n	8005ca4 <_dtoa_r+0xa9c>
 8005c9c:	d1e0      	bne.n	8005c60 <_dtoa_r+0xa58>
 8005c9e:	f01a 0f01 	tst.w	sl, #1
 8005ca2:	d0dd      	beq.n	8005c60 <_dtoa_r+0xa58>
 8005ca4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ca8:	d1d7      	bne.n	8005c5a <_dtoa_r+0xa52>
 8005caa:	2339      	movs	r3, #57	; 0x39
 8005cac:	f88b 3000 	strb.w	r3, [fp]
 8005cb0:	462b      	mov	r3, r5
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cba:	2a39      	cmp	r2, #57	; 0x39
 8005cbc:	d071      	beq.n	8005da2 <_dtoa_r+0xb9a>
 8005cbe:	3201      	adds	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e746      	b.n	8005b52 <_dtoa_r+0x94a>
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	dd07      	ble.n	8005cd8 <_dtoa_r+0xad0>
 8005cc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ccc:	d0ed      	beq.n	8005caa <_dtoa_r+0xaa2>
 8005cce:	f10a 0301 	add.w	r3, sl, #1
 8005cd2:	f88b 3000 	strb.w	r3, [fp]
 8005cd6:	e73c      	b.n	8005b52 <_dtoa_r+0x94a>
 8005cd8:	9b05      	ldr	r3, [sp, #20]
 8005cda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005cde:	4599      	cmp	r9, r3
 8005ce0:	d047      	beq.n	8005d72 <_dtoa_r+0xb6a>
 8005ce2:	ee18 1a10 	vmov	r1, s16
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	220a      	movs	r2, #10
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 fb16 	bl	800631c <__multadd>
 8005cf0:	45b8      	cmp	r8, r7
 8005cf2:	ee08 0a10 	vmov	s16, r0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	f04f 020a 	mov.w	r2, #10
 8005cfe:	4641      	mov	r1, r8
 8005d00:	4620      	mov	r0, r4
 8005d02:	d106      	bne.n	8005d12 <_dtoa_r+0xb0a>
 8005d04:	f000 fb0a 	bl	800631c <__multadd>
 8005d08:	4680      	mov	r8, r0
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	f109 0901 	add.w	r9, r9, #1
 8005d10:	e772      	b.n	8005bf8 <_dtoa_r+0x9f0>
 8005d12:	f000 fb03 	bl	800631c <__multadd>
 8005d16:	4639      	mov	r1, r7
 8005d18:	4680      	mov	r8, r0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f000 fafc 	bl	800631c <__multadd>
 8005d24:	4607      	mov	r7, r0
 8005d26:	e7f1      	b.n	8005d0c <_dtoa_r+0xb04>
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	9d01      	ldr	r5, [sp, #4]
 8005d2e:	ee18 0a10 	vmov	r0, s16
 8005d32:	4631      	mov	r1, r6
 8005d34:	f7ff f9da 	bl	80050ec <quorem>
 8005d38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d3c:	9b01      	ldr	r3, [sp, #4]
 8005d3e:	f805 ab01 	strb.w	sl, [r5], #1
 8005d42:	1aea      	subs	r2, r5, r3
 8005d44:	9b02      	ldr	r3, [sp, #8]
 8005d46:	4293      	cmp	r3, r2
 8005d48:	dd09      	ble.n	8005d5e <_dtoa_r+0xb56>
 8005d4a:	ee18 1a10 	vmov	r1, s16
 8005d4e:	2300      	movs	r3, #0
 8005d50:	220a      	movs	r2, #10
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 fae2 	bl	800631c <__multadd>
 8005d58:	ee08 0a10 	vmov	s16, r0
 8005d5c:	e7e7      	b.n	8005d2e <_dtoa_r+0xb26>
 8005d5e:	9b02      	ldr	r3, [sp, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bfc8      	it	gt
 8005d64:	461d      	movgt	r5, r3
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	bfd8      	it	le
 8005d6a:	2501      	movle	r5, #1
 8005d6c:	441d      	add	r5, r3
 8005d6e:	f04f 0800 	mov.w	r8, #0
 8005d72:	ee18 1a10 	vmov	r1, s16
 8005d76:	2201      	movs	r2, #1
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fc7f 	bl	800667c <__lshift>
 8005d7e:	4631      	mov	r1, r6
 8005d80:	ee08 0a10 	vmov	s16, r0
 8005d84:	f000 fcea 	bl	800675c <__mcmp>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	dc91      	bgt.n	8005cb0 <_dtoa_r+0xaa8>
 8005d8c:	d102      	bne.n	8005d94 <_dtoa_r+0xb8c>
 8005d8e:	f01a 0f01 	tst.w	sl, #1
 8005d92:	d18d      	bne.n	8005cb0 <_dtoa_r+0xaa8>
 8005d94:	462b      	mov	r3, r5
 8005d96:	461d      	mov	r5, r3
 8005d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d9c:	2a30      	cmp	r2, #48	; 0x30
 8005d9e:	d0fa      	beq.n	8005d96 <_dtoa_r+0xb8e>
 8005da0:	e6d7      	b.n	8005b52 <_dtoa_r+0x94a>
 8005da2:	9a01      	ldr	r2, [sp, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d184      	bne.n	8005cb2 <_dtoa_r+0xaaa>
 8005da8:	9b00      	ldr	r3, [sp, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	2331      	movs	r3, #49	; 0x31
 8005db0:	7013      	strb	r3, [r2, #0]
 8005db2:	e6ce      	b.n	8005b52 <_dtoa_r+0x94a>
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <_dtoa_r+0xbd4>)
 8005db6:	f7ff ba95 	b.w	80052e4 <_dtoa_r+0xdc>
 8005dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f47f aa6e 	bne.w	800529e <_dtoa_r+0x96>
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <_dtoa_r+0xbd8>)
 8005dc4:	f7ff ba8e 	b.w	80052e4 <_dtoa_r+0xdc>
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	dcae      	bgt.n	8005d2c <_dtoa_r+0xb24>
 8005dce:	9b06      	ldr	r3, [sp, #24]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	f73f aea8 	bgt.w	8005b26 <_dtoa_r+0x91e>
 8005dd6:	e7a9      	b.n	8005d2c <_dtoa_r+0xb24>
 8005dd8:	0800739f 	.word	0x0800739f
 8005ddc:	080072fc 	.word	0x080072fc
 8005de0:	08007320 	.word	0x08007320

08005de4 <__sflush_r>:
 8005de4:	898a      	ldrh	r2, [r1, #12]
 8005de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	0710      	lsls	r0, r2, #28
 8005dee:	460c      	mov	r4, r1
 8005df0:	d458      	bmi.n	8005ea4 <__sflush_r+0xc0>
 8005df2:	684b      	ldr	r3, [r1, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dc05      	bgt.n	8005e04 <__sflush_r+0x20>
 8005df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dc02      	bgt.n	8005e04 <__sflush_r+0x20>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	d0f9      	beq.n	8005dfe <__sflush_r+0x1a>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e10:	682f      	ldr	r7, [r5, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	d032      	beq.n	8005e7c <__sflush_r+0x98>
 8005e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	075a      	lsls	r2, r3, #29
 8005e1c:	d505      	bpl.n	8005e2a <__sflush_r+0x46>
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	1ac0      	subs	r0, r0, r3
 8005e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e24:	b10b      	cbz	r3, 8005e2a <__sflush_r+0x46>
 8005e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e28:	1ac0      	subs	r0, r0, r3
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e30:	6a21      	ldr	r1, [r4, #32]
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b0      	blx	r6
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	d106      	bne.n	8005e4a <__sflush_r+0x66>
 8005e3c:	6829      	ldr	r1, [r5, #0]
 8005e3e:	291d      	cmp	r1, #29
 8005e40:	d82c      	bhi.n	8005e9c <__sflush_r+0xb8>
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <__sflush_r+0x108>)
 8005e44:	40ca      	lsrs	r2, r1
 8005e46:	07d6      	lsls	r6, r2, #31
 8005e48:	d528      	bpl.n	8005e9c <__sflush_r+0xb8>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	6062      	str	r2, [r4, #4]
 8005e4e:	04d9      	lsls	r1, r3, #19
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	d504      	bpl.n	8005e60 <__sflush_r+0x7c>
 8005e56:	1c42      	adds	r2, r0, #1
 8005e58:	d101      	bne.n	8005e5e <__sflush_r+0x7a>
 8005e5a:	682b      	ldr	r3, [r5, #0]
 8005e5c:	b903      	cbnz	r3, 8005e60 <__sflush_r+0x7c>
 8005e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e62:	602f      	str	r7, [r5, #0]
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d0ca      	beq.n	8005dfe <__sflush_r+0x1a>
 8005e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	d002      	beq.n	8005e76 <__sflush_r+0x92>
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 fd8b 	bl	800698c <_free_r>
 8005e76:	2000      	movs	r0, #0
 8005e78:	6360      	str	r0, [r4, #52]	; 0x34
 8005e7a:	e7c1      	b.n	8005e00 <__sflush_r+0x1c>
 8005e7c:	6a21      	ldr	r1, [r4, #32]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b0      	blx	r6
 8005e84:	1c41      	adds	r1, r0, #1
 8005e86:	d1c7      	bne.n	8005e18 <__sflush_r+0x34>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0c4      	beq.n	8005e18 <__sflush_r+0x34>
 8005e8e:	2b1d      	cmp	r3, #29
 8005e90:	d001      	beq.n	8005e96 <__sflush_r+0xb2>
 8005e92:	2b16      	cmp	r3, #22
 8005e94:	d101      	bne.n	8005e9a <__sflush_r+0xb6>
 8005e96:	602f      	str	r7, [r5, #0]
 8005e98:	e7b1      	b.n	8005dfe <__sflush_r+0x1a>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	e7ad      	b.n	8005e00 <__sflush_r+0x1c>
 8005ea4:	690f      	ldr	r7, [r1, #16]
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	d0a9      	beq.n	8005dfe <__sflush_r+0x1a>
 8005eaa:	0793      	lsls	r3, r2, #30
 8005eac:	680e      	ldr	r6, [r1, #0]
 8005eae:	bf08      	it	eq
 8005eb0:	694b      	ldreq	r3, [r1, #20]
 8005eb2:	600f      	str	r7, [r1, #0]
 8005eb4:	bf18      	it	ne
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	eba6 0807 	sub.w	r8, r6, r7
 8005ebc:	608b      	str	r3, [r1, #8]
 8005ebe:	f1b8 0f00 	cmp.w	r8, #0
 8005ec2:	dd9c      	ble.n	8005dfe <__sflush_r+0x1a>
 8005ec4:	6a21      	ldr	r1, [r4, #32]
 8005ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ec8:	4643      	mov	r3, r8
 8005eca:	463a      	mov	r2, r7
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b0      	blx	r6
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	dc06      	bgt.n	8005ee2 <__sflush_r+0xfe>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	e78e      	b.n	8005e00 <__sflush_r+0x1c>
 8005ee2:	4407      	add	r7, r0
 8005ee4:	eba8 0800 	sub.w	r8, r8, r0
 8005ee8:	e7e9      	b.n	8005ebe <__sflush_r+0xda>
 8005eea:	bf00      	nop
 8005eec:	20400001 	.word	0x20400001

08005ef0 <_fflush_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	b913      	cbnz	r3, 8005f00 <_fflush_r+0x10>
 8005efa:	2500      	movs	r5, #0
 8005efc:	4628      	mov	r0, r5
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	b118      	cbz	r0, 8005f0a <_fflush_r+0x1a>
 8005f02:	6983      	ldr	r3, [r0, #24]
 8005f04:	b90b      	cbnz	r3, 8005f0a <_fflush_r+0x1a>
 8005f06:	f000 f887 	bl	8006018 <__sinit>
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <_fflush_r+0x6c>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d11b      	bne.n	8005f48 <_fflush_r+0x58>
 8005f10:	686c      	ldr	r4, [r5, #4]
 8005f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ef      	beq.n	8005efa <_fflush_r+0xa>
 8005f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f1c:	07d0      	lsls	r0, r2, #31
 8005f1e:	d404      	bmi.n	8005f2a <_fflush_r+0x3a>
 8005f20:	0599      	lsls	r1, r3, #22
 8005f22:	d402      	bmi.n	8005f2a <_fflush_r+0x3a>
 8005f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f26:	f000 f91a 	bl	800615e <__retarget_lock_acquire_recursive>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	f7ff ff59 	bl	8005de4 <__sflush_r>
 8005f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f34:	07da      	lsls	r2, r3, #31
 8005f36:	4605      	mov	r5, r0
 8005f38:	d4e0      	bmi.n	8005efc <_fflush_r+0xc>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	059b      	lsls	r3, r3, #22
 8005f3e:	d4dd      	bmi.n	8005efc <_fflush_r+0xc>
 8005f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f42:	f000 f90d 	bl	8006160 <__retarget_lock_release_recursive>
 8005f46:	e7d9      	b.n	8005efc <_fflush_r+0xc>
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <_fflush_r+0x70>)
 8005f4a:	429c      	cmp	r4, r3
 8005f4c:	d101      	bne.n	8005f52 <_fflush_r+0x62>
 8005f4e:	68ac      	ldr	r4, [r5, #8]
 8005f50:	e7df      	b.n	8005f12 <_fflush_r+0x22>
 8005f52:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <_fflush_r+0x74>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	bf08      	it	eq
 8005f58:	68ec      	ldreq	r4, [r5, #12]
 8005f5a:	e7da      	b.n	8005f12 <_fflush_r+0x22>
 8005f5c:	080073d0 	.word	0x080073d0
 8005f60:	080073f0 	.word	0x080073f0
 8005f64:	080073b0 	.word	0x080073b0

08005f68 <std>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f76:	6083      	str	r3, [r0, #8]
 8005f78:	8181      	strh	r1, [r0, #12]
 8005f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f7c:	81c2      	strh	r2, [r0, #14]
 8005f7e:	6183      	str	r3, [r0, #24]
 8005f80:	4619      	mov	r1, r3
 8005f82:	2208      	movs	r2, #8
 8005f84:	305c      	adds	r0, #92	; 0x5c
 8005f86:	f7fe faf1 	bl	800456c <memset>
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x38>)
 8005f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <std+0x3c>)
 8005f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <std+0x40>)
 8005f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <std+0x44>)
 8005f98:	6224      	str	r4, [r4, #32]
 8005f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	08006e21 	.word	0x08006e21
 8005fa4:	08006e43 	.word	0x08006e43
 8005fa8:	08006e7b 	.word	0x08006e7b
 8005fac:	08006e9f 	.word	0x08006e9f

08005fb0 <_cleanup_r>:
 8005fb0:	4901      	ldr	r1, [pc, #4]	; (8005fb8 <_cleanup_r+0x8>)
 8005fb2:	f000 b8af 	b.w	8006114 <_fwalk_reent>
 8005fb6:	bf00      	nop
 8005fb8:	08005ef1 	.word	0x08005ef1

08005fbc <__sfmoreglue>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	2268      	movs	r2, #104	; 0x68
 8005fc0:	1e4d      	subs	r5, r1, #1
 8005fc2:	4355      	muls	r5, r2
 8005fc4:	460e      	mov	r6, r1
 8005fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fca:	f000 fd4b 	bl	8006a64 <_malloc_r>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	b140      	cbz	r0, 8005fe4 <__sfmoreglue+0x28>
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005fd8:	300c      	adds	r0, #12
 8005fda:	60a0      	str	r0, [r4, #8]
 8005fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fe0:	f7fe fac4 	bl	800456c <memset>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}

08005fe8 <__sfp_lock_acquire>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__sfp_lock_acquire+0x8>)
 8005fea:	f000 b8b8 	b.w	800615e <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	2000032f 	.word	0x2000032f

08005ff4 <__sfp_lock_release>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__sfp_lock_release+0x8>)
 8005ff6:	f000 b8b3 	b.w	8006160 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	2000032f 	.word	0x2000032f

08006000 <__sinit_lock_acquire>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__sinit_lock_acquire+0x8>)
 8006002:	f000 b8ac 	b.w	800615e <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	20000330 	.word	0x20000330

0800600c <__sinit_lock_release>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__sinit_lock_release+0x8>)
 800600e:	f000 b8a7 	b.w	8006160 <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	20000330 	.word	0x20000330

08006018 <__sinit>:
 8006018:	b510      	push	{r4, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	f7ff fff0 	bl	8006000 <__sinit_lock_acquire>
 8006020:	69a3      	ldr	r3, [r4, #24]
 8006022:	b11b      	cbz	r3, 800602c <__sinit+0x14>
 8006024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006028:	f7ff bff0 	b.w	800600c <__sinit_lock_release>
 800602c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006030:	6523      	str	r3, [r4, #80]	; 0x50
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <__sinit+0x68>)
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <__sinit+0x6c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	62a2      	str	r2, [r4, #40]	; 0x28
 800603a:	42a3      	cmp	r3, r4
 800603c:	bf04      	itt	eq
 800603e:	2301      	moveq	r3, #1
 8006040:	61a3      	streq	r3, [r4, #24]
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f820 	bl	8006088 <__sfp>
 8006048:	6060      	str	r0, [r4, #4]
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f81c 	bl	8006088 <__sfp>
 8006050:	60a0      	str	r0, [r4, #8]
 8006052:	4620      	mov	r0, r4
 8006054:	f000 f818 	bl	8006088 <__sfp>
 8006058:	2200      	movs	r2, #0
 800605a:	60e0      	str	r0, [r4, #12]
 800605c:	2104      	movs	r1, #4
 800605e:	6860      	ldr	r0, [r4, #4]
 8006060:	f7ff ff82 	bl	8005f68 <std>
 8006064:	68a0      	ldr	r0, [r4, #8]
 8006066:	2201      	movs	r2, #1
 8006068:	2109      	movs	r1, #9
 800606a:	f7ff ff7d 	bl	8005f68 <std>
 800606e:	68e0      	ldr	r0, [r4, #12]
 8006070:	2202      	movs	r2, #2
 8006072:	2112      	movs	r1, #18
 8006074:	f7ff ff78 	bl	8005f68 <std>
 8006078:	2301      	movs	r3, #1
 800607a:	61a3      	str	r3, [r4, #24]
 800607c:	e7d2      	b.n	8006024 <__sinit+0xc>
 800607e:	bf00      	nop
 8006080:	080072e8 	.word	0x080072e8
 8006084:	08005fb1 	.word	0x08005fb1

08006088 <__sfp>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	4607      	mov	r7, r0
 800608c:	f7ff ffac 	bl	8005fe8 <__sfp_lock_acquire>
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <__sfp+0x84>)
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	69b3      	ldr	r3, [r6, #24]
 8006096:	b913      	cbnz	r3, 800609e <__sfp+0x16>
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ffbd 	bl	8006018 <__sinit>
 800609e:	3648      	adds	r6, #72	; 0x48
 80060a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	d503      	bpl.n	80060b0 <__sfp+0x28>
 80060a8:	6833      	ldr	r3, [r6, #0]
 80060aa:	b30b      	cbz	r3, 80060f0 <__sfp+0x68>
 80060ac:	6836      	ldr	r6, [r6, #0]
 80060ae:	e7f7      	b.n	80060a0 <__sfp+0x18>
 80060b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060b4:	b9d5      	cbnz	r5, 80060ec <__sfp+0x64>
 80060b6:	4b16      	ldr	r3, [pc, #88]	; (8006110 <__sfp+0x88>)
 80060b8:	60e3      	str	r3, [r4, #12]
 80060ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060be:	6665      	str	r5, [r4, #100]	; 0x64
 80060c0:	f000 f84c 	bl	800615c <__retarget_lock_init_recursive>
 80060c4:	f7ff ff96 	bl	8005ff4 <__sfp_lock_release>
 80060c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060d0:	6025      	str	r5, [r4, #0]
 80060d2:	61a5      	str	r5, [r4, #24]
 80060d4:	2208      	movs	r2, #8
 80060d6:	4629      	mov	r1, r5
 80060d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060dc:	f7fe fa46 	bl	800456c <memset>
 80060e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060e8:	4620      	mov	r0, r4
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ec:	3468      	adds	r4, #104	; 0x68
 80060ee:	e7d9      	b.n	80060a4 <__sfp+0x1c>
 80060f0:	2104      	movs	r1, #4
 80060f2:	4638      	mov	r0, r7
 80060f4:	f7ff ff62 	bl	8005fbc <__sfmoreglue>
 80060f8:	4604      	mov	r4, r0
 80060fa:	6030      	str	r0, [r6, #0]
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1d5      	bne.n	80060ac <__sfp+0x24>
 8006100:	f7ff ff78 	bl	8005ff4 <__sfp_lock_release>
 8006104:	230c      	movs	r3, #12
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	e7ee      	b.n	80060e8 <__sfp+0x60>
 800610a:	bf00      	nop
 800610c:	080072e8 	.word	0x080072e8
 8006110:	ffff0001 	.word	0xffff0001

08006114 <_fwalk_reent>:
 8006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006118:	4606      	mov	r6, r0
 800611a:	4688      	mov	r8, r1
 800611c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006120:	2700      	movs	r7, #0
 8006122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006126:	f1b9 0901 	subs.w	r9, r9, #1
 800612a:	d505      	bpl.n	8006138 <_fwalk_reent+0x24>
 800612c:	6824      	ldr	r4, [r4, #0]
 800612e:	2c00      	cmp	r4, #0
 8006130:	d1f7      	bne.n	8006122 <_fwalk_reent+0xe>
 8006132:	4638      	mov	r0, r7
 8006134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006138:	89ab      	ldrh	r3, [r5, #12]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d907      	bls.n	800614e <_fwalk_reent+0x3a>
 800613e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006142:	3301      	adds	r3, #1
 8006144:	d003      	beq.n	800614e <_fwalk_reent+0x3a>
 8006146:	4629      	mov	r1, r5
 8006148:	4630      	mov	r0, r6
 800614a:	47c0      	blx	r8
 800614c:	4307      	orrs	r7, r0
 800614e:	3568      	adds	r5, #104	; 0x68
 8006150:	e7e9      	b.n	8006126 <_fwalk_reent+0x12>
	...

08006154 <_localeconv_r>:
 8006154:	4800      	ldr	r0, [pc, #0]	; (8006158 <_localeconv_r+0x4>)
 8006156:	4770      	bx	lr
 8006158:	20000170 	.word	0x20000170

0800615c <__retarget_lock_init_recursive>:
 800615c:	4770      	bx	lr

0800615e <__retarget_lock_acquire_recursive>:
 800615e:	4770      	bx	lr

08006160 <__retarget_lock_release_recursive>:
 8006160:	4770      	bx	lr

08006162 <__swhatbuf_r>:
 8006162:	b570      	push	{r4, r5, r6, lr}
 8006164:	460e      	mov	r6, r1
 8006166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616a:	2900      	cmp	r1, #0
 800616c:	b096      	sub	sp, #88	; 0x58
 800616e:	4614      	mov	r4, r2
 8006170:	461d      	mov	r5, r3
 8006172:	da08      	bge.n	8006186 <__swhatbuf_r+0x24>
 8006174:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	602a      	str	r2, [r5, #0]
 800617c:	061a      	lsls	r2, r3, #24
 800617e:	d410      	bmi.n	80061a2 <__swhatbuf_r+0x40>
 8006180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006184:	e00e      	b.n	80061a4 <__swhatbuf_r+0x42>
 8006186:	466a      	mov	r2, sp
 8006188:	f000 fee0 	bl	8006f4c <_fstat_r>
 800618c:	2800      	cmp	r0, #0
 800618e:	dbf1      	blt.n	8006174 <__swhatbuf_r+0x12>
 8006190:	9a01      	ldr	r2, [sp, #4]
 8006192:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006196:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800619a:	425a      	negs	r2, r3
 800619c:	415a      	adcs	r2, r3
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	e7ee      	b.n	8006180 <__swhatbuf_r+0x1e>
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	2000      	movs	r0, #0
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	b016      	add	sp, #88	; 0x58
 80061aa:	bd70      	pop	{r4, r5, r6, pc}

080061ac <__smakebuf_r>:
 80061ac:	898b      	ldrh	r3, [r1, #12]
 80061ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b0:	079d      	lsls	r5, r3, #30
 80061b2:	4606      	mov	r6, r0
 80061b4:	460c      	mov	r4, r1
 80061b6:	d507      	bpl.n	80061c8 <__smakebuf_r+0x1c>
 80061b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	6123      	str	r3, [r4, #16]
 80061c0:	2301      	movs	r3, #1
 80061c2:	6163      	str	r3, [r4, #20]
 80061c4:	b002      	add	sp, #8
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	ab01      	add	r3, sp, #4
 80061ca:	466a      	mov	r2, sp
 80061cc:	f7ff ffc9 	bl	8006162 <__swhatbuf_r>
 80061d0:	9900      	ldr	r1, [sp, #0]
 80061d2:	4605      	mov	r5, r0
 80061d4:	4630      	mov	r0, r6
 80061d6:	f000 fc45 	bl	8006a64 <_malloc_r>
 80061da:	b948      	cbnz	r0, 80061f0 <__smakebuf_r+0x44>
 80061dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e0:	059a      	lsls	r2, r3, #22
 80061e2:	d4ef      	bmi.n	80061c4 <__smakebuf_r+0x18>
 80061e4:	f023 0303 	bic.w	r3, r3, #3
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	e7e3      	b.n	80061b8 <__smakebuf_r+0xc>
 80061f0:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <__smakebuf_r+0x7c>)
 80061f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	6020      	str	r0, [r4, #0]
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	9b00      	ldr	r3, [sp, #0]
 8006200:	6163      	str	r3, [r4, #20]
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	6120      	str	r0, [r4, #16]
 8006206:	b15b      	cbz	r3, 8006220 <__smakebuf_r+0x74>
 8006208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800620c:	4630      	mov	r0, r6
 800620e:	f000 feaf 	bl	8006f70 <_isatty_r>
 8006212:	b128      	cbz	r0, 8006220 <__smakebuf_r+0x74>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	89a0      	ldrh	r0, [r4, #12]
 8006222:	4305      	orrs	r5, r0
 8006224:	81a5      	strh	r5, [r4, #12]
 8006226:	e7cd      	b.n	80061c4 <__smakebuf_r+0x18>
 8006228:	08005fb1 	.word	0x08005fb1

0800622c <malloc>:
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <malloc+0xc>)
 800622e:	4601      	mov	r1, r0
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	f000 bc17 	b.w	8006a64 <_malloc_r>
 8006236:	bf00      	nop
 8006238:	2000001c 	.word	0x2000001c

0800623c <memcpy>:
 800623c:	440a      	add	r2, r1
 800623e:	4291      	cmp	r1, r2
 8006240:	f100 33ff 	add.w	r3, r0, #4294967295
 8006244:	d100      	bne.n	8006248 <memcpy+0xc>
 8006246:	4770      	bx	lr
 8006248:	b510      	push	{r4, lr}
 800624a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800624e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006252:	4291      	cmp	r1, r2
 8006254:	d1f9      	bne.n	800624a <memcpy+0xe>
 8006256:	bd10      	pop	{r4, pc}

08006258 <_Balloc>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800625c:	4604      	mov	r4, r0
 800625e:	460d      	mov	r5, r1
 8006260:	b976      	cbnz	r6, 8006280 <_Balloc+0x28>
 8006262:	2010      	movs	r0, #16
 8006264:	f7ff ffe2 	bl	800622c <malloc>
 8006268:	4602      	mov	r2, r0
 800626a:	6260      	str	r0, [r4, #36]	; 0x24
 800626c:	b920      	cbnz	r0, 8006278 <_Balloc+0x20>
 800626e:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <_Balloc+0x78>)
 8006270:	4818      	ldr	r0, [pc, #96]	; (80062d4 <_Balloc+0x7c>)
 8006272:	2166      	movs	r1, #102	; 0x66
 8006274:	f000 fe2a 	bl	8006ecc <__assert_func>
 8006278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800627c:	6006      	str	r6, [r0, #0]
 800627e:	60c6      	str	r6, [r0, #12]
 8006280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006282:	68f3      	ldr	r3, [r6, #12]
 8006284:	b183      	cbz	r3, 80062a8 <_Balloc+0x50>
 8006286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800628e:	b9b8      	cbnz	r0, 80062c0 <_Balloc+0x68>
 8006290:	2101      	movs	r1, #1
 8006292:	fa01 f605 	lsl.w	r6, r1, r5
 8006296:	1d72      	adds	r2, r6, #5
 8006298:	0092      	lsls	r2, r2, #2
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fb60 	bl	8006960 <_calloc_r>
 80062a0:	b160      	cbz	r0, 80062bc <_Balloc+0x64>
 80062a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062a6:	e00e      	b.n	80062c6 <_Balloc+0x6e>
 80062a8:	2221      	movs	r2, #33	; 0x21
 80062aa:	2104      	movs	r1, #4
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fb57 	bl	8006960 <_calloc_r>
 80062b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b4:	60f0      	str	r0, [r6, #12]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e4      	bne.n	8006286 <_Balloc+0x2e>
 80062bc:	2000      	movs	r0, #0
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	6802      	ldr	r2, [r0, #0]
 80062c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062c6:	2300      	movs	r3, #0
 80062c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062cc:	e7f7      	b.n	80062be <_Balloc+0x66>
 80062ce:	bf00      	nop
 80062d0:	0800732d 	.word	0x0800732d
 80062d4:	08007410 	.word	0x08007410

080062d8 <_Bfree>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062dc:	4605      	mov	r5, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	b976      	cbnz	r6, 8006300 <_Bfree+0x28>
 80062e2:	2010      	movs	r0, #16
 80062e4:	f7ff ffa2 	bl	800622c <malloc>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6268      	str	r0, [r5, #36]	; 0x24
 80062ec:	b920      	cbnz	r0, 80062f8 <_Bfree+0x20>
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <_Bfree+0x3c>)
 80062f0:	4809      	ldr	r0, [pc, #36]	; (8006318 <_Bfree+0x40>)
 80062f2:	218a      	movs	r1, #138	; 0x8a
 80062f4:	f000 fdea 	bl	8006ecc <__assert_func>
 80062f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062fc:	6006      	str	r6, [r0, #0]
 80062fe:	60c6      	str	r6, [r0, #12]
 8006300:	b13c      	cbz	r4, 8006312 <_Bfree+0x3a>
 8006302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006304:	6862      	ldr	r2, [r4, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800630c:	6021      	str	r1, [r4, #0]
 800630e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	0800732d 	.word	0x0800732d
 8006318:	08007410 	.word	0x08007410

0800631c <__multadd>:
 800631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	690d      	ldr	r5, [r1, #16]
 8006322:	4607      	mov	r7, r0
 8006324:	460c      	mov	r4, r1
 8006326:	461e      	mov	r6, r3
 8006328:	f101 0c14 	add.w	ip, r1, #20
 800632c:	2000      	movs	r0, #0
 800632e:	f8dc 3000 	ldr.w	r3, [ip]
 8006332:	b299      	uxth	r1, r3
 8006334:	fb02 6101 	mla	r1, r2, r1, r6
 8006338:	0c1e      	lsrs	r6, r3, #16
 800633a:	0c0b      	lsrs	r3, r1, #16
 800633c:	fb02 3306 	mla	r3, r2, r6, r3
 8006340:	b289      	uxth	r1, r1
 8006342:	3001      	adds	r0, #1
 8006344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006348:	4285      	cmp	r5, r0
 800634a:	f84c 1b04 	str.w	r1, [ip], #4
 800634e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006352:	dcec      	bgt.n	800632e <__multadd+0x12>
 8006354:	b30e      	cbz	r6, 800639a <__multadd+0x7e>
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	42ab      	cmp	r3, r5
 800635a:	dc19      	bgt.n	8006390 <__multadd+0x74>
 800635c:	6861      	ldr	r1, [r4, #4]
 800635e:	4638      	mov	r0, r7
 8006360:	3101      	adds	r1, #1
 8006362:	f7ff ff79 	bl	8006258 <_Balloc>
 8006366:	4680      	mov	r8, r0
 8006368:	b928      	cbnz	r0, 8006376 <__multadd+0x5a>
 800636a:	4602      	mov	r2, r0
 800636c:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <__multadd+0x84>)
 800636e:	480d      	ldr	r0, [pc, #52]	; (80063a4 <__multadd+0x88>)
 8006370:	21b5      	movs	r1, #181	; 0xb5
 8006372:	f000 fdab 	bl	8006ecc <__assert_func>
 8006376:	6922      	ldr	r2, [r4, #16]
 8006378:	3202      	adds	r2, #2
 800637a:	f104 010c 	add.w	r1, r4, #12
 800637e:	0092      	lsls	r2, r2, #2
 8006380:	300c      	adds	r0, #12
 8006382:	f7ff ff5b 	bl	800623c <memcpy>
 8006386:	4621      	mov	r1, r4
 8006388:	4638      	mov	r0, r7
 800638a:	f7ff ffa5 	bl	80062d8 <_Bfree>
 800638e:	4644      	mov	r4, r8
 8006390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006394:	3501      	adds	r5, #1
 8006396:	615e      	str	r6, [r3, #20]
 8006398:	6125      	str	r5, [r4, #16]
 800639a:	4620      	mov	r0, r4
 800639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a0:	0800739f 	.word	0x0800739f
 80063a4:	08007410 	.word	0x08007410

080063a8 <__hi0bits>:
 80063a8:	0c03      	lsrs	r3, r0, #16
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	b9d3      	cbnz	r3, 80063e4 <__hi0bits+0x3c>
 80063ae:	0400      	lsls	r0, r0, #16
 80063b0:	2310      	movs	r3, #16
 80063b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063b6:	bf04      	itt	eq
 80063b8:	0200      	lsleq	r0, r0, #8
 80063ba:	3308      	addeq	r3, #8
 80063bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063c0:	bf04      	itt	eq
 80063c2:	0100      	lsleq	r0, r0, #4
 80063c4:	3304      	addeq	r3, #4
 80063c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063ca:	bf04      	itt	eq
 80063cc:	0080      	lsleq	r0, r0, #2
 80063ce:	3302      	addeq	r3, #2
 80063d0:	2800      	cmp	r0, #0
 80063d2:	db05      	blt.n	80063e0 <__hi0bits+0x38>
 80063d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063d8:	f103 0301 	add.w	r3, r3, #1
 80063dc:	bf08      	it	eq
 80063de:	2320      	moveq	r3, #32
 80063e0:	4618      	mov	r0, r3
 80063e2:	4770      	bx	lr
 80063e4:	2300      	movs	r3, #0
 80063e6:	e7e4      	b.n	80063b2 <__hi0bits+0xa>

080063e8 <__lo0bits>:
 80063e8:	6803      	ldr	r3, [r0, #0]
 80063ea:	f013 0207 	ands.w	r2, r3, #7
 80063ee:	4601      	mov	r1, r0
 80063f0:	d00b      	beq.n	800640a <__lo0bits+0x22>
 80063f2:	07da      	lsls	r2, r3, #31
 80063f4:	d423      	bmi.n	800643e <__lo0bits+0x56>
 80063f6:	0798      	lsls	r0, r3, #30
 80063f8:	bf49      	itett	mi
 80063fa:	085b      	lsrmi	r3, r3, #1
 80063fc:	089b      	lsrpl	r3, r3, #2
 80063fe:	2001      	movmi	r0, #1
 8006400:	600b      	strmi	r3, [r1, #0]
 8006402:	bf5c      	itt	pl
 8006404:	600b      	strpl	r3, [r1, #0]
 8006406:	2002      	movpl	r0, #2
 8006408:	4770      	bx	lr
 800640a:	b298      	uxth	r0, r3
 800640c:	b9a8      	cbnz	r0, 800643a <__lo0bits+0x52>
 800640e:	0c1b      	lsrs	r3, r3, #16
 8006410:	2010      	movs	r0, #16
 8006412:	b2da      	uxtb	r2, r3
 8006414:	b90a      	cbnz	r2, 800641a <__lo0bits+0x32>
 8006416:	3008      	adds	r0, #8
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	071a      	lsls	r2, r3, #28
 800641c:	bf04      	itt	eq
 800641e:	091b      	lsreq	r3, r3, #4
 8006420:	3004      	addeq	r0, #4
 8006422:	079a      	lsls	r2, r3, #30
 8006424:	bf04      	itt	eq
 8006426:	089b      	lsreq	r3, r3, #2
 8006428:	3002      	addeq	r0, #2
 800642a:	07da      	lsls	r2, r3, #31
 800642c:	d403      	bmi.n	8006436 <__lo0bits+0x4e>
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	f100 0001 	add.w	r0, r0, #1
 8006434:	d005      	beq.n	8006442 <__lo0bits+0x5a>
 8006436:	600b      	str	r3, [r1, #0]
 8006438:	4770      	bx	lr
 800643a:	4610      	mov	r0, r2
 800643c:	e7e9      	b.n	8006412 <__lo0bits+0x2a>
 800643e:	2000      	movs	r0, #0
 8006440:	4770      	bx	lr
 8006442:	2020      	movs	r0, #32
 8006444:	4770      	bx	lr
	...

08006448 <__i2b>:
 8006448:	b510      	push	{r4, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	2101      	movs	r1, #1
 800644e:	f7ff ff03 	bl	8006258 <_Balloc>
 8006452:	4602      	mov	r2, r0
 8006454:	b928      	cbnz	r0, 8006462 <__i2b+0x1a>
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <__i2b+0x24>)
 8006458:	4805      	ldr	r0, [pc, #20]	; (8006470 <__i2b+0x28>)
 800645a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800645e:	f000 fd35 	bl	8006ecc <__assert_func>
 8006462:	2301      	movs	r3, #1
 8006464:	6144      	str	r4, [r0, #20]
 8006466:	6103      	str	r3, [r0, #16]
 8006468:	bd10      	pop	{r4, pc}
 800646a:	bf00      	nop
 800646c:	0800739f 	.word	0x0800739f
 8006470:	08007410 	.word	0x08007410

08006474 <__multiply>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	4691      	mov	r9, r2
 800647a:	690a      	ldr	r2, [r1, #16]
 800647c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006480:	429a      	cmp	r2, r3
 8006482:	bfb8      	it	lt
 8006484:	460b      	movlt	r3, r1
 8006486:	460c      	mov	r4, r1
 8006488:	bfbc      	itt	lt
 800648a:	464c      	movlt	r4, r9
 800648c:	4699      	movlt	r9, r3
 800648e:	6927      	ldr	r7, [r4, #16]
 8006490:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006494:	68a3      	ldr	r3, [r4, #8]
 8006496:	6861      	ldr	r1, [r4, #4]
 8006498:	eb07 060a 	add.w	r6, r7, sl
 800649c:	42b3      	cmp	r3, r6
 800649e:	b085      	sub	sp, #20
 80064a0:	bfb8      	it	lt
 80064a2:	3101      	addlt	r1, #1
 80064a4:	f7ff fed8 	bl	8006258 <_Balloc>
 80064a8:	b930      	cbnz	r0, 80064b8 <__multiply+0x44>
 80064aa:	4602      	mov	r2, r0
 80064ac:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <__multiply+0x14c>)
 80064ae:	4845      	ldr	r0, [pc, #276]	; (80065c4 <__multiply+0x150>)
 80064b0:	f240 115d 	movw	r1, #349	; 0x15d
 80064b4:	f000 fd0a 	bl	8006ecc <__assert_func>
 80064b8:	f100 0514 	add.w	r5, r0, #20
 80064bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064c0:	462b      	mov	r3, r5
 80064c2:	2200      	movs	r2, #0
 80064c4:	4543      	cmp	r3, r8
 80064c6:	d321      	bcc.n	800650c <__multiply+0x98>
 80064c8:	f104 0314 	add.w	r3, r4, #20
 80064cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064d0:	f109 0314 	add.w	r3, r9, #20
 80064d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064d8:	9202      	str	r2, [sp, #8]
 80064da:	1b3a      	subs	r2, r7, r4
 80064dc:	3a15      	subs	r2, #21
 80064de:	f022 0203 	bic.w	r2, r2, #3
 80064e2:	3204      	adds	r2, #4
 80064e4:	f104 0115 	add.w	r1, r4, #21
 80064e8:	428f      	cmp	r7, r1
 80064ea:	bf38      	it	cc
 80064ec:	2204      	movcc	r2, #4
 80064ee:	9201      	str	r2, [sp, #4]
 80064f0:	9a02      	ldr	r2, [sp, #8]
 80064f2:	9303      	str	r3, [sp, #12]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d80c      	bhi.n	8006512 <__multiply+0x9e>
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	dd03      	ble.n	8006504 <__multiply+0x90>
 80064fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006500:	2b00      	cmp	r3, #0
 8006502:	d05a      	beq.n	80065ba <__multiply+0x146>
 8006504:	6106      	str	r6, [r0, #16]
 8006506:	b005      	add	sp, #20
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	f843 2b04 	str.w	r2, [r3], #4
 8006510:	e7d8      	b.n	80064c4 <__multiply+0x50>
 8006512:	f8b3 a000 	ldrh.w	sl, [r3]
 8006516:	f1ba 0f00 	cmp.w	sl, #0
 800651a:	d024      	beq.n	8006566 <__multiply+0xf2>
 800651c:	f104 0e14 	add.w	lr, r4, #20
 8006520:	46a9      	mov	r9, r5
 8006522:	f04f 0c00 	mov.w	ip, #0
 8006526:	f85e 2b04 	ldr.w	r2, [lr], #4
 800652a:	f8d9 1000 	ldr.w	r1, [r9]
 800652e:	fa1f fb82 	uxth.w	fp, r2
 8006532:	b289      	uxth	r1, r1
 8006534:	fb0a 110b 	mla	r1, sl, fp, r1
 8006538:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800653c:	f8d9 2000 	ldr.w	r2, [r9]
 8006540:	4461      	add	r1, ip
 8006542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006546:	fb0a c20b 	mla	r2, sl, fp, ip
 800654a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800654e:	b289      	uxth	r1, r1
 8006550:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006554:	4577      	cmp	r7, lr
 8006556:	f849 1b04 	str.w	r1, [r9], #4
 800655a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800655e:	d8e2      	bhi.n	8006526 <__multiply+0xb2>
 8006560:	9a01      	ldr	r2, [sp, #4]
 8006562:	f845 c002 	str.w	ip, [r5, r2]
 8006566:	9a03      	ldr	r2, [sp, #12]
 8006568:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800656c:	3304      	adds	r3, #4
 800656e:	f1b9 0f00 	cmp.w	r9, #0
 8006572:	d020      	beq.n	80065b6 <__multiply+0x142>
 8006574:	6829      	ldr	r1, [r5, #0]
 8006576:	f104 0c14 	add.w	ip, r4, #20
 800657a:	46ae      	mov	lr, r5
 800657c:	f04f 0a00 	mov.w	sl, #0
 8006580:	f8bc b000 	ldrh.w	fp, [ip]
 8006584:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006588:	fb09 220b 	mla	r2, r9, fp, r2
 800658c:	4492      	add	sl, r2
 800658e:	b289      	uxth	r1, r1
 8006590:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006594:	f84e 1b04 	str.w	r1, [lr], #4
 8006598:	f85c 2b04 	ldr.w	r2, [ip], #4
 800659c:	f8be 1000 	ldrh.w	r1, [lr]
 80065a0:	0c12      	lsrs	r2, r2, #16
 80065a2:	fb09 1102 	mla	r1, r9, r2, r1
 80065a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065aa:	4567      	cmp	r7, ip
 80065ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065b0:	d8e6      	bhi.n	8006580 <__multiply+0x10c>
 80065b2:	9a01      	ldr	r2, [sp, #4]
 80065b4:	50a9      	str	r1, [r5, r2]
 80065b6:	3504      	adds	r5, #4
 80065b8:	e79a      	b.n	80064f0 <__multiply+0x7c>
 80065ba:	3e01      	subs	r6, #1
 80065bc:	e79c      	b.n	80064f8 <__multiply+0x84>
 80065be:	bf00      	nop
 80065c0:	0800739f 	.word	0x0800739f
 80065c4:	08007410 	.word	0x08007410

080065c8 <__pow5mult>:
 80065c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065cc:	4615      	mov	r5, r2
 80065ce:	f012 0203 	ands.w	r2, r2, #3
 80065d2:	4606      	mov	r6, r0
 80065d4:	460f      	mov	r7, r1
 80065d6:	d007      	beq.n	80065e8 <__pow5mult+0x20>
 80065d8:	4c25      	ldr	r4, [pc, #148]	; (8006670 <__pow5mult+0xa8>)
 80065da:	3a01      	subs	r2, #1
 80065dc:	2300      	movs	r3, #0
 80065de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065e2:	f7ff fe9b 	bl	800631c <__multadd>
 80065e6:	4607      	mov	r7, r0
 80065e8:	10ad      	asrs	r5, r5, #2
 80065ea:	d03d      	beq.n	8006668 <__pow5mult+0xa0>
 80065ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065ee:	b97c      	cbnz	r4, 8006610 <__pow5mult+0x48>
 80065f0:	2010      	movs	r0, #16
 80065f2:	f7ff fe1b 	bl	800622c <malloc>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6270      	str	r0, [r6, #36]	; 0x24
 80065fa:	b928      	cbnz	r0, 8006608 <__pow5mult+0x40>
 80065fc:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <__pow5mult+0xac>)
 80065fe:	481e      	ldr	r0, [pc, #120]	; (8006678 <__pow5mult+0xb0>)
 8006600:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006604:	f000 fc62 	bl	8006ecc <__assert_func>
 8006608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800660c:	6004      	str	r4, [r0, #0]
 800660e:	60c4      	str	r4, [r0, #12]
 8006610:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006618:	b94c      	cbnz	r4, 800662e <__pow5mult+0x66>
 800661a:	f240 2171 	movw	r1, #625	; 0x271
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff ff12 	bl	8006448 <__i2b>
 8006624:	2300      	movs	r3, #0
 8006626:	f8c8 0008 	str.w	r0, [r8, #8]
 800662a:	4604      	mov	r4, r0
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	f04f 0900 	mov.w	r9, #0
 8006632:	07eb      	lsls	r3, r5, #31
 8006634:	d50a      	bpl.n	800664c <__pow5mult+0x84>
 8006636:	4639      	mov	r1, r7
 8006638:	4622      	mov	r2, r4
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff ff1a 	bl	8006474 <__multiply>
 8006640:	4639      	mov	r1, r7
 8006642:	4680      	mov	r8, r0
 8006644:	4630      	mov	r0, r6
 8006646:	f7ff fe47 	bl	80062d8 <_Bfree>
 800664a:	4647      	mov	r7, r8
 800664c:	106d      	asrs	r5, r5, #1
 800664e:	d00b      	beq.n	8006668 <__pow5mult+0xa0>
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	b938      	cbnz	r0, 8006664 <__pow5mult+0x9c>
 8006654:	4622      	mov	r2, r4
 8006656:	4621      	mov	r1, r4
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff ff0b 	bl	8006474 <__multiply>
 800665e:	6020      	str	r0, [r4, #0]
 8006660:	f8c0 9000 	str.w	r9, [r0]
 8006664:	4604      	mov	r4, r0
 8006666:	e7e4      	b.n	8006632 <__pow5mult+0x6a>
 8006668:	4638      	mov	r0, r7
 800666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666e:	bf00      	nop
 8006670:	08007560 	.word	0x08007560
 8006674:	0800732d 	.word	0x0800732d
 8006678:	08007410 	.word	0x08007410

0800667c <__lshift>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	460c      	mov	r4, r1
 8006682:	6849      	ldr	r1, [r1, #4]
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800668a:	68a3      	ldr	r3, [r4, #8]
 800668c:	4607      	mov	r7, r0
 800668e:	4691      	mov	r9, r2
 8006690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006694:	f108 0601 	add.w	r6, r8, #1
 8006698:	42b3      	cmp	r3, r6
 800669a:	db0b      	blt.n	80066b4 <__lshift+0x38>
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff fddb 	bl	8006258 <_Balloc>
 80066a2:	4605      	mov	r5, r0
 80066a4:	b948      	cbnz	r0, 80066ba <__lshift+0x3e>
 80066a6:	4602      	mov	r2, r0
 80066a8:	4b2a      	ldr	r3, [pc, #168]	; (8006754 <__lshift+0xd8>)
 80066aa:	482b      	ldr	r0, [pc, #172]	; (8006758 <__lshift+0xdc>)
 80066ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066b0:	f000 fc0c 	bl	8006ecc <__assert_func>
 80066b4:	3101      	adds	r1, #1
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	e7ee      	b.n	8006698 <__lshift+0x1c>
 80066ba:	2300      	movs	r3, #0
 80066bc:	f100 0114 	add.w	r1, r0, #20
 80066c0:	f100 0210 	add.w	r2, r0, #16
 80066c4:	4618      	mov	r0, r3
 80066c6:	4553      	cmp	r3, sl
 80066c8:	db37      	blt.n	800673a <__lshift+0xbe>
 80066ca:	6920      	ldr	r0, [r4, #16]
 80066cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066d0:	f104 0314 	add.w	r3, r4, #20
 80066d4:	f019 091f 	ands.w	r9, r9, #31
 80066d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066e0:	d02f      	beq.n	8006742 <__lshift+0xc6>
 80066e2:	f1c9 0e20 	rsb	lr, r9, #32
 80066e6:	468a      	mov	sl, r1
 80066e8:	f04f 0c00 	mov.w	ip, #0
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	fa02 f209 	lsl.w	r2, r2, r9
 80066f2:	ea42 020c 	orr.w	r2, r2, ip
 80066f6:	f84a 2b04 	str.w	r2, [sl], #4
 80066fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fe:	4298      	cmp	r0, r3
 8006700:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006704:	d8f2      	bhi.n	80066ec <__lshift+0x70>
 8006706:	1b03      	subs	r3, r0, r4
 8006708:	3b15      	subs	r3, #21
 800670a:	f023 0303 	bic.w	r3, r3, #3
 800670e:	3304      	adds	r3, #4
 8006710:	f104 0215 	add.w	r2, r4, #21
 8006714:	4290      	cmp	r0, r2
 8006716:	bf38      	it	cc
 8006718:	2304      	movcc	r3, #4
 800671a:	f841 c003 	str.w	ip, [r1, r3]
 800671e:	f1bc 0f00 	cmp.w	ip, #0
 8006722:	d001      	beq.n	8006728 <__lshift+0xac>
 8006724:	f108 0602 	add.w	r6, r8, #2
 8006728:	3e01      	subs	r6, #1
 800672a:	4638      	mov	r0, r7
 800672c:	612e      	str	r6, [r5, #16]
 800672e:	4621      	mov	r1, r4
 8006730:	f7ff fdd2 	bl	80062d8 <_Bfree>
 8006734:	4628      	mov	r0, r5
 8006736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673a:	f842 0f04 	str.w	r0, [r2, #4]!
 800673e:	3301      	adds	r3, #1
 8006740:	e7c1      	b.n	80066c6 <__lshift+0x4a>
 8006742:	3904      	subs	r1, #4
 8006744:	f853 2b04 	ldr.w	r2, [r3], #4
 8006748:	f841 2f04 	str.w	r2, [r1, #4]!
 800674c:	4298      	cmp	r0, r3
 800674e:	d8f9      	bhi.n	8006744 <__lshift+0xc8>
 8006750:	e7ea      	b.n	8006728 <__lshift+0xac>
 8006752:	bf00      	nop
 8006754:	0800739f 	.word	0x0800739f
 8006758:	08007410 	.word	0x08007410

0800675c <__mcmp>:
 800675c:	b530      	push	{r4, r5, lr}
 800675e:	6902      	ldr	r2, [r0, #16]
 8006760:	690c      	ldr	r4, [r1, #16]
 8006762:	1b12      	subs	r2, r2, r4
 8006764:	d10e      	bne.n	8006784 <__mcmp+0x28>
 8006766:	f100 0314 	add.w	r3, r0, #20
 800676a:	3114      	adds	r1, #20
 800676c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006770:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006774:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006778:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800677c:	42a5      	cmp	r5, r4
 800677e:	d003      	beq.n	8006788 <__mcmp+0x2c>
 8006780:	d305      	bcc.n	800678e <__mcmp+0x32>
 8006782:	2201      	movs	r2, #1
 8006784:	4610      	mov	r0, r2
 8006786:	bd30      	pop	{r4, r5, pc}
 8006788:	4283      	cmp	r3, r0
 800678a:	d3f3      	bcc.n	8006774 <__mcmp+0x18>
 800678c:	e7fa      	b.n	8006784 <__mcmp+0x28>
 800678e:	f04f 32ff 	mov.w	r2, #4294967295
 8006792:	e7f7      	b.n	8006784 <__mcmp+0x28>

08006794 <__mdiff>:
 8006794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	460c      	mov	r4, r1
 800679a:	4606      	mov	r6, r0
 800679c:	4611      	mov	r1, r2
 800679e:	4620      	mov	r0, r4
 80067a0:	4690      	mov	r8, r2
 80067a2:	f7ff ffdb 	bl	800675c <__mcmp>
 80067a6:	1e05      	subs	r5, r0, #0
 80067a8:	d110      	bne.n	80067cc <__mdiff+0x38>
 80067aa:	4629      	mov	r1, r5
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7ff fd53 	bl	8006258 <_Balloc>
 80067b2:	b930      	cbnz	r0, 80067c2 <__mdiff+0x2e>
 80067b4:	4b3a      	ldr	r3, [pc, #232]	; (80068a0 <__mdiff+0x10c>)
 80067b6:	4602      	mov	r2, r0
 80067b8:	f240 2132 	movw	r1, #562	; 0x232
 80067bc:	4839      	ldr	r0, [pc, #228]	; (80068a4 <__mdiff+0x110>)
 80067be:	f000 fb85 	bl	8006ecc <__assert_func>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	bfa4      	itt	ge
 80067ce:	4643      	movge	r3, r8
 80067d0:	46a0      	movge	r8, r4
 80067d2:	4630      	mov	r0, r6
 80067d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067d8:	bfa6      	itte	ge
 80067da:	461c      	movge	r4, r3
 80067dc:	2500      	movge	r5, #0
 80067de:	2501      	movlt	r5, #1
 80067e0:	f7ff fd3a 	bl	8006258 <_Balloc>
 80067e4:	b920      	cbnz	r0, 80067f0 <__mdiff+0x5c>
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <__mdiff+0x10c>)
 80067e8:	4602      	mov	r2, r0
 80067ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067ee:	e7e5      	b.n	80067bc <__mdiff+0x28>
 80067f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067f4:	6926      	ldr	r6, [r4, #16]
 80067f6:	60c5      	str	r5, [r0, #12]
 80067f8:	f104 0914 	add.w	r9, r4, #20
 80067fc:	f108 0514 	add.w	r5, r8, #20
 8006800:	f100 0e14 	add.w	lr, r0, #20
 8006804:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006808:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800680c:	f108 0210 	add.w	r2, r8, #16
 8006810:	46f2      	mov	sl, lr
 8006812:	2100      	movs	r1, #0
 8006814:	f859 3b04 	ldr.w	r3, [r9], #4
 8006818:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800681c:	fa1f f883 	uxth.w	r8, r3
 8006820:	fa11 f18b 	uxtah	r1, r1, fp
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	eba1 0808 	sub.w	r8, r1, r8
 800682a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800682e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006832:	fa1f f888 	uxth.w	r8, r8
 8006836:	1419      	asrs	r1, r3, #16
 8006838:	454e      	cmp	r6, r9
 800683a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800683e:	f84a 3b04 	str.w	r3, [sl], #4
 8006842:	d8e7      	bhi.n	8006814 <__mdiff+0x80>
 8006844:	1b33      	subs	r3, r6, r4
 8006846:	3b15      	subs	r3, #21
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	3304      	adds	r3, #4
 800684e:	3415      	adds	r4, #21
 8006850:	42a6      	cmp	r6, r4
 8006852:	bf38      	it	cc
 8006854:	2304      	movcc	r3, #4
 8006856:	441d      	add	r5, r3
 8006858:	4473      	add	r3, lr
 800685a:	469e      	mov	lr, r3
 800685c:	462e      	mov	r6, r5
 800685e:	4566      	cmp	r6, ip
 8006860:	d30e      	bcc.n	8006880 <__mdiff+0xec>
 8006862:	f10c 0203 	add.w	r2, ip, #3
 8006866:	1b52      	subs	r2, r2, r5
 8006868:	f022 0203 	bic.w	r2, r2, #3
 800686c:	3d03      	subs	r5, #3
 800686e:	45ac      	cmp	ip, r5
 8006870:	bf38      	it	cc
 8006872:	2200      	movcc	r2, #0
 8006874:	441a      	add	r2, r3
 8006876:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800687a:	b17b      	cbz	r3, 800689c <__mdiff+0x108>
 800687c:	6107      	str	r7, [r0, #16]
 800687e:	e7a3      	b.n	80067c8 <__mdiff+0x34>
 8006880:	f856 8b04 	ldr.w	r8, [r6], #4
 8006884:	fa11 f288 	uxtah	r2, r1, r8
 8006888:	1414      	asrs	r4, r2, #16
 800688a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800688e:	b292      	uxth	r2, r2
 8006890:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006894:	f84e 2b04 	str.w	r2, [lr], #4
 8006898:	1421      	asrs	r1, r4, #16
 800689a:	e7e0      	b.n	800685e <__mdiff+0xca>
 800689c:	3f01      	subs	r7, #1
 800689e:	e7ea      	b.n	8006876 <__mdiff+0xe2>
 80068a0:	0800739f 	.word	0x0800739f
 80068a4:	08007410 	.word	0x08007410

080068a8 <__d2b>:
 80068a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	4689      	mov	r9, r1
 80068ae:	2101      	movs	r1, #1
 80068b0:	ec57 6b10 	vmov	r6, r7, d0
 80068b4:	4690      	mov	r8, r2
 80068b6:	f7ff fccf 	bl	8006258 <_Balloc>
 80068ba:	4604      	mov	r4, r0
 80068bc:	b930      	cbnz	r0, 80068cc <__d2b+0x24>
 80068be:	4602      	mov	r2, r0
 80068c0:	4b25      	ldr	r3, [pc, #148]	; (8006958 <__d2b+0xb0>)
 80068c2:	4826      	ldr	r0, [pc, #152]	; (800695c <__d2b+0xb4>)
 80068c4:	f240 310a 	movw	r1, #778	; 0x30a
 80068c8:	f000 fb00 	bl	8006ecc <__assert_func>
 80068cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80068d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068d4:	bb35      	cbnz	r5, 8006924 <__d2b+0x7c>
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	d028      	beq.n	800692e <__d2b+0x86>
 80068dc:	4668      	mov	r0, sp
 80068de:	9600      	str	r6, [sp, #0]
 80068e0:	f7ff fd82 	bl	80063e8 <__lo0bits>
 80068e4:	9900      	ldr	r1, [sp, #0]
 80068e6:	b300      	cbz	r0, 800692a <__d2b+0x82>
 80068e8:	9a01      	ldr	r2, [sp, #4]
 80068ea:	f1c0 0320 	rsb	r3, r0, #32
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	430b      	orrs	r3, r1
 80068f4:	40c2      	lsrs	r2, r0
 80068f6:	6163      	str	r3, [r4, #20]
 80068f8:	9201      	str	r2, [sp, #4]
 80068fa:	9b01      	ldr	r3, [sp, #4]
 80068fc:	61a3      	str	r3, [r4, #24]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bf14      	ite	ne
 8006902:	2202      	movne	r2, #2
 8006904:	2201      	moveq	r2, #1
 8006906:	6122      	str	r2, [r4, #16]
 8006908:	b1d5      	cbz	r5, 8006940 <__d2b+0x98>
 800690a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800690e:	4405      	add	r5, r0
 8006910:	f8c9 5000 	str.w	r5, [r9]
 8006914:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006918:	f8c8 0000 	str.w	r0, [r8]
 800691c:	4620      	mov	r0, r4
 800691e:	b003      	add	sp, #12
 8006920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006928:	e7d5      	b.n	80068d6 <__d2b+0x2e>
 800692a:	6161      	str	r1, [r4, #20]
 800692c:	e7e5      	b.n	80068fa <__d2b+0x52>
 800692e:	a801      	add	r0, sp, #4
 8006930:	f7ff fd5a 	bl	80063e8 <__lo0bits>
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	6163      	str	r3, [r4, #20]
 8006938:	2201      	movs	r2, #1
 800693a:	6122      	str	r2, [r4, #16]
 800693c:	3020      	adds	r0, #32
 800693e:	e7e3      	b.n	8006908 <__d2b+0x60>
 8006940:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006944:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006948:	f8c9 0000 	str.w	r0, [r9]
 800694c:	6918      	ldr	r0, [r3, #16]
 800694e:	f7ff fd2b 	bl	80063a8 <__hi0bits>
 8006952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006956:	e7df      	b.n	8006918 <__d2b+0x70>
 8006958:	0800739f 	.word	0x0800739f
 800695c:	08007410 	.word	0x08007410

08006960 <_calloc_r>:
 8006960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006962:	fba1 2402 	umull	r2, r4, r1, r2
 8006966:	b94c      	cbnz	r4, 800697c <_calloc_r+0x1c>
 8006968:	4611      	mov	r1, r2
 800696a:	9201      	str	r2, [sp, #4]
 800696c:	f000 f87a 	bl	8006a64 <_malloc_r>
 8006970:	9a01      	ldr	r2, [sp, #4]
 8006972:	4605      	mov	r5, r0
 8006974:	b930      	cbnz	r0, 8006984 <_calloc_r+0x24>
 8006976:	4628      	mov	r0, r5
 8006978:	b003      	add	sp, #12
 800697a:	bd30      	pop	{r4, r5, pc}
 800697c:	220c      	movs	r2, #12
 800697e:	6002      	str	r2, [r0, #0]
 8006980:	2500      	movs	r5, #0
 8006982:	e7f8      	b.n	8006976 <_calloc_r+0x16>
 8006984:	4621      	mov	r1, r4
 8006986:	f7fd fdf1 	bl	800456c <memset>
 800698a:	e7f4      	b.n	8006976 <_calloc_r+0x16>

0800698c <_free_r>:
 800698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698e:	2900      	cmp	r1, #0
 8006990:	d044      	beq.n	8006a1c <_free_r+0x90>
 8006992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006996:	9001      	str	r0, [sp, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f1a1 0404 	sub.w	r4, r1, #4
 800699e:	bfb8      	it	lt
 80069a0:	18e4      	addlt	r4, r4, r3
 80069a2:	f000 fb19 	bl	8006fd8 <__malloc_lock>
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <_free_r+0x94>)
 80069a8:	9801      	ldr	r0, [sp, #4]
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	b933      	cbnz	r3, 80069bc <_free_r+0x30>
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	6014      	str	r4, [r2, #0]
 80069b2:	b003      	add	sp, #12
 80069b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b8:	f000 bb14 	b.w	8006fe4 <__malloc_unlock>
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d908      	bls.n	80069d2 <_free_r+0x46>
 80069c0:	6825      	ldr	r5, [r4, #0]
 80069c2:	1961      	adds	r1, r4, r5
 80069c4:	428b      	cmp	r3, r1
 80069c6:	bf01      	itttt	eq
 80069c8:	6819      	ldreq	r1, [r3, #0]
 80069ca:	685b      	ldreq	r3, [r3, #4]
 80069cc:	1949      	addeq	r1, r1, r5
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	e7ed      	b.n	80069ae <_free_r+0x22>
 80069d2:	461a      	mov	r2, r3
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b10b      	cbz	r3, 80069dc <_free_r+0x50>
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d9fa      	bls.n	80069d2 <_free_r+0x46>
 80069dc:	6811      	ldr	r1, [r2, #0]
 80069de:	1855      	adds	r5, r2, r1
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	d10b      	bne.n	80069fc <_free_r+0x70>
 80069e4:	6824      	ldr	r4, [r4, #0]
 80069e6:	4421      	add	r1, r4
 80069e8:	1854      	adds	r4, r2, r1
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	6011      	str	r1, [r2, #0]
 80069ee:	d1e0      	bne.n	80069b2 <_free_r+0x26>
 80069f0:	681c      	ldr	r4, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	6053      	str	r3, [r2, #4]
 80069f6:	4421      	add	r1, r4
 80069f8:	6011      	str	r1, [r2, #0]
 80069fa:	e7da      	b.n	80069b2 <_free_r+0x26>
 80069fc:	d902      	bls.n	8006a04 <_free_r+0x78>
 80069fe:	230c      	movs	r3, #12
 8006a00:	6003      	str	r3, [r0, #0]
 8006a02:	e7d6      	b.n	80069b2 <_free_r+0x26>
 8006a04:	6825      	ldr	r5, [r4, #0]
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	bf04      	itt	eq
 8006a0c:	6819      	ldreq	r1, [r3, #0]
 8006a0e:	685b      	ldreq	r3, [r3, #4]
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	bf04      	itt	eq
 8006a14:	1949      	addeq	r1, r1, r5
 8006a16:	6021      	streq	r1, [r4, #0]
 8006a18:	6054      	str	r4, [r2, #4]
 8006a1a:	e7ca      	b.n	80069b2 <_free_r+0x26>
 8006a1c:	b003      	add	sp, #12
 8006a1e:	bd30      	pop	{r4, r5, pc}
 8006a20:	20000334 	.word	0x20000334

08006a24 <sbrk_aligned>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4e0e      	ldr	r6, [pc, #56]	; (8006a60 <sbrk_aligned+0x3c>)
 8006a28:	460c      	mov	r4, r1
 8006a2a:	6831      	ldr	r1, [r6, #0]
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	b911      	cbnz	r1, 8006a36 <sbrk_aligned+0x12>
 8006a30:	f000 f9e6 	bl	8006e00 <_sbrk_r>
 8006a34:	6030      	str	r0, [r6, #0]
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 f9e1 	bl	8006e00 <_sbrk_r>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d00a      	beq.n	8006a58 <sbrk_aligned+0x34>
 8006a42:	1cc4      	adds	r4, r0, #3
 8006a44:	f024 0403 	bic.w	r4, r4, #3
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d007      	beq.n	8006a5c <sbrk_aligned+0x38>
 8006a4c:	1a21      	subs	r1, r4, r0
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f9d6 	bl	8006e00 <_sbrk_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d101      	bne.n	8006a5c <sbrk_aligned+0x38>
 8006a58:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	20000338 	.word	0x20000338

08006a64 <_malloc_r>:
 8006a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a68:	1ccd      	adds	r5, r1, #3
 8006a6a:	f025 0503 	bic.w	r5, r5, #3
 8006a6e:	3508      	adds	r5, #8
 8006a70:	2d0c      	cmp	r5, #12
 8006a72:	bf38      	it	cc
 8006a74:	250c      	movcc	r5, #12
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	4607      	mov	r7, r0
 8006a7a:	db01      	blt.n	8006a80 <_malloc_r+0x1c>
 8006a7c:	42a9      	cmp	r1, r5
 8006a7e:	d905      	bls.n	8006a8c <_malloc_r+0x28>
 8006a80:	230c      	movs	r3, #12
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	2600      	movs	r6, #0
 8006a86:	4630      	mov	r0, r6
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8c:	4e2e      	ldr	r6, [pc, #184]	; (8006b48 <_malloc_r+0xe4>)
 8006a8e:	f000 faa3 	bl	8006fd8 <__malloc_lock>
 8006a92:	6833      	ldr	r3, [r6, #0]
 8006a94:	461c      	mov	r4, r3
 8006a96:	bb34      	cbnz	r4, 8006ae6 <_malloc_r+0x82>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7ff ffc2 	bl	8006a24 <sbrk_aligned>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	d14d      	bne.n	8006b42 <_malloc_r+0xde>
 8006aa6:	6834      	ldr	r4, [r6, #0]
 8006aa8:	4626      	mov	r6, r4
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	d140      	bne.n	8006b30 <_malloc_r+0xcc>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	eb04 0803 	add.w	r8, r4, r3
 8006ab8:	f000 f9a2 	bl	8006e00 <_sbrk_r>
 8006abc:	4580      	cmp	r8, r0
 8006abe:	d13a      	bne.n	8006b36 <_malloc_r+0xd2>
 8006ac0:	6821      	ldr	r1, [r4, #0]
 8006ac2:	3503      	adds	r5, #3
 8006ac4:	1a6d      	subs	r5, r5, r1
 8006ac6:	f025 0503 	bic.w	r5, r5, #3
 8006aca:	3508      	adds	r5, #8
 8006acc:	2d0c      	cmp	r5, #12
 8006ace:	bf38      	it	cc
 8006ad0:	250c      	movcc	r5, #12
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	f7ff ffa5 	bl	8006a24 <sbrk_aligned>
 8006ada:	3001      	adds	r0, #1
 8006adc:	d02b      	beq.n	8006b36 <_malloc_r+0xd2>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	442b      	add	r3, r5
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	e00e      	b.n	8006b04 <_malloc_r+0xa0>
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	1b52      	subs	r2, r2, r5
 8006aea:	d41e      	bmi.n	8006b2a <_malloc_r+0xc6>
 8006aec:	2a0b      	cmp	r2, #11
 8006aee:	d916      	bls.n	8006b1e <_malloc_r+0xba>
 8006af0:	1961      	adds	r1, r4, r5
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	bf18      	it	ne
 8006af8:	6059      	strne	r1, [r3, #4]
 8006afa:	6863      	ldr	r3, [r4, #4]
 8006afc:	bf08      	it	eq
 8006afe:	6031      	streq	r1, [r6, #0]
 8006b00:	5162      	str	r2, [r4, r5]
 8006b02:	604b      	str	r3, [r1, #4]
 8006b04:	4638      	mov	r0, r7
 8006b06:	f104 060b 	add.w	r6, r4, #11
 8006b0a:	f000 fa6b 	bl	8006fe4 <__malloc_unlock>
 8006b0e:	f026 0607 	bic.w	r6, r6, #7
 8006b12:	1d23      	adds	r3, r4, #4
 8006b14:	1af2      	subs	r2, r6, r3
 8006b16:	d0b6      	beq.n	8006a86 <_malloc_r+0x22>
 8006b18:	1b9b      	subs	r3, r3, r6
 8006b1a:	50a3      	str	r3, [r4, r2]
 8006b1c:	e7b3      	b.n	8006a86 <_malloc_r+0x22>
 8006b1e:	6862      	ldr	r2, [r4, #4]
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	bf0c      	ite	eq
 8006b24:	6032      	streq	r2, [r6, #0]
 8006b26:	605a      	strne	r2, [r3, #4]
 8006b28:	e7ec      	b.n	8006b04 <_malloc_r+0xa0>
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	6864      	ldr	r4, [r4, #4]
 8006b2e:	e7b2      	b.n	8006a96 <_malloc_r+0x32>
 8006b30:	4634      	mov	r4, r6
 8006b32:	6876      	ldr	r6, [r6, #4]
 8006b34:	e7b9      	b.n	8006aaa <_malloc_r+0x46>
 8006b36:	230c      	movs	r3, #12
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f000 fa52 	bl	8006fe4 <__malloc_unlock>
 8006b40:	e7a1      	b.n	8006a86 <_malloc_r+0x22>
 8006b42:	6025      	str	r5, [r4, #0]
 8006b44:	e7de      	b.n	8006b04 <_malloc_r+0xa0>
 8006b46:	bf00      	nop
 8006b48:	20000334 	.word	0x20000334

08006b4c <__sfputc_r>:
 8006b4c:	6893      	ldr	r3, [r2, #8]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	b410      	push	{r4}
 8006b54:	6093      	str	r3, [r2, #8]
 8006b56:	da08      	bge.n	8006b6a <__sfputc_r+0x1e>
 8006b58:	6994      	ldr	r4, [r2, #24]
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	db01      	blt.n	8006b62 <__sfputc_r+0x16>
 8006b5e:	290a      	cmp	r1, #10
 8006b60:	d103      	bne.n	8006b6a <__sfputc_r+0x1e>
 8006b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b66:	f7fe ba01 	b.w	8004f6c <__swbuf_r>
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	1c58      	adds	r0, r3, #1
 8006b6e:	6010      	str	r0, [r2, #0]
 8006b70:	7019      	strb	r1, [r3, #0]
 8006b72:	4608      	mov	r0, r1
 8006b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <__sfputs_r>:
 8006b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460f      	mov	r7, r1
 8006b80:	4614      	mov	r4, r2
 8006b82:	18d5      	adds	r5, r2, r3
 8006b84:	42ac      	cmp	r4, r5
 8006b86:	d101      	bne.n	8006b8c <__sfputs_r+0x12>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e007      	b.n	8006b9c <__sfputs_r+0x22>
 8006b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b90:	463a      	mov	r2, r7
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffda 	bl	8006b4c <__sfputc_r>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d1f3      	bne.n	8006b84 <__sfputs_r+0xa>
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ba0 <_vfiprintf_r>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	b09d      	sub	sp, #116	; 0x74
 8006ba8:	4614      	mov	r4, r2
 8006baa:	4698      	mov	r8, r3
 8006bac:	4606      	mov	r6, r0
 8006bae:	b118      	cbz	r0, 8006bb8 <_vfiprintf_r+0x18>
 8006bb0:	6983      	ldr	r3, [r0, #24]
 8006bb2:	b90b      	cbnz	r3, 8006bb8 <_vfiprintf_r+0x18>
 8006bb4:	f7ff fa30 	bl	8006018 <__sinit>
 8006bb8:	4b89      	ldr	r3, [pc, #548]	; (8006de0 <_vfiprintf_r+0x240>)
 8006bba:	429d      	cmp	r5, r3
 8006bbc:	d11b      	bne.n	8006bf6 <_vfiprintf_r+0x56>
 8006bbe:	6875      	ldr	r5, [r6, #4]
 8006bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc2:	07d9      	lsls	r1, r3, #31
 8006bc4:	d405      	bmi.n	8006bd2 <_vfiprintf_r+0x32>
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	059a      	lsls	r2, r3, #22
 8006bca:	d402      	bmi.n	8006bd2 <_vfiprintf_r+0x32>
 8006bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bce:	f7ff fac6 	bl	800615e <__retarget_lock_acquire_recursive>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	071b      	lsls	r3, r3, #28
 8006bd6:	d501      	bpl.n	8006bdc <_vfiprintf_r+0x3c>
 8006bd8:	692b      	ldr	r3, [r5, #16]
 8006bda:	b9eb      	cbnz	r3, 8006c18 <_vfiprintf_r+0x78>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7fe fa16 	bl	8005010 <__swsetup_r>
 8006be4:	b1c0      	cbz	r0, 8006c18 <_vfiprintf_r+0x78>
 8006be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006be8:	07dc      	lsls	r4, r3, #31
 8006bea:	d50e      	bpl.n	8006c0a <_vfiprintf_r+0x6a>
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	b01d      	add	sp, #116	; 0x74
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	4b7b      	ldr	r3, [pc, #492]	; (8006de4 <_vfiprintf_r+0x244>)
 8006bf8:	429d      	cmp	r5, r3
 8006bfa:	d101      	bne.n	8006c00 <_vfiprintf_r+0x60>
 8006bfc:	68b5      	ldr	r5, [r6, #8]
 8006bfe:	e7df      	b.n	8006bc0 <_vfiprintf_r+0x20>
 8006c00:	4b79      	ldr	r3, [pc, #484]	; (8006de8 <_vfiprintf_r+0x248>)
 8006c02:	429d      	cmp	r5, r3
 8006c04:	bf08      	it	eq
 8006c06:	68f5      	ldreq	r5, [r6, #12]
 8006c08:	e7da      	b.n	8006bc0 <_vfiprintf_r+0x20>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	0598      	lsls	r0, r3, #22
 8006c0e:	d4ed      	bmi.n	8006bec <_vfiprintf_r+0x4c>
 8006c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c12:	f7ff faa5 	bl	8006160 <__retarget_lock_release_recursive>
 8006c16:	e7e9      	b.n	8006bec <_vfiprintf_r+0x4c>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1c:	2320      	movs	r3, #32
 8006c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c26:	2330      	movs	r3, #48	; 0x30
 8006c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dec <_vfiprintf_r+0x24c>
 8006c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c30:	f04f 0901 	mov.w	r9, #1
 8006c34:	4623      	mov	r3, r4
 8006c36:	469a      	mov	sl, r3
 8006c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c3c:	b10a      	cbz	r2, 8006c42 <_vfiprintf_r+0xa2>
 8006c3e:	2a25      	cmp	r2, #37	; 0x25
 8006c40:	d1f9      	bne.n	8006c36 <_vfiprintf_r+0x96>
 8006c42:	ebba 0b04 	subs.w	fp, sl, r4
 8006c46:	d00b      	beq.n	8006c60 <_vfiprintf_r+0xc0>
 8006c48:	465b      	mov	r3, fp
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7ff ff93 	bl	8006b7a <__sfputs_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	f000 80aa 	beq.w	8006dae <_vfiprintf_r+0x20e>
 8006c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c5c:	445a      	add	r2, fp
 8006c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c60:	f89a 3000 	ldrb.w	r3, [sl]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80a2 	beq.w	8006dae <_vfiprintf_r+0x20e>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c74:	f10a 0a01 	add.w	sl, sl, #1
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	9307      	str	r3, [sp, #28]
 8006c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c80:	931a      	str	r3, [sp, #104]	; 0x68
 8006c82:	4654      	mov	r4, sl
 8006c84:	2205      	movs	r2, #5
 8006c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8a:	4858      	ldr	r0, [pc, #352]	; (8006dec <_vfiprintf_r+0x24c>)
 8006c8c:	f7f9 fab8 	bl	8000200 <memchr>
 8006c90:	9a04      	ldr	r2, [sp, #16]
 8006c92:	b9d8      	cbnz	r0, 8006ccc <_vfiprintf_r+0x12c>
 8006c94:	06d1      	lsls	r1, r2, #27
 8006c96:	bf44      	itt	mi
 8006c98:	2320      	movmi	r3, #32
 8006c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9e:	0713      	lsls	r3, r2, #28
 8006ca0:	bf44      	itt	mi
 8006ca2:	232b      	movmi	r3, #43	; 0x2b
 8006ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cac:	2b2a      	cmp	r3, #42	; 0x2a
 8006cae:	d015      	beq.n	8006cdc <_vfiprintf_r+0x13c>
 8006cb0:	9a07      	ldr	r2, [sp, #28]
 8006cb2:	4654      	mov	r4, sl
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f04f 0c0a 	mov.w	ip, #10
 8006cba:	4621      	mov	r1, r4
 8006cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc0:	3b30      	subs	r3, #48	; 0x30
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d94e      	bls.n	8006d64 <_vfiprintf_r+0x1c4>
 8006cc6:	b1b0      	cbz	r0, 8006cf6 <_vfiprintf_r+0x156>
 8006cc8:	9207      	str	r2, [sp, #28]
 8006cca:	e014      	b.n	8006cf6 <_vfiprintf_r+0x156>
 8006ccc:	eba0 0308 	sub.w	r3, r0, r8
 8006cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	9304      	str	r3, [sp, #16]
 8006cd8:	46a2      	mov	sl, r4
 8006cda:	e7d2      	b.n	8006c82 <_vfiprintf_r+0xe2>
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	1d19      	adds	r1, r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	9103      	str	r1, [sp, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bfbb      	ittet	lt
 8006ce8:	425b      	neglt	r3, r3
 8006cea:	f042 0202 	orrlt.w	r2, r2, #2
 8006cee:	9307      	strge	r3, [sp, #28]
 8006cf0:	9307      	strlt	r3, [sp, #28]
 8006cf2:	bfb8      	it	lt
 8006cf4:	9204      	strlt	r2, [sp, #16]
 8006cf6:	7823      	ldrb	r3, [r4, #0]
 8006cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfa:	d10c      	bne.n	8006d16 <_vfiprintf_r+0x176>
 8006cfc:	7863      	ldrb	r3, [r4, #1]
 8006cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006d00:	d135      	bne.n	8006d6e <_vfiprintf_r+0x1ce>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	1d1a      	adds	r2, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	9203      	str	r2, [sp, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfb8      	it	lt
 8006d0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d12:	3402      	adds	r4, #2
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006dfc <_vfiprintf_r+0x25c>
 8006d1a:	7821      	ldrb	r1, [r4, #0]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	4650      	mov	r0, sl
 8006d20:	f7f9 fa6e 	bl	8000200 <memchr>
 8006d24:	b140      	cbz	r0, 8006d38 <_vfiprintf_r+0x198>
 8006d26:	2340      	movs	r3, #64	; 0x40
 8006d28:	eba0 000a 	sub.w	r0, r0, sl
 8006d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d30:	9b04      	ldr	r3, [sp, #16]
 8006d32:	4303      	orrs	r3, r0
 8006d34:	3401      	adds	r4, #1
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3c:	482c      	ldr	r0, [pc, #176]	; (8006df0 <_vfiprintf_r+0x250>)
 8006d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d42:	2206      	movs	r2, #6
 8006d44:	f7f9 fa5c 	bl	8000200 <memchr>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d03f      	beq.n	8006dcc <_vfiprintf_r+0x22c>
 8006d4c:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <_vfiprintf_r+0x254>)
 8006d4e:	bb1b      	cbnz	r3, 8006d98 <_vfiprintf_r+0x1f8>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	3307      	adds	r3, #7
 8006d54:	f023 0307 	bic.w	r3, r3, #7
 8006d58:	3308      	adds	r3, #8
 8006d5a:	9303      	str	r3, [sp, #12]
 8006d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5e:	443b      	add	r3, r7
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	e767      	b.n	8006c34 <_vfiprintf_r+0x94>
 8006d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d68:	460c      	mov	r4, r1
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	e7a5      	b.n	8006cba <_vfiprintf_r+0x11a>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	3401      	adds	r4, #1
 8006d72:	9305      	str	r3, [sp, #20]
 8006d74:	4619      	mov	r1, r3
 8006d76:	f04f 0c0a 	mov.w	ip, #10
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d80:	3a30      	subs	r2, #48	; 0x30
 8006d82:	2a09      	cmp	r2, #9
 8006d84:	d903      	bls.n	8006d8e <_vfiprintf_r+0x1ee>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0c5      	beq.n	8006d16 <_vfiprintf_r+0x176>
 8006d8a:	9105      	str	r1, [sp, #20]
 8006d8c:	e7c3      	b.n	8006d16 <_vfiprintf_r+0x176>
 8006d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d92:	4604      	mov	r4, r0
 8006d94:	2301      	movs	r3, #1
 8006d96:	e7f0      	b.n	8006d7a <_vfiprintf_r+0x1da>
 8006d98:	ab03      	add	r3, sp, #12
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	462a      	mov	r2, r5
 8006d9e:	4b16      	ldr	r3, [pc, #88]	; (8006df8 <_vfiprintf_r+0x258>)
 8006da0:	a904      	add	r1, sp, #16
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7fd fc8a 	bl	80046bc <_printf_float>
 8006da8:	4607      	mov	r7, r0
 8006daa:	1c78      	adds	r0, r7, #1
 8006dac:	d1d6      	bne.n	8006d5c <_vfiprintf_r+0x1bc>
 8006dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db0:	07d9      	lsls	r1, r3, #31
 8006db2:	d405      	bmi.n	8006dc0 <_vfiprintf_r+0x220>
 8006db4:	89ab      	ldrh	r3, [r5, #12]
 8006db6:	059a      	lsls	r2, r3, #22
 8006db8:	d402      	bmi.n	8006dc0 <_vfiprintf_r+0x220>
 8006dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dbc:	f7ff f9d0 	bl	8006160 <__retarget_lock_release_recursive>
 8006dc0:	89ab      	ldrh	r3, [r5, #12]
 8006dc2:	065b      	lsls	r3, r3, #25
 8006dc4:	f53f af12 	bmi.w	8006bec <_vfiprintf_r+0x4c>
 8006dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dca:	e711      	b.n	8006bf0 <_vfiprintf_r+0x50>
 8006dcc:	ab03      	add	r3, sp, #12
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <_vfiprintf_r+0x258>)
 8006dd4:	a904      	add	r1, sp, #16
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7fd ff14 	bl	8004c04 <_printf_i>
 8006ddc:	e7e4      	b.n	8006da8 <_vfiprintf_r+0x208>
 8006dde:	bf00      	nop
 8006de0:	080073d0 	.word	0x080073d0
 8006de4:	080073f0 	.word	0x080073f0
 8006de8:	080073b0 	.word	0x080073b0
 8006dec:	0800756c 	.word	0x0800756c
 8006df0:	08007576 	.word	0x08007576
 8006df4:	080046bd 	.word	0x080046bd
 8006df8:	08006b7b 	.word	0x08006b7b
 8006dfc:	08007572 	.word	0x08007572

08006e00 <_sbrk_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d06      	ldr	r5, [pc, #24]	; (8006e1c <_sbrk_r+0x1c>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7fa fdcc 	bl	80019a8 <_sbrk>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_sbrk_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_sbrk_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	2000033c 	.word	0x2000033c

08006e20 <__sread>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	460c      	mov	r4, r1
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	f000 f8e2 	bl	8006ff0 <_read_r>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	bfab      	itete	ge
 8006e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e32:	89a3      	ldrhlt	r3, [r4, #12]
 8006e34:	181b      	addge	r3, r3, r0
 8006e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e3a:	bfac      	ite	ge
 8006e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e3e:	81a3      	strhlt	r3, [r4, #12]
 8006e40:	bd10      	pop	{r4, pc}

08006e42 <__swrite>:
 8006e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	461f      	mov	r7, r3
 8006e48:	898b      	ldrh	r3, [r1, #12]
 8006e4a:	05db      	lsls	r3, r3, #23
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	4616      	mov	r6, r2
 8006e52:	d505      	bpl.n	8006e60 <__swrite+0x1e>
 8006e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e58:	2302      	movs	r3, #2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f000 f898 	bl	8006f90 <_lseek_r>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	4628      	mov	r0, r5
 8006e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e76:	f000 b817 	b.w	8006ea8 <_write_r>

08006e7a <__sseek>:
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e82:	f000 f885 	bl	8006f90 <_lseek_r>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	bf15      	itete	ne
 8006e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e96:	81a3      	strheq	r3, [r4, #12]
 8006e98:	bf18      	it	ne
 8006e9a:	81a3      	strhne	r3, [r4, #12]
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <__sclose>:
 8006e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea2:	f000 b831 	b.w	8006f08 <_close_r>
	...

08006ea8 <_write_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d07      	ldr	r5, [pc, #28]	; (8006ec8 <_write_r+0x20>)
 8006eac:	4604      	mov	r4, r0
 8006eae:	4608      	mov	r0, r1
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	602a      	str	r2, [r5, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f7fa fd25 	bl	8001906 <_write>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_write_r+0x1e>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_write_r+0x1e>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	2000033c 	.word	0x2000033c

08006ecc <__assert_func>:
 8006ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ece:	4614      	mov	r4, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <__assert_func+0x2c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	68d8      	ldr	r0, [r3, #12]
 8006eda:	b14c      	cbz	r4, 8006ef0 <__assert_func+0x24>
 8006edc:	4b07      	ldr	r3, [pc, #28]	; (8006efc <__assert_func+0x30>)
 8006ede:	9100      	str	r1, [sp, #0]
 8006ee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ee4:	4906      	ldr	r1, [pc, #24]	; (8006f00 <__assert_func+0x34>)
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	f000 f81e 	bl	8006f28 <fiprintf>
 8006eec:	f000 f89f 	bl	800702e <abort>
 8006ef0:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <__assert_func+0x38>)
 8006ef2:	461c      	mov	r4, r3
 8006ef4:	e7f3      	b.n	8006ede <__assert_func+0x12>
 8006ef6:	bf00      	nop
 8006ef8:	2000001c 	.word	0x2000001c
 8006efc:	0800757d 	.word	0x0800757d
 8006f00:	0800758a 	.word	0x0800758a
 8006f04:	080075b8 	.word	0x080075b8

08006f08 <_close_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d06      	ldr	r5, [pc, #24]	; (8006f24 <_close_r+0x1c>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	f7fa fd13 	bl	800193e <_close>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_close_r+0x1a>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_close_r+0x1a>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2000033c 	.word	0x2000033c

08006f28 <fiprintf>:
 8006f28:	b40e      	push	{r1, r2, r3}
 8006f2a:	b503      	push	{r0, r1, lr}
 8006f2c:	4601      	mov	r1, r0
 8006f2e:	ab03      	add	r3, sp, #12
 8006f30:	4805      	ldr	r0, [pc, #20]	; (8006f48 <fiprintf+0x20>)
 8006f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f36:	6800      	ldr	r0, [r0, #0]
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	f7ff fe31 	bl	8006ba0 <_vfiprintf_r>
 8006f3e:	b002      	add	sp, #8
 8006f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f44:	b003      	add	sp, #12
 8006f46:	4770      	bx	lr
 8006f48:	2000001c 	.word	0x2000001c

08006f4c <_fstat_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_fstat_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7fa fcfc 	bl	8001956 <_fstat>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_fstat_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_fstat_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2000033c 	.word	0x2000033c

08006f70 <_isatty_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	; (8006f8c <_isatty_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fa fcfb 	bl	8001976 <_isatty>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_isatty_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_isatty_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	2000033c 	.word	0x2000033c

08006f90 <_lseek_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d07      	ldr	r5, [pc, #28]	; (8006fb0 <_lseek_r+0x20>)
 8006f94:	4604      	mov	r4, r0
 8006f96:	4608      	mov	r0, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7fa fcf4 	bl	800198c <_lseek>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_lseek_r+0x1e>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_lseek_r+0x1e>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	2000033c 	.word	0x2000033c

08006fb4 <__ascii_mbtowc>:
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	b901      	cbnz	r1, 8006fba <__ascii_mbtowc+0x6>
 8006fb8:	a901      	add	r1, sp, #4
 8006fba:	b142      	cbz	r2, 8006fce <__ascii_mbtowc+0x1a>
 8006fbc:	b14b      	cbz	r3, 8006fd2 <__ascii_mbtowc+0x1e>
 8006fbe:	7813      	ldrb	r3, [r2, #0]
 8006fc0:	600b      	str	r3, [r1, #0]
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	1e10      	subs	r0, r2, #0
 8006fc6:	bf18      	it	ne
 8006fc8:	2001      	movne	r0, #1
 8006fca:	b002      	add	sp, #8
 8006fcc:	4770      	bx	lr
 8006fce:	4610      	mov	r0, r2
 8006fd0:	e7fb      	b.n	8006fca <__ascii_mbtowc+0x16>
 8006fd2:	f06f 0001 	mvn.w	r0, #1
 8006fd6:	e7f8      	b.n	8006fca <__ascii_mbtowc+0x16>

08006fd8 <__malloc_lock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_lock+0x8>)
 8006fda:	f7ff b8c0 	b.w	800615e <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	2000032e 	.word	0x2000032e

08006fe4 <__malloc_unlock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_unlock+0x8>)
 8006fe6:	f7ff b8bb 	b.w	8006160 <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	2000032e 	.word	0x2000032e

08006ff0 <_read_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	; (8007010 <_read_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7fa fc64 	bl	80018cc <_read>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_read_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_read_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	2000033c 	.word	0x2000033c

08007014 <__ascii_wctomb>:
 8007014:	b149      	cbz	r1, 800702a <__ascii_wctomb+0x16>
 8007016:	2aff      	cmp	r2, #255	; 0xff
 8007018:	bf85      	ittet	hi
 800701a:	238a      	movhi	r3, #138	; 0x8a
 800701c:	6003      	strhi	r3, [r0, #0]
 800701e:	700a      	strbls	r2, [r1, #0]
 8007020:	f04f 30ff 	movhi.w	r0, #4294967295
 8007024:	bf98      	it	ls
 8007026:	2001      	movls	r0, #1
 8007028:	4770      	bx	lr
 800702a:	4608      	mov	r0, r1
 800702c:	4770      	bx	lr

0800702e <abort>:
 800702e:	b508      	push	{r3, lr}
 8007030:	2006      	movs	r0, #6
 8007032:	f000 f82b 	bl	800708c <raise>
 8007036:	2001      	movs	r0, #1
 8007038:	f7fa fc3e 	bl	80018b8 <_exit>

0800703c <_raise_r>:
 800703c:	291f      	cmp	r1, #31
 800703e:	b538      	push	{r3, r4, r5, lr}
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	d904      	bls.n	8007050 <_raise_r+0x14>
 8007046:	2316      	movs	r3, #22
 8007048:	6003      	str	r3, [r0, #0]
 800704a:	f04f 30ff 	mov.w	r0, #4294967295
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007052:	b112      	cbz	r2, 800705a <_raise_r+0x1e>
 8007054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007058:	b94b      	cbnz	r3, 800706e <_raise_r+0x32>
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f830 	bl	80070c0 <_getpid_r>
 8007060:	462a      	mov	r2, r5
 8007062:	4601      	mov	r1, r0
 8007064:	4620      	mov	r0, r4
 8007066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800706a:	f000 b817 	b.w	800709c <_kill_r>
 800706e:	2b01      	cmp	r3, #1
 8007070:	d00a      	beq.n	8007088 <_raise_r+0x4c>
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	d103      	bne.n	800707e <_raise_r+0x42>
 8007076:	2316      	movs	r3, #22
 8007078:	6003      	str	r3, [r0, #0]
 800707a:	2001      	movs	r0, #1
 800707c:	e7e7      	b.n	800704e <_raise_r+0x12>
 800707e:	2400      	movs	r4, #0
 8007080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007084:	4628      	mov	r0, r5
 8007086:	4798      	blx	r3
 8007088:	2000      	movs	r0, #0
 800708a:	e7e0      	b.n	800704e <_raise_r+0x12>

0800708c <raise>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <raise+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f7ff bfd3 	b.w	800703c <_raise_r>
 8007096:	bf00      	nop
 8007098:	2000001c 	.word	0x2000001c

0800709c <_kill_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_kill_r+0x20>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f7fa fbf5 	bl	8001898 <_kill>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d102      	bne.n	80070b8 <_kill_r+0x1c>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b103      	cbz	r3, 80070b8 <_kill_r+0x1c>
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	bf00      	nop
 80070bc:	2000033c 	.word	0x2000033c

080070c0 <_getpid_r>:
 80070c0:	f7fa bbe2 	b.w	8001888 <_getpid>

080070c4 <_init>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr

080070d0 <_fini>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr
