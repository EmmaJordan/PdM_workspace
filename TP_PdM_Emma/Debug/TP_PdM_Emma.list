
TP_PdM_Emma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08007180  08007180  00017180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800777c  0800777c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007784  08007784  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800778c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000154  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6d0  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000256f  00000000  00000000  0002c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000958  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ad2  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b93  00000000  00000000  00058d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f01a4  00000000  00000000  0006a89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015aa41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038a8  00000000  00000000  0015aa94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007164 	.word	0x08007164

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08007164 	.word	0x08007164

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <myADC_init>:
/*	Función: inicialización de conversor AD en un canal (A0 de placa Nucleo)
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
void myADC_init()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;

	//##-1- Configure the ADC peripheral #######################################
	AdcHandle.Instance                   = ADC1;
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <myADC_init+0x98>)
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <myADC_init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
	AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <myADC_init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
	AdcHandle.Init.Resolution            = ADC_RESOLUTION12b;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <myADC_init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
	AdcHandle.Init.ScanConvMode          = DISABLE;                       // Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1)
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <myADC_init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
	AdcHandle.Init.ContinuousConvMode    = ENABLE;                        // Continuous mode disabled to have only 1 conversion at each conversion trig
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <myADC_init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	761a      	strb	r2, [r3, #24]
	AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       // Parameter discarded because sequencer is disabled
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <myADC_init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]
	AdcHandle.Init.NbrOfDiscConversion   = 0;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <myADC_init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
	AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;        // Conversion start trigged at each external event
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <myADC_init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
	AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <myADC_init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
	AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <myADC_init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
	AdcHandle.Init.NbrOfConversion       = 1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <myADC_init+0x98>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	61da      	str	r2, [r3, #28]
	AdcHandle.Init.DMAContinuousRequests = ENABLE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <myADC_init+0x98>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	AdcHandle.Init.EOCSelection          = DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <myADC_init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <myADC_init+0x98>)
 8000f66:	f000 ff0f 	bl	8001d88 <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <myADC_init+0x6a>
	{
		printf("Error inicializacion ADC\r\n");
 8000f70:	480e      	ldr	r0, [pc, #56]	; (8000fac <myADC_init+0xa0>)
 8000f72:	f004 f845 	bl	8005000 <puts>
	}


	//##-2- Configure ADC regular channel ######################################
	sConfig.Channel      = ADC_CHANNEL_3;
 8000f76:	2303      	movs	r3, #3
 8000f78:	603b      	str	r3, [r7, #0]
	sConfig.Rank         = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
	sConfig.Offset       = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <myADC_init+0x98>)
 8000f8c:	f001 f8de 	bl	800214c <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <myADC_init+0x90>
	{
		printf("Error configuracion ADC\r\n");
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <myADC_init+0xa4>)
 8000f98:	f004 f832 	bl	8005000 <puts>
	//        IRQHandler.
	/*if(HAL_ADC_Start_DMA(&AdcHandle, (uint32_t*)&uhADCxConvertedValue, 1) != HAL_OK)
	{
		printf("Error inicializacion DMA\r\n");
	}*/
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000214 	.word	0x20000214
 8000fa8:	40012000 	.word	0x40012000
 8000fac:	08007180 	.word	0x08007180
 8000fb0:	0800719c 	.word	0x0800719c

08000fb4 <myADC_read>:
 	siguiendo ejemplo ADC_RegularConversion_DMA de STM32Cube_FW_F4_V1.27.0
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
static uint32_t myADC_read()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	uint32_t valorLeidoADC;
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <myADC_read+0x38>)
 8000fbc:	f001 f8b8 	bl	8002130 <HAL_ADC_GetValue>
 8000fc0:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&AdcHandle);
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <myADC_read+0x38>)
 8000fc4:	f000 ff24 	bl	8001e10 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&AdcHandle,0xFFF);
 8000fc8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <myADC_read+0x38>)
 8000fce:	f001 f824 	bl	800201a <HAL_ADC_PollForConversion>
	valorLeidoADC = HAL_ADC_GetValue(&AdcHandle);
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <myADC_read+0x38>)
 8000fd4:	f001 f8ac 	bl	8002130 <HAL_ADC_GetValue>
 8000fd8:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&AdcHandle);
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <myADC_read+0x38>)
 8000fdc:	f000 ffea 	bl	8001fb4 <HAL_ADC_Stop>
	return valorLeidoADC;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000214 	.word	0x20000214

08000ff0 <myADC_update>:
    de impresión en pantalla o display, ni se vea un valor oscilando permanentemente.
	Entrada: ninguna
	Salida: error (0:ok, 1:bloqueo por problema de Línea)
	Nota: es una función privada porque se llama internamente en API_adc */
bool_t myADC_update()
{
 8000ff0:	b598      	push	{r3, r4, r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	lecturaADC = ( myADC_read()+myADC_read()+myADC_read() ) / 3; 	//Promedio de 3 lecturas para disminuir oscilación
 8000ff4:	f7ff ffde 	bl	8000fb4 <myADC_read>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	f7ff ffdb 	bl	8000fb4 <myADC_read>
 8000ffe:	4603      	mov	r3, r0
 8001000:	441c      	add	r4, r3
 8001002:	f7ff ffd7 	bl	8000fb4 <myADC_read>
 8001006:	4603      	mov	r3, r0
 8001008:	4423      	add	r3, r4
 800100a:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <myADC_update+0xf8>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <myADC_update+0xfc>)
 8001014:	6013      	str	r3, [r2, #0]
	valorADC   = ((float)lecturaADC/ADC_RESOLUTION)*AMPLITUD_LINEA;	//Escala Linea
 8001016:	4b35      	ldr	r3, [pc, #212]	; (80010ec <myADC_update+0xfc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001022:	ee17 0a90 	vmov	r0, s15
 8001026:	f7ff fa9f 	bl	8000568 <__aeabi_f2d>
 800102a:	a32d      	add	r3, pc, #180	; (adr r3, 80010e0 <myADC_update+0xf0>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc1c 	bl	800086c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <myADC_update+0x100>)
 8001042:	f7ff fae9 	bl	8000618 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fdbb 	bl	8000bc8 <__aeabi_d2uiz>
 8001052:	4603      	mov	r3, r0
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <myADC_update+0x104>)
 8001058:	701a      	strb	r2, [r3, #0]
	if( (valorAnteriorADC <= valorADC-2) || (valorAnteriorADC >= valorADC+2) )
 800105a:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <myADC_update+0x104>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <myADC_update+0x108>)
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	4293      	cmp	r3, r2
 8001066:	dc06      	bgt.n	8001076 <myADC_update+0x86>
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <myADC_update+0x104>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <myADC_update+0x108>)
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	4293      	cmp	r3, r2
 8001074:	da2d      	bge.n	80010d2 <myADC_update+0xe2>
	{
		if(AMPLITUD_LINEA == valorADC)
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <myADC_update+0x104>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2bfa      	cmp	r3, #250	; 0xfa
 800107c:	d106      	bne.n	800108c <myADC_update+0x9c>
		{
			printf("Peligro, sobretension!\r\n");
 800107e:	481f      	ldr	r0, [pc, #124]	; (80010fc <myADC_update+0x10c>)
 8001080:	f003 ffbe 	bl	8005000 <puts>
			error = 1;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <myADC_update+0x110>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e01e      	b.n	80010ca <myADC_update+0xda>
		}
		else if(valorADC<MIN_LINEA)
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <myADC_update+0x104>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2bc7      	cmp	r3, #199	; 0xc7
 8001092:	d806      	bhi.n	80010a2 <myADC_update+0xb2>
		{
			printf("Tension de alimentacion insuficiente!\r\n");
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <myADC_update+0x114>)
 8001096:	f003 ffb3 	bl	8005000 <puts>
			error = 1;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <myADC_update+0x110>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e013      	b.n	80010ca <myADC_update+0xda>
		}
		else if(valorADC>MAX_LINEA)
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <myADC_update+0x104>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2bf0      	cmp	r3, #240	; 0xf0
 80010a8:	d906      	bls.n	80010b8 <myADC_update+0xc8>
		{
			printf("Tension de alimentacion excedida!\r\n");
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <myADC_update+0x118>)
 80010ac:	f003 ffa8 	bl	8005000 <puts>
			error = 1;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <myADC_update+0x110>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e008      	b.n	80010ca <myADC_update+0xda>
		}
		else
		{
			printf("Linea = %dVca\r\n", valorADC);
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <myADC_update+0x104>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <myADC_update+0x11c>)
 80010c0:	f003 ff18 	bl	8004ef4 <iprintf>
			error = 0;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <myADC_update+0x110>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
		}
		valorAnteriorADC = valorADC; //Evita escrituras sucesivas iguales (+-2)
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <myADC_update+0x104>)
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <myADC_update+0x108>)
 80010d0:	701a      	strb	r2, [r3, #0]
	}
	return error;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <myADC_update+0x110>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd98      	pop	{r3, r4, r7, pc}
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40affe00 	.word	0x40affe00
 80010e8:	aaaaaaab 	.word	0xaaaaaaab
 80010ec:	2000020c 	.word	0x2000020c
 80010f0:	406f4000 	.word	0x406f4000
 80010f4:	20000211 	.word	0x20000211
 80010f8:	20000210 	.word	0x20000210
 80010fc:	080071b8 	.word	0x080071b8
 8001100:	20000212 	.word	0x20000212
 8001104:	080071d0 	.word	0x080071d0
 8001108:	080071f8 	.word	0x080071f8
 800110c:	0800721c 	.word	0x0800721c

08001110 <debounceFSM_update>:
/*	Función: lee las entradas, resuelve la lógica de transición de datos, actualiza las salidas
	Entrada: ninguna
	Salida: ninguna
	Nota: es una función pública porque se llama desde fuera del módulo (main) */
uint8_t debounceFSM_update()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	changeState = 0;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <debounceFSM_update+0x20>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
	debounceB1_update();
 800111a:	f000 f80b 	bl	8001134 <debounceB1_update>
	debounceB2_update();
 800111e:	f000 f86d 	bl	80011fc <debounceB2_update>
	debounceB3_update();
 8001122:	f000 f8cf 	bl	80012c4 <debounceB3_update>
	return changeState;
 8001126:	4b02      	ldr	r3, [pc, #8]	; (8001130 <debounceFSM_update+0x20>)
 8001128:	781b      	ldrb	r3, [r3, #0]
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000283 	.word	0x20000283

08001134 <debounceB1_update>:

void debounceB1_update()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	switch (actualB1State)
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <debounceB1_update+0xb8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b03      	cmp	r3, #3
 800113e:	d84a      	bhi.n	80011d6 <debounceB1_update+0xa2>
 8001140:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <debounceB1_update+0x14>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001159 	.word	0x08001159
 800114c:	0800116d 	.word	0x0800116d
 8001150:	0800119b 	.word	0x0800119b
 8001154:	080011af 	.word	0x080011af
	{
		case BUTTON_UP:

					if ( BUTTON_menosTiempo_PRESSED )
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <debounceB1_update+0xbc>)
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d03a      	beq.n	80011da <debounceB1_update+0xa6>
					{
						actualB1State = BUTTON_FALLING;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <debounceB1_update+0xb8>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
					}
					break;
 800116a:	e036      	b.n	80011da <debounceB1_update+0xa6>

		case BUTTON_FALLING:

					if( delayRead(&delayAntiReboteB1) )
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <debounceB1_update+0xc0>)
 800116e:	f000 f94b 	bl	8001408 <delayRead>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d032      	beq.n	80011de <debounceB1_update+0xaa>
					{
						if (BUTTON_menosTiempo_PRESSED )
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <debounceB1_update+0xbc>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <debounceB1_update+0x5e>
						{
							actualB1State = BUTTON_DOWN;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <debounceB1_update+0xb8>)
 8001186:	2202      	movs	r2, #2
 8001188:	701a      	strb	r2, [r3, #0]
							changeState = 1;
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <debounceB1_update+0xc4>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB1State = BUTTON_UP;
						}
					}
					break;
 8001190:	e025      	b.n	80011de <debounceB1_update+0xaa>
							actualB1State = BUTTON_UP;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <debounceB1_update+0xb8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
					break;
 8001198:	e021      	b.n	80011de <debounceB1_update+0xaa>

		case BUTTON_DOWN:

					if ( !BUTTON_menosTiempo_PRESSED )
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <debounceB1_update+0xbc>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11d      	bne.n	80011e2 <debounceB1_update+0xae>
					{
						actualB1State = BUTTON_RAISING;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <debounceB1_update+0xb8>)
 80011a8:	2203      	movs	r2, #3
 80011aa:	701a      	strb	r2, [r3, #0]
					}
					break;
 80011ac:	e019      	b.n	80011e2 <debounceB1_update+0xae>

		case BUTTON_RAISING:

					if( delayRead(&delayAntiReboteB1) )
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <debounceB1_update+0xc0>)
 80011b0:	f000 f92a 	bl	8001408 <delayRead>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d015      	beq.n	80011e6 <debounceB1_update+0xb2>
					{
						if ( !BUTTON_menosTiempo_PRESSED )
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <debounceB1_update+0xbc>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <debounceB1_update+0x9a>
						{
							actualB1State = BUTTON_UP;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <debounceB1_update+0xb8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB1State = BUTTON_DOWN;
						}
					}
					break;
 80011cc:	e00b      	b.n	80011e6 <debounceB1_update+0xb2>
							actualB1State = BUTTON_DOWN;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <debounceB1_update+0xb8>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	701a      	strb	r2, [r3, #0]
					break;
 80011d4:	e007      	b.n	80011e6 <debounceB1_update+0xb2>
		default:
					break;
 80011d6:	bf00      	nop
 80011d8:	e006      	b.n	80011e8 <debounceB1_update+0xb4>
					break;
 80011da:	bf00      	nop
 80011dc:	e004      	b.n	80011e8 <debounceB1_update+0xb4>
					break;
 80011de:	bf00      	nop
 80011e0:	e002      	b.n	80011e8 <debounceB1_update+0xb4>
					break;
 80011e2:	bf00      	nop
 80011e4:	e000      	b.n	80011e8 <debounceB1_update+0xb4>
					break;
 80011e6:	bf00      	nop
	}
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000280 	.word	0x20000280
 80011f0:	40021800 	.word	0x40021800
 80011f4:	2000025c 	.word	0x2000025c
 80011f8:	20000283 	.word	0x20000283

080011fc <debounceB2_update>:

void debounceB2_update()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	switch (actualB2State)
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <debounceB2_update+0xb8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d84a      	bhi.n	800129e <debounceB2_update+0xa2>
 8001208:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <debounceB2_update+0x14>)
 800120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120e:	bf00      	nop
 8001210:	08001221 	.word	0x08001221
 8001214:	08001235 	.word	0x08001235
 8001218:	08001263 	.word	0x08001263
 800121c:	08001277 	.word	0x08001277
	{
		case BUTTON_UP:

					if ( BUTTON_masTiempo_PRESSED )
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <debounceB2_update+0xbc>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d03a      	beq.n	80012a2 <debounceB2_update+0xa6>
					{
						actualB2State = BUTTON_FALLING;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <debounceB2_update+0xb8>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001232:	e036      	b.n	80012a2 <debounceB2_update+0xa6>

		case BUTTON_FALLING:

					if( delayRead(&delayAntiReboteB2) )
 8001234:	4821      	ldr	r0, [pc, #132]	; (80012bc <debounceB2_update+0xc0>)
 8001236:	f000 f8e7 	bl	8001408 <delayRead>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d032      	beq.n	80012a6 <debounceB2_update+0xaa>
					{
						if (BUTTON_masTiempo_PRESSED )
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <debounceB2_update+0xbc>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <debounceB2_update+0x5e>
						{
							actualB2State = BUTTON_DOWN;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <debounceB2_update+0xb8>)
 800124e:	2202      	movs	r2, #2
 8001250:	701a      	strb	r2, [r3, #0]
							changeState = 2;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <debounceB2_update+0xc4>)
 8001254:	2202      	movs	r2, #2
 8001256:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB2State = BUTTON_UP;
						}
					}
					break;
 8001258:	e025      	b.n	80012a6 <debounceB2_update+0xaa>
							actualB2State = BUTTON_UP;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <debounceB2_update+0xb8>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
					break;
 8001260:	e021      	b.n	80012a6 <debounceB2_update+0xaa>

		case BUTTON_DOWN:

					if ( !BUTTON_masTiempo_PRESSED )
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <debounceB2_update+0xbc>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11d      	bne.n	80012aa <debounceB2_update+0xae>
					{
						actualB2State = BUTTON_RAISING;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <debounceB2_update+0xb8>)
 8001270:	2203      	movs	r2, #3
 8001272:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001274:	e019      	b.n	80012aa <debounceB2_update+0xae>

		case BUTTON_RAISING:

					if( delayRead(&delayAntiReboteB2) )
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <debounceB2_update+0xc0>)
 8001278:	f000 f8c6 	bl	8001408 <delayRead>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d015      	beq.n	80012ae <debounceB2_update+0xb2>
					{
						if ( !BUTTON_masTiempo_PRESSED )
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <debounceB2_update+0xbc>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d103      	bne.n	8001296 <debounceB2_update+0x9a>
						{
							actualB2State = BUTTON_UP;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <debounceB2_update+0xb8>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
						else
						{
							actualB2State = BUTTON_DOWN;
						}
					}
					break;
 8001294:	e00b      	b.n	80012ae <debounceB2_update+0xb2>
							actualB2State = BUTTON_DOWN;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <debounceB2_update+0xb8>)
 8001298:	2202      	movs	r2, #2
 800129a:	701a      	strb	r2, [r3, #0]
					break;
 800129c:	e007      	b.n	80012ae <debounceB2_update+0xb2>
		default:
					break;
 800129e:	bf00      	nop
 80012a0:	e006      	b.n	80012b0 <debounceB2_update+0xb4>
					break;
 80012a2:	bf00      	nop
 80012a4:	e004      	b.n	80012b0 <debounceB2_update+0xb4>
					break;
 80012a6:	bf00      	nop
 80012a8:	e002      	b.n	80012b0 <debounceB2_update+0xb4>
					break;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <debounceB2_update+0xb4>
					break;
 80012ae:	bf00      	nop
	}
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000281 	.word	0x20000281
 80012b8:	40021800 	.word	0x40021800
 80012bc:	20000268 	.word	0x20000268
 80012c0:	20000283 	.word	0x20000283

080012c4 <debounceB3_update>:

void debounceB3_update()
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	switch (actualB3State)
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <debounceB3_update+0xb8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d84a      	bhi.n	8001366 <debounceB3_update+0xa2>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <debounceB3_update+0x14>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	0800132b 	.word	0x0800132b
 80012e4:	0800133f 	.word	0x0800133f
		{
			case BUTTON_UP:

						if ( BSP_PB_GetState(BUTTON_USER) )
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fb71 	bl	80019d0 <BSP_PB_GetState>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d03a      	beq.n	800136a <debounceB3_update+0xa6>
						{
							actualB3State = BUTTON_FALLING;
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <debounceB3_update+0xb8>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
						}
						break;
 80012fa:	e036      	b.n	800136a <debounceB3_update+0xa6>

			case BUTTON_FALLING:

						if( delayRead(&delayAntiReboteB3) )
 80012fc:	4820      	ldr	r0, [pc, #128]	; (8001380 <debounceB3_update+0xbc>)
 80012fe:	f000 f883 	bl	8001408 <delayRead>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d032      	beq.n	800136e <debounceB3_update+0xaa>
						{
							if (BSP_PB_GetState(BUTTON_USER) )
 8001308:	2000      	movs	r0, #0
 800130a:	f000 fb61 	bl	80019d0 <BSP_PB_GetState>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <debounceB3_update+0x5e>
							{
								actualB3State = BUTTON_DOWN;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <debounceB3_update+0xb8>)
 8001316:	2202      	movs	r2, #2
 8001318:	701a      	strb	r2, [r3, #0]
								changeState = 3;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <debounceB3_update+0xc0>)
 800131c:	2203      	movs	r2, #3
 800131e:	701a      	strb	r2, [r3, #0]
							else
							{
								actualB3State = BUTTON_UP;
							}
						}
						break;
 8001320:	e025      	b.n	800136e <debounceB3_update+0xaa>
								actualB3State = BUTTON_UP;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <debounceB3_update+0xb8>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
						break;
 8001328:	e021      	b.n	800136e <debounceB3_update+0xaa>

			case BUTTON_DOWN:

						if ( !BSP_PB_GetState(BUTTON_USER) )
 800132a:	2000      	movs	r0, #0
 800132c:	f000 fb50 	bl	80019d0 <BSP_PB_GetState>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11d      	bne.n	8001372 <debounceB3_update+0xae>
						{
							actualB3State = BUTTON_RAISING;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <debounceB3_update+0xb8>)
 8001338:	2203      	movs	r2, #3
 800133a:	701a      	strb	r2, [r3, #0]
						}
						break;
 800133c:	e019      	b.n	8001372 <debounceB3_update+0xae>

			case BUTTON_RAISING:

						if( delayRead(&delayAntiReboteB3) )
 800133e:	4810      	ldr	r0, [pc, #64]	; (8001380 <debounceB3_update+0xbc>)
 8001340:	f000 f862 	bl	8001408 <delayRead>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d015      	beq.n	8001376 <debounceB3_update+0xb2>
						{
							if ( !BSP_PB_GetState(BUTTON_USER) )
 800134a:	2000      	movs	r0, #0
 800134c:	f000 fb40 	bl	80019d0 <BSP_PB_GetState>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <debounceB3_update+0x9a>
							{
								actualB3State = BUTTON_UP;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <debounceB3_update+0xb8>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
							else
							{
								actualB3State = BUTTON_DOWN;
							}
						}
						break;
 800135c:	e00b      	b.n	8001376 <debounceB3_update+0xb2>
								actualB3State = BUTTON_DOWN;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <debounceB3_update+0xb8>)
 8001360:	2202      	movs	r2, #2
 8001362:	701a      	strb	r2, [r3, #0]
						break;
 8001364:	e007      	b.n	8001376 <debounceB3_update+0xb2>
			default:
						break;
 8001366:	bf00      	nop
 8001368:	e006      	b.n	8001378 <debounceB3_update+0xb4>
						break;
 800136a:	bf00      	nop
 800136c:	e004      	b.n	8001378 <debounceB3_update+0xb4>
						break;
 800136e:	bf00      	nop
 8001370:	e002      	b.n	8001378 <debounceB3_update+0xb4>
						break;
 8001372:	bf00      	nop
 8001374:	e000      	b.n	8001378 <debounceB3_update+0xb4>
						break;
 8001376:	bf00      	nop
		}
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000282 	.word	0x20000282
 8001380:	20000274 	.word	0x20000274
 8001384:	20000283 	.word	0x20000283

08001388 <debounceFSM_init>:
//Función: carga el estado inicial
//Entrada: ninguna
//Salida:  ninguna
//Nota: es una función pública porque se llama desde fuera del módulo (main)
void debounceFSM_init()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	delayInit(&delayAntiReboteB1, TIME_ANTIREBOTE);
 800138c:	2128      	movs	r1, #40	; 0x28
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <debounceFSM_init+0x34>)
 8001390:	f000 f820 	bl	80013d4 <delayInit>
	delayInit(&delayAntiReboteB2, TIME_ANTIREBOTE);
 8001394:	2128      	movs	r1, #40	; 0x28
 8001396:	480a      	ldr	r0, [pc, #40]	; (80013c0 <debounceFSM_init+0x38>)
 8001398:	f000 f81c 	bl	80013d4 <delayInit>
	delayInit(&delayAntiReboteB3, TIME_ANTIREBOTE);
 800139c:	2128      	movs	r1, #40	; 0x28
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <debounceFSM_init+0x3c>)
 80013a0:	f000 f818 	bl	80013d4 <delayInit>
	actualB1State = BUTTON_UP;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <debounceFSM_init+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	actualB2State = BUTTON_UP;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <debounceFSM_init+0x44>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	actualB3State = BUTTON_UP;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <debounceFSM_init+0x48>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000025c 	.word	0x2000025c
 80013c0:	20000268 	.word	0x20000268
 80013c4:	20000274 	.word	0x20000274
 80013c8:	20000280 	.word	0x20000280
 80013cc:	20000281 	.word	0x20000281
 80013d0:	20000282 	.word	0x20000282

080013d4 <delayInit>:

// Entrada: Puntero al delay y su duración en ms
// Salida: Ninguna
// Función: Inicializa los parámetros internos del delay
void delayInit( delay_t * delay, tick_t duration )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	if((delay != NULL) && (duration > 0))			// Verifica que el puntero sea valido y que la duracion sea un valor positivo
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00b      	beq.n	80013fc <delayInit+0x28>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <delayInit+0x28>
	{
		delay->startTime = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		delay->duration = duration;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	605a      	str	r2, [r3, #4]
		delay->running = false;						// Inicializa el delay detenido
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	721a      	strb	r2, [r3, #8]
	}
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <delayRead>:

// Entrada: Puntero al delay
// Salida: Bool que indica si ya transcurrió el tiempo del delay o no.
// Función: Comprueba si ya transcurrio el tiempo del delay
bool_t delayRead( delay_t * delay )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if((delay != NULL) && (delay > 0))			// Verifica que el puntero sea válido y que la duración sea un valor positivo
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d021      	beq.n	800145a <delayRead+0x52>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01e      	beq.n	800145a <delayRead+0x52>
	{
		if(delay->running)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7a1b      	ldrb	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d010      	beq.n	8001446 <delayRead+0x3e>
		{
			if(HAL_GetTick() >= (delay->startTime + delay->duration))
 8001424:	f000 fc80 	bl	8001d28 <HAL_GetTick>
 8001428:	4601      	mov	r1, r0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4413      	add	r3, r2
 8001434:	4299      	cmp	r1, r3
 8001436:	d304      	bcc.n	8001442 <delayRead+0x3a>
			{
				delay->running = false;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	721a      	strb	r2, [r3, #8]
				return true;
 800143e:	2301      	movs	r3, #1
 8001440:	e00c      	b.n	800145c <delayRead+0x54>
			}
			else
			{
				return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e00a      	b.n	800145c <delayRead+0x54>
			}
		}
		else
		{
			delay->startTime = HAL_GetTick();
 8001446:	f000 fc6f 	bl	8001d28 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
			delay->running   = true;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	721a      	strb	r2, [r3, #8]
			return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <delayRead+0x54>
		}
	}
	else
	{
		return false;
 800145a:	2300      	movs	r3, #0
	}
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <mainFSM_update>:
static uint8_t state = 0;
static uint16_t tiempoDisparo = 100;
debounceState_t mainState = s_rest;

void mainFSM_update()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	switch (mainState)
 8001468:	4b38      	ldr	r3, [pc, #224]	; (800154c <mainFSM_update+0xe8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b04      	cmp	r3, #4
 800146e:	d86a      	bhi.n	8001546 <mainFSM_update+0xe2>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <mainFSM_update+0x14>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	0800148d 	.word	0x0800148d
 800147c:	080014fb 	.word	0x080014fb
 8001480:	08001507 	.word	0x08001507
 8001484:	08001513 	.word	0x08001513
 8001488:	08001535 	.word	0x08001535
	{
		case s_rest:

				error = myADC_update();
 800148c:	f7ff fdb0 	bl	8000ff0 <myADC_update>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <mainFSM_update+0xec>)
 8001496:	701a      	strb	r2, [r3, #0]
				if(error==0)
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <mainFSM_update+0xec>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d025      	beq.n	80014f2 <mainFSM_update+0x8e>
				{
					state = debounceFSM_update();
 80014a6:	f7ff fe33 	bl	8001110 <debounceFSM_update>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <mainFSM_update+0xf0>)
 80014b0:	701a      	strb	r2, [r3, #0]
					if(state==0) 		mainState = s_rest;
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <mainFSM_update+0xf0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <mainFSM_update+0x5e>
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <mainFSM_update+0xe8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
					else if(state==1) 	mainState = s_decreaseTime;
					else if(state==2)	mainState = s_increaseTime;
					else if(state==3)   mainState = s_Rx;
				}
				else mainState = s_alarm;
				break;
 80014c0:	e03e      	b.n	8001540 <mainFSM_update+0xdc>
					else if(state==1) 	mainState = s_decreaseTime;
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <mainFSM_update+0xf0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d103      	bne.n	80014d2 <mainFSM_update+0x6e>
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <mainFSM_update+0xe8>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
				break;
 80014d0:	e036      	b.n	8001540 <mainFSM_update+0xdc>
					else if(state==2)	mainState = s_increaseTime;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <mainFSM_update+0xf0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d103      	bne.n	80014e2 <mainFSM_update+0x7e>
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <mainFSM_update+0xe8>)
 80014dc:	2202      	movs	r2, #2
 80014de:	701a      	strb	r2, [r3, #0]
				break;
 80014e0:	e02e      	b.n	8001540 <mainFSM_update+0xdc>
					else if(state==3)   mainState = s_Rx;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <mainFSM_update+0xf0>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d12a      	bne.n	8001540 <mainFSM_update+0xdc>
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <mainFSM_update+0xe8>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	701a      	strb	r2, [r3, #0]
				break;
 80014f0:	e026      	b.n	8001540 <mainFSM_update+0xdc>
				else mainState = s_alarm;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <mainFSM_update+0xe8>)
 80014f4:	2203      	movs	r2, #3
 80014f6:	701a      	strb	r2, [r3, #0]
				break;
 80014f8:	e022      	b.n	8001540 <mainFSM_update+0xdc>

		case s_decreaseTime:

				decreaseTime();
 80014fa:	f000 f8b7 	bl	800166c <decreaseTime>
				mainState = s_rest;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <mainFSM_update+0xe8>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
				break;
 8001504:	e01f      	b.n	8001546 <mainFSM_update+0xe2>

		case s_increaseTime:

				increaseTime();
 8001506:	f000 f8db 	bl	80016c0 <increaseTime>
				mainState = s_rest;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <mainFSM_update+0xe8>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
				break;
 8001510:	e019      	b.n	8001546 <mainFSM_update+0xe2>

		case s_alarm:

				error = myADC_update();
 8001512:	f7ff fd6d 	bl	8000ff0 <myADC_update>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <mainFSM_update+0xec>)
 800151c:	701a      	strb	r2, [r3, #0]
				if(error==0) mainState = s_rest;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <mainFSM_update+0xec>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <mainFSM_update+0xe0>
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <mainFSM_update+0xe8>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
				break;
 8001532:	e007      	b.n	8001544 <mainFSM_update+0xe0>

		case s_Rx:

				applyRx();
 8001534:	f000 f8f0 	bl	8001718 <applyRx>
				mainState = s_rest;
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <mainFSM_update+0xe8>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
				break;
 800153e:	e002      	b.n	8001546 <mainFSM_update+0xe2>
				break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <mainFSM_update+0xe2>
				break;
 8001544:	bf00      	nop
	}
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000286 	.word	0x20000286
 8001550:	20000284 	.word	0x20000284
 8001554:	20000285 	.word	0x20000285

08001558 <inputsInit>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de las entradas del Sistema
void inputsInit()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800155c:	2100      	movs	r1, #0
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f9e0 	bl	8001924 <BSP_PB_Init>

	/* Initialize Button for -Time & +Time */
	RCC->AHB1ENR |= (1<<6); //Habilita puerto G
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <inputsInit+0x64>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <inputsInit+0x64>)
 800156a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156e:	6313      	str	r3, [r2, #48]	; 0x30

	//PG0 -Time
	GPIOG->MODER &=~ (3<<0);   			//00 --> entrada
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <inputsInit+0x68>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <inputsInit+0x68>)
 8001576:	f023 0303 	bic.w	r3, r3, #3
 800157a:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<0);			//10 --> pull down
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <inputsInit+0x68>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <inputsInit+0x68>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<1);
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <inputsInit+0x68>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <inputsInit+0x68>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	60d3      	str	r3, [r2, #12]

	//PG1 +Time
	GPIOG->MODER &=~ (3<<2);   			//00 --> entrada
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <inputsInit+0x68>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <inputsInit+0x68>)
 800159a:	f023 030c 	bic.w	r3, r3, #12
 800159e:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &=~ (1<<2);			//10 --> pull down
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <inputsInit+0x68>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <inputsInit+0x68>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |=  (1<<3);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <inputsInit+0x68>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <inputsInit+0x68>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40021800 	.word	0x40021800

080015c4 <outputsInit>:

// Entrada: Ninguna
// Salida: Ninguna
// Función: Inicialización de las salidas del Sistema
void outputsInit()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f927 	bl	800181c <BSP_LED_Init>
	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED2);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 f924 	bl	800181c <BSP_LED_Init>
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED3);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f000 f921 	bl	800181c <BSP_LED_Init>
	/* Initialize Buzzer */
	RCC->AHB1ENR   |=  (1<<4); //Habilita puerto E <-- para PE2 (buzzer) y PE4 (Rx)
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <outputsInit+0xa0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <outputsInit+0xa0>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER   &=~ (1<<(pinBuzzer*2+1));
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <outputsInit+0xa4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <outputsInit+0xa4>)
 80015ec:	f023 0320 	bic.w	r3, r3, #32
 80015f0:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |=  (1<<pinBuzzer*2);
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <outputsInit+0xa4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <outputsInit+0xa4>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER  &=~ (1<<pinBuzzer);
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <outputsInit+0xa4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <outputsInit+0xa4>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6053      	str	r3, [r2, #4]
	GPIOE->OSPEEDR &=~ (3<<pinBuzzer*3);
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <outputsInit+0xa4>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4a16      	ldr	r2, [pc, #88]	; (8001668 <outputsInit+0xa4>)
 8001610:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001614:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR   &=~ (3<<pinBuzzer*3);
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <outputsInit+0xa4>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <outputsInit+0xa4>)
 800161c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001620:	60d3      	str	r3, [r2, #12]
	/* Initialize Disparo Rx */
	GPIOE->MODER   &=~ (1<<(pinRx*2+1));
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <outputsInit+0xa4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <outputsInit+0xa4>)
 8001628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800162c:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |=  (1<<pinRx*2);
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <outputsInit+0xa4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <outputsInit+0xa4>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER  &=~ (1<<pinRx);
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <outputsInit+0xa4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <outputsInit+0xa4>)
 8001640:	f023 0310 	bic.w	r3, r3, #16
 8001644:	6053      	str	r3, [r2, #4]
	GPIOE->OSPEEDR &=~ (3<<pinRx*3);
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <outputsInit+0xa4>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <outputsInit+0xa4>)
 800164c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001650:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR   &=~ (3<<pinRx*3);
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <outputsInit+0xa4>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <outputsInit+0xa4>)
 8001658:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165c:	60d3      	str	r3, [r2, #12]
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40021000 	.word	0x40021000

0800166c <decreaseTime>:

//Función: disminuye tiempo de Disparo de RX
//Entrada: ninguna
//Salida: ninguna
void decreaseTime()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001670:	2000      	movs	r0, #0
 8001672:	f000 f923 	bl	80018bc <BSP_LED_On>
	if(tiempoDisparo>100) tiempoDisparo = tiempoDisparo-100;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <decreaseTime+0x48>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d905      	bls.n	800168a <decreaseTime+0x1e>
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <decreaseTime+0x48>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	3b64      	subs	r3, #100	; 0x64
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <decreaseTime+0x48>)
 8001688:	801a      	strh	r2, [r3, #0]
	printf("Tiempo de disparo = %dms\r\n",tiempoDisparo);
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <decreaseTime+0x48>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <decreaseTime+0x4c>)
 8001692:	f003 fc2f 	bl	8004ef4 <iprintf>
	while(menosTiempo_PRESSED);
 8001696:	bf00      	nop
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <decreaseTime+0x50>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <decreaseTime+0x2c>
	BSP_LED_Off(LED1);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f923 	bl	80018f0 <BSP_LED_Off>
	HAL_Delay(100);
 80016aa:	2064      	movs	r0, #100	; 0x64
 80016ac:	f000 fb48 	bl	8001d40 <HAL_Delay>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	0800722c 	.word	0x0800722c
 80016bc:	40021800 	.word	0x40021800

080016c0 <increaseTime>:

//Función: aumenta tiempo de Disparo de RX
//Entrada: ninguna
//Salida: ninguna
void increaseTime()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f000 f8f9 	bl	80018bc <BSP_LED_On>
	if(tiempoDisparo<3000) tiempoDisparo = tiempoDisparo+100;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <increaseTime+0x4c>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d805      	bhi.n	80016e2 <increaseTime+0x22>
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <increaseTime+0x4c>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	3364      	adds	r3, #100	; 0x64
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <increaseTime+0x4c>)
 80016e0:	801a      	strh	r2, [r3, #0]
	printf("Tiempo de disparo = %dms\r\n",tiempoDisparo);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <increaseTime+0x4c>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <increaseTime+0x50>)
 80016ea:	f003 fc03 	bl	8004ef4 <iprintf>
	while(masTiempo_PRESSED);
 80016ee:	bf00      	nop
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <increaseTime+0x54>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f9      	bne.n	80016f0 <increaseTime+0x30>
	BSP_LED_Off(LED2);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f000 f8f7 	bl	80018f0 <BSP_LED_Off>
	HAL_Delay(100);
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f000 fb1c 	bl	8001d40 <HAL_Delay>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	0800722c 	.word	0x0800722c
 8001714:	40021800 	.word	0x40021800

08001718 <applyRx>:

//Función: ejecución de Disparo de RX, durante el tiempo configurado
//Entrada: ninguna
//Salida: ninguna
void applyRx()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	printf("Disparo ON\r\n");
 800171c:	480e      	ldr	r0, [pc, #56]	; (8001758 <applyRx+0x40>)
 800171e:	f003 fc6f 	bl	8005000 <puts>
	BSP_LED_On(LED3);
 8001722:	2002      	movs	r0, #2
 8001724:	f000 f8ca 	bl	80018bc <BSP_LED_On>
	HAL_Delay(tiempoDisparo);
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <applyRx+0x44>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fb07 	bl	8001d40 <HAL_Delay>
	BSP_LED_Off(LED3);
 8001732:	2002      	movs	r0, #2
 8001734:	f000 f8dc 	bl	80018f0 <BSP_LED_Off>
	printf("Disparo OFF\r\n");
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <applyRx+0x48>)
 800173a:	f003 fc61 	bl	8005000 <puts>
	while(BSP_PB_GetState(BUTTON_USER)); //espera a que suelte disparo
 800173e:	bf00      	nop
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f945 	bl	80019d0 <BSP_PB_GetState>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f9      	bne.n	8001740 <applyRx+0x28>
	HAL_Delay(200);
 800174c:	20c8      	movs	r0, #200	; 0xc8
 800174e:	f000 faf7 	bl	8001d40 <HAL_Delay>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	08007248 	.word	0x08007248
 800175c:	20000000 	.word	0x20000000
 8001760:	08007254 	.word	0x08007254

08001764 <myUART_init>:
 	 Entradas: ninguna
 	 Salida: booleando TRUE si se inicializó correctamente, FALSE si falló
 	 Es pública porque se llama desde fuera del módulo (main)
*/
bool_t myUART_init()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	UartHandle.Instance        = USART3; //uart 1 para placa discovery
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <myUART_init+0x74>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <myUART_init+0x78>)
 800176c:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = myBaudRate;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <myUART_init+0x74>)
 8001770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001774:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <myUART_init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <myUART_init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_ODD;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <myUART_init+0x74>)
 8001784:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001788:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <myUART_init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <myUART_init+0x74>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <myUART_init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <myUART_init+0x74>)
 800179e:	f002 faa3 	bl	8003ce8 <HAL_UART_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <myUART_init+0x4e>
	{
		printf("Error en la inicializacion de la UART\n\r");
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <myUART_init+0x7c>)
 80017aa:	f003 fba3 	bl	8004ef4 <iprintf>
		return false;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e00f      	b.n	80017d2 <myUART_init+0x6e>
	}
	printf("TP final PdM\r\n");
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <myUART_init+0x80>)
 80017b4:	f003 fc24 	bl	8005000 <puts>
	printf("Programacion de Microcontroladores\r\n");
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <myUART_init+0x84>)
 80017ba:	f003 fc21 	bl	8005000 <puts>
	printf("Carrera de Especializacion en Sistemas Embebidos\r\n");
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <myUART_init+0x88>)
 80017c0:	f003 fc1e 	bl	8005000 <puts>
	printf("Joan Emmanuel Jordan\r\n\r\n");
 80017c4:	480a      	ldr	r0, [pc, #40]	; (80017f0 <myUART_init+0x8c>)
 80017c6:	f003 fc1b 	bl	8005000 <puts>
	printf("Tiempo de disparo = 100ms\r\n");
 80017ca:	480a      	ldr	r0, [pc, #40]	; (80017f4 <myUART_init+0x90>)
 80017cc:	f003 fc18 	bl	8005000 <puts>
	return true;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000288 	.word	0x20000288
 80017dc:	40004800 	.word	0x40004800
 80017e0:	08007264 	.word	0x08007264
 80017e4:	0800728c 	.word	0x0800728c
 80017e8:	0800729c 	.word	0x0800729c
 80017ec:	080072c0 	.word	0x080072c0
 80017f0:	080072f4 	.word	0x080072f4
 80017f4:	0800730c 	.word	0x0800730c

080017f8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  // Place your implementation of fputc here
  // e.g. write a character to the USART3 and Loop until the end of transmission
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8001800:	1d39      	adds	r1, r7, #4
 8001802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001806:	2201      	movs	r2, #1
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <__io_putchar+0x20>)
 800180a:	f002 faba 	bl	8003d82 <HAL_UART_Transmit>

  return ch;
 800180e:	687b      	ldr	r3, [r7, #4]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000288 	.word	0x20000288

0800181c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10e      	bne.n	800184a <BSP_LED_Init+0x2e>
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <BSP_LED_Init+0x94>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <BSP_LED_Init+0x94>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <BSP_LED_Init+0x94>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	e00d      	b.n	8001866 <BSP_LED_Init+0x4a>
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <BSP_LED_Init+0x94>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <BSP_LED_Init+0x94>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <BSP_LED_Init+0x94>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <BSP_LED_Init+0x98>)
 800186a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <BSP_LED_Init+0x9c>)
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	f107 0214 	add.w	r2, r7, #20
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fa88 	bl	8002da0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <BSP_LED_Init+0x9c>)
 8001894:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <BSP_LED_Init+0x98>)
 800189c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f001 fc40 	bl	8003128 <HAL_GPIO_WritePin>
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08007378 	.word	0x08007378
 80018b8:	20000004 	.word	0x20000004

080018bc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <BSP_LED_On+0x2c>)
 80018ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <BSP_LED_On+0x30>)
 80018d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	f001 fc25 	bl	8003128 <HAL_GPIO_WritePin>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000004 	.word	0x20000004
 80018ec:	08007378 	.word	0x08007378

080018f0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <BSP_LED_Off+0x2c>)
 80018fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <BSP_LED_Off+0x30>)
 8001906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190a:	2200      	movs	r2, #0
 800190c:	4619      	mov	r1, r3
 800190e:	f001 fc0b 	bl	8003128 <HAL_GPIO_WritePin>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000004 	.word	0x20000004
 8001920:	08007378 	.word	0x08007378

08001924 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	460a      	mov	r2, r1
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	4613      	mov	r3, r2
 8001932:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <BSP_PB_Init+0xa4>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <BSP_PB_Init+0xa4>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <BSP_PB_Init+0xa4>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d112      	bne.n	800197c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001960:	2302      	movs	r3, #2
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <BSP_PB_Init+0xa8>)
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	f107 020c 	add.w	r2, r7, #12
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fa12 	bl	8002da0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d11d      	bne.n	80019be <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800198c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001990:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <BSP_PB_Init+0xa8>)
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	f107 020c 	add.w	r2, r7, #12
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 f9fd 	bl	8002da0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80019a6:	2328      	movs	r3, #40	; 0x28
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	2200      	movs	r2, #0
 80019ac:	210f      	movs	r1, #15
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fed5 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80019b4:	2328      	movs	r3, #40	; 0x28
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 feec 	bl	8002796 <HAL_NVIC_EnableIRQ>
  }
}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	20000010 	.word	0x20000010

080019d0 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <BSP_PB_GetState+0x28>)
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f001 fb85 	bl	80030f8 <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000010 	.word	0x20000010

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <SystemInit+0x60>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <SystemInit+0x60>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <SystemInit+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <SystemInit+0x64>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <SystemInit+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <SystemInit+0x64>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <SystemInit+0x64>)
 8001a28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <SystemInit+0x64>)
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <SystemInit+0x68>)
 8001a36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <SystemInit+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <SystemInit+0x64>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <SystemInit+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SystemInit+0x60>)
 8001a4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a50:	609a      	str	r2, [r3, #8]
#endif
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	24003010 	.word	0x24003010

08001a68 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001abc:	f000 f920 	bl	8001d00 <HAL_IncTick>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA2_Stream0_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <DMA2_Stream0_IRQHandler+0x14>)
 8001aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 ff2b 	bl	8002928 <HAL_DMA_IRQHandler>
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000214 	.word	0x20000214

08001adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	return 1;
 8001ae0:	2301      	movs	r3, #1
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_kill>:

int _kill(int pid, int sig)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001af6:	f002 fd61 	bl	80045bc <__errno>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2216      	movs	r2, #22
 8001afe:	601a      	str	r2, [r3, #0]
	return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_exit>:

void _exit (int status)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ffe7 	bl	8001aec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b1e:	e7fe      	b.n	8001b1e <_exit+0x12>

08001b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e00a      	b.n	8001b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b32:	f3af 8000 	nop.w
 8001b36:	4601      	mov	r1, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbf0      	blt.n	8001b32 <_read+0x12>
	}

return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e009      	b.n	8001b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe3f 	bl	80017f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf1      	blt.n	8001b6c <_write+0x12>
	}
	return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_close>:

int _close(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	return -1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bba:	605a      	str	r2, [r3, #4]
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_isatty>:

int _isatty(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f002 fcc6 	bl	80045bc <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20030000 	.word	0x20030000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	200002cc 	.word	0x200002cc
 8001c64:	20000348 	.word	0x20000348

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_Init+0x34>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_Init+0x34>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_Init+0x34>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_Init+0x34>)
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 fd5f 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f001 fb3a 	bl	8003308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fd77 	bl	80027b2 <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 fd3f 	bl	800275e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000014 	.word	0x20000014
 8001cf8:	2000001c 	.word	0x2000001c
 8001cfc:	20000018 	.word	0x20000018

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	2000001c 	.word	0x2000001c
 8001d24:	200002d0 	.word	0x200002d0

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200002d0 	.word	0x200002d0

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000001c 	.word	0x2000001c

08001d88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e033      	b.n	8001e06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f001 f9d8 	bl	800315c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dce:	f023 0302 	bic.w	r3, r3, #2
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fae8 	bl	80023b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
 8001df6:	e001      	b.n	8001dfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Start+0x1a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e0b2      	b.n	8001f90 <HAL_ADC_Start+0x180>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d018      	beq.n	8001e72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_ADC_Start+0x18c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_ADC_Start+0x190>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9a      	lsrs	r2, r3, #18
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f9      	bne.n	8001e66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d17a      	bne.n	8001f76 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ebe:	d106      	bne.n	8001ece <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	f023 0206 	bic.w	r2, r3, #6
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
 8001ecc:	e002      	b.n	8001ed4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_ADC_Start+0x194>)
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d12a      	bne.n	8001f4c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_ADC_Start+0x198>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d015      	beq.n	8001f2c <HAL_ADC_Start+0x11c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a29      	ldr	r2, [pc, #164]	; (8001fac <HAL_ADC_Start+0x19c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d105      	bne.n	8001f16 <HAL_ADC_Start+0x106>
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_ADC_Start+0x194>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_ADC_Start+0x1a0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d136      	bne.n	8001f8e <HAL_ADC_Start+0x17e>
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_ADC_Start+0x194>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d130      	bne.n	8001f8e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d129      	bne.n	8001f8e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	e020      	b.n	8001f8e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <HAL_ADC_Start+0x198>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d11b      	bne.n	8001f8e <HAL_ADC_Start+0x17e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d114      	bne.n	8001f8e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e00b      	b.n	8001f8e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	20000014 	.word	0x20000014
 8001fa0:	431bde83 	.word	0x431bde83
 8001fa4:	40012300 	.word	0x40012300
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	40012100 	.word	0x40012100
 8001fb0:	40012200 	.word	0x40012200

08001fb4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Stop+0x16>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e021      	b.n	800200e <HAL_ADC_Stop+0x5a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d113      	bne.n	8002060 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002046:	d10b      	bne.n	8002060 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e063      	b.n	8002128 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002060:	f7ff fe62 	bl	8001d28 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002066:	e021      	b.n	80020ac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d01d      	beq.n	80020ac <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_ADC_PollForConversion+0x6c>
 8002076:	f7ff fe57 	bl	8001d28 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d212      	bcs.n	80020ac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d00b      	beq.n	80020ac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e03d      	b.n	8002128 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d1d6      	bne.n	8002068 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0212 	mvn.w	r2, #18
 80020c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d123      	bne.n	8002126 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11f      	bne.n	8002126 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d111      	bne.n	8002126 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x1c>
 8002164:	2302      	movs	r3, #2
 8002166:	e113      	b.n	8002390 <HAL_ADC_ConfigChannel+0x244>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b09      	cmp	r3, #9
 8002176:	d925      	bls.n	80021c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68d9      	ldr	r1, [r3, #12]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	3b1e      	subs	r3, #30
 800218e:	2207      	movs	r2, #7
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43da      	mvns	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	400a      	ands	r2, r1
 800219c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68d9      	ldr	r1, [r3, #12]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4403      	add	r3, r0
 80021b6:	3b1e      	subs	r3, #30
 80021b8:	409a      	lsls	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	e022      	b.n	800220a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	2207      	movs	r2, #7
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	400a      	ands	r2, r1
 80021e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4403      	add	r3, r0
 8002200:	409a      	lsls	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d824      	bhi.n	800225c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b05      	subs	r3, #5
 8002224:	221f      	movs	r2, #31
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b05      	subs	r3, #5
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	635a      	str	r2, [r3, #52]	; 0x34
 800225a:	e04c      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d824      	bhi.n	80022ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b23      	subs	r3, #35	; 0x23
 8002276:	221f      	movs	r2, #31
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43da      	mvns	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	400a      	ands	r2, r1
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b23      	subs	r3, #35	; 0x23
 80022a0:	fa00 f203 	lsl.w	r2, r0, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
 80022ac:	e023      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b41      	subs	r3, #65	; 0x41
 80022c0:	221f      	movs	r2, #31
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	400a      	ands	r2, r1
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	3b41      	subs	r3, #65	; 0x41
 80022ea:	fa00 f203 	lsl.w	r2, r0, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_ADC_ConfigChannel+0x250>)
 80022f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <HAL_ADC_ConfigChannel+0x254>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d10f      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b12      	cmp	r3, #18
 800230a:	d10b      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_ADC_ConfigChannel+0x254>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d12b      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x23a>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_ADC_ConfigChannel+0x258>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x1f4>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b11      	cmp	r3, #17
 800233e:	d122      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_ADC_ConfigChannel+0x258>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d111      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_ADC_ConfigChannel+0x25c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a11      	ldr	r2, [pc, #68]	; (80023ac <HAL_ADC_ConfigChannel+0x260>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	0c9a      	lsrs	r2, r3, #18
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002378:	e002      	b.n	8002380 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f9      	bne.n	800237a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40012300 	.word	0x40012300
 80023a0:	40012000 	.word	0x40012000
 80023a4:	10000012 	.word	0x10000012
 80023a8:	20000014 	.word	0x20000014
 80023ac:	431bde83 	.word	0x431bde83

080023b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b8:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <ADC_Init+0x1f0>)
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	021a      	lsls	r2, r3, #8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <ADC_Init+0x1f4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d022      	beq.n	800248e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e00f      	b.n	80024ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800249c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0202 	bic.w	r2, r2, #2
 80024bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7e1b      	ldrb	r3, [r3, #24]
 80024c8:	005a      	lsls	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	035a      	lsls	r2, r3, #13
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	e007      	b.n	8002524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	3b01      	subs	r3, #1
 8002540:	051a      	lsls	r2, r3, #20
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002566:	025a      	lsls	r2, r3, #9
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	029a      	lsls	r2, r3, #10
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40012300 	.word	0x40012300
 80025a4:	0f000001 	.word	0x0f000001

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <__NVIC_EnableIRQ+0x38>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	; (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f7ff ff8e 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff29 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff3e 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff8e 	bl	800269c <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5d 	bl	8002648 <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff31 	bl	800260c <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa2 	bl	8002704 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff faa6 	bl	8001d28 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e099      	b.n	800291c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002808:	e00f      	b.n	800282a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280a:	f7ff fa8d 	bl	8001d28 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b05      	cmp	r3, #5
 8002816:	d908      	bls.n	800282a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e078      	b.n	800291c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e8      	bne.n	800280a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <HAL_DMA_Init+0x158>)
 8002844:	4013      	ands	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2b04      	cmp	r3, #4
 8002882:	d107      	bne.n	8002894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4313      	orrs	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d117      	bne.n	80028ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f9e9 	bl	8002ca8 <DMA_CheckFifoParam>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ea:	2301      	movs	r3, #1
 80028ec:	e016      	b.n	800291c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9a0 	bl	8002c3c <DMA_CalcBaseAndBitshift>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	223f      	movs	r2, #63	; 0x3f
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	f010803f 	.word	0xf010803f

08002928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002934:	4b8e      	ldr	r3, [pc, #568]	; (8002b70 <HAL_DMA_IRQHandler+0x248>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8e      	ldr	r2, [pc, #568]	; (8002b74 <HAL_DMA_IRQHandler+0x24c>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2208      	movs	r2, #8
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01a      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2208      	movs	r2, #8
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2204      	movs	r2, #4
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2204      	movs	r2, #4
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2210      	movs	r2, #16
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d043      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03c      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2210      	movs	r2, #16
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d024      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	e01f      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e016      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0208 	bic.w	r2, r2, #8
 8002a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 808f 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8087 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	2220      	movs	r2, #32
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d136      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0216 	bic.w	r2, r2, #22
 8002ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x1da>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0208 	bic.w	r2, r2, #8
 8002b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	223f      	movs	r2, #63	; 0x3f
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d07e      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
        }
        return;
 8002b3e:	e079      	b.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01d      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10d      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d031      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e02c      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
 8002b6e:	bf00      	nop
 8002b70:	20000014 	.word	0x20000014
 8002b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e01e      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0210 	bic.w	r2, r2, #16
 8002ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d032      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2205      	movs	r2, #5
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d307      	bcc.n	8002c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f2      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x2cc>
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c34:	bf00      	nop
    }
  }
}
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3b10      	subs	r3, #16
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d909      	bls.n	8002c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7c:	e007      	b.n	8002c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	aaaaaaab 	.word	0xaaaaaaab
 8002ca4:	08007398 	.word	0x08007398

08002ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11f      	bne.n	8002d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d856      	bhi.n	8002d76 <DMA_CheckFifoParam+0xce>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <DMA_CheckFifoParam+0x28>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf3 	.word	0x08002cf3
 8002cd8:	08002ce1 	.word	0x08002ce1
 8002cdc:	08002d77 	.word	0x08002d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d046      	beq.n	8002d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e043      	b.n	8002d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfa:	d140      	bne.n	8002d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e03d      	b.n	8002d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d121      	bne.n	8002d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d837      	bhi.n	8002d82 <DMA_CheckFifoParam+0xda>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x70>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d2f 	.word	0x08002d2f
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002d41 	.word	0x08002d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e030      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d025      	beq.n	8002d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e022      	b.n	8002d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d4e:	e01c      	b.n	8002d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d903      	bls.n	8002d5e <DMA_CheckFifoParam+0xb6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d5c:	e018      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      break;
 8002d62:	e015      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e00b      	b.n	8002d8e <DMA_CheckFifoParam+0xe6>
      break;
 8002d76:	bf00      	nop
 8002d78:	e00a      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e008      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e006      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e177      	b.n	80030ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 8166 	bne.w	80030a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80c0 	beq.w	80030a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <HAL_GPIO_Init+0x324>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a65      	ldr	r2, [pc, #404]	; (80030c4 <HAL_GPIO_Init+0x324>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_GPIO_Init+0x324>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a61      	ldr	r2, [pc, #388]	; (80030c8 <HAL_GPIO_Init+0x328>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_GPIO_Init+0x32c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d037      	beq.n	8002fde <HAL_GPIO_Init+0x23e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_GPIO_Init+0x330>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d031      	beq.n	8002fda <HAL_GPIO_Init+0x23a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02b      	beq.n	8002fd6 <HAL_GPIO_Init+0x236>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a55      	ldr	r2, [pc, #340]	; (80030d8 <HAL_GPIO_Init+0x338>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d025      	beq.n	8002fd2 <HAL_GPIO_Init+0x232>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a54      	ldr	r2, [pc, #336]	; (80030dc <HAL_GPIO_Init+0x33c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01f      	beq.n	8002fce <HAL_GPIO_Init+0x22e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a53      	ldr	r2, [pc, #332]	; (80030e0 <HAL_GPIO_Init+0x340>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0x22a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a52      	ldr	r2, [pc, #328]	; (80030e4 <HAL_GPIO_Init+0x344>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_GPIO_Init+0x226>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a51      	ldr	r2, [pc, #324]	; (80030e8 <HAL_GPIO_Init+0x348>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_GPIO_Init+0x222>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a50      	ldr	r2, [pc, #320]	; (80030ec <HAL_GPIO_Init+0x34c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x21e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4f      	ldr	r2, [pc, #316]	; (80030f0 <HAL_GPIO_Init+0x350>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_GPIO_Init+0x21a>
 8002fb6:	2309      	movs	r3, #9
 8002fb8:	e012      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fba:	230a      	movs	r3, #10
 8002fbc:	e010      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	e00e      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	e00c      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	e00a      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fca:	2305      	movs	r3, #5
 8002fcc:	e008      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e006      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e004      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_GPIO_Init+0x240>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f002 0203 	and.w	r2, r2, #3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4093      	lsls	r3, r2
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff0:	4935      	ldr	r1, [pc, #212]	; (80030c8 <HAL_GPIO_Init+0x328>)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_GPIO_Init+0x354>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003022:	4a34      	ldr	r2, [pc, #208]	; (80030f4 <HAL_GPIO_Init+0x354>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003028:	4b32      	ldr	r3, [pc, #200]	; (80030f4 <HAL_GPIO_Init+0x354>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304c:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <HAL_GPIO_Init+0x354>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_GPIO_Init+0x354>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_GPIO_Init+0x354>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_GPIO_Init+0x354>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <HAL_GPIO_Init+0x354>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3301      	adds	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b0f      	cmp	r3, #15
 80030b0:	f67f ae84 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40013800 	.word	0x40013800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40020800 	.word	0x40020800
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40021400 	.word	0x40021400
 80030e4:	40021800 	.word	0x40021800
 80030e8:	40021c00 	.word	0x40021c00
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40022400 	.word	0x40022400
 80030f4:	40013c00 	.word	0x40013c00

080030f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
 8003114:	e001      	b.n	800311a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_ADC_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* ADC1 Periph clock enable */
  ADCx_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	4a39      	ldr	r2, [pc, #228]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003172:	6453      	str	r3, [r2, #68]	; 0x44
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]
  /* Enable GPIO clock ****************************************/
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4a32      	ldr	r2, [pc, #200]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6313      	str	r3, [r2, #48]	; 0x30
 8003190:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
  /* Enable DMA2 clock */
  DMAx_CLK_ENABLE();
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 80031a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031aa:	6313      	str	r3, [r2, #48]	; 0x30
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_ADC_MspInit+0xf8>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* ADC Channel GPIO pin configuration */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
 80031b8:	2308      	movs	r3, #8
 80031ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031bc:	2303      	movs	r3, #3
 80031be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4619      	mov	r1, r3
 80031ca:	4823      	ldr	r0, [pc, #140]	; (8003258 <HAL_ADC_MspInit+0xfc>)
 80031cc:	f7ff fde8 	bl	8002da0 <HAL_GPIO_Init>

  /*##-3- Configure the DMA streams ##########################################*/
  /* Set the parameters to be configured */
  hdma_adc.Instance = ADCx_DMA_STREAM;
 80031d0:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_ADC_MspInit+0x100>)
 80031d2:	4a23      	ldr	r2, [pc, #140]	; (8003260 <HAL_ADC_MspInit+0x104>)
 80031d4:	601a      	str	r2, [r3, #0]
  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <HAL_ADC_MspInit+0x100>)
 80031d8:	2200      	movs	r2, #0
 80031da:	605a      	str	r2, [r3, #4]
  hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	; (800325c <HAL_ADC_MspInit+0x100>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e2:	4b1e      	ldr	r3, [pc, #120]	; (800325c <HAL_ADC_MspInit+0x100>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80031e8:	4b1c      	ldr	r3, [pc, #112]	; (800325c <HAL_ADC_MspInit+0x100>)
 80031ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ee:	611a      	str	r2, [r3, #16]
  hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_ADC_MspInit+0x100>)
 80031f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031f6:	615a      	str	r2, [r3, #20]
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031f8:	4b18      	ldr	r3, [pc, #96]	; (800325c <HAL_ADC_MspInit+0x100>)
 80031fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fe:	619a      	str	r2, [r3, #24]
  hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_ADC_MspInit+0x100>)
 8003202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003206:	61da      	str	r2, [r3, #28]
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_ADC_MspInit+0x100>)
 800320a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320e:	621a      	str	r2, [r3, #32]
  hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_ADC_MspInit+0x100>)
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_ADC_MspInit+0x100>)
 8003218:	2201      	movs	r2, #1
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_ADC_MspInit+0x100>)
 800321e:	2200      	movs	r2, #0
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_ADC_MspInit+0x100>)
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30

  HAL_DMA_Init(&hdma_adc);
 8003228:	480c      	ldr	r0, [pc, #48]	; (800325c <HAL_ADC_MspInit+0x100>)
 800322a:	f7ff facf 	bl	80027cc <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_ADC_MspInit+0x100>)
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
 8003234:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_ADC_MspInit+0x100>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6393      	str	r3, [r2, #56]	; 0x38

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	2038      	movs	r0, #56	; 0x38
 8003240:	f7ff fa8d 	bl	800275e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 8003244:	2038      	movs	r0, #56	; 0x38
 8003246:	f7ff faa6 	bl	8002796 <HAL_NVIC_EnableIRQ>
}
 800324a:	bf00      	nop
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40020000 	.word	0x40020000
 800325c:	200002d4 	.word	0x200002d4
 8003260:	40026410 	.word	0x40026410

08003264 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_UART_MspInit+0x9c>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_UART_MspInit+0x9c>)
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_UART_MspInit+0x9c>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_UART_MspInit+0x9c>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_UART_MspInit+0x9c>)
 8003292:	f043 0308 	orr.w	r3, r3, #8
 8003296:	6313      	str	r3, [r2, #48]	; 0x30
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_UART_MspInit+0x9c>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_UART_MspInit+0x9c>)
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_UART_MspInit+0x9c>)
 80032ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b2:	6413      	str	r3, [r2, #64]	; 0x40
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_UART_MspInit+0x9c>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80032c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80032d2:	2307      	movs	r3, #7
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	4809      	ldr	r0, [pc, #36]	; (8003304 <HAL_UART_MspInit+0xa0>)
 80032de:	f7ff fd5f 	bl	8002da0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80032e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80032e8:	2307      	movs	r3, #7
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4619      	mov	r1, r3
 80032f2:	4804      	ldr	r0, [pc, #16]	; (8003304 <HAL_UART_MspInit+0xa0>)
 80032f4:	f7ff fd54 	bl	8002da0 <HAL_GPIO_Init>
}
 80032f8:	bf00      	nop
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	40020c00 	.word	0x40020c00

08003308 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0

}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_PWREx_EnableOverDrive+0x94>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003344:	f7fe fcf0 	bl	8001d28 <HAL_GetTick>
 8003348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800334a:	e009      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800334c:	f7fe fcec 	bl	8001d28 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335a:	d901      	bls.n	8003360 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e01f      	b.n	80033a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d1ee      	bne.n	800334c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003374:	f7fe fcd8 	bl	8001d28 <HAL_GetTick>
 8003378:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800337a:	e009      	b.n	8003390 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800337c:	f7fe fcd4 	bl	8001d28 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338a:	d901      	bls.n	8003390 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e007      	b.n	80033a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800339c:	d1ee      	bne.n	800337c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	420e0040 	.word	0x420e0040
 80033b0:	40007000 	.word	0x40007000
 80033b4:	420e0044 	.word	0x420e0044

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e267      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d075      	beq.n	80034c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d6:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d00c      	beq.n	80033fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d112      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fa:	d10b      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	4b7e      	ldr	r3, [pc, #504]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d05b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x108>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d157      	bne.n	80034c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e242      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x74>
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01d      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6f      	ldr	r2, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b6d      	ldr	r3, [pc, #436]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6c      	ldr	r2, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 8003450:	4b69      	ldr	r3, [pc, #420]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a68      	ldr	r2, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fc5a 	bl	8001d28 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe fc56 	bl	8001d28 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e207      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0xc0>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fc46 	bl	8001d28 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe fc42 	bl	8001d28 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1f3      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0xe8>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d063      	beq.n	8003596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d11c      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b44      	ldr	r3, [pc, #272]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1c7      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4937      	ldr	r1, [pc, #220]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	e03a      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x244>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fe fbfb 	bl	8001d28 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7fe fbf7 	bl	8001d28 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1a8      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4925      	ldr	r1, [pc, #148]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_OscConfig+0x244>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fbda 	bl	8001d28 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003578:	f7fe fbd6 	bl	8001d28 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e187      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d036      	beq.n	8003610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x248>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fe fbba 	bl	8001d28 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fe fbb6 	bl	8001d28 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e167      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x200>
 80035d6:	e01b      	b.n	8003610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_OscConfig+0x248>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fe fba3 	bl	8001d28 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	e00e      	b.n	8003604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe fb9f 	bl	8001d28 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d907      	bls.n	8003604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e150      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	42470000 	.word	0x42470000
 8003600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ea      	bne.n	80035e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8097 	beq.w	800374c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4b7d      	ldr	r3, [pc, #500]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a7c      	ldr	r2, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b7a      	ldr	r3, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364e:	4b77      	ldr	r3, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d118      	bne.n	800368c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365a:	4b74      	ldr	r3, [pc, #464]	; (800382c <HAL_RCC_OscConfig+0x474>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a73      	ldr	r2, [pc, #460]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003666:	f7fe fb5f 	bl	8001d28 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fe fb5b 	bl	8001d28 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e10c      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x2ea>
 8003694:	4b64      	ldr	r3, [pc, #400]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	e01c      	b.n	80036dc <HAL_RCC_OscConfig+0x324>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x30c>
 80036aa:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a5e      	ldr	r2, [pc, #376]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0304 	orr.w	r3, r3, #4
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	4b5c      	ldr	r3, [pc, #368]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a5b      	ldr	r2, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0x324>
 80036c4:	4b58      	ldr	r3, [pc, #352]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	4b55      	ldr	r3, [pc, #340]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a54      	ldr	r2, [pc, #336]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 0304 	bic.w	r3, r3, #4
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d015      	beq.n	8003710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe fb20 	bl	8001d28 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe fb1c 	bl	8001d28 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0cb      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ee      	beq.n	80036ec <HAL_RCC_OscConfig+0x334>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7fe fb0a 	bl	8001d28 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fe fb06 	bl	8001d28 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0b5      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ee      	bne.n	8003718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003740:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	4a38      	ldr	r2, [pc, #224]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a1 	beq.w	8003898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003756:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	d05c      	beq.n	800381c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d141      	bne.n	80037ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe fada 	bl	8001d28 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe fad6 	bl	8001d28 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e087      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	491b      	ldr	r1, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fe faaf 	bl	8001d28 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe faab 	bl	8001d28 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e05c      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x416>
 80037ec:	e054      	b.n	8003898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe fa98 	bl	8001d28 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fa94 	bl	8001d28 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e045      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x444>
 800381a:	e03d      	b.n	8003898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e038      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
 8003828:	40023800 	.word	0x40023800
 800382c:	40007000 	.word	0x40007000
 8003830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x4ec>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d028      	beq.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d121      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d11a      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003864:	4013      	ands	r3, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800386a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386c:	4293      	cmp	r3, r2
 800386e:	d111      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	3b01      	subs	r3, #1
 800387e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d107      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0cc      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038bc:	4b68      	ldr	r3, [pc, #416]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d90c      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b8      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038fc:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d044      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d119      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	2b03      	cmp	r3, #3
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e067      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4934      	ldr	r1, [pc, #208]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003998:	f7fe f9c6 	bl	8001d28 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fe f9c2 	bl	8001d28 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e04f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 020c 	and.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1eb      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d20c      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e032      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4916      	ldr	r1, [pc, #88]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	490e      	ldr	r1, [pc, #56]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2e:	f000 f821 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	490a      	ldr	r1, [pc, #40]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe f926 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023c00 	.word	0x40023c00
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08007380 	.word	0x08007380
 8003a6c:	20000014 	.word	0x20000014
 8003a70:	20000018 	.word	0x20000018

08003a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a78:	b094      	sub	sp, #80	; 0x50
 8003a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a80:	2300      	movs	r3, #0
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	2300      	movs	r3, #0
 8003a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a8c:	4b79      	ldr	r3, [pc, #484]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d00d      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	f200 80e1 	bhi.w	8003c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa6:	e0db      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b73      	ldr	r3, [pc, #460]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003aac:	e0db      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab2:	e0d8      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abe:	4b6d      	ldr	r3, [pc, #436]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d063      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ade:	2300      	movs	r3, #0
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	f04f 0000 	mov.w	r0, #0
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	0159      	lsls	r1, r3, #5
 8003af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af8:	0150      	lsls	r0, r2, #5
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4621      	mov	r1, r4
 8003b00:	1a51      	subs	r1, r2, r1
 8003b02:	6139      	str	r1, [r7, #16]
 8003b04:	4629      	mov	r1, r5
 8003b06:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b18:	4659      	mov	r1, fp
 8003b1a:	018b      	lsls	r3, r1, #6
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b22:	4651      	mov	r1, sl
 8003b24:	018a      	lsls	r2, r1, #6
 8003b26:	4651      	mov	r1, sl
 8003b28:	ebb2 0801 	subs.w	r8, r2, r1
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b46:	4690      	mov	r8, r2
 8003b48:	4699      	mov	r9, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	eb18 0303 	adds.w	r3, r8, r3
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	462b      	mov	r3, r5
 8003b54:	eb49 0303 	adc.w	r3, r9, r3
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b66:	4629      	mov	r1, r5
 8003b68:	024b      	lsls	r3, r1, #9
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b70:	4621      	mov	r1, r4
 8003b72:	024a      	lsls	r2, r1, #9
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b84:	f7fd f840 	bl	8000c08 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b90:	e058      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b92:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bac:	4642      	mov	r2, r8
 8003bae:	464b      	mov	r3, r9
 8003bb0:	f04f 0000 	mov.w	r0, #0
 8003bb4:	f04f 0100 	mov.w	r1, #0
 8003bb8:	0159      	lsls	r1, r3, #5
 8003bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bbe:	0150      	lsls	r0, r2, #5
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bca:	4649      	mov	r1, r9
 8003bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003be4:	ebb2 040a 	subs.w	r4, r2, sl
 8003be8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	00eb      	lsls	r3, r5, #3
 8003bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfa:	00e2      	lsls	r2, r4, #3
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	4643      	mov	r3, r8
 8003c02:	18e3      	adds	r3, r4, r3
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	464b      	mov	r3, r9
 8003c08:	eb45 0303 	adc.w	r3, r5, r3
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	028b      	lsls	r3, r1, #10
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c24:	4621      	mov	r1, r4
 8003c26:	028a      	lsls	r2, r1, #10
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	61fa      	str	r2, [r7, #28]
 8003c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c38:	f7fc ffe6 	bl	8000c08 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3750      	adds	r7, #80	; 0x50
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	007a1200 	.word	0x007a1200

08003c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000014 	.word	0x20000014

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c9c:	f7ff fff0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a9b      	lsrs	r3, r3, #10
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	08007390 	.word	0x08007390

08003cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cc4:	f7ff ffdc 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0b5b      	lsrs	r3, r3, #13
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	08007390 	.word	0x08007390

08003ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03f      	b.n	8003d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff faa8 	bl	8003264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f929 	bl	8003f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	; 0x28
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d17c      	bne.n	8003e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_Transmit+0x2c>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e075      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x3e>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e06e      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd6:	f7fd ffa7 	bl	8001d28 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e14:	e02a      	b.n	8003e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f840 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e036      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e007      	b.n	8003e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1cf      	bne.n	8003e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f810 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b090      	sub	sp, #64	; 0x40
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	e050      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d04c      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	f7fd ff2f 	bl	8001d28 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d241      	bcs.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2a:	623a      	str	r2, [r7, #32]
 8003f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e00f      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d09f      	beq.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3740      	adds	r7, #64	; 0x40
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b0c0      	sub	sp, #256	; 0x100
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	ea40 0301 	orr.w	r3, r0, r1
 8003fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fdc:	f021 010c 	bic.w	r1, r1, #12
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	6999      	ldr	r1, [r3, #24]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	ea40 0301 	orr.w	r3, r0, r1
 800400a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b8f      	ldr	r3, [pc, #572]	; (8004250 <UART_SetConfig+0x2cc>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d005      	beq.n	8004024 <UART_SetConfig+0xa0>
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b8d      	ldr	r3, [pc, #564]	; (8004254 <UART_SetConfig+0x2d0>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d104      	bne.n	800402e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7ff fe4c 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 8004028:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800402c:	e003      	b.n	8004036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7ff fe33 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8004032:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	f040 810c 	bne.w	800425c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	1891      	adds	r1, r2, r2
 800405c:	65b9      	str	r1, [r7, #88]	; 0x58
 800405e:	415b      	adcs	r3, r3
 8004060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004066:	4621      	mov	r1, r4
 8004068:	eb12 0801 	adds.w	r8, r2, r1
 800406c:	4629      	mov	r1, r5
 800406e:	eb43 0901 	adc.w	r9, r3, r1
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004086:	4690      	mov	r8, r2
 8004088:	4699      	mov	r9, r3
 800408a:	4623      	mov	r3, r4
 800408c:	eb18 0303 	adds.w	r3, r8, r3
 8004090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004094:	462b      	mov	r3, r5
 8004096:	eb49 0303 	adc.w	r3, r9, r3
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040b2:	460b      	mov	r3, r1
 80040b4:	18db      	adds	r3, r3, r3
 80040b6:	653b      	str	r3, [r7, #80]	; 0x50
 80040b8:	4613      	mov	r3, r2
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	657b      	str	r3, [r7, #84]	; 0x54
 80040c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040c8:	f7fc fd9e 	bl	8000c08 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <UART_SetConfig+0x2d4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80040f4:	415b      	adcs	r3, r3
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040fc:	4641      	mov	r1, r8
 80040fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004102:	4649      	mov	r1, r9
 8004104:	eb43 0b01 	adc.w	fp, r3, r1
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411c:	4692      	mov	sl, r2
 800411e:	469b      	mov	fp, r3
 8004120:	4643      	mov	r3, r8
 8004122:	eb1a 0303 	adds.w	r3, sl, r3
 8004126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800412a:	464b      	mov	r3, r9
 800412c:	eb4b 0303 	adc.w	r3, fp, r3
 8004130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004140:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
 8004156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800415a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800415e:	f7fc fd53 	bl	8000c08 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4611      	mov	r1, r2
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2301 	umull	r2, r3, r3, r1
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2264      	movs	r2, #100	; 0x64
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	1acb      	subs	r3, r1, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800417e:	4b36      	ldr	r3, [pc, #216]	; (8004258 <UART_SetConfig+0x2d4>)
 8004180:	fba3 2302 	umull	r2, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800418c:	441c      	add	r4, r3
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004198:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800419c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a8:	415b      	adcs	r3, r3
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6339      	str	r1, [r7, #48]	; 0x30
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800421a:	f7fc fcf5 	bl	8000c08 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <UART_SetConfig+0x2d4>)
 8004224:	fba3 1302 	umull	r1, r3, r3, r2
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2164      	movs	r1, #100	; 0x64
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3332      	adds	r3, #50	; 0x32
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <UART_SetConfig+0x2d4>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0207 	and.w	r2, r3, #7
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4422      	add	r2, r4
 800424a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800424c:	e105      	b.n	800445a <UART_SetConfig+0x4d6>
 800424e:	bf00      	nop
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004266:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800426a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	1891      	adds	r1, r2, r2
 8004274:	6239      	str	r1, [r7, #32]
 8004276:	415b      	adcs	r3, r3
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427e:	4641      	mov	r1, r8
 8004280:	1854      	adds	r4, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb43 0501 	adc.w	r5, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042a4:	464b      	mov	r3, r9
 80042a6:	eb45 0303 	adc.w	r3, r5, r3
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ca:	4629      	mov	r1, r5
 80042cc:	008b      	lsls	r3, r1, #2
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d4:	4621      	mov	r1, r4
 80042d6:	008a      	lsls	r2, r1, #2
 80042d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042dc:	f7fc fc94 	bl	8000c08 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b60      	ldr	r3, [pc, #384]	; (8004468 <UART_SetConfig+0x4e4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	61b9      	str	r1, [r7, #24]
 8004308:	415b      	adcs	r3, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6139      	str	r1, [r7, #16]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	67bb      	str	r3, [r7, #120]	; 0x78
 800435a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004368:	4649      	mov	r1, r9
 800436a:	008b      	lsls	r3, r1, #2
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004372:	4641      	mov	r1, r8
 8004374:	008a      	lsls	r2, r1, #2
 8004376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800437a:	f7fc fc45 	bl	8000c08 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4b39      	ldr	r3, [pc, #228]	; (8004468 <UART_SetConfig+0x4e4>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a34      	ldr	r2, [pc, #208]	; (8004468 <UART_SetConfig+0x4e4>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a2:	441c      	add	r4, r3
 80043a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a8:	2200      	movs	r2, #0
 80043aa:	673b      	str	r3, [r7, #112]	; 0x70
 80043ac:	677a      	str	r2, [r7, #116]	; 0x74
 80043ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	415b      	adcs	r3, r3
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c2:	4641      	mov	r1, r8
 80043c4:	1851      	adds	r1, r2, r1
 80043c6:	6039      	str	r1, [r7, #0]
 80043c8:	4649      	mov	r1, r9
 80043ca:	414b      	adcs	r3, r1
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043da:	4659      	mov	r1, fp
 80043dc:	00cb      	lsls	r3, r1, #3
 80043de:	4651      	mov	r1, sl
 80043e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e4:	4651      	mov	r1, sl
 80043e6:	00ca      	lsls	r2, r1, #3
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	4603      	mov	r3, r0
 80043ee:	4642      	mov	r2, r8
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f4:	464b      	mov	r3, r9
 80043f6:	460a      	mov	r2, r1
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	663b      	str	r3, [r7, #96]	; 0x60
 8004408:	667a      	str	r2, [r7, #100]	; 0x64
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004416:	4649      	mov	r1, r9
 8004418:	008b      	lsls	r3, r1, #2
 800441a:	4641      	mov	r1, r8
 800441c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004420:	4641      	mov	r1, r8
 8004422:	008a      	lsls	r2, r1, #2
 8004424:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004428:	f7fc fbee 	bl	8000c08 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <UART_SetConfig+0x4e4>)
 8004432:	fba3 1302 	umull	r1, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2164      	movs	r1, #100	; 0x64
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	3332      	adds	r3, #50	; 0x32
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <UART_SetConfig+0x4e4>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 020f 	and.w	r2, r3, #15
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4422      	add	r2, r4
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004466:	bf00      	nop
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
		 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
		 handled in milliseconds basis.
	   - Set NVIC Group Priority to 4
	   - Low Level Initialization
	 */
	HAL_Init();
 8004470:	f7fd fbfa 	bl	8001c68 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8004474:	f000 f810 	bl	8004498 <SystemClock_Config>

	/* Initialize Inputs */
	inputsInit();
 8004478:	f7fd f86e 	bl	8001558 <inputsInit>

	/* Initialize Outputs */
	outputsInit();
 800447c:	f7fd f8a2 	bl	80015c4 <outputsInit>

	/* Initialize FSM */
	debounceFSM_init();
 8004480:	f7fc ff82 	bl	8001388 <debounceFSM_init>

	/* Initialize UART*/
	myUART_init();
 8004484:	f7fd f96e 	bl	8001764 <myUART_init>

	/* Initialize ADC */
	myADC_init();
 8004488:	f7fc fd40 	bl	8000f0c <myADC_init>

	/* Infinite loop */
	while (1)
	{
		mainFSM_update();
 800448c:	f7fc ffea 	bl	8001464 <mainFSM_update>
		HAL_Delay(10);
 8004490:	200a      	movs	r0, #10
 8004492:	f7fd fc55 	bl	8001d40 <HAL_Delay>
		mainFSM_update();
 8004496:	e7f9      	b.n	800448c <main+0x20>

08004498 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b094      	sub	sp, #80	; 0x50
 800449c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <SystemClock_Config+0xbc>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <SystemClock_Config+0xbc>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	; 0x40
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <SystemClock_Config+0xbc>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	4b26      	ldr	r3, [pc, #152]	; (8004558 <SystemClock_Config+0xc0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a25      	ldr	r2, [pc, #148]	; (8004558 <SystemClock_Config+0xc0>)
 80044c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <SystemClock_Config+0xc0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80044da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80044de:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e0:	2302      	movs	r3, #2
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80044ea:	2308      	movs	r3, #8
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80044ee:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044f4:	2302      	movs	r3, #2
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80044f8:	2307      	movs	r3, #7
 80044fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe ff59 	bl	80033b8 <HAL_RCC_OscConfig>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 800450c:	f000 f826 	bl	800455c <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004510:	f7fe ff02 	bl	8003318 <HAL_PWREx_EnableOverDrive>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800451a:	f000 f81f 	bl	800455c <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800451e:	230f      	movs	r3, #15
 8004520:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004522:	2302      	movs	r3, #2
 8004524:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004526:	2300      	movs	r3, #0
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800452a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8004530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004534:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800453a:	2105      	movs	r1, #5
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f9b3 	bl	80038a8 <HAL_RCC_ClockConfig>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8004548:	f000 f808 	bl	800455c <Error_Handler>
  }
}
 800454c:	bf00      	nop
 800454e:	3750      	adds	r7, #80	; 0x50
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	40007000 	.word	0x40007000

0800455c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8004560:	2001      	movs	r0, #1
 8004562:	f7fd f9ab 	bl	80018bc <BSP_LED_On>
  while (1)
 8004566:	e7fe      	b.n	8004566 <Error_Handler+0xa>

08004568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045a0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800456c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800456e:	e003      	b.n	8004578 <LoopCopyDataInit>

08004570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004576:	3104      	adds	r1, #4

08004578 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004578:	480b      	ldr	r0, [pc, #44]	; (80045a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800457a:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800457c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800457e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004580:	d3f6      	bcc.n	8004570 <CopyDataInit>
  ldr  r2, =_sbss
 8004582:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004584:	e002      	b.n	800458c <LoopFillZerobss>

08004586 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004586:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004588:	f842 3b04 	str.w	r3, [r2], #4

0800458c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800458e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004590:	d3f9      	bcc.n	8004586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004592:	f7fd fa33 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004596:	f000 f817 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800459a:	f7ff ff67 	bl	800446c <main>
  bx  lr    
 800459e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80045a0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80045a4:	0800778c 	.word	0x0800778c
  ldr  r0, =_sdata
 80045a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045ac:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80045b0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80045b4:	20000344 	.word	0x20000344

080045b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045b8:	e7fe      	b.n	80045b8 <ADC_IRQHandler>
	...

080045bc <__errno>:
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <__errno+0x8>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000020 	.word	0x20000020

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4d0d      	ldr	r5, [pc, #52]	; (8004600 <__libc_init_array+0x38>)
 80045cc:	4c0d      	ldr	r4, [pc, #52]	; (8004604 <__libc_init_array+0x3c>)
 80045ce:	1b64      	subs	r4, r4, r5
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	2600      	movs	r6, #0
 80045d4:	42a6      	cmp	r6, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	4d0b      	ldr	r5, [pc, #44]	; (8004608 <__libc_init_array+0x40>)
 80045da:	4c0c      	ldr	r4, [pc, #48]	; (800460c <__libc_init_array+0x44>)
 80045dc:	f002 fdc2 	bl	8007164 <_init>
 80045e0:	1b64      	subs	r4, r4, r5
 80045e2:	10a4      	asrs	r4, r4, #2
 80045e4:	2600      	movs	r6, #0
 80045e6:	42a6      	cmp	r6, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f0:	4798      	blx	r3
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fa:	4798      	blx	r3
 80045fc:	3601      	adds	r6, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	08007784 	.word	0x08007784
 8004604:	08007784 	.word	0x08007784
 8004608:	08007784 	.word	0x08007784
 800460c:	08007788 	.word	0x08007788

08004610 <memset>:
 8004610:	4402      	add	r2, r0
 8004612:	4603      	mov	r3, r0
 8004614:	4293      	cmp	r3, r2
 8004616:	d100      	bne.n	800461a <memset+0xa>
 8004618:	4770      	bx	lr
 800461a:	f803 1b01 	strb.w	r1, [r3], #1
 800461e:	e7f9      	b.n	8004614 <memset+0x4>

08004620 <__cvt>:
 8004620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	ec55 4b10 	vmov	r4, r5, d0
 8004628:	2d00      	cmp	r5, #0
 800462a:	460e      	mov	r6, r1
 800462c:	4619      	mov	r1, r3
 800462e:	462b      	mov	r3, r5
 8004630:	bfbb      	ittet	lt
 8004632:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004636:	461d      	movlt	r5, r3
 8004638:	2300      	movge	r3, #0
 800463a:	232d      	movlt	r3, #45	; 0x2d
 800463c:	700b      	strb	r3, [r1, #0]
 800463e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004640:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004644:	4691      	mov	r9, r2
 8004646:	f023 0820 	bic.w	r8, r3, #32
 800464a:	bfbc      	itt	lt
 800464c:	4622      	movlt	r2, r4
 800464e:	4614      	movlt	r4, r2
 8004650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004654:	d005      	beq.n	8004662 <__cvt+0x42>
 8004656:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800465a:	d100      	bne.n	800465e <__cvt+0x3e>
 800465c:	3601      	adds	r6, #1
 800465e:	2102      	movs	r1, #2
 8004660:	e000      	b.n	8004664 <__cvt+0x44>
 8004662:	2103      	movs	r1, #3
 8004664:	ab03      	add	r3, sp, #12
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	ab02      	add	r3, sp, #8
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	ec45 4b10 	vmov	d0, r4, r5
 8004670:	4653      	mov	r3, sl
 8004672:	4632      	mov	r2, r6
 8004674:	f000 fe18 	bl	80052a8 <_dtoa_r>
 8004678:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800467c:	4607      	mov	r7, r0
 800467e:	d102      	bne.n	8004686 <__cvt+0x66>
 8004680:	f019 0f01 	tst.w	r9, #1
 8004684:	d022      	beq.n	80046cc <__cvt+0xac>
 8004686:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800468a:	eb07 0906 	add.w	r9, r7, r6
 800468e:	d110      	bne.n	80046b2 <__cvt+0x92>
 8004690:	783b      	ldrb	r3, [r7, #0]
 8004692:	2b30      	cmp	r3, #48	; 0x30
 8004694:	d10a      	bne.n	80046ac <__cvt+0x8c>
 8004696:	2200      	movs	r2, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4620      	mov	r0, r4
 800469c:	4629      	mov	r1, r5
 800469e:	f7fc fa23 	bl	8000ae8 <__aeabi_dcmpeq>
 80046a2:	b918      	cbnz	r0, 80046ac <__cvt+0x8c>
 80046a4:	f1c6 0601 	rsb	r6, r6, #1
 80046a8:	f8ca 6000 	str.w	r6, [sl]
 80046ac:	f8da 3000 	ldr.w	r3, [sl]
 80046b0:	4499      	add	r9, r3
 80046b2:	2200      	movs	r2, #0
 80046b4:	2300      	movs	r3, #0
 80046b6:	4620      	mov	r0, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	f7fc fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 80046be:	b108      	cbz	r0, 80046c4 <__cvt+0xa4>
 80046c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80046c4:	2230      	movs	r2, #48	; 0x30
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	454b      	cmp	r3, r9
 80046ca:	d307      	bcc.n	80046dc <__cvt+0xbc>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d0:	1bdb      	subs	r3, r3, r7
 80046d2:	4638      	mov	r0, r7
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	b004      	add	sp, #16
 80046d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046dc:	1c59      	adds	r1, r3, #1
 80046de:	9103      	str	r1, [sp, #12]
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e7f0      	b.n	80046c6 <__cvt+0xa6>

080046e4 <__exponent>:
 80046e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e6:	4603      	mov	r3, r0
 80046e8:	2900      	cmp	r1, #0
 80046ea:	bfb8      	it	lt
 80046ec:	4249      	neglt	r1, r1
 80046ee:	f803 2b02 	strb.w	r2, [r3], #2
 80046f2:	bfb4      	ite	lt
 80046f4:	222d      	movlt	r2, #45	; 0x2d
 80046f6:	222b      	movge	r2, #43	; 0x2b
 80046f8:	2909      	cmp	r1, #9
 80046fa:	7042      	strb	r2, [r0, #1]
 80046fc:	dd2a      	ble.n	8004754 <__exponent+0x70>
 80046fe:	f10d 0407 	add.w	r4, sp, #7
 8004702:	46a4      	mov	ip, r4
 8004704:	270a      	movs	r7, #10
 8004706:	46a6      	mov	lr, r4
 8004708:	460a      	mov	r2, r1
 800470a:	fb91 f6f7 	sdiv	r6, r1, r7
 800470e:	fb07 1516 	mls	r5, r7, r6, r1
 8004712:	3530      	adds	r5, #48	; 0x30
 8004714:	2a63      	cmp	r2, #99	; 0x63
 8004716:	f104 34ff 	add.w	r4, r4, #4294967295
 800471a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800471e:	4631      	mov	r1, r6
 8004720:	dcf1      	bgt.n	8004706 <__exponent+0x22>
 8004722:	3130      	adds	r1, #48	; 0x30
 8004724:	f1ae 0502 	sub.w	r5, lr, #2
 8004728:	f804 1c01 	strb.w	r1, [r4, #-1]
 800472c:	1c44      	adds	r4, r0, #1
 800472e:	4629      	mov	r1, r5
 8004730:	4561      	cmp	r1, ip
 8004732:	d30a      	bcc.n	800474a <__exponent+0x66>
 8004734:	f10d 0209 	add.w	r2, sp, #9
 8004738:	eba2 020e 	sub.w	r2, r2, lr
 800473c:	4565      	cmp	r5, ip
 800473e:	bf88      	it	hi
 8004740:	2200      	movhi	r2, #0
 8004742:	4413      	add	r3, r2
 8004744:	1a18      	subs	r0, r3, r0
 8004746:	b003      	add	sp, #12
 8004748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800474a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800474e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004752:	e7ed      	b.n	8004730 <__exponent+0x4c>
 8004754:	2330      	movs	r3, #48	; 0x30
 8004756:	3130      	adds	r1, #48	; 0x30
 8004758:	7083      	strb	r3, [r0, #2]
 800475a:	70c1      	strb	r1, [r0, #3]
 800475c:	1d03      	adds	r3, r0, #4
 800475e:	e7f1      	b.n	8004744 <__exponent+0x60>

08004760 <_printf_float>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	ed2d 8b02 	vpush	{d8}
 8004768:	b08d      	sub	sp, #52	; 0x34
 800476a:	460c      	mov	r4, r1
 800476c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004770:	4616      	mov	r6, r2
 8004772:	461f      	mov	r7, r3
 8004774:	4605      	mov	r5, r0
 8004776:	f001 fd3d 	bl	80061f4 <_localeconv_r>
 800477a:	f8d0 a000 	ldr.w	sl, [r0]
 800477e:	4650      	mov	r0, sl
 8004780:	f7fb fd36 	bl	80001f0 <strlen>
 8004784:	2300      	movs	r3, #0
 8004786:	930a      	str	r3, [sp, #40]	; 0x28
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	f8d8 3000 	ldr.w	r3, [r8]
 8004790:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004794:	3307      	adds	r3, #7
 8004796:	f023 0307 	bic.w	r3, r3, #7
 800479a:	f103 0208 	add.w	r2, r3, #8
 800479e:	f8c8 2000 	str.w	r2, [r8]
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80047ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047b2:	9307      	str	r3, [sp, #28]
 80047b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80047b8:	ee08 0a10 	vmov	s16, r0
 80047bc:	4b9f      	ldr	r3, [pc, #636]	; (8004a3c <_printf_float+0x2dc>)
 80047be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047c2:	f04f 32ff 	mov.w	r2, #4294967295
 80047c6:	f7fc f9c1 	bl	8000b4c <__aeabi_dcmpun>
 80047ca:	bb88      	cbnz	r0, 8004830 <_printf_float+0xd0>
 80047cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047d0:	4b9a      	ldr	r3, [pc, #616]	; (8004a3c <_printf_float+0x2dc>)
 80047d2:	f04f 32ff 	mov.w	r2, #4294967295
 80047d6:	f7fc f99b 	bl	8000b10 <__aeabi_dcmple>
 80047da:	bb48      	cbnz	r0, 8004830 <_printf_float+0xd0>
 80047dc:	2200      	movs	r2, #0
 80047de:	2300      	movs	r3, #0
 80047e0:	4640      	mov	r0, r8
 80047e2:	4649      	mov	r1, r9
 80047e4:	f7fc f98a 	bl	8000afc <__aeabi_dcmplt>
 80047e8:	b110      	cbz	r0, 80047f0 <_printf_float+0x90>
 80047ea:	232d      	movs	r3, #45	; 0x2d
 80047ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f0:	4b93      	ldr	r3, [pc, #588]	; (8004a40 <_printf_float+0x2e0>)
 80047f2:	4894      	ldr	r0, [pc, #592]	; (8004a44 <_printf_float+0x2e4>)
 80047f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047f8:	bf94      	ite	ls
 80047fa:	4698      	movls	r8, r3
 80047fc:	4680      	movhi	r8, r0
 80047fe:	2303      	movs	r3, #3
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	9b05      	ldr	r3, [sp, #20]
 8004804:	f023 0204 	bic.w	r2, r3, #4
 8004808:	6022      	str	r2, [r4, #0]
 800480a:	f04f 0900 	mov.w	r9, #0
 800480e:	9700      	str	r7, [sp, #0]
 8004810:	4633      	mov	r3, r6
 8004812:	aa0b      	add	r2, sp, #44	; 0x2c
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f9d8 	bl	8004bcc <_printf_common>
 800481c:	3001      	adds	r0, #1
 800481e:	f040 8090 	bne.w	8004942 <_printf_float+0x1e2>
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	b00d      	add	sp, #52	; 0x34
 8004828:	ecbd 8b02 	vpop	{d8}
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004830:	4642      	mov	r2, r8
 8004832:	464b      	mov	r3, r9
 8004834:	4640      	mov	r0, r8
 8004836:	4649      	mov	r1, r9
 8004838:	f7fc f988 	bl	8000b4c <__aeabi_dcmpun>
 800483c:	b140      	cbz	r0, 8004850 <_printf_float+0xf0>
 800483e:	464b      	mov	r3, r9
 8004840:	2b00      	cmp	r3, #0
 8004842:	bfbc      	itt	lt
 8004844:	232d      	movlt	r3, #45	; 0x2d
 8004846:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800484a:	487f      	ldr	r0, [pc, #508]	; (8004a48 <_printf_float+0x2e8>)
 800484c:	4b7f      	ldr	r3, [pc, #508]	; (8004a4c <_printf_float+0x2ec>)
 800484e:	e7d1      	b.n	80047f4 <_printf_float+0x94>
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004856:	9206      	str	r2, [sp, #24]
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	d13f      	bne.n	80048dc <_printf_float+0x17c>
 800485c:	2306      	movs	r3, #6
 800485e:	6063      	str	r3, [r4, #4]
 8004860:	9b05      	ldr	r3, [sp, #20]
 8004862:	6861      	ldr	r1, [r4, #4]
 8004864:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004868:	2300      	movs	r3, #0
 800486a:	9303      	str	r3, [sp, #12]
 800486c:	ab0a      	add	r3, sp, #40	; 0x28
 800486e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004872:	ab09      	add	r3, sp, #36	; 0x24
 8004874:	ec49 8b10 	vmov	d0, r8, r9
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004880:	4628      	mov	r0, r5
 8004882:	f7ff fecd 	bl	8004620 <__cvt>
 8004886:	9b06      	ldr	r3, [sp, #24]
 8004888:	9909      	ldr	r1, [sp, #36]	; 0x24
 800488a:	2b47      	cmp	r3, #71	; 0x47
 800488c:	4680      	mov	r8, r0
 800488e:	d108      	bne.n	80048a2 <_printf_float+0x142>
 8004890:	1cc8      	adds	r0, r1, #3
 8004892:	db02      	blt.n	800489a <_printf_float+0x13a>
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	4299      	cmp	r1, r3
 8004898:	dd41      	ble.n	800491e <_printf_float+0x1be>
 800489a:	f1ab 0b02 	sub.w	fp, fp, #2
 800489e:	fa5f fb8b 	uxtb.w	fp, fp
 80048a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048a6:	d820      	bhi.n	80048ea <_printf_float+0x18a>
 80048a8:	3901      	subs	r1, #1
 80048aa:	465a      	mov	r2, fp
 80048ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048b0:	9109      	str	r1, [sp, #36]	; 0x24
 80048b2:	f7ff ff17 	bl	80046e4 <__exponent>
 80048b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048b8:	1813      	adds	r3, r2, r0
 80048ba:	2a01      	cmp	r2, #1
 80048bc:	4681      	mov	r9, r0
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	dc02      	bgt.n	80048c8 <_printf_float+0x168>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	07d2      	lsls	r2, r2, #31
 80048c6:	d501      	bpl.n	80048cc <_printf_float+0x16c>
 80048c8:	3301      	adds	r3, #1
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d09c      	beq.n	800480e <_printf_float+0xae>
 80048d4:	232d      	movs	r3, #45	; 0x2d
 80048d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048da:	e798      	b.n	800480e <_printf_float+0xae>
 80048dc:	9a06      	ldr	r2, [sp, #24]
 80048de:	2a47      	cmp	r2, #71	; 0x47
 80048e0:	d1be      	bne.n	8004860 <_printf_float+0x100>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1bc      	bne.n	8004860 <_printf_float+0x100>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e7b9      	b.n	800485e <_printf_float+0xfe>
 80048ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80048ee:	d118      	bne.n	8004922 <_printf_float+0x1c2>
 80048f0:	2900      	cmp	r1, #0
 80048f2:	6863      	ldr	r3, [r4, #4]
 80048f4:	dd0b      	ble.n	800490e <_printf_float+0x1ae>
 80048f6:	6121      	str	r1, [r4, #16]
 80048f8:	b913      	cbnz	r3, 8004900 <_printf_float+0x1a0>
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	07d0      	lsls	r0, r2, #31
 80048fe:	d502      	bpl.n	8004906 <_printf_float+0x1a6>
 8004900:	3301      	adds	r3, #1
 8004902:	440b      	add	r3, r1
 8004904:	6123      	str	r3, [r4, #16]
 8004906:	65a1      	str	r1, [r4, #88]	; 0x58
 8004908:	f04f 0900 	mov.w	r9, #0
 800490c:	e7de      	b.n	80048cc <_printf_float+0x16c>
 800490e:	b913      	cbnz	r3, 8004916 <_printf_float+0x1b6>
 8004910:	6822      	ldr	r2, [r4, #0]
 8004912:	07d2      	lsls	r2, r2, #31
 8004914:	d501      	bpl.n	800491a <_printf_float+0x1ba>
 8004916:	3302      	adds	r3, #2
 8004918:	e7f4      	b.n	8004904 <_printf_float+0x1a4>
 800491a:	2301      	movs	r3, #1
 800491c:	e7f2      	b.n	8004904 <_printf_float+0x1a4>
 800491e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004924:	4299      	cmp	r1, r3
 8004926:	db05      	blt.n	8004934 <_printf_float+0x1d4>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	6121      	str	r1, [r4, #16]
 800492c:	07d8      	lsls	r0, r3, #31
 800492e:	d5ea      	bpl.n	8004906 <_printf_float+0x1a6>
 8004930:	1c4b      	adds	r3, r1, #1
 8004932:	e7e7      	b.n	8004904 <_printf_float+0x1a4>
 8004934:	2900      	cmp	r1, #0
 8004936:	bfd4      	ite	le
 8004938:	f1c1 0202 	rsble	r2, r1, #2
 800493c:	2201      	movgt	r2, #1
 800493e:	4413      	add	r3, r2
 8004940:	e7e0      	b.n	8004904 <_printf_float+0x1a4>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	055a      	lsls	r2, r3, #21
 8004946:	d407      	bmi.n	8004958 <_printf_float+0x1f8>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	4642      	mov	r2, r8
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	d12c      	bne.n	80049b0 <_printf_float+0x250>
 8004956:	e764      	b.n	8004822 <_printf_float+0xc2>
 8004958:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800495c:	f240 80e0 	bls.w	8004b20 <_printf_float+0x3c0>
 8004960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004964:	2200      	movs	r2, #0
 8004966:	2300      	movs	r3, #0
 8004968:	f7fc f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800496c:	2800      	cmp	r0, #0
 800496e:	d034      	beq.n	80049da <_printf_float+0x27a>
 8004970:	4a37      	ldr	r2, [pc, #220]	; (8004a50 <_printf_float+0x2f0>)
 8004972:	2301      	movs	r3, #1
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f af51 	beq.w	8004822 <_printf_float+0xc2>
 8004980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004984:	429a      	cmp	r2, r3
 8004986:	db02      	blt.n	800498e <_printf_float+0x22e>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	07d8      	lsls	r0, r3, #31
 800498c:	d510      	bpl.n	80049b0 <_printf_float+0x250>
 800498e:	ee18 3a10 	vmov	r3, s16
 8004992:	4652      	mov	r2, sl
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	f43f af41 	beq.w	8004822 <_printf_float+0xc2>
 80049a0:	f04f 0800 	mov.w	r8, #0
 80049a4:	f104 091a 	add.w	r9, r4, #26
 80049a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049aa:	3b01      	subs	r3, #1
 80049ac:	4543      	cmp	r3, r8
 80049ae:	dc09      	bgt.n	80049c4 <_printf_float+0x264>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	079b      	lsls	r3, r3, #30
 80049b4:	f100 8105 	bmi.w	8004bc2 <_printf_float+0x462>
 80049b8:	68e0      	ldr	r0, [r4, #12]
 80049ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049bc:	4298      	cmp	r0, r3
 80049be:	bfb8      	it	lt
 80049c0:	4618      	movlt	r0, r3
 80049c2:	e730      	b.n	8004826 <_printf_float+0xc6>
 80049c4:	2301      	movs	r3, #1
 80049c6:	464a      	mov	r2, r9
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f af27 	beq.w	8004822 <_printf_float+0xc2>
 80049d4:	f108 0801 	add.w	r8, r8, #1
 80049d8:	e7e6      	b.n	80049a8 <_printf_float+0x248>
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dc39      	bgt.n	8004a54 <_printf_float+0x2f4>
 80049e0:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <_printf_float+0x2f0>)
 80049e2:	2301      	movs	r3, #1
 80049e4:	4631      	mov	r1, r6
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b8      	blx	r7
 80049ea:	3001      	adds	r0, #1
 80049ec:	f43f af19 	beq.w	8004822 <_printf_float+0xc2>
 80049f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d102      	bne.n	80049fe <_printf_float+0x29e>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	07d9      	lsls	r1, r3, #31
 80049fc:	d5d8      	bpl.n	80049b0 <_printf_float+0x250>
 80049fe:	ee18 3a10 	vmov	r3, s16
 8004a02:	4652      	mov	r2, sl
 8004a04:	4631      	mov	r1, r6
 8004a06:	4628      	mov	r0, r5
 8004a08:	47b8      	blx	r7
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f43f af09 	beq.w	8004822 <_printf_float+0xc2>
 8004a10:	f04f 0900 	mov.w	r9, #0
 8004a14:	f104 0a1a 	add.w	sl, r4, #26
 8004a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a1a:	425b      	negs	r3, r3
 8004a1c:	454b      	cmp	r3, r9
 8004a1e:	dc01      	bgt.n	8004a24 <_printf_float+0x2c4>
 8004a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a22:	e792      	b.n	800494a <_printf_float+0x1ea>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4652      	mov	r2, sl
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f43f aef7 	beq.w	8004822 <_printf_float+0xc2>
 8004a34:	f109 0901 	add.w	r9, r9, #1
 8004a38:	e7ee      	b.n	8004a18 <_printf_float+0x2b8>
 8004a3a:	bf00      	nop
 8004a3c:	7fefffff 	.word	0x7fefffff
 8004a40:	080073a4 	.word	0x080073a4
 8004a44:	080073a8 	.word	0x080073a8
 8004a48:	080073b0 	.word	0x080073b0
 8004a4c:	080073ac 	.word	0x080073ac
 8004a50:	080073b4 	.word	0x080073b4
 8004a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	bfa8      	it	ge
 8004a5c:	461a      	movge	r2, r3
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	4691      	mov	r9, r2
 8004a62:	dc37      	bgt.n	8004ad4 <_printf_float+0x374>
 8004a64:	f04f 0b00 	mov.w	fp, #0
 8004a68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a6c:	f104 021a 	add.w	r2, r4, #26
 8004a70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	eba3 0309 	sub.w	r3, r3, r9
 8004a78:	455b      	cmp	r3, fp
 8004a7a:	dc33      	bgt.n	8004ae4 <_printf_float+0x384>
 8004a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a80:	429a      	cmp	r2, r3
 8004a82:	db3b      	blt.n	8004afc <_printf_float+0x39c>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	07da      	lsls	r2, r3, #31
 8004a88:	d438      	bmi.n	8004afc <_printf_float+0x39c>
 8004a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a8c:	9a05      	ldr	r2, [sp, #20]
 8004a8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a90:	1a9a      	subs	r2, r3, r2
 8004a92:	eba3 0901 	sub.w	r9, r3, r1
 8004a96:	4591      	cmp	r9, r2
 8004a98:	bfa8      	it	ge
 8004a9a:	4691      	movge	r9, r2
 8004a9c:	f1b9 0f00 	cmp.w	r9, #0
 8004aa0:	dc35      	bgt.n	8004b0e <_printf_float+0x3ae>
 8004aa2:	f04f 0800 	mov.w	r8, #0
 8004aa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004aaa:	f104 0a1a 	add.w	sl, r4, #26
 8004aae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	eba3 0309 	sub.w	r3, r3, r9
 8004ab8:	4543      	cmp	r3, r8
 8004aba:	f77f af79 	ble.w	80049b0 <_printf_float+0x250>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f43f aeaa 	beq.w	8004822 <_printf_float+0xc2>
 8004ace:	f108 0801 	add.w	r8, r8, #1
 8004ad2:	e7ec      	b.n	8004aae <_printf_float+0x34e>
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4642      	mov	r2, r8
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d1c0      	bne.n	8004a64 <_printf_float+0x304>
 8004ae2:	e69e      	b.n	8004822 <_printf_float+0xc2>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	9205      	str	r2, [sp, #20]
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f ae97 	beq.w	8004822 <_printf_float+0xc2>
 8004af4:	9a05      	ldr	r2, [sp, #20]
 8004af6:	f10b 0b01 	add.w	fp, fp, #1
 8004afa:	e7b9      	b.n	8004a70 <_printf_float+0x310>
 8004afc:	ee18 3a10 	vmov	r3, s16
 8004b00:	4652      	mov	r2, sl
 8004b02:	4631      	mov	r1, r6
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b8      	blx	r7
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d1be      	bne.n	8004a8a <_printf_float+0x32a>
 8004b0c:	e689      	b.n	8004822 <_printf_float+0xc2>
 8004b0e:	9a05      	ldr	r2, [sp, #20]
 8004b10:	464b      	mov	r3, r9
 8004b12:	4442      	add	r2, r8
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d1c1      	bne.n	8004aa2 <_printf_float+0x342>
 8004b1e:	e680      	b.n	8004822 <_printf_float+0xc2>
 8004b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b22:	2a01      	cmp	r2, #1
 8004b24:	dc01      	bgt.n	8004b2a <_printf_float+0x3ca>
 8004b26:	07db      	lsls	r3, r3, #31
 8004b28:	d538      	bpl.n	8004b9c <_printf_float+0x43c>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b8      	blx	r7
 8004b34:	3001      	adds	r0, #1
 8004b36:	f43f ae74 	beq.w	8004822 <_printf_float+0xc2>
 8004b3a:	ee18 3a10 	vmov	r3, s16
 8004b3e:	4652      	mov	r2, sl
 8004b40:	4631      	mov	r1, r6
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f ae6b 	beq.w	8004822 <_printf_float+0xc2>
 8004b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b50:	2200      	movs	r2, #0
 8004b52:	2300      	movs	r3, #0
 8004b54:	f7fb ffc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b58:	b9d8      	cbnz	r0, 8004b92 <_printf_float+0x432>
 8004b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b5c:	f108 0201 	add.w	r2, r8, #1
 8004b60:	3b01      	subs	r3, #1
 8004b62:	4631      	mov	r1, r6
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b8      	blx	r7
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d10e      	bne.n	8004b8a <_printf_float+0x42a>
 8004b6c:	e659      	b.n	8004822 <_printf_float+0xc2>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4652      	mov	r2, sl
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	47b8      	blx	r7
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f43f ae52 	beq.w	8004822 <_printf_float+0xc2>
 8004b7e:	f108 0801 	add.w	r8, r8, #1
 8004b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	4543      	cmp	r3, r8
 8004b88:	dcf1      	bgt.n	8004b6e <_printf_float+0x40e>
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b90:	e6dc      	b.n	800494c <_printf_float+0x1ec>
 8004b92:	f04f 0800 	mov.w	r8, #0
 8004b96:	f104 0a1a 	add.w	sl, r4, #26
 8004b9a:	e7f2      	b.n	8004b82 <_printf_float+0x422>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	e7df      	b.n	8004b62 <_printf_float+0x402>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	464a      	mov	r2, r9
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	f43f ae38 	beq.w	8004822 <_printf_float+0xc2>
 8004bb2:	f108 0801 	add.w	r8, r8, #1
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bba:	1a5b      	subs	r3, r3, r1
 8004bbc:	4543      	cmp	r3, r8
 8004bbe:	dcf0      	bgt.n	8004ba2 <_printf_float+0x442>
 8004bc0:	e6fa      	b.n	80049b8 <_printf_float+0x258>
 8004bc2:	f04f 0800 	mov.w	r8, #0
 8004bc6:	f104 0919 	add.w	r9, r4, #25
 8004bca:	e7f4      	b.n	8004bb6 <_printf_float+0x456>

08004bcc <_printf_common>:
 8004bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	4699      	mov	r9, r3
 8004bd4:	688a      	ldr	r2, [r1, #8]
 8004bd6:	690b      	ldr	r3, [r1, #16]
 8004bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	bfb8      	it	lt
 8004be0:	4613      	movlt	r3, r2
 8004be2:	6033      	str	r3, [r6, #0]
 8004be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004be8:	4607      	mov	r7, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	b10a      	cbz	r2, 8004bf2 <_printf_common+0x26>
 8004bee:	3301      	adds	r3, #1
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	0699      	lsls	r1, r3, #26
 8004bf6:	bf42      	ittt	mi
 8004bf8:	6833      	ldrmi	r3, [r6, #0]
 8004bfa:	3302      	addmi	r3, #2
 8004bfc:	6033      	strmi	r3, [r6, #0]
 8004bfe:	6825      	ldr	r5, [r4, #0]
 8004c00:	f015 0506 	ands.w	r5, r5, #6
 8004c04:	d106      	bne.n	8004c14 <_printf_common+0x48>
 8004c06:	f104 0a19 	add.w	sl, r4, #25
 8004c0a:	68e3      	ldr	r3, [r4, #12]
 8004c0c:	6832      	ldr	r2, [r6, #0]
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	42ab      	cmp	r3, r5
 8004c12:	dc26      	bgt.n	8004c62 <_printf_common+0x96>
 8004c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c18:	1e13      	subs	r3, r2, #0
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	bf18      	it	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	0692      	lsls	r2, r2, #26
 8004c22:	d42b      	bmi.n	8004c7c <_printf_common+0xb0>
 8004c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c28:	4649      	mov	r1, r9
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	47c0      	blx	r8
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d01e      	beq.n	8004c70 <_printf_common+0xa4>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	68e5      	ldr	r5, [r4, #12]
 8004c36:	6832      	ldr	r2, [r6, #0]
 8004c38:	f003 0306 	and.w	r3, r3, #6
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	bf08      	it	eq
 8004c40:	1aad      	subeq	r5, r5, r2
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	6922      	ldr	r2, [r4, #16]
 8004c46:	bf0c      	ite	eq
 8004c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c4c:	2500      	movne	r5, #0
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	bfc4      	itt	gt
 8004c52:	1a9b      	subgt	r3, r3, r2
 8004c54:	18ed      	addgt	r5, r5, r3
 8004c56:	2600      	movs	r6, #0
 8004c58:	341a      	adds	r4, #26
 8004c5a:	42b5      	cmp	r5, r6
 8004c5c:	d11a      	bne.n	8004c94 <_printf_common+0xc8>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e008      	b.n	8004c74 <_printf_common+0xa8>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4652      	mov	r2, sl
 8004c66:	4649      	mov	r1, r9
 8004c68:	4638      	mov	r0, r7
 8004c6a:	47c0      	blx	r8
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d103      	bne.n	8004c78 <_printf_common+0xac>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c78:	3501      	adds	r5, #1
 8004c7a:	e7c6      	b.n	8004c0a <_printf_common+0x3e>
 8004c7c:	18e1      	adds	r1, r4, r3
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	2030      	movs	r0, #48	; 0x30
 8004c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c86:	4422      	add	r2, r4
 8004c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c90:	3302      	adds	r3, #2
 8004c92:	e7c7      	b.n	8004c24 <_printf_common+0x58>
 8004c94:	2301      	movs	r3, #1
 8004c96:	4622      	mov	r2, r4
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	47c0      	blx	r8
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d0e6      	beq.n	8004c70 <_printf_common+0xa4>
 8004ca2:	3601      	adds	r6, #1
 8004ca4:	e7d9      	b.n	8004c5a <_printf_common+0x8e>
	...

08004ca8 <_printf_i>:
 8004ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cac:	7e0f      	ldrb	r7, [r1, #24]
 8004cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cb0:	2f78      	cmp	r7, #120	; 0x78
 8004cb2:	4691      	mov	r9, r2
 8004cb4:	4680      	mov	r8, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	469a      	mov	sl, r3
 8004cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cbe:	d807      	bhi.n	8004cd0 <_printf_i+0x28>
 8004cc0:	2f62      	cmp	r7, #98	; 0x62
 8004cc2:	d80a      	bhi.n	8004cda <_printf_i+0x32>
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	f000 80d8 	beq.w	8004e7a <_printf_i+0x1d2>
 8004cca:	2f58      	cmp	r7, #88	; 0x58
 8004ccc:	f000 80a3 	beq.w	8004e16 <_printf_i+0x16e>
 8004cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cd8:	e03a      	b.n	8004d50 <_printf_i+0xa8>
 8004cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cde:	2b15      	cmp	r3, #21
 8004ce0:	d8f6      	bhi.n	8004cd0 <_printf_i+0x28>
 8004ce2:	a101      	add	r1, pc, #4	; (adr r1, 8004ce8 <_printf_i+0x40>)
 8004ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ce8:	08004d41 	.word	0x08004d41
 8004cec:	08004d55 	.word	0x08004d55
 8004cf0:	08004cd1 	.word	0x08004cd1
 8004cf4:	08004cd1 	.word	0x08004cd1
 8004cf8:	08004cd1 	.word	0x08004cd1
 8004cfc:	08004cd1 	.word	0x08004cd1
 8004d00:	08004d55 	.word	0x08004d55
 8004d04:	08004cd1 	.word	0x08004cd1
 8004d08:	08004cd1 	.word	0x08004cd1
 8004d0c:	08004cd1 	.word	0x08004cd1
 8004d10:	08004cd1 	.word	0x08004cd1
 8004d14:	08004e61 	.word	0x08004e61
 8004d18:	08004d85 	.word	0x08004d85
 8004d1c:	08004e43 	.word	0x08004e43
 8004d20:	08004cd1 	.word	0x08004cd1
 8004d24:	08004cd1 	.word	0x08004cd1
 8004d28:	08004e83 	.word	0x08004e83
 8004d2c:	08004cd1 	.word	0x08004cd1
 8004d30:	08004d85 	.word	0x08004d85
 8004d34:	08004cd1 	.word	0x08004cd1
 8004d38:	08004cd1 	.word	0x08004cd1
 8004d3c:	08004e4b 	.word	0x08004e4b
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	602a      	str	r2, [r5, #0]
 8004d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0a3      	b.n	8004e9c <_printf_i+0x1f4>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	6829      	ldr	r1, [r5, #0]
 8004d58:	0606      	lsls	r6, r0, #24
 8004d5a:	f101 0304 	add.w	r3, r1, #4
 8004d5e:	d50a      	bpl.n	8004d76 <_printf_i+0xce>
 8004d60:	680e      	ldr	r6, [r1, #0]
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	2e00      	cmp	r6, #0
 8004d66:	da03      	bge.n	8004d70 <_printf_i+0xc8>
 8004d68:	232d      	movs	r3, #45	; 0x2d
 8004d6a:	4276      	negs	r6, r6
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d70:	485e      	ldr	r0, [pc, #376]	; (8004eec <_printf_i+0x244>)
 8004d72:	230a      	movs	r3, #10
 8004d74:	e019      	b.n	8004daa <_printf_i+0x102>
 8004d76:	680e      	ldr	r6, [r1, #0]
 8004d78:	602b      	str	r3, [r5, #0]
 8004d7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d7e:	bf18      	it	ne
 8004d80:	b236      	sxthne	r6, r6
 8004d82:	e7ef      	b.n	8004d64 <_printf_i+0xbc>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	6029      	str	r1, [r5, #0]
 8004d8c:	0601      	lsls	r1, r0, #24
 8004d8e:	d501      	bpl.n	8004d94 <_printf_i+0xec>
 8004d90:	681e      	ldr	r6, [r3, #0]
 8004d92:	e002      	b.n	8004d9a <_printf_i+0xf2>
 8004d94:	0646      	lsls	r6, r0, #25
 8004d96:	d5fb      	bpl.n	8004d90 <_printf_i+0xe8>
 8004d98:	881e      	ldrh	r6, [r3, #0]
 8004d9a:	4854      	ldr	r0, [pc, #336]	; (8004eec <_printf_i+0x244>)
 8004d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d9e:	bf0c      	ite	eq
 8004da0:	2308      	moveq	r3, #8
 8004da2:	230a      	movne	r3, #10
 8004da4:	2100      	movs	r1, #0
 8004da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004daa:	6865      	ldr	r5, [r4, #4]
 8004dac:	60a5      	str	r5, [r4, #8]
 8004dae:	2d00      	cmp	r5, #0
 8004db0:	bfa2      	ittt	ge
 8004db2:	6821      	ldrge	r1, [r4, #0]
 8004db4:	f021 0104 	bicge.w	r1, r1, #4
 8004db8:	6021      	strge	r1, [r4, #0]
 8004dba:	b90e      	cbnz	r6, 8004dc0 <_printf_i+0x118>
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	d04d      	beq.n	8004e5c <_printf_i+0x1b4>
 8004dc0:	4615      	mov	r5, r2
 8004dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8004dca:	5dc7      	ldrb	r7, [r0, r7]
 8004dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dd0:	4637      	mov	r7, r6
 8004dd2:	42bb      	cmp	r3, r7
 8004dd4:	460e      	mov	r6, r1
 8004dd6:	d9f4      	bls.n	8004dc2 <_printf_i+0x11a>
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d10b      	bne.n	8004df4 <_printf_i+0x14c>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	07de      	lsls	r6, r3, #31
 8004de0:	d508      	bpl.n	8004df4 <_printf_i+0x14c>
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	6861      	ldr	r1, [r4, #4]
 8004de6:	4299      	cmp	r1, r3
 8004de8:	bfde      	ittt	le
 8004dea:	2330      	movle	r3, #48	; 0x30
 8004dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df4:	1b52      	subs	r2, r2, r5
 8004df6:	6122      	str	r2, [r4, #16]
 8004df8:	f8cd a000 	str.w	sl, [sp]
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	aa03      	add	r2, sp, #12
 8004e00:	4621      	mov	r1, r4
 8004e02:	4640      	mov	r0, r8
 8004e04:	f7ff fee2 	bl	8004bcc <_printf_common>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d14c      	bne.n	8004ea6 <_printf_i+0x1fe>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	b004      	add	sp, #16
 8004e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e16:	4835      	ldr	r0, [pc, #212]	; (8004eec <_printf_i+0x244>)
 8004e18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e1c:	6829      	ldr	r1, [r5, #0]
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e24:	6029      	str	r1, [r5, #0]
 8004e26:	061d      	lsls	r5, r3, #24
 8004e28:	d514      	bpl.n	8004e54 <_printf_i+0x1ac>
 8004e2a:	07df      	lsls	r7, r3, #31
 8004e2c:	bf44      	itt	mi
 8004e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e32:	6023      	strmi	r3, [r4, #0]
 8004e34:	b91e      	cbnz	r6, 8004e3e <_printf_i+0x196>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	f023 0320 	bic.w	r3, r3, #32
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	2310      	movs	r3, #16
 8004e40:	e7b0      	b.n	8004da4 <_printf_i+0xfc>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	f043 0320 	orr.w	r3, r3, #32
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	2378      	movs	r3, #120	; 0x78
 8004e4c:	4828      	ldr	r0, [pc, #160]	; (8004ef0 <_printf_i+0x248>)
 8004e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e52:	e7e3      	b.n	8004e1c <_printf_i+0x174>
 8004e54:	0659      	lsls	r1, r3, #25
 8004e56:	bf48      	it	mi
 8004e58:	b2b6      	uxthmi	r6, r6
 8004e5a:	e7e6      	b.n	8004e2a <_printf_i+0x182>
 8004e5c:	4615      	mov	r5, r2
 8004e5e:	e7bb      	b.n	8004dd8 <_printf_i+0x130>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	6826      	ldr	r6, [r4, #0]
 8004e64:	6961      	ldr	r1, [r4, #20]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	6028      	str	r0, [r5, #0]
 8004e6a:	0635      	lsls	r5, r6, #24
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	d501      	bpl.n	8004e74 <_printf_i+0x1cc>
 8004e70:	6019      	str	r1, [r3, #0]
 8004e72:	e002      	b.n	8004e7a <_printf_i+0x1d2>
 8004e74:	0670      	lsls	r0, r6, #25
 8004e76:	d5fb      	bpl.n	8004e70 <_printf_i+0x1c8>
 8004e78:	8019      	strh	r1, [r3, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6123      	str	r3, [r4, #16]
 8004e7e:	4615      	mov	r5, r2
 8004e80:	e7ba      	b.n	8004df8 <_printf_i+0x150>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	1d1a      	adds	r2, r3, #4
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	6862      	ldr	r2, [r4, #4]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f7fb f9b6 	bl	8000200 <memchr>
 8004e94:	b108      	cbz	r0, 8004e9a <_printf_i+0x1f2>
 8004e96:	1b40      	subs	r0, r0, r5
 8004e98:	6060      	str	r0, [r4, #4]
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea4:	e7a8      	b.n	8004df8 <_printf_i+0x150>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	47d0      	blx	sl
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d0ab      	beq.n	8004e0c <_printf_i+0x164>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	079b      	lsls	r3, r3, #30
 8004eb8:	d413      	bmi.n	8004ee2 <_printf_i+0x23a>
 8004eba:	68e0      	ldr	r0, [r4, #12]
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	4298      	cmp	r0, r3
 8004ec0:	bfb8      	it	lt
 8004ec2:	4618      	movlt	r0, r3
 8004ec4:	e7a4      	b.n	8004e10 <_printf_i+0x168>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4632      	mov	r2, r6
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	47d0      	blx	sl
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d09b      	beq.n	8004e0c <_printf_i+0x164>
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	9903      	ldr	r1, [sp, #12]
 8004eda:	1a5b      	subs	r3, r3, r1
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dcf2      	bgt.n	8004ec6 <_printf_i+0x21e>
 8004ee0:	e7eb      	b.n	8004eba <_printf_i+0x212>
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	f104 0619 	add.w	r6, r4, #25
 8004ee8:	e7f5      	b.n	8004ed6 <_printf_i+0x22e>
 8004eea:	bf00      	nop
 8004eec:	080073b6 	.word	0x080073b6
 8004ef0:	080073c7 	.word	0x080073c7

08004ef4 <iprintf>:
 8004ef4:	b40f      	push	{r0, r1, r2, r3}
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <iprintf+0x2c>)
 8004ef8:	b513      	push	{r0, r1, r4, lr}
 8004efa:	681c      	ldr	r4, [r3, #0]
 8004efc:	b124      	cbz	r4, 8004f08 <iprintf+0x14>
 8004efe:	69a3      	ldr	r3, [r4, #24]
 8004f00:	b913      	cbnz	r3, 8004f08 <iprintf+0x14>
 8004f02:	4620      	mov	r0, r4
 8004f04:	f001 f8d8 	bl	80060b8 <__sinit>
 8004f08:	ab05      	add	r3, sp, #20
 8004f0a:	9a04      	ldr	r2, [sp, #16]
 8004f0c:	68a1      	ldr	r1, [r4, #8]
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	4620      	mov	r0, r4
 8004f12:	f001 fe95 	bl	8006c40 <_vfiprintf_r>
 8004f16:	b002      	add	sp, #8
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	b004      	add	sp, #16
 8004f1e:	4770      	bx	lr
 8004f20:	20000020 	.word	0x20000020

08004f24 <_puts_r>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	460e      	mov	r6, r1
 8004f28:	4605      	mov	r5, r0
 8004f2a:	b118      	cbz	r0, 8004f34 <_puts_r+0x10>
 8004f2c:	6983      	ldr	r3, [r0, #24]
 8004f2e:	b90b      	cbnz	r3, 8004f34 <_puts_r+0x10>
 8004f30:	f001 f8c2 	bl	80060b8 <__sinit>
 8004f34:	69ab      	ldr	r3, [r5, #24]
 8004f36:	68ac      	ldr	r4, [r5, #8]
 8004f38:	b913      	cbnz	r3, 8004f40 <_puts_r+0x1c>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f001 f8bc 	bl	80060b8 <__sinit>
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <_puts_r+0xd0>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d120      	bne.n	8004f88 <_puts_r+0x64>
 8004f46:	686c      	ldr	r4, [r5, #4]
 8004f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f4a:	07db      	lsls	r3, r3, #31
 8004f4c:	d405      	bmi.n	8004f5a <_puts_r+0x36>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	0598      	lsls	r0, r3, #22
 8004f52:	d402      	bmi.n	8004f5a <_puts_r+0x36>
 8004f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f56:	f001 f952 	bl	80061fe <__retarget_lock_acquire_recursive>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	0719      	lsls	r1, r3, #28
 8004f5e:	d51d      	bpl.n	8004f9c <_puts_r+0x78>
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	b1db      	cbz	r3, 8004f9c <_puts_r+0x78>
 8004f64:	3e01      	subs	r6, #1
 8004f66:	68a3      	ldr	r3, [r4, #8]
 8004f68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	60a3      	str	r3, [r4, #8]
 8004f70:	bb39      	cbnz	r1, 8004fc2 <_puts_r+0x9e>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da38      	bge.n	8004fe8 <_puts_r+0xc4>
 8004f76:	4622      	mov	r2, r4
 8004f78:	210a      	movs	r1, #10
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f848 	bl	8005010 <__swbuf_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d011      	beq.n	8004fa8 <_puts_r+0x84>
 8004f84:	250a      	movs	r5, #10
 8004f86:	e011      	b.n	8004fac <_puts_r+0x88>
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <_puts_r+0xd4>)
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	d101      	bne.n	8004f92 <_puts_r+0x6e>
 8004f8e:	68ac      	ldr	r4, [r5, #8]
 8004f90:	e7da      	b.n	8004f48 <_puts_r+0x24>
 8004f92:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <_puts_r+0xd8>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	bf08      	it	eq
 8004f98:	68ec      	ldreq	r4, [r5, #12]
 8004f9a:	e7d5      	b.n	8004f48 <_puts_r+0x24>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 f888 	bl	80050b4 <__swsetup_r>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d0dd      	beq.n	8004f64 <_puts_r+0x40>
 8004fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fae:	07da      	lsls	r2, r3, #31
 8004fb0:	d405      	bmi.n	8004fbe <_puts_r+0x9a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	059b      	lsls	r3, r3, #22
 8004fb6:	d402      	bmi.n	8004fbe <_puts_r+0x9a>
 8004fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fba:	f001 f921 	bl	8006200 <__retarget_lock_release_recursive>
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da04      	bge.n	8004fd0 <_puts_r+0xac>
 8004fc6:	69a2      	ldr	r2, [r4, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	dc06      	bgt.n	8004fda <_puts_r+0xb6>
 8004fcc:	290a      	cmp	r1, #10
 8004fce:	d004      	beq.n	8004fda <_puts_r+0xb6>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	6022      	str	r2, [r4, #0]
 8004fd6:	7019      	strb	r1, [r3, #0]
 8004fd8:	e7c5      	b.n	8004f66 <_puts_r+0x42>
 8004fda:	4622      	mov	r2, r4
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 f817 	bl	8005010 <__swbuf_r>
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d1bf      	bne.n	8004f66 <_puts_r+0x42>
 8004fe6:	e7df      	b.n	8004fa8 <_puts_r+0x84>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	250a      	movs	r5, #10
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	701d      	strb	r5, [r3, #0]
 8004ff2:	e7db      	b.n	8004fac <_puts_r+0x88>
 8004ff4:	08007488 	.word	0x08007488
 8004ff8:	080074a8 	.word	0x080074a8
 8004ffc:	08007468 	.word	0x08007468

08005000 <puts>:
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <puts+0xc>)
 8005002:	4601      	mov	r1, r0
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	f7ff bf8d 	b.w	8004f24 <_puts_r>
 800500a:	bf00      	nop
 800500c:	20000020 	.word	0x20000020

08005010 <__swbuf_r>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	460e      	mov	r6, r1
 8005014:	4614      	mov	r4, r2
 8005016:	4605      	mov	r5, r0
 8005018:	b118      	cbz	r0, 8005022 <__swbuf_r+0x12>
 800501a:	6983      	ldr	r3, [r0, #24]
 800501c:	b90b      	cbnz	r3, 8005022 <__swbuf_r+0x12>
 800501e:	f001 f84b 	bl	80060b8 <__sinit>
 8005022:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <__swbuf_r+0x98>)
 8005024:	429c      	cmp	r4, r3
 8005026:	d12b      	bne.n	8005080 <__swbuf_r+0x70>
 8005028:	686c      	ldr	r4, [r5, #4]
 800502a:	69a3      	ldr	r3, [r4, #24]
 800502c:	60a3      	str	r3, [r4, #8]
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	071a      	lsls	r2, r3, #28
 8005032:	d52f      	bpl.n	8005094 <__swbuf_r+0x84>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	b36b      	cbz	r3, 8005094 <__swbuf_r+0x84>
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	6820      	ldr	r0, [r4, #0]
 800503c:	1ac0      	subs	r0, r0, r3
 800503e:	6963      	ldr	r3, [r4, #20]
 8005040:	b2f6      	uxtb	r6, r6
 8005042:	4283      	cmp	r3, r0
 8005044:	4637      	mov	r7, r6
 8005046:	dc04      	bgt.n	8005052 <__swbuf_r+0x42>
 8005048:	4621      	mov	r1, r4
 800504a:	4628      	mov	r0, r5
 800504c:	f000 ffa0 	bl	8005f90 <_fflush_r>
 8005050:	bb30      	cbnz	r0, 80050a0 <__swbuf_r+0x90>
 8005052:	68a3      	ldr	r3, [r4, #8]
 8005054:	3b01      	subs	r3, #1
 8005056:	60a3      	str	r3, [r4, #8]
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	701e      	strb	r6, [r3, #0]
 8005060:	6963      	ldr	r3, [r4, #20]
 8005062:	3001      	adds	r0, #1
 8005064:	4283      	cmp	r3, r0
 8005066:	d004      	beq.n	8005072 <__swbuf_r+0x62>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	07db      	lsls	r3, r3, #31
 800506c:	d506      	bpl.n	800507c <__swbuf_r+0x6c>
 800506e:	2e0a      	cmp	r6, #10
 8005070:	d104      	bne.n	800507c <__swbuf_r+0x6c>
 8005072:	4621      	mov	r1, r4
 8005074:	4628      	mov	r0, r5
 8005076:	f000 ff8b 	bl	8005f90 <_fflush_r>
 800507a:	b988      	cbnz	r0, 80050a0 <__swbuf_r+0x90>
 800507c:	4638      	mov	r0, r7
 800507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <__swbuf_r+0x9c>)
 8005082:	429c      	cmp	r4, r3
 8005084:	d101      	bne.n	800508a <__swbuf_r+0x7a>
 8005086:	68ac      	ldr	r4, [r5, #8]
 8005088:	e7cf      	b.n	800502a <__swbuf_r+0x1a>
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <__swbuf_r+0xa0>)
 800508c:	429c      	cmp	r4, r3
 800508e:	bf08      	it	eq
 8005090:	68ec      	ldreq	r4, [r5, #12]
 8005092:	e7ca      	b.n	800502a <__swbuf_r+0x1a>
 8005094:	4621      	mov	r1, r4
 8005096:	4628      	mov	r0, r5
 8005098:	f000 f80c 	bl	80050b4 <__swsetup_r>
 800509c:	2800      	cmp	r0, #0
 800509e:	d0cb      	beq.n	8005038 <__swbuf_r+0x28>
 80050a0:	f04f 37ff 	mov.w	r7, #4294967295
 80050a4:	e7ea      	b.n	800507c <__swbuf_r+0x6c>
 80050a6:	bf00      	nop
 80050a8:	08007488 	.word	0x08007488
 80050ac:	080074a8 	.word	0x080074a8
 80050b0:	08007468 	.word	0x08007468

080050b4 <__swsetup_r>:
 80050b4:	4b32      	ldr	r3, [pc, #200]	; (8005180 <__swsetup_r+0xcc>)
 80050b6:	b570      	push	{r4, r5, r6, lr}
 80050b8:	681d      	ldr	r5, [r3, #0]
 80050ba:	4606      	mov	r6, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	b125      	cbz	r5, 80050ca <__swsetup_r+0x16>
 80050c0:	69ab      	ldr	r3, [r5, #24]
 80050c2:	b913      	cbnz	r3, 80050ca <__swsetup_r+0x16>
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 fff7 	bl	80060b8 <__sinit>
 80050ca:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <__swsetup_r+0xd0>)
 80050cc:	429c      	cmp	r4, r3
 80050ce:	d10f      	bne.n	80050f0 <__swsetup_r+0x3c>
 80050d0:	686c      	ldr	r4, [r5, #4]
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d8:	0719      	lsls	r1, r3, #28
 80050da:	d42c      	bmi.n	8005136 <__swsetup_r+0x82>
 80050dc:	06dd      	lsls	r5, r3, #27
 80050de:	d411      	bmi.n	8005104 <__swsetup_r+0x50>
 80050e0:	2309      	movs	r3, #9
 80050e2:	6033      	str	r3, [r6, #0]
 80050e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	f04f 30ff 	mov.w	r0, #4294967295
 80050ee:	e03e      	b.n	800516e <__swsetup_r+0xba>
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <__swsetup_r+0xd4>)
 80050f2:	429c      	cmp	r4, r3
 80050f4:	d101      	bne.n	80050fa <__swsetup_r+0x46>
 80050f6:	68ac      	ldr	r4, [r5, #8]
 80050f8:	e7eb      	b.n	80050d2 <__swsetup_r+0x1e>
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <__swsetup_r+0xd8>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	bf08      	it	eq
 8005100:	68ec      	ldreq	r4, [r5, #12]
 8005102:	e7e6      	b.n	80050d2 <__swsetup_r+0x1e>
 8005104:	0758      	lsls	r0, r3, #29
 8005106:	d512      	bpl.n	800512e <__swsetup_r+0x7a>
 8005108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800510a:	b141      	cbz	r1, 800511e <__swsetup_r+0x6a>
 800510c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005110:	4299      	cmp	r1, r3
 8005112:	d002      	beq.n	800511a <__swsetup_r+0x66>
 8005114:	4630      	mov	r0, r6
 8005116:	f001 fc89 	bl	8006a2c <_free_r>
 800511a:	2300      	movs	r3, #0
 800511c:	6363      	str	r3, [r4, #52]	; 0x34
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005124:	81a3      	strh	r3, [r4, #12]
 8005126:	2300      	movs	r3, #0
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	f043 0308 	orr.w	r3, r3, #8
 8005134:	81a3      	strh	r3, [r4, #12]
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	b94b      	cbnz	r3, 800514e <__swsetup_r+0x9a>
 800513a:	89a3      	ldrh	r3, [r4, #12]
 800513c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005144:	d003      	beq.n	800514e <__swsetup_r+0x9a>
 8005146:	4621      	mov	r1, r4
 8005148:	4630      	mov	r0, r6
 800514a:	f001 f87f 	bl	800624c <__smakebuf_r>
 800514e:	89a0      	ldrh	r0, [r4, #12]
 8005150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005154:	f010 0301 	ands.w	r3, r0, #1
 8005158:	d00a      	beq.n	8005170 <__swsetup_r+0xbc>
 800515a:	2300      	movs	r3, #0
 800515c:	60a3      	str	r3, [r4, #8]
 800515e:	6963      	ldr	r3, [r4, #20]
 8005160:	425b      	negs	r3, r3
 8005162:	61a3      	str	r3, [r4, #24]
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	b943      	cbnz	r3, 800517a <__swsetup_r+0xc6>
 8005168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800516c:	d1ba      	bne.n	80050e4 <__swsetup_r+0x30>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	0781      	lsls	r1, r0, #30
 8005172:	bf58      	it	pl
 8005174:	6963      	ldrpl	r3, [r4, #20]
 8005176:	60a3      	str	r3, [r4, #8]
 8005178:	e7f4      	b.n	8005164 <__swsetup_r+0xb0>
 800517a:	2000      	movs	r0, #0
 800517c:	e7f7      	b.n	800516e <__swsetup_r+0xba>
 800517e:	bf00      	nop
 8005180:	20000020 	.word	0x20000020
 8005184:	08007488 	.word	0x08007488
 8005188:	080074a8 	.word	0x080074a8
 800518c:	08007468 	.word	0x08007468

08005190 <quorem>:
 8005190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	6903      	ldr	r3, [r0, #16]
 8005196:	690c      	ldr	r4, [r1, #16]
 8005198:	42a3      	cmp	r3, r4
 800519a:	4607      	mov	r7, r0
 800519c:	f2c0 8081 	blt.w	80052a2 <quorem+0x112>
 80051a0:	3c01      	subs	r4, #1
 80051a2:	f101 0814 	add.w	r8, r1, #20
 80051a6:	f100 0514 	add.w	r5, r0, #20
 80051aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051b8:	3301      	adds	r3, #1
 80051ba:	429a      	cmp	r2, r3
 80051bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051c8:	d331      	bcc.n	800522e <quorem+0x9e>
 80051ca:	f04f 0e00 	mov.w	lr, #0
 80051ce:	4640      	mov	r0, r8
 80051d0:	46ac      	mov	ip, r5
 80051d2:	46f2      	mov	sl, lr
 80051d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80051d8:	b293      	uxth	r3, r2
 80051da:	fb06 e303 	mla	r3, r6, r3, lr
 80051de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	ebaa 0303 	sub.w	r3, sl, r3
 80051e8:	f8dc a000 	ldr.w	sl, [ip]
 80051ec:	0c12      	lsrs	r2, r2, #16
 80051ee:	fa13 f38a 	uxtah	r3, r3, sl
 80051f2:	fb06 e202 	mla	r2, r6, r2, lr
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	9b00      	ldr	r3, [sp, #0]
 80051fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051fe:	b292      	uxth	r2, r2
 8005200:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005208:	f8bd 3000 	ldrh.w	r3, [sp]
 800520c:	4581      	cmp	r9, r0
 800520e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005212:	f84c 3b04 	str.w	r3, [ip], #4
 8005216:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800521a:	d2db      	bcs.n	80051d4 <quorem+0x44>
 800521c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005220:	b92b      	cbnz	r3, 800522e <quorem+0x9e>
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	3b04      	subs	r3, #4
 8005226:	429d      	cmp	r5, r3
 8005228:	461a      	mov	r2, r3
 800522a:	d32e      	bcc.n	800528a <quorem+0xfa>
 800522c:	613c      	str	r4, [r7, #16]
 800522e:	4638      	mov	r0, r7
 8005230:	f001 fae4 	bl	80067fc <__mcmp>
 8005234:	2800      	cmp	r0, #0
 8005236:	db24      	blt.n	8005282 <quorem+0xf2>
 8005238:	3601      	adds	r6, #1
 800523a:	4628      	mov	r0, r5
 800523c:	f04f 0c00 	mov.w	ip, #0
 8005240:	f858 2b04 	ldr.w	r2, [r8], #4
 8005244:	f8d0 e000 	ldr.w	lr, [r0]
 8005248:	b293      	uxth	r3, r2
 800524a:	ebac 0303 	sub.w	r3, ip, r3
 800524e:	0c12      	lsrs	r2, r2, #16
 8005250:	fa13 f38e 	uxtah	r3, r3, lr
 8005254:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800525c:	b29b      	uxth	r3, r3
 800525e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005262:	45c1      	cmp	r9, r8
 8005264:	f840 3b04 	str.w	r3, [r0], #4
 8005268:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800526c:	d2e8      	bcs.n	8005240 <quorem+0xb0>
 800526e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005276:	b922      	cbnz	r2, 8005282 <quorem+0xf2>
 8005278:	3b04      	subs	r3, #4
 800527a:	429d      	cmp	r5, r3
 800527c:	461a      	mov	r2, r3
 800527e:	d30a      	bcc.n	8005296 <quorem+0x106>
 8005280:	613c      	str	r4, [r7, #16]
 8005282:	4630      	mov	r0, r6
 8005284:	b003      	add	sp, #12
 8005286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	3b04      	subs	r3, #4
 800528e:	2a00      	cmp	r2, #0
 8005290:	d1cc      	bne.n	800522c <quorem+0x9c>
 8005292:	3c01      	subs	r4, #1
 8005294:	e7c7      	b.n	8005226 <quorem+0x96>
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	3b04      	subs	r3, #4
 800529a:	2a00      	cmp	r2, #0
 800529c:	d1f0      	bne.n	8005280 <quorem+0xf0>
 800529e:	3c01      	subs	r4, #1
 80052a0:	e7eb      	b.n	800527a <quorem+0xea>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e7ee      	b.n	8005284 <quorem+0xf4>
	...

080052a8 <_dtoa_r>:
 80052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	ed2d 8b04 	vpush	{d8-d9}
 80052b0:	ec57 6b10 	vmov	r6, r7, d0
 80052b4:	b093      	sub	sp, #76	; 0x4c
 80052b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052bc:	9106      	str	r1, [sp, #24]
 80052be:	ee10 aa10 	vmov	sl, s0
 80052c2:	4604      	mov	r4, r0
 80052c4:	9209      	str	r2, [sp, #36]	; 0x24
 80052c6:	930c      	str	r3, [sp, #48]	; 0x30
 80052c8:	46bb      	mov	fp, r7
 80052ca:	b975      	cbnz	r5, 80052ea <_dtoa_r+0x42>
 80052cc:	2010      	movs	r0, #16
 80052ce:	f000 fffd 	bl	80062cc <malloc>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6260      	str	r0, [r4, #36]	; 0x24
 80052d6:	b920      	cbnz	r0, 80052e2 <_dtoa_r+0x3a>
 80052d8:	4ba7      	ldr	r3, [pc, #668]	; (8005578 <_dtoa_r+0x2d0>)
 80052da:	21ea      	movs	r1, #234	; 0xea
 80052dc:	48a7      	ldr	r0, [pc, #668]	; (800557c <_dtoa_r+0x2d4>)
 80052de:	f001 fe45 	bl	8006f6c <__assert_func>
 80052e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052e6:	6005      	str	r5, [r0, #0]
 80052e8:	60c5      	str	r5, [r0, #12]
 80052ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	b151      	cbz	r1, 8005306 <_dtoa_r+0x5e>
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	604a      	str	r2, [r1, #4]
 80052f4:	2301      	movs	r3, #1
 80052f6:	4093      	lsls	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
 80052fa:	4620      	mov	r0, r4
 80052fc:	f001 f83c 	bl	8006378 <_Bfree>
 8005300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	1e3b      	subs	r3, r7, #0
 8005308:	bfaa      	itet	ge
 800530a:	2300      	movge	r3, #0
 800530c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005310:	f8c8 3000 	strge.w	r3, [r8]
 8005314:	4b9a      	ldr	r3, [pc, #616]	; (8005580 <_dtoa_r+0x2d8>)
 8005316:	bfbc      	itt	lt
 8005318:	2201      	movlt	r2, #1
 800531a:	f8c8 2000 	strlt.w	r2, [r8]
 800531e:	ea33 030b 	bics.w	r3, r3, fp
 8005322:	d11b      	bne.n	800535c <_dtoa_r+0xb4>
 8005324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005326:	f242 730f 	movw	r3, #9999	; 0x270f
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005330:	4333      	orrs	r3, r6
 8005332:	f000 8592 	beq.w	8005e5a <_dtoa_r+0xbb2>
 8005336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005338:	b963      	cbnz	r3, 8005354 <_dtoa_r+0xac>
 800533a:	4b92      	ldr	r3, [pc, #584]	; (8005584 <_dtoa_r+0x2dc>)
 800533c:	e022      	b.n	8005384 <_dtoa_r+0xdc>
 800533e:	4b92      	ldr	r3, [pc, #584]	; (8005588 <_dtoa_r+0x2e0>)
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	3308      	adds	r3, #8
 8005344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	9801      	ldr	r0, [sp, #4]
 800534a:	b013      	add	sp, #76	; 0x4c
 800534c:	ecbd 8b04 	vpop	{d8-d9}
 8005350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005354:	4b8b      	ldr	r3, [pc, #556]	; (8005584 <_dtoa_r+0x2dc>)
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	3303      	adds	r3, #3
 800535a:	e7f3      	b.n	8005344 <_dtoa_r+0x9c>
 800535c:	2200      	movs	r2, #0
 800535e:	2300      	movs	r3, #0
 8005360:	4650      	mov	r0, sl
 8005362:	4659      	mov	r1, fp
 8005364:	f7fb fbc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005368:	ec4b ab19 	vmov	d9, sl, fp
 800536c:	4680      	mov	r8, r0
 800536e:	b158      	cbz	r0, 8005388 <_dtoa_r+0xe0>
 8005370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005372:	2301      	movs	r3, #1
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 856b 	beq.w	8005e54 <_dtoa_r+0xbac>
 800537e:	4883      	ldr	r0, [pc, #524]	; (800558c <_dtoa_r+0x2e4>)
 8005380:	6018      	str	r0, [r3, #0]
 8005382:	1e43      	subs	r3, r0, #1
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	e7df      	b.n	8005348 <_dtoa_r+0xa0>
 8005388:	ec4b ab10 	vmov	d0, sl, fp
 800538c:	aa10      	add	r2, sp, #64	; 0x40
 800538e:	a911      	add	r1, sp, #68	; 0x44
 8005390:	4620      	mov	r0, r4
 8005392:	f001 fad9 	bl	8006948 <__d2b>
 8005396:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800539a:	ee08 0a10 	vmov	s16, r0
 800539e:	2d00      	cmp	r5, #0
 80053a0:	f000 8084 	beq.w	80054ac <_dtoa_r+0x204>
 80053a4:	ee19 3a90 	vmov	r3, s19
 80053a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053b0:	4656      	mov	r6, sl
 80053b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80053be:	4b74      	ldr	r3, [pc, #464]	; (8005590 <_dtoa_r+0x2e8>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	f7fa ff6f 	bl	80002a8 <__aeabi_dsub>
 80053ca:	a365      	add	r3, pc, #404	; (adr r3, 8005560 <_dtoa_r+0x2b8>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb f922 	bl	8000618 <__aeabi_dmul>
 80053d4:	a364      	add	r3, pc, #400	; (adr r3, 8005568 <_dtoa_r+0x2c0>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f7fa ff67 	bl	80002ac <__adddf3>
 80053de:	4606      	mov	r6, r0
 80053e0:	4628      	mov	r0, r5
 80053e2:	460f      	mov	r7, r1
 80053e4:	f7fb f8ae 	bl	8000544 <__aeabi_i2d>
 80053e8:	a361      	add	r3, pc, #388	; (adr r3, 8005570 <_dtoa_r+0x2c8>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fb f913 	bl	8000618 <__aeabi_dmul>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fa ff57 	bl	80002ac <__adddf3>
 80053fe:	4606      	mov	r6, r0
 8005400:	460f      	mov	r7, r1
 8005402:	f7fb fbb9 	bl	8000b78 <__aeabi_d2iz>
 8005406:	2200      	movs	r2, #0
 8005408:	9000      	str	r0, [sp, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb fb74 	bl	8000afc <__aeabi_dcmplt>
 8005414:	b150      	cbz	r0, 800542c <_dtoa_r+0x184>
 8005416:	9800      	ldr	r0, [sp, #0]
 8005418:	f7fb f894 	bl	8000544 <__aeabi_i2d>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	f7fb fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 8005424:	b910      	cbnz	r0, 800542c <_dtoa_r+0x184>
 8005426:	9b00      	ldr	r3, [sp, #0]
 8005428:	3b01      	subs	r3, #1
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	9b00      	ldr	r3, [sp, #0]
 800542e:	2b16      	cmp	r3, #22
 8005430:	d85a      	bhi.n	80054e8 <_dtoa_r+0x240>
 8005432:	9a00      	ldr	r2, [sp, #0]
 8005434:	4b57      	ldr	r3, [pc, #348]	; (8005594 <_dtoa_r+0x2ec>)
 8005436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	ec51 0b19 	vmov	r0, r1, d9
 8005442:	f7fb fb5b 	bl	8000afc <__aeabi_dcmplt>
 8005446:	2800      	cmp	r0, #0
 8005448:	d050      	beq.n	80054ec <_dtoa_r+0x244>
 800544a:	9b00      	ldr	r3, [sp, #0]
 800544c:	3b01      	subs	r3, #1
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2300      	movs	r3, #0
 8005452:	930b      	str	r3, [sp, #44]	; 0x2c
 8005454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005456:	1b5d      	subs	r5, r3, r5
 8005458:	1e6b      	subs	r3, r5, #1
 800545a:	9305      	str	r3, [sp, #20]
 800545c:	bf45      	ittet	mi
 800545e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005462:	9304      	strmi	r3, [sp, #16]
 8005464:	2300      	movpl	r3, #0
 8005466:	2300      	movmi	r3, #0
 8005468:	bf4c      	ite	mi
 800546a:	9305      	strmi	r3, [sp, #20]
 800546c:	9304      	strpl	r3, [sp, #16]
 800546e:	9b00      	ldr	r3, [sp, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	db3d      	blt.n	80054f0 <_dtoa_r+0x248>
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	9a00      	ldr	r2, [sp, #0]
 8005478:	920a      	str	r2, [sp, #40]	; 0x28
 800547a:	4413      	add	r3, r2
 800547c:	9305      	str	r3, [sp, #20]
 800547e:	2300      	movs	r3, #0
 8005480:	9307      	str	r3, [sp, #28]
 8005482:	9b06      	ldr	r3, [sp, #24]
 8005484:	2b09      	cmp	r3, #9
 8005486:	f200 8089 	bhi.w	800559c <_dtoa_r+0x2f4>
 800548a:	2b05      	cmp	r3, #5
 800548c:	bfc4      	itt	gt
 800548e:	3b04      	subgt	r3, #4
 8005490:	9306      	strgt	r3, [sp, #24]
 8005492:	9b06      	ldr	r3, [sp, #24]
 8005494:	f1a3 0302 	sub.w	r3, r3, #2
 8005498:	bfcc      	ite	gt
 800549a:	2500      	movgt	r5, #0
 800549c:	2501      	movle	r5, #1
 800549e:	2b03      	cmp	r3, #3
 80054a0:	f200 8087 	bhi.w	80055b2 <_dtoa_r+0x30a>
 80054a4:	e8df f003 	tbb	[pc, r3]
 80054a8:	59383a2d 	.word	0x59383a2d
 80054ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054b0:	441d      	add	r5, r3
 80054b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	bfc1      	itttt	gt
 80054ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80054c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054ca:	bfda      	itte	le
 80054cc:	f1c3 0320 	rsble	r3, r3, #32
 80054d0:	fa06 f003 	lslle.w	r0, r6, r3
 80054d4:	4318      	orrgt	r0, r3
 80054d6:	f7fb f825 	bl	8000524 <__aeabi_ui2d>
 80054da:	2301      	movs	r3, #1
 80054dc:	4606      	mov	r6, r0
 80054de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054e2:	3d01      	subs	r5, #1
 80054e4:	930e      	str	r3, [sp, #56]	; 0x38
 80054e6:	e76a      	b.n	80053be <_dtoa_r+0x116>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e7b2      	b.n	8005452 <_dtoa_r+0x1aa>
 80054ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80054ee:	e7b1      	b.n	8005454 <_dtoa_r+0x1ac>
 80054f0:	9b04      	ldr	r3, [sp, #16]
 80054f2:	9a00      	ldr	r2, [sp, #0]
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	4253      	negs	r3, r2
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	2300      	movs	r3, #0
 80054fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005500:	e7bf      	b.n	8005482 <_dtoa_r+0x1da>
 8005502:	2300      	movs	r3, #0
 8005504:	9308      	str	r3, [sp, #32]
 8005506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	dc55      	bgt.n	80055b8 <_dtoa_r+0x310>
 800550c:	2301      	movs	r3, #1
 800550e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005512:	461a      	mov	r2, r3
 8005514:	9209      	str	r2, [sp, #36]	; 0x24
 8005516:	e00c      	b.n	8005532 <_dtoa_r+0x28a>
 8005518:	2301      	movs	r3, #1
 800551a:	e7f3      	b.n	8005504 <_dtoa_r+0x25c>
 800551c:	2300      	movs	r3, #0
 800551e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005520:	9308      	str	r3, [sp, #32]
 8005522:	9b00      	ldr	r3, [sp, #0]
 8005524:	4413      	add	r3, r2
 8005526:	9302      	str	r3, [sp, #8]
 8005528:	3301      	adds	r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	9303      	str	r3, [sp, #12]
 800552e:	bfb8      	it	lt
 8005530:	2301      	movlt	r3, #1
 8005532:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005534:	2200      	movs	r2, #0
 8005536:	6042      	str	r2, [r0, #4]
 8005538:	2204      	movs	r2, #4
 800553a:	f102 0614 	add.w	r6, r2, #20
 800553e:	429e      	cmp	r6, r3
 8005540:	6841      	ldr	r1, [r0, #4]
 8005542:	d93d      	bls.n	80055c0 <_dtoa_r+0x318>
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fed7 	bl	80062f8 <_Balloc>
 800554a:	9001      	str	r0, [sp, #4]
 800554c:	2800      	cmp	r0, #0
 800554e:	d13b      	bne.n	80055c8 <_dtoa_r+0x320>
 8005550:	4b11      	ldr	r3, [pc, #68]	; (8005598 <_dtoa_r+0x2f0>)
 8005552:	4602      	mov	r2, r0
 8005554:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005558:	e6c0      	b.n	80052dc <_dtoa_r+0x34>
 800555a:	2301      	movs	r3, #1
 800555c:	e7df      	b.n	800551e <_dtoa_r+0x276>
 800555e:	bf00      	nop
 8005560:	636f4361 	.word	0x636f4361
 8005564:	3fd287a7 	.word	0x3fd287a7
 8005568:	8b60c8b3 	.word	0x8b60c8b3
 800556c:	3fc68a28 	.word	0x3fc68a28
 8005570:	509f79fb 	.word	0x509f79fb
 8005574:	3fd34413 	.word	0x3fd34413
 8005578:	080073e5 	.word	0x080073e5
 800557c:	080073fc 	.word	0x080073fc
 8005580:	7ff00000 	.word	0x7ff00000
 8005584:	080073e1 	.word	0x080073e1
 8005588:	080073d8 	.word	0x080073d8
 800558c:	080073b5 	.word	0x080073b5
 8005590:	3ff80000 	.word	0x3ff80000
 8005594:	08007550 	.word	0x08007550
 8005598:	08007457 	.word	0x08007457
 800559c:	2501      	movs	r5, #1
 800559e:	2300      	movs	r3, #0
 80055a0:	9306      	str	r3, [sp, #24]
 80055a2:	9508      	str	r5, [sp, #32]
 80055a4:	f04f 33ff 	mov.w	r3, #4294967295
 80055a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2312      	movs	r3, #18
 80055b0:	e7b0      	b.n	8005514 <_dtoa_r+0x26c>
 80055b2:	2301      	movs	r3, #1
 80055b4:	9308      	str	r3, [sp, #32]
 80055b6:	e7f5      	b.n	80055a4 <_dtoa_r+0x2fc>
 80055b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055be:	e7b8      	b.n	8005532 <_dtoa_r+0x28a>
 80055c0:	3101      	adds	r1, #1
 80055c2:	6041      	str	r1, [r0, #4]
 80055c4:	0052      	lsls	r2, r2, #1
 80055c6:	e7b8      	b.n	800553a <_dtoa_r+0x292>
 80055c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ca:	9a01      	ldr	r2, [sp, #4]
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	2b0e      	cmp	r3, #14
 80055d2:	f200 809d 	bhi.w	8005710 <_dtoa_r+0x468>
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	f000 809a 	beq.w	8005710 <_dtoa_r+0x468>
 80055dc:	9b00      	ldr	r3, [sp, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd32      	ble.n	8005648 <_dtoa_r+0x3a0>
 80055e2:	4ab7      	ldr	r2, [pc, #732]	; (80058c0 <_dtoa_r+0x618>)
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f0:	9b00      	ldr	r3, [sp, #0]
 80055f2:	05d8      	lsls	r0, r3, #23
 80055f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055f8:	d516      	bpl.n	8005628 <_dtoa_r+0x380>
 80055fa:	4bb2      	ldr	r3, [pc, #712]	; (80058c4 <_dtoa_r+0x61c>)
 80055fc:	ec51 0b19 	vmov	r0, r1, d9
 8005600:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005604:	f7fb f932 	bl	800086c <__aeabi_ddiv>
 8005608:	f007 070f 	and.w	r7, r7, #15
 800560c:	4682      	mov	sl, r0
 800560e:	468b      	mov	fp, r1
 8005610:	2503      	movs	r5, #3
 8005612:	4eac      	ldr	r6, [pc, #688]	; (80058c4 <_dtoa_r+0x61c>)
 8005614:	b957      	cbnz	r7, 800562c <_dtoa_r+0x384>
 8005616:	4642      	mov	r2, r8
 8005618:	464b      	mov	r3, r9
 800561a:	4650      	mov	r0, sl
 800561c:	4659      	mov	r1, fp
 800561e:	f7fb f925 	bl	800086c <__aeabi_ddiv>
 8005622:	4682      	mov	sl, r0
 8005624:	468b      	mov	fp, r1
 8005626:	e028      	b.n	800567a <_dtoa_r+0x3d2>
 8005628:	2502      	movs	r5, #2
 800562a:	e7f2      	b.n	8005612 <_dtoa_r+0x36a>
 800562c:	07f9      	lsls	r1, r7, #31
 800562e:	d508      	bpl.n	8005642 <_dtoa_r+0x39a>
 8005630:	4640      	mov	r0, r8
 8005632:	4649      	mov	r1, r9
 8005634:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005638:	f7fa ffee 	bl	8000618 <__aeabi_dmul>
 800563c:	3501      	adds	r5, #1
 800563e:	4680      	mov	r8, r0
 8005640:	4689      	mov	r9, r1
 8005642:	107f      	asrs	r7, r7, #1
 8005644:	3608      	adds	r6, #8
 8005646:	e7e5      	b.n	8005614 <_dtoa_r+0x36c>
 8005648:	f000 809b 	beq.w	8005782 <_dtoa_r+0x4da>
 800564c:	9b00      	ldr	r3, [sp, #0]
 800564e:	4f9d      	ldr	r7, [pc, #628]	; (80058c4 <_dtoa_r+0x61c>)
 8005650:	425e      	negs	r6, r3
 8005652:	4b9b      	ldr	r3, [pc, #620]	; (80058c0 <_dtoa_r+0x618>)
 8005654:	f006 020f 	and.w	r2, r6, #15
 8005658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	ec51 0b19 	vmov	r0, r1, d9
 8005664:	f7fa ffd8 	bl	8000618 <__aeabi_dmul>
 8005668:	1136      	asrs	r6, r6, #4
 800566a:	4682      	mov	sl, r0
 800566c:	468b      	mov	fp, r1
 800566e:	2300      	movs	r3, #0
 8005670:	2502      	movs	r5, #2
 8005672:	2e00      	cmp	r6, #0
 8005674:	d17a      	bne.n	800576c <_dtoa_r+0x4c4>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1d3      	bne.n	8005622 <_dtoa_r+0x37a>
 800567a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8082 	beq.w	8005786 <_dtoa_r+0x4de>
 8005682:	4b91      	ldr	r3, [pc, #580]	; (80058c8 <_dtoa_r+0x620>)
 8005684:	2200      	movs	r2, #0
 8005686:	4650      	mov	r0, sl
 8005688:	4659      	mov	r1, fp
 800568a:	f7fb fa37 	bl	8000afc <__aeabi_dcmplt>
 800568e:	2800      	cmp	r0, #0
 8005690:	d079      	beq.n	8005786 <_dtoa_r+0x4de>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d076      	beq.n	8005786 <_dtoa_r+0x4de>
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	dd36      	ble.n	800570c <_dtoa_r+0x464>
 800569e:	9b00      	ldr	r3, [sp, #0]
 80056a0:	4650      	mov	r0, sl
 80056a2:	4659      	mov	r1, fp
 80056a4:	1e5f      	subs	r7, r3, #1
 80056a6:	2200      	movs	r2, #0
 80056a8:	4b88      	ldr	r3, [pc, #544]	; (80058cc <_dtoa_r+0x624>)
 80056aa:	f7fa ffb5 	bl	8000618 <__aeabi_dmul>
 80056ae:	9e02      	ldr	r6, [sp, #8]
 80056b0:	4682      	mov	sl, r0
 80056b2:	468b      	mov	fp, r1
 80056b4:	3501      	adds	r5, #1
 80056b6:	4628      	mov	r0, r5
 80056b8:	f7fa ff44 	bl	8000544 <__aeabi_i2d>
 80056bc:	4652      	mov	r2, sl
 80056be:	465b      	mov	r3, fp
 80056c0:	f7fa ffaa 	bl	8000618 <__aeabi_dmul>
 80056c4:	4b82      	ldr	r3, [pc, #520]	; (80058d0 <_dtoa_r+0x628>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	f7fa fdf0 	bl	80002ac <__adddf3>
 80056cc:	46d0      	mov	r8, sl
 80056ce:	46d9      	mov	r9, fp
 80056d0:	4682      	mov	sl, r0
 80056d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	d158      	bne.n	800578c <_dtoa_r+0x4e4>
 80056da:	4b7e      	ldr	r3, [pc, #504]	; (80058d4 <_dtoa_r+0x62c>)
 80056dc:	2200      	movs	r2, #0
 80056de:	4640      	mov	r0, r8
 80056e0:	4649      	mov	r1, r9
 80056e2:	f7fa fde1 	bl	80002a8 <__aeabi_dsub>
 80056e6:	4652      	mov	r2, sl
 80056e8:	465b      	mov	r3, fp
 80056ea:	4680      	mov	r8, r0
 80056ec:	4689      	mov	r9, r1
 80056ee:	f7fb fa23 	bl	8000b38 <__aeabi_dcmpgt>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f040 8295 	bne.w	8005c22 <_dtoa_r+0x97a>
 80056f8:	4652      	mov	r2, sl
 80056fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f7fb f9fb 	bl	8000afc <__aeabi_dcmplt>
 8005706:	2800      	cmp	r0, #0
 8005708:	f040 8289 	bne.w	8005c1e <_dtoa_r+0x976>
 800570c:	ec5b ab19 	vmov	sl, fp, d9
 8005710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005712:	2b00      	cmp	r3, #0
 8005714:	f2c0 8148 	blt.w	80059a8 <_dtoa_r+0x700>
 8005718:	9a00      	ldr	r2, [sp, #0]
 800571a:	2a0e      	cmp	r2, #14
 800571c:	f300 8144 	bgt.w	80059a8 <_dtoa_r+0x700>
 8005720:	4b67      	ldr	r3, [pc, #412]	; (80058c0 <_dtoa_r+0x618>)
 8005722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005726:	e9d3 8900 	ldrd	r8, r9, [r3]
 800572a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	f280 80d5 	bge.w	80058dc <_dtoa_r+0x634>
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f300 80d1 	bgt.w	80058dc <_dtoa_r+0x634>
 800573a:	f040 826f 	bne.w	8005c1c <_dtoa_r+0x974>
 800573e:	4b65      	ldr	r3, [pc, #404]	; (80058d4 <_dtoa_r+0x62c>)
 8005740:	2200      	movs	r2, #0
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fa ff67 	bl	8000618 <__aeabi_dmul>
 800574a:	4652      	mov	r2, sl
 800574c:	465b      	mov	r3, fp
 800574e:	f7fb f9e9 	bl	8000b24 <__aeabi_dcmpge>
 8005752:	9e03      	ldr	r6, [sp, #12]
 8005754:	4637      	mov	r7, r6
 8005756:	2800      	cmp	r0, #0
 8005758:	f040 8245 	bne.w	8005be6 <_dtoa_r+0x93e>
 800575c:	9d01      	ldr	r5, [sp, #4]
 800575e:	2331      	movs	r3, #49	; 0x31
 8005760:	f805 3b01 	strb.w	r3, [r5], #1
 8005764:	9b00      	ldr	r3, [sp, #0]
 8005766:	3301      	adds	r3, #1
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	e240      	b.n	8005bee <_dtoa_r+0x946>
 800576c:	07f2      	lsls	r2, r6, #31
 800576e:	d505      	bpl.n	800577c <_dtoa_r+0x4d4>
 8005770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005774:	f7fa ff50 	bl	8000618 <__aeabi_dmul>
 8005778:	3501      	adds	r5, #1
 800577a:	2301      	movs	r3, #1
 800577c:	1076      	asrs	r6, r6, #1
 800577e:	3708      	adds	r7, #8
 8005780:	e777      	b.n	8005672 <_dtoa_r+0x3ca>
 8005782:	2502      	movs	r5, #2
 8005784:	e779      	b.n	800567a <_dtoa_r+0x3d2>
 8005786:	9f00      	ldr	r7, [sp, #0]
 8005788:	9e03      	ldr	r6, [sp, #12]
 800578a:	e794      	b.n	80056b6 <_dtoa_r+0x40e>
 800578c:	9901      	ldr	r1, [sp, #4]
 800578e:	4b4c      	ldr	r3, [pc, #304]	; (80058c0 <_dtoa_r+0x618>)
 8005790:	4431      	add	r1, r6
 8005792:	910d      	str	r1, [sp, #52]	; 0x34
 8005794:	9908      	ldr	r1, [sp, #32]
 8005796:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800579a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800579e:	2900      	cmp	r1, #0
 80057a0:	d043      	beq.n	800582a <_dtoa_r+0x582>
 80057a2:	494d      	ldr	r1, [pc, #308]	; (80058d8 <_dtoa_r+0x630>)
 80057a4:	2000      	movs	r0, #0
 80057a6:	f7fb f861 	bl	800086c <__aeabi_ddiv>
 80057aa:	4652      	mov	r2, sl
 80057ac:	465b      	mov	r3, fp
 80057ae:	f7fa fd7b 	bl	80002a8 <__aeabi_dsub>
 80057b2:	9d01      	ldr	r5, [sp, #4]
 80057b4:	4682      	mov	sl, r0
 80057b6:	468b      	mov	fp, r1
 80057b8:	4649      	mov	r1, r9
 80057ba:	4640      	mov	r0, r8
 80057bc:	f7fb f9dc 	bl	8000b78 <__aeabi_d2iz>
 80057c0:	4606      	mov	r6, r0
 80057c2:	f7fa febf 	bl	8000544 <__aeabi_i2d>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	f7fa fd6b 	bl	80002a8 <__aeabi_dsub>
 80057d2:	3630      	adds	r6, #48	; 0x30
 80057d4:	f805 6b01 	strb.w	r6, [r5], #1
 80057d8:	4652      	mov	r2, sl
 80057da:	465b      	mov	r3, fp
 80057dc:	4680      	mov	r8, r0
 80057de:	4689      	mov	r9, r1
 80057e0:	f7fb f98c 	bl	8000afc <__aeabi_dcmplt>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d163      	bne.n	80058b0 <_dtoa_r+0x608>
 80057e8:	4642      	mov	r2, r8
 80057ea:	464b      	mov	r3, r9
 80057ec:	4936      	ldr	r1, [pc, #216]	; (80058c8 <_dtoa_r+0x620>)
 80057ee:	2000      	movs	r0, #0
 80057f0:	f7fa fd5a 	bl	80002a8 <__aeabi_dsub>
 80057f4:	4652      	mov	r2, sl
 80057f6:	465b      	mov	r3, fp
 80057f8:	f7fb f980 	bl	8000afc <__aeabi_dcmplt>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f040 80b5 	bne.w	800596c <_dtoa_r+0x6c4>
 8005802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005804:	429d      	cmp	r5, r3
 8005806:	d081      	beq.n	800570c <_dtoa_r+0x464>
 8005808:	4b30      	ldr	r3, [pc, #192]	; (80058cc <_dtoa_r+0x624>)
 800580a:	2200      	movs	r2, #0
 800580c:	4650      	mov	r0, sl
 800580e:	4659      	mov	r1, fp
 8005810:	f7fa ff02 	bl	8000618 <__aeabi_dmul>
 8005814:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <_dtoa_r+0x624>)
 8005816:	4682      	mov	sl, r0
 8005818:	468b      	mov	fp, r1
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	2200      	movs	r2, #0
 8005820:	f7fa fefa 	bl	8000618 <__aeabi_dmul>
 8005824:	4680      	mov	r8, r0
 8005826:	4689      	mov	r9, r1
 8005828:	e7c6      	b.n	80057b8 <_dtoa_r+0x510>
 800582a:	4650      	mov	r0, sl
 800582c:	4659      	mov	r1, fp
 800582e:	f7fa fef3 	bl	8000618 <__aeabi_dmul>
 8005832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005834:	9d01      	ldr	r5, [sp, #4]
 8005836:	930f      	str	r3, [sp, #60]	; 0x3c
 8005838:	4682      	mov	sl, r0
 800583a:	468b      	mov	fp, r1
 800583c:	4649      	mov	r1, r9
 800583e:	4640      	mov	r0, r8
 8005840:	f7fb f99a 	bl	8000b78 <__aeabi_d2iz>
 8005844:	4606      	mov	r6, r0
 8005846:	f7fa fe7d 	bl	8000544 <__aeabi_i2d>
 800584a:	3630      	adds	r6, #48	; 0x30
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fa fd28 	bl	80002a8 <__aeabi_dsub>
 8005858:	f805 6b01 	strb.w	r6, [r5], #1
 800585c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800585e:	429d      	cmp	r5, r3
 8005860:	4680      	mov	r8, r0
 8005862:	4689      	mov	r9, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	d124      	bne.n	80058b4 <_dtoa_r+0x60c>
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <_dtoa_r+0x630>)
 800586c:	4650      	mov	r0, sl
 800586e:	4659      	mov	r1, fp
 8005870:	f7fa fd1c 	bl	80002ac <__adddf3>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4640      	mov	r0, r8
 800587a:	4649      	mov	r1, r9
 800587c:	f7fb f95c 	bl	8000b38 <__aeabi_dcmpgt>
 8005880:	2800      	cmp	r0, #0
 8005882:	d173      	bne.n	800596c <_dtoa_r+0x6c4>
 8005884:	4652      	mov	r2, sl
 8005886:	465b      	mov	r3, fp
 8005888:	4913      	ldr	r1, [pc, #76]	; (80058d8 <_dtoa_r+0x630>)
 800588a:	2000      	movs	r0, #0
 800588c:	f7fa fd0c 	bl	80002a8 <__aeabi_dsub>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4640      	mov	r0, r8
 8005896:	4649      	mov	r1, r9
 8005898:	f7fb f930 	bl	8000afc <__aeabi_dcmplt>
 800589c:	2800      	cmp	r0, #0
 800589e:	f43f af35 	beq.w	800570c <_dtoa_r+0x464>
 80058a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058a4:	1e6b      	subs	r3, r5, #1
 80058a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058ac:	2b30      	cmp	r3, #48	; 0x30
 80058ae:	d0f8      	beq.n	80058a2 <_dtoa_r+0x5fa>
 80058b0:	9700      	str	r7, [sp, #0]
 80058b2:	e049      	b.n	8005948 <_dtoa_r+0x6a0>
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <_dtoa_r+0x624>)
 80058b6:	f7fa feaf 	bl	8000618 <__aeabi_dmul>
 80058ba:	4680      	mov	r8, r0
 80058bc:	4689      	mov	r9, r1
 80058be:	e7bd      	b.n	800583c <_dtoa_r+0x594>
 80058c0:	08007550 	.word	0x08007550
 80058c4:	08007528 	.word	0x08007528
 80058c8:	3ff00000 	.word	0x3ff00000
 80058cc:	40240000 	.word	0x40240000
 80058d0:	401c0000 	.word	0x401c0000
 80058d4:	40140000 	.word	0x40140000
 80058d8:	3fe00000 	.word	0x3fe00000
 80058dc:	9d01      	ldr	r5, [sp, #4]
 80058de:	4656      	mov	r6, sl
 80058e0:	465f      	mov	r7, fp
 80058e2:	4642      	mov	r2, r8
 80058e4:	464b      	mov	r3, r9
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fa ffbf 	bl	800086c <__aeabi_ddiv>
 80058ee:	f7fb f943 	bl	8000b78 <__aeabi_d2iz>
 80058f2:	4682      	mov	sl, r0
 80058f4:	f7fa fe26 	bl	8000544 <__aeabi_i2d>
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	f7fa fe8c 	bl	8000618 <__aeabi_dmul>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4630      	mov	r0, r6
 8005906:	4639      	mov	r1, r7
 8005908:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800590c:	f7fa fccc 	bl	80002a8 <__aeabi_dsub>
 8005910:	f805 6b01 	strb.w	r6, [r5], #1
 8005914:	9e01      	ldr	r6, [sp, #4]
 8005916:	9f03      	ldr	r7, [sp, #12]
 8005918:	1bae      	subs	r6, r5, r6
 800591a:	42b7      	cmp	r7, r6
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	d135      	bne.n	800598e <_dtoa_r+0x6e6>
 8005922:	f7fa fcc3 	bl	80002ac <__adddf3>
 8005926:	4642      	mov	r2, r8
 8005928:	464b      	mov	r3, r9
 800592a:	4606      	mov	r6, r0
 800592c:	460f      	mov	r7, r1
 800592e:	f7fb f903 	bl	8000b38 <__aeabi_dcmpgt>
 8005932:	b9d0      	cbnz	r0, 800596a <_dtoa_r+0x6c2>
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	4630      	mov	r0, r6
 800593a:	4639      	mov	r1, r7
 800593c:	f7fb f8d4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005940:	b110      	cbz	r0, 8005948 <_dtoa_r+0x6a0>
 8005942:	f01a 0f01 	tst.w	sl, #1
 8005946:	d110      	bne.n	800596a <_dtoa_r+0x6c2>
 8005948:	4620      	mov	r0, r4
 800594a:	ee18 1a10 	vmov	r1, s16
 800594e:	f000 fd13 	bl	8006378 <_Bfree>
 8005952:	2300      	movs	r3, #0
 8005954:	9800      	ldr	r0, [sp, #0]
 8005956:	702b      	strb	r3, [r5, #0]
 8005958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800595a:	3001      	adds	r0, #1
 800595c:	6018      	str	r0, [r3, #0]
 800595e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005960:	2b00      	cmp	r3, #0
 8005962:	f43f acf1 	beq.w	8005348 <_dtoa_r+0xa0>
 8005966:	601d      	str	r5, [r3, #0]
 8005968:	e4ee      	b.n	8005348 <_dtoa_r+0xa0>
 800596a:	9f00      	ldr	r7, [sp, #0]
 800596c:	462b      	mov	r3, r5
 800596e:	461d      	mov	r5, r3
 8005970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005974:	2a39      	cmp	r2, #57	; 0x39
 8005976:	d106      	bne.n	8005986 <_dtoa_r+0x6de>
 8005978:	9a01      	ldr	r2, [sp, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d1f7      	bne.n	800596e <_dtoa_r+0x6c6>
 800597e:	9901      	ldr	r1, [sp, #4]
 8005980:	2230      	movs	r2, #48	; 0x30
 8005982:	3701      	adds	r7, #1
 8005984:	700a      	strb	r2, [r1, #0]
 8005986:	781a      	ldrb	r2, [r3, #0]
 8005988:	3201      	adds	r2, #1
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e790      	b.n	80058b0 <_dtoa_r+0x608>
 800598e:	4ba6      	ldr	r3, [pc, #664]	; (8005c28 <_dtoa_r+0x980>)
 8005990:	2200      	movs	r2, #0
 8005992:	f7fa fe41 	bl	8000618 <__aeabi_dmul>
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	4606      	mov	r6, r0
 800599c:	460f      	mov	r7, r1
 800599e:	f7fb f8a3 	bl	8000ae8 <__aeabi_dcmpeq>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d09d      	beq.n	80058e2 <_dtoa_r+0x63a>
 80059a6:	e7cf      	b.n	8005948 <_dtoa_r+0x6a0>
 80059a8:	9a08      	ldr	r2, [sp, #32]
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	f000 80d7 	beq.w	8005b5e <_dtoa_r+0x8b6>
 80059b0:	9a06      	ldr	r2, [sp, #24]
 80059b2:	2a01      	cmp	r2, #1
 80059b4:	f300 80ba 	bgt.w	8005b2c <_dtoa_r+0x884>
 80059b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	f000 80b2 	beq.w	8005b24 <_dtoa_r+0x87c>
 80059c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059c4:	9e07      	ldr	r6, [sp, #28]
 80059c6:	9d04      	ldr	r5, [sp, #16]
 80059c8:	9a04      	ldr	r2, [sp, #16]
 80059ca:	441a      	add	r2, r3
 80059cc:	9204      	str	r2, [sp, #16]
 80059ce:	9a05      	ldr	r2, [sp, #20]
 80059d0:	2101      	movs	r1, #1
 80059d2:	441a      	add	r2, r3
 80059d4:	4620      	mov	r0, r4
 80059d6:	9205      	str	r2, [sp, #20]
 80059d8:	f000 fd86 	bl	80064e8 <__i2b>
 80059dc:	4607      	mov	r7, r0
 80059de:	2d00      	cmp	r5, #0
 80059e0:	dd0c      	ble.n	80059fc <_dtoa_r+0x754>
 80059e2:	9b05      	ldr	r3, [sp, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd09      	ble.n	80059fc <_dtoa_r+0x754>
 80059e8:	42ab      	cmp	r3, r5
 80059ea:	9a04      	ldr	r2, [sp, #16]
 80059ec:	bfa8      	it	ge
 80059ee:	462b      	movge	r3, r5
 80059f0:	1ad2      	subs	r2, r2, r3
 80059f2:	9204      	str	r2, [sp, #16]
 80059f4:	9a05      	ldr	r2, [sp, #20]
 80059f6:	1aed      	subs	r5, r5, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	9305      	str	r3, [sp, #20]
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	b31b      	cbz	r3, 8005a48 <_dtoa_r+0x7a0>
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80af 	beq.w	8005b66 <_dtoa_r+0x8be>
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	dd13      	ble.n	8005a34 <_dtoa_r+0x78c>
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	4632      	mov	r2, r6
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 fe29 	bl	8006668 <__pow5mult>
 8005a16:	ee18 2a10 	vmov	r2, s16
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 fd78 	bl	8006514 <__multiply>
 8005a24:	ee18 1a10 	vmov	r1, s16
 8005a28:	4680      	mov	r8, r0
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 fca4 	bl	8006378 <_Bfree>
 8005a30:	ee08 8a10 	vmov	s16, r8
 8005a34:	9b07      	ldr	r3, [sp, #28]
 8005a36:	1b9a      	subs	r2, r3, r6
 8005a38:	d006      	beq.n	8005a48 <_dtoa_r+0x7a0>
 8005a3a:	ee18 1a10 	vmov	r1, s16
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 fe12 	bl	8006668 <__pow5mult>
 8005a44:	ee08 0a10 	vmov	s16, r0
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 fd4c 	bl	80064e8 <__i2b>
 8005a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	4606      	mov	r6, r0
 8005a56:	f340 8088 	ble.w	8005b6a <_dtoa_r+0x8c2>
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4601      	mov	r1, r0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 fe02 	bl	8006668 <__pow5mult>
 8005a64:	9b06      	ldr	r3, [sp, #24]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	4606      	mov	r6, r0
 8005a6a:	f340 8081 	ble.w	8005b70 <_dtoa_r+0x8c8>
 8005a6e:	f04f 0800 	mov.w	r8, #0
 8005a72:	6933      	ldr	r3, [r6, #16]
 8005a74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a78:	6918      	ldr	r0, [r3, #16]
 8005a7a:	f000 fce5 	bl	8006448 <__hi0bits>
 8005a7e:	f1c0 0020 	rsb	r0, r0, #32
 8005a82:	9b05      	ldr	r3, [sp, #20]
 8005a84:	4418      	add	r0, r3
 8005a86:	f010 001f 	ands.w	r0, r0, #31
 8005a8a:	f000 8092 	beq.w	8005bb2 <_dtoa_r+0x90a>
 8005a8e:	f1c0 0320 	rsb	r3, r0, #32
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	f340 808a 	ble.w	8005bac <_dtoa_r+0x904>
 8005a98:	f1c0 001c 	rsb	r0, r0, #28
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	4403      	add	r3, r0
 8005aa0:	9304      	str	r3, [sp, #16]
 8005aa2:	9b05      	ldr	r3, [sp, #20]
 8005aa4:	4403      	add	r3, r0
 8005aa6:	4405      	add	r5, r0
 8005aa8:	9305      	str	r3, [sp, #20]
 8005aaa:	9b04      	ldr	r3, [sp, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dd07      	ble.n	8005ac0 <_dtoa_r+0x818>
 8005ab0:	ee18 1a10 	vmov	r1, s16
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fe30 	bl	800671c <__lshift>
 8005abc:	ee08 0a10 	vmov	s16, r0
 8005ac0:	9b05      	ldr	r3, [sp, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	dd05      	ble.n	8005ad2 <_dtoa_r+0x82a>
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fe26 	bl	800671c <__lshift>
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d06e      	beq.n	8005bb6 <_dtoa_r+0x90e>
 8005ad8:	ee18 0a10 	vmov	r0, s16
 8005adc:	4631      	mov	r1, r6
 8005ade:	f000 fe8d 	bl	80067fc <__mcmp>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	da67      	bge.n	8005bb6 <_dtoa_r+0x90e>
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	ee18 1a10 	vmov	r1, s16
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	220a      	movs	r2, #10
 8005af2:	2300      	movs	r3, #0
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 fc61 	bl	80063bc <__multadd>
 8005afa:	9b08      	ldr	r3, [sp, #32]
 8005afc:	ee08 0a10 	vmov	s16, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 81b1 	beq.w	8005e68 <_dtoa_r+0xbc0>
 8005b06:	2300      	movs	r3, #0
 8005b08:	4639      	mov	r1, r7
 8005b0a:	220a      	movs	r2, #10
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 fc55 	bl	80063bc <__multadd>
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	4607      	mov	r7, r0
 8005b18:	f300 808e 	bgt.w	8005c38 <_dtoa_r+0x990>
 8005b1c:	9b06      	ldr	r3, [sp, #24]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	dc51      	bgt.n	8005bc6 <_dtoa_r+0x91e>
 8005b22:	e089      	b.n	8005c38 <_dtoa_r+0x990>
 8005b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b2a:	e74b      	b.n	80059c4 <_dtoa_r+0x71c>
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	1e5e      	subs	r6, r3, #1
 8005b30:	9b07      	ldr	r3, [sp, #28]
 8005b32:	42b3      	cmp	r3, r6
 8005b34:	bfbf      	itttt	lt
 8005b36:	9b07      	ldrlt	r3, [sp, #28]
 8005b38:	9607      	strlt	r6, [sp, #28]
 8005b3a:	1af2      	sublt	r2, r6, r3
 8005b3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b3e:	bfb6      	itet	lt
 8005b40:	189b      	addlt	r3, r3, r2
 8005b42:	1b9e      	subge	r6, r3, r6
 8005b44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	bfb8      	it	lt
 8005b4a:	2600      	movlt	r6, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bfb7      	itett	lt
 8005b50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b58:	1a9d      	sublt	r5, r3, r2
 8005b5a:	2300      	movlt	r3, #0
 8005b5c:	e734      	b.n	80059c8 <_dtoa_r+0x720>
 8005b5e:	9e07      	ldr	r6, [sp, #28]
 8005b60:	9d04      	ldr	r5, [sp, #16]
 8005b62:	9f08      	ldr	r7, [sp, #32]
 8005b64:	e73b      	b.n	80059de <_dtoa_r+0x736>
 8005b66:	9a07      	ldr	r2, [sp, #28]
 8005b68:	e767      	b.n	8005a3a <_dtoa_r+0x792>
 8005b6a:	9b06      	ldr	r3, [sp, #24]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	dc18      	bgt.n	8005ba2 <_dtoa_r+0x8fa>
 8005b70:	f1ba 0f00 	cmp.w	sl, #0
 8005b74:	d115      	bne.n	8005ba2 <_dtoa_r+0x8fa>
 8005b76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b7a:	b993      	cbnz	r3, 8005ba2 <_dtoa_r+0x8fa>
 8005b7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b80:	0d1b      	lsrs	r3, r3, #20
 8005b82:	051b      	lsls	r3, r3, #20
 8005b84:	b183      	cbz	r3, 8005ba8 <_dtoa_r+0x900>
 8005b86:	9b04      	ldr	r3, [sp, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	9b05      	ldr	r3, [sp, #20]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	9305      	str	r3, [sp, #20]
 8005b92:	f04f 0801 	mov.w	r8, #1
 8005b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f af6a 	bne.w	8005a72 <_dtoa_r+0x7ca>
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	e76f      	b.n	8005a82 <_dtoa_r+0x7da>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	e7f6      	b.n	8005b96 <_dtoa_r+0x8ee>
 8005ba8:	4698      	mov	r8, r3
 8005baa:	e7f4      	b.n	8005b96 <_dtoa_r+0x8ee>
 8005bac:	f43f af7d 	beq.w	8005aaa <_dtoa_r+0x802>
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	301c      	adds	r0, #28
 8005bb4:	e772      	b.n	8005a9c <_dtoa_r+0x7f4>
 8005bb6:	9b03      	ldr	r3, [sp, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc37      	bgt.n	8005c2c <_dtoa_r+0x984>
 8005bbc:	9b06      	ldr	r3, [sp, #24]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	dd34      	ble.n	8005c2c <_dtoa_r+0x984>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	9302      	str	r3, [sp, #8]
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	b96b      	cbnz	r3, 8005be6 <_dtoa_r+0x93e>
 8005bca:	4631      	mov	r1, r6
 8005bcc:	2205      	movs	r2, #5
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 fbf4 	bl	80063bc <__multadd>
 8005bd4:	4601      	mov	r1, r0
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	ee18 0a10 	vmov	r0, s16
 8005bdc:	f000 fe0e 	bl	80067fc <__mcmp>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	f73f adbb 	bgt.w	800575c <_dtoa_r+0x4b4>
 8005be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be8:	9d01      	ldr	r5, [sp, #4]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f000 fbbf 	bl	8006378 <_Bfree>
 8005bfa:	2f00      	cmp	r7, #0
 8005bfc:	f43f aea4 	beq.w	8005948 <_dtoa_r+0x6a0>
 8005c00:	f1b8 0f00 	cmp.w	r8, #0
 8005c04:	d005      	beq.n	8005c12 <_dtoa_r+0x96a>
 8005c06:	45b8      	cmp	r8, r7
 8005c08:	d003      	beq.n	8005c12 <_dtoa_r+0x96a>
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f000 fbb3 	bl	8006378 <_Bfree>
 8005c12:	4639      	mov	r1, r7
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 fbaf 	bl	8006378 <_Bfree>
 8005c1a:	e695      	b.n	8005948 <_dtoa_r+0x6a0>
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	4637      	mov	r7, r6
 8005c20:	e7e1      	b.n	8005be6 <_dtoa_r+0x93e>
 8005c22:	9700      	str	r7, [sp, #0]
 8005c24:	4637      	mov	r7, r6
 8005c26:	e599      	b.n	800575c <_dtoa_r+0x4b4>
 8005c28:	40240000 	.word	0x40240000
 8005c2c:	9b08      	ldr	r3, [sp, #32]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80ca 	beq.w	8005dc8 <_dtoa_r+0xb20>
 8005c34:	9b03      	ldr	r3, [sp, #12]
 8005c36:	9302      	str	r3, [sp, #8]
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	dd05      	ble.n	8005c48 <_dtoa_r+0x9a0>
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 fd6b 	bl	800671c <__lshift>
 8005c46:	4607      	mov	r7, r0
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	d05b      	beq.n	8005d06 <_dtoa_r+0xa5e>
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fb51 	bl	80062f8 <_Balloc>
 8005c56:	4605      	mov	r5, r0
 8005c58:	b928      	cbnz	r0, 8005c66 <_dtoa_r+0x9be>
 8005c5a:	4b87      	ldr	r3, [pc, #540]	; (8005e78 <_dtoa_r+0xbd0>)
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c62:	f7ff bb3b 	b.w	80052dc <_dtoa_r+0x34>
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	3202      	adds	r2, #2
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	f107 010c 	add.w	r1, r7, #12
 8005c70:	300c      	adds	r0, #12
 8005c72:	f000 fb33 	bl	80062dc <memcpy>
 8005c76:	2201      	movs	r2, #1
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 fd4e 	bl	800671c <__lshift>
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	f103 0901 	add.w	r9, r3, #1
 8005c86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	f00a 0301 	and.w	r3, sl, #1
 8005c92:	46b8      	mov	r8, r7
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	4607      	mov	r7, r0
 8005c98:	4631      	mov	r1, r6
 8005c9a:	ee18 0a10 	vmov	r0, s16
 8005c9e:	f7ff fa77 	bl	8005190 <quorem>
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	9002      	str	r0, [sp, #8]
 8005ca6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005caa:	ee18 0a10 	vmov	r0, s16
 8005cae:	f000 fda5 	bl	80067fc <__mcmp>
 8005cb2:	463a      	mov	r2, r7
 8005cb4:	9003      	str	r0, [sp, #12]
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fdbb 	bl	8006834 <__mdiff>
 8005cbe:	68c2      	ldr	r2, [r0, #12]
 8005cc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	bb02      	cbnz	r2, 8005d0a <_dtoa_r+0xa62>
 8005cc8:	4601      	mov	r1, r0
 8005cca:	ee18 0a10 	vmov	r0, s16
 8005cce:	f000 fd95 	bl	80067fc <__mcmp>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	9207      	str	r2, [sp, #28]
 8005cda:	f000 fb4d 	bl	8006378 <_Bfree>
 8005cde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005ce2:	ea43 0102 	orr.w	r1, r3, r2
 8005ce6:	9b04      	ldr	r3, [sp, #16]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	464d      	mov	r5, r9
 8005cec:	d10f      	bne.n	8005d0e <_dtoa_r+0xa66>
 8005cee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cf2:	d02a      	beq.n	8005d4a <_dtoa_r+0xaa2>
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dd02      	ble.n	8005d00 <_dtoa_r+0xa58>
 8005cfa:	9b02      	ldr	r3, [sp, #8]
 8005cfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005d00:	f88b a000 	strb.w	sl, [fp]
 8005d04:	e775      	b.n	8005bf2 <_dtoa_r+0x94a>
 8005d06:	4638      	mov	r0, r7
 8005d08:	e7ba      	b.n	8005c80 <_dtoa_r+0x9d8>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	e7e2      	b.n	8005cd4 <_dtoa_r+0xa2c>
 8005d0e:	9b03      	ldr	r3, [sp, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	db04      	blt.n	8005d1e <_dtoa_r+0xa76>
 8005d14:	9906      	ldr	r1, [sp, #24]
 8005d16:	430b      	orrs	r3, r1
 8005d18:	9904      	ldr	r1, [sp, #16]
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	d122      	bne.n	8005d64 <_dtoa_r+0xabc>
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	ddee      	ble.n	8005d00 <_dtoa_r+0xa58>
 8005d22:	ee18 1a10 	vmov	r1, s16
 8005d26:	2201      	movs	r2, #1
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fcf7 	bl	800671c <__lshift>
 8005d2e:	4631      	mov	r1, r6
 8005d30:	ee08 0a10 	vmov	s16, r0
 8005d34:	f000 fd62 	bl	80067fc <__mcmp>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	dc03      	bgt.n	8005d44 <_dtoa_r+0xa9c>
 8005d3c:	d1e0      	bne.n	8005d00 <_dtoa_r+0xa58>
 8005d3e:	f01a 0f01 	tst.w	sl, #1
 8005d42:	d0dd      	beq.n	8005d00 <_dtoa_r+0xa58>
 8005d44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d48:	d1d7      	bne.n	8005cfa <_dtoa_r+0xa52>
 8005d4a:	2339      	movs	r3, #57	; 0x39
 8005d4c:	f88b 3000 	strb.w	r3, [fp]
 8005d50:	462b      	mov	r3, r5
 8005d52:	461d      	mov	r5, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d5a:	2a39      	cmp	r2, #57	; 0x39
 8005d5c:	d071      	beq.n	8005e42 <_dtoa_r+0xb9a>
 8005d5e:	3201      	adds	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e746      	b.n	8005bf2 <_dtoa_r+0x94a>
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	dd07      	ble.n	8005d78 <_dtoa_r+0xad0>
 8005d68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d6c:	d0ed      	beq.n	8005d4a <_dtoa_r+0xaa2>
 8005d6e:	f10a 0301 	add.w	r3, sl, #1
 8005d72:	f88b 3000 	strb.w	r3, [fp]
 8005d76:	e73c      	b.n	8005bf2 <_dtoa_r+0x94a>
 8005d78:	9b05      	ldr	r3, [sp, #20]
 8005d7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d7e:	4599      	cmp	r9, r3
 8005d80:	d047      	beq.n	8005e12 <_dtoa_r+0xb6a>
 8005d82:	ee18 1a10 	vmov	r1, s16
 8005d86:	2300      	movs	r3, #0
 8005d88:	220a      	movs	r2, #10
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 fb16 	bl	80063bc <__multadd>
 8005d90:	45b8      	cmp	r8, r7
 8005d92:	ee08 0a10 	vmov	s16, r0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	f04f 020a 	mov.w	r2, #10
 8005d9e:	4641      	mov	r1, r8
 8005da0:	4620      	mov	r0, r4
 8005da2:	d106      	bne.n	8005db2 <_dtoa_r+0xb0a>
 8005da4:	f000 fb0a 	bl	80063bc <__multadd>
 8005da8:	4680      	mov	r8, r0
 8005daa:	4607      	mov	r7, r0
 8005dac:	f109 0901 	add.w	r9, r9, #1
 8005db0:	e772      	b.n	8005c98 <_dtoa_r+0x9f0>
 8005db2:	f000 fb03 	bl	80063bc <__multadd>
 8005db6:	4639      	mov	r1, r7
 8005db8:	4680      	mov	r8, r0
 8005dba:	2300      	movs	r3, #0
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 fafc 	bl	80063bc <__multadd>
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	e7f1      	b.n	8005dac <_dtoa_r+0xb04>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	9d01      	ldr	r5, [sp, #4]
 8005dce:	ee18 0a10 	vmov	r0, s16
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	f7ff f9dc 	bl	8005190 <quorem>
 8005dd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ddc:	9b01      	ldr	r3, [sp, #4]
 8005dde:	f805 ab01 	strb.w	sl, [r5], #1
 8005de2:	1aea      	subs	r2, r5, r3
 8005de4:	9b02      	ldr	r3, [sp, #8]
 8005de6:	4293      	cmp	r3, r2
 8005de8:	dd09      	ble.n	8005dfe <_dtoa_r+0xb56>
 8005dea:	ee18 1a10 	vmov	r1, s16
 8005dee:	2300      	movs	r3, #0
 8005df0:	220a      	movs	r2, #10
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 fae2 	bl	80063bc <__multadd>
 8005df8:	ee08 0a10 	vmov	s16, r0
 8005dfc:	e7e7      	b.n	8005dce <_dtoa_r+0xb26>
 8005dfe:	9b02      	ldr	r3, [sp, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfc8      	it	gt
 8005e04:	461d      	movgt	r5, r3
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	bfd8      	it	le
 8005e0a:	2501      	movle	r5, #1
 8005e0c:	441d      	add	r5, r3
 8005e0e:	f04f 0800 	mov.w	r8, #0
 8005e12:	ee18 1a10 	vmov	r1, s16
 8005e16:	2201      	movs	r2, #1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fc7f 	bl	800671c <__lshift>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	ee08 0a10 	vmov	s16, r0
 8005e24:	f000 fcea 	bl	80067fc <__mcmp>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	dc91      	bgt.n	8005d50 <_dtoa_r+0xaa8>
 8005e2c:	d102      	bne.n	8005e34 <_dtoa_r+0xb8c>
 8005e2e:	f01a 0f01 	tst.w	sl, #1
 8005e32:	d18d      	bne.n	8005d50 <_dtoa_r+0xaa8>
 8005e34:	462b      	mov	r3, r5
 8005e36:	461d      	mov	r5, r3
 8005e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e3c:	2a30      	cmp	r2, #48	; 0x30
 8005e3e:	d0fa      	beq.n	8005e36 <_dtoa_r+0xb8e>
 8005e40:	e6d7      	b.n	8005bf2 <_dtoa_r+0x94a>
 8005e42:	9a01      	ldr	r2, [sp, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d184      	bne.n	8005d52 <_dtoa_r+0xaaa>
 8005e48:	9b00      	ldr	r3, [sp, #0]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2331      	movs	r3, #49	; 0x31
 8005e50:	7013      	strb	r3, [r2, #0]
 8005e52:	e6ce      	b.n	8005bf2 <_dtoa_r+0x94a>
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <_dtoa_r+0xbd4>)
 8005e56:	f7ff ba95 	b.w	8005384 <_dtoa_r+0xdc>
 8005e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f47f aa6e 	bne.w	800533e <_dtoa_r+0x96>
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <_dtoa_r+0xbd8>)
 8005e64:	f7ff ba8e 	b.w	8005384 <_dtoa_r+0xdc>
 8005e68:	9b02      	ldr	r3, [sp, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dcae      	bgt.n	8005dcc <_dtoa_r+0xb24>
 8005e6e:	9b06      	ldr	r3, [sp, #24]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	f73f aea8 	bgt.w	8005bc6 <_dtoa_r+0x91e>
 8005e76:	e7a9      	b.n	8005dcc <_dtoa_r+0xb24>
 8005e78:	08007457 	.word	0x08007457
 8005e7c:	080073b4 	.word	0x080073b4
 8005e80:	080073d8 	.word	0x080073d8

08005e84 <__sflush_r>:
 8005e84:	898a      	ldrh	r2, [r1, #12]
 8005e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	0710      	lsls	r0, r2, #28
 8005e8e:	460c      	mov	r4, r1
 8005e90:	d458      	bmi.n	8005f44 <__sflush_r+0xc0>
 8005e92:	684b      	ldr	r3, [r1, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dc05      	bgt.n	8005ea4 <__sflush_r+0x20>
 8005e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dc02      	bgt.n	8005ea4 <__sflush_r+0x20>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	d0f9      	beq.n	8005e9e <__sflush_r+0x1a>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005eb0:	682f      	ldr	r7, [r5, #0]
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	d032      	beq.n	8005f1c <__sflush_r+0x98>
 8005eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	075a      	lsls	r2, r3, #29
 8005ebc:	d505      	bpl.n	8005eca <__sflush_r+0x46>
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	1ac0      	subs	r0, r0, r3
 8005ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ec4:	b10b      	cbz	r3, 8005eca <__sflush_r+0x46>
 8005ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ec8:	1ac0      	subs	r0, r0, r3
 8005eca:	2300      	movs	r3, #0
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ed0:	6a21      	ldr	r1, [r4, #32]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b0      	blx	r6
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	d106      	bne.n	8005eea <__sflush_r+0x66>
 8005edc:	6829      	ldr	r1, [r5, #0]
 8005ede:	291d      	cmp	r1, #29
 8005ee0:	d82c      	bhi.n	8005f3c <__sflush_r+0xb8>
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	; (8005f8c <__sflush_r+0x108>)
 8005ee4:	40ca      	lsrs	r2, r1
 8005ee6:	07d6      	lsls	r6, r2, #31
 8005ee8:	d528      	bpl.n	8005f3c <__sflush_r+0xb8>
 8005eea:	2200      	movs	r2, #0
 8005eec:	6062      	str	r2, [r4, #4]
 8005eee:	04d9      	lsls	r1, r3, #19
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	6022      	str	r2, [r4, #0]
 8005ef4:	d504      	bpl.n	8005f00 <__sflush_r+0x7c>
 8005ef6:	1c42      	adds	r2, r0, #1
 8005ef8:	d101      	bne.n	8005efe <__sflush_r+0x7a>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	b903      	cbnz	r3, 8005f00 <__sflush_r+0x7c>
 8005efe:	6560      	str	r0, [r4, #84]	; 0x54
 8005f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f02:	602f      	str	r7, [r5, #0]
 8005f04:	2900      	cmp	r1, #0
 8005f06:	d0ca      	beq.n	8005e9e <__sflush_r+0x1a>
 8005f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f0c:	4299      	cmp	r1, r3
 8005f0e:	d002      	beq.n	8005f16 <__sflush_r+0x92>
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fd8b 	bl	8006a2c <_free_r>
 8005f16:	2000      	movs	r0, #0
 8005f18:	6360      	str	r0, [r4, #52]	; 0x34
 8005f1a:	e7c1      	b.n	8005ea0 <__sflush_r+0x1c>
 8005f1c:	6a21      	ldr	r1, [r4, #32]
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b0      	blx	r6
 8005f24:	1c41      	adds	r1, r0, #1
 8005f26:	d1c7      	bne.n	8005eb8 <__sflush_r+0x34>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0c4      	beq.n	8005eb8 <__sflush_r+0x34>
 8005f2e:	2b1d      	cmp	r3, #29
 8005f30:	d001      	beq.n	8005f36 <__sflush_r+0xb2>
 8005f32:	2b16      	cmp	r3, #22
 8005f34:	d101      	bne.n	8005f3a <__sflush_r+0xb6>
 8005f36:	602f      	str	r7, [r5, #0]
 8005f38:	e7b1      	b.n	8005e9e <__sflush_r+0x1a>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	e7ad      	b.n	8005ea0 <__sflush_r+0x1c>
 8005f44:	690f      	ldr	r7, [r1, #16]
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	d0a9      	beq.n	8005e9e <__sflush_r+0x1a>
 8005f4a:	0793      	lsls	r3, r2, #30
 8005f4c:	680e      	ldr	r6, [r1, #0]
 8005f4e:	bf08      	it	eq
 8005f50:	694b      	ldreq	r3, [r1, #20]
 8005f52:	600f      	str	r7, [r1, #0]
 8005f54:	bf18      	it	ne
 8005f56:	2300      	movne	r3, #0
 8005f58:	eba6 0807 	sub.w	r8, r6, r7
 8005f5c:	608b      	str	r3, [r1, #8]
 8005f5e:	f1b8 0f00 	cmp.w	r8, #0
 8005f62:	dd9c      	ble.n	8005e9e <__sflush_r+0x1a>
 8005f64:	6a21      	ldr	r1, [r4, #32]
 8005f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f68:	4643      	mov	r3, r8
 8005f6a:	463a      	mov	r2, r7
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b0      	blx	r6
 8005f70:	2800      	cmp	r0, #0
 8005f72:	dc06      	bgt.n	8005f82 <__sflush_r+0xfe>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	e78e      	b.n	8005ea0 <__sflush_r+0x1c>
 8005f82:	4407      	add	r7, r0
 8005f84:	eba8 0800 	sub.w	r8, r8, r0
 8005f88:	e7e9      	b.n	8005f5e <__sflush_r+0xda>
 8005f8a:	bf00      	nop
 8005f8c:	20400001 	.word	0x20400001

08005f90 <_fflush_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	690b      	ldr	r3, [r1, #16]
 8005f94:	4605      	mov	r5, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	b913      	cbnz	r3, 8005fa0 <_fflush_r+0x10>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	b118      	cbz	r0, 8005faa <_fflush_r+0x1a>
 8005fa2:	6983      	ldr	r3, [r0, #24]
 8005fa4:	b90b      	cbnz	r3, 8005faa <_fflush_r+0x1a>
 8005fa6:	f000 f887 	bl	80060b8 <__sinit>
 8005faa:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <_fflush_r+0x6c>)
 8005fac:	429c      	cmp	r4, r3
 8005fae:	d11b      	bne.n	8005fe8 <_fflush_r+0x58>
 8005fb0:	686c      	ldr	r4, [r5, #4]
 8005fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ef      	beq.n	8005f9a <_fflush_r+0xa>
 8005fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fbc:	07d0      	lsls	r0, r2, #31
 8005fbe:	d404      	bmi.n	8005fca <_fflush_r+0x3a>
 8005fc0:	0599      	lsls	r1, r3, #22
 8005fc2:	d402      	bmi.n	8005fca <_fflush_r+0x3a>
 8005fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fc6:	f000 f91a 	bl	80061fe <__retarget_lock_acquire_recursive>
 8005fca:	4628      	mov	r0, r5
 8005fcc:	4621      	mov	r1, r4
 8005fce:	f7ff ff59 	bl	8005e84 <__sflush_r>
 8005fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fd4:	07da      	lsls	r2, r3, #31
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	d4e0      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	059b      	lsls	r3, r3, #22
 8005fde:	d4dd      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fe2:	f000 f90d 	bl	8006200 <__retarget_lock_release_recursive>
 8005fe6:	e7d9      	b.n	8005f9c <_fflush_r+0xc>
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <_fflush_r+0x70>)
 8005fea:	429c      	cmp	r4, r3
 8005fec:	d101      	bne.n	8005ff2 <_fflush_r+0x62>
 8005fee:	68ac      	ldr	r4, [r5, #8]
 8005ff0:	e7df      	b.n	8005fb2 <_fflush_r+0x22>
 8005ff2:	4b04      	ldr	r3, [pc, #16]	; (8006004 <_fflush_r+0x74>)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	bf08      	it	eq
 8005ff8:	68ec      	ldreq	r4, [r5, #12]
 8005ffa:	e7da      	b.n	8005fb2 <_fflush_r+0x22>
 8005ffc:	08007488 	.word	0x08007488
 8006000:	080074a8 	.word	0x080074a8
 8006004:	08007468 	.word	0x08007468

08006008 <std>:
 8006008:	2300      	movs	r3, #0
 800600a:	b510      	push	{r4, lr}
 800600c:	4604      	mov	r4, r0
 800600e:	e9c0 3300 	strd	r3, r3, [r0]
 8006012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006016:	6083      	str	r3, [r0, #8]
 8006018:	8181      	strh	r1, [r0, #12]
 800601a:	6643      	str	r3, [r0, #100]	; 0x64
 800601c:	81c2      	strh	r2, [r0, #14]
 800601e:	6183      	str	r3, [r0, #24]
 8006020:	4619      	mov	r1, r3
 8006022:	2208      	movs	r2, #8
 8006024:	305c      	adds	r0, #92	; 0x5c
 8006026:	f7fe faf3 	bl	8004610 <memset>
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <std+0x38>)
 800602c:	6263      	str	r3, [r4, #36]	; 0x24
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <std+0x3c>)
 8006030:	62a3      	str	r3, [r4, #40]	; 0x28
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <std+0x40>)
 8006034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <std+0x44>)
 8006038:	6224      	str	r4, [r4, #32]
 800603a:	6323      	str	r3, [r4, #48]	; 0x30
 800603c:	bd10      	pop	{r4, pc}
 800603e:	bf00      	nop
 8006040:	08006ec1 	.word	0x08006ec1
 8006044:	08006ee3 	.word	0x08006ee3
 8006048:	08006f1b 	.word	0x08006f1b
 800604c:	08006f3f 	.word	0x08006f3f

08006050 <_cleanup_r>:
 8006050:	4901      	ldr	r1, [pc, #4]	; (8006058 <_cleanup_r+0x8>)
 8006052:	f000 b8af 	b.w	80061b4 <_fwalk_reent>
 8006056:	bf00      	nop
 8006058:	08005f91 	.word	0x08005f91

0800605c <__sfmoreglue>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	2268      	movs	r2, #104	; 0x68
 8006060:	1e4d      	subs	r5, r1, #1
 8006062:	4355      	muls	r5, r2
 8006064:	460e      	mov	r6, r1
 8006066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800606a:	f000 fd4b 	bl	8006b04 <_malloc_r>
 800606e:	4604      	mov	r4, r0
 8006070:	b140      	cbz	r0, 8006084 <__sfmoreglue+0x28>
 8006072:	2100      	movs	r1, #0
 8006074:	e9c0 1600 	strd	r1, r6, [r0]
 8006078:	300c      	adds	r0, #12
 800607a:	60a0      	str	r0, [r4, #8]
 800607c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006080:	f7fe fac6 	bl	8004610 <memset>
 8006084:	4620      	mov	r0, r4
 8006086:	bd70      	pop	{r4, r5, r6, pc}

08006088 <__sfp_lock_acquire>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__sfp_lock_acquire+0x8>)
 800608a:	f000 b8b8 	b.w	80061fe <__retarget_lock_acquire_recursive>
 800608e:	bf00      	nop
 8006090:	20000335 	.word	0x20000335

08006094 <__sfp_lock_release>:
 8006094:	4801      	ldr	r0, [pc, #4]	; (800609c <__sfp_lock_release+0x8>)
 8006096:	f000 b8b3 	b.w	8006200 <__retarget_lock_release_recursive>
 800609a:	bf00      	nop
 800609c:	20000335 	.word	0x20000335

080060a0 <__sinit_lock_acquire>:
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <__sinit_lock_acquire+0x8>)
 80060a2:	f000 b8ac 	b.w	80061fe <__retarget_lock_acquire_recursive>
 80060a6:	bf00      	nop
 80060a8:	20000336 	.word	0x20000336

080060ac <__sinit_lock_release>:
 80060ac:	4801      	ldr	r0, [pc, #4]	; (80060b4 <__sinit_lock_release+0x8>)
 80060ae:	f000 b8a7 	b.w	8006200 <__retarget_lock_release_recursive>
 80060b2:	bf00      	nop
 80060b4:	20000336 	.word	0x20000336

080060b8 <__sinit>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4604      	mov	r4, r0
 80060bc:	f7ff fff0 	bl	80060a0 <__sinit_lock_acquire>
 80060c0:	69a3      	ldr	r3, [r4, #24]
 80060c2:	b11b      	cbz	r3, 80060cc <__sinit+0x14>
 80060c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c8:	f7ff bff0 	b.w	80060ac <__sinit_lock_release>
 80060cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060d0:	6523      	str	r3, [r4, #80]	; 0x50
 80060d2:	4b13      	ldr	r3, [pc, #76]	; (8006120 <__sinit+0x68>)
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <__sinit+0x6c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80060da:	42a3      	cmp	r3, r4
 80060dc:	bf04      	itt	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	61a3      	streq	r3, [r4, #24]
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 f820 	bl	8006128 <__sfp>
 80060e8:	6060      	str	r0, [r4, #4]
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f81c 	bl	8006128 <__sfp>
 80060f0:	60a0      	str	r0, [r4, #8]
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 f818 	bl	8006128 <__sfp>
 80060f8:	2200      	movs	r2, #0
 80060fa:	60e0      	str	r0, [r4, #12]
 80060fc:	2104      	movs	r1, #4
 80060fe:	6860      	ldr	r0, [r4, #4]
 8006100:	f7ff ff82 	bl	8006008 <std>
 8006104:	68a0      	ldr	r0, [r4, #8]
 8006106:	2201      	movs	r2, #1
 8006108:	2109      	movs	r1, #9
 800610a:	f7ff ff7d 	bl	8006008 <std>
 800610e:	68e0      	ldr	r0, [r4, #12]
 8006110:	2202      	movs	r2, #2
 8006112:	2112      	movs	r1, #18
 8006114:	f7ff ff78 	bl	8006008 <std>
 8006118:	2301      	movs	r3, #1
 800611a:	61a3      	str	r3, [r4, #24]
 800611c:	e7d2      	b.n	80060c4 <__sinit+0xc>
 800611e:	bf00      	nop
 8006120:	080073a0 	.word	0x080073a0
 8006124:	08006051 	.word	0x08006051

08006128 <__sfp>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	4607      	mov	r7, r0
 800612c:	f7ff ffac 	bl	8006088 <__sfp_lock_acquire>
 8006130:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <__sfp+0x84>)
 8006132:	681e      	ldr	r6, [r3, #0]
 8006134:	69b3      	ldr	r3, [r6, #24]
 8006136:	b913      	cbnz	r3, 800613e <__sfp+0x16>
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff ffbd 	bl	80060b8 <__sinit>
 800613e:	3648      	adds	r6, #72	; 0x48
 8006140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006144:	3b01      	subs	r3, #1
 8006146:	d503      	bpl.n	8006150 <__sfp+0x28>
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	b30b      	cbz	r3, 8006190 <__sfp+0x68>
 800614c:	6836      	ldr	r6, [r6, #0]
 800614e:	e7f7      	b.n	8006140 <__sfp+0x18>
 8006150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006154:	b9d5      	cbnz	r5, 800618c <__sfp+0x64>
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <__sfp+0x88>)
 8006158:	60e3      	str	r3, [r4, #12]
 800615a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800615e:	6665      	str	r5, [r4, #100]	; 0x64
 8006160:	f000 f84c 	bl	80061fc <__retarget_lock_init_recursive>
 8006164:	f7ff ff96 	bl	8006094 <__sfp_lock_release>
 8006168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800616c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006170:	6025      	str	r5, [r4, #0]
 8006172:	61a5      	str	r5, [r4, #24]
 8006174:	2208      	movs	r2, #8
 8006176:	4629      	mov	r1, r5
 8006178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800617c:	f7fe fa48 	bl	8004610 <memset>
 8006180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006188:	4620      	mov	r0, r4
 800618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618c:	3468      	adds	r4, #104	; 0x68
 800618e:	e7d9      	b.n	8006144 <__sfp+0x1c>
 8006190:	2104      	movs	r1, #4
 8006192:	4638      	mov	r0, r7
 8006194:	f7ff ff62 	bl	800605c <__sfmoreglue>
 8006198:	4604      	mov	r4, r0
 800619a:	6030      	str	r0, [r6, #0]
 800619c:	2800      	cmp	r0, #0
 800619e:	d1d5      	bne.n	800614c <__sfp+0x24>
 80061a0:	f7ff ff78 	bl	8006094 <__sfp_lock_release>
 80061a4:	230c      	movs	r3, #12
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	e7ee      	b.n	8006188 <__sfp+0x60>
 80061aa:	bf00      	nop
 80061ac:	080073a0 	.word	0x080073a0
 80061b0:	ffff0001 	.word	0xffff0001

080061b4 <_fwalk_reent>:
 80061b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b8:	4606      	mov	r6, r0
 80061ba:	4688      	mov	r8, r1
 80061bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061c0:	2700      	movs	r7, #0
 80061c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061c6:	f1b9 0901 	subs.w	r9, r9, #1
 80061ca:	d505      	bpl.n	80061d8 <_fwalk_reent+0x24>
 80061cc:	6824      	ldr	r4, [r4, #0]
 80061ce:	2c00      	cmp	r4, #0
 80061d0:	d1f7      	bne.n	80061c2 <_fwalk_reent+0xe>
 80061d2:	4638      	mov	r0, r7
 80061d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d8:	89ab      	ldrh	r3, [r5, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d907      	bls.n	80061ee <_fwalk_reent+0x3a>
 80061de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e2:	3301      	adds	r3, #1
 80061e4:	d003      	beq.n	80061ee <_fwalk_reent+0x3a>
 80061e6:	4629      	mov	r1, r5
 80061e8:	4630      	mov	r0, r6
 80061ea:	47c0      	blx	r8
 80061ec:	4307      	orrs	r7, r0
 80061ee:	3568      	adds	r5, #104	; 0x68
 80061f0:	e7e9      	b.n	80061c6 <_fwalk_reent+0x12>
	...

080061f4 <_localeconv_r>:
 80061f4:	4800      	ldr	r0, [pc, #0]	; (80061f8 <_localeconv_r+0x4>)
 80061f6:	4770      	bx	lr
 80061f8:	20000174 	.word	0x20000174

080061fc <__retarget_lock_init_recursive>:
 80061fc:	4770      	bx	lr

080061fe <__retarget_lock_acquire_recursive>:
 80061fe:	4770      	bx	lr

08006200 <__retarget_lock_release_recursive>:
 8006200:	4770      	bx	lr

08006202 <__swhatbuf_r>:
 8006202:	b570      	push	{r4, r5, r6, lr}
 8006204:	460e      	mov	r6, r1
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	2900      	cmp	r1, #0
 800620c:	b096      	sub	sp, #88	; 0x58
 800620e:	4614      	mov	r4, r2
 8006210:	461d      	mov	r5, r3
 8006212:	da08      	bge.n	8006226 <__swhatbuf_r+0x24>
 8006214:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	602a      	str	r2, [r5, #0]
 800621c:	061a      	lsls	r2, r3, #24
 800621e:	d410      	bmi.n	8006242 <__swhatbuf_r+0x40>
 8006220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006224:	e00e      	b.n	8006244 <__swhatbuf_r+0x42>
 8006226:	466a      	mov	r2, sp
 8006228:	f000 fee0 	bl	8006fec <_fstat_r>
 800622c:	2800      	cmp	r0, #0
 800622e:	dbf1      	blt.n	8006214 <__swhatbuf_r+0x12>
 8006230:	9a01      	ldr	r2, [sp, #4]
 8006232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006236:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800623a:	425a      	negs	r2, r3
 800623c:	415a      	adcs	r2, r3
 800623e:	602a      	str	r2, [r5, #0]
 8006240:	e7ee      	b.n	8006220 <__swhatbuf_r+0x1e>
 8006242:	2340      	movs	r3, #64	; 0x40
 8006244:	2000      	movs	r0, #0
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	b016      	add	sp, #88	; 0x58
 800624a:	bd70      	pop	{r4, r5, r6, pc}

0800624c <__smakebuf_r>:
 800624c:	898b      	ldrh	r3, [r1, #12]
 800624e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006250:	079d      	lsls	r5, r3, #30
 8006252:	4606      	mov	r6, r0
 8006254:	460c      	mov	r4, r1
 8006256:	d507      	bpl.n	8006268 <__smakebuf_r+0x1c>
 8006258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	2301      	movs	r3, #1
 8006262:	6163      	str	r3, [r4, #20]
 8006264:	b002      	add	sp, #8
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	ab01      	add	r3, sp, #4
 800626a:	466a      	mov	r2, sp
 800626c:	f7ff ffc9 	bl	8006202 <__swhatbuf_r>
 8006270:	9900      	ldr	r1, [sp, #0]
 8006272:	4605      	mov	r5, r0
 8006274:	4630      	mov	r0, r6
 8006276:	f000 fc45 	bl	8006b04 <_malloc_r>
 800627a:	b948      	cbnz	r0, 8006290 <__smakebuf_r+0x44>
 800627c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006280:	059a      	lsls	r2, r3, #22
 8006282:	d4ef      	bmi.n	8006264 <__smakebuf_r+0x18>
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	e7e3      	b.n	8006258 <__smakebuf_r+0xc>
 8006290:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <__smakebuf_r+0x7c>)
 8006292:	62b3      	str	r3, [r6, #40]	; 0x28
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	6020      	str	r0, [r4, #0]
 8006298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	6163      	str	r3, [r4, #20]
 80062a2:	9b01      	ldr	r3, [sp, #4]
 80062a4:	6120      	str	r0, [r4, #16]
 80062a6:	b15b      	cbz	r3, 80062c0 <__smakebuf_r+0x74>
 80062a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ac:	4630      	mov	r0, r6
 80062ae:	f000 feaf 	bl	8007010 <_isatty_r>
 80062b2:	b128      	cbz	r0, 80062c0 <__smakebuf_r+0x74>
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	81a3      	strh	r3, [r4, #12]
 80062c0:	89a0      	ldrh	r0, [r4, #12]
 80062c2:	4305      	orrs	r5, r0
 80062c4:	81a5      	strh	r5, [r4, #12]
 80062c6:	e7cd      	b.n	8006264 <__smakebuf_r+0x18>
 80062c8:	08006051 	.word	0x08006051

080062cc <malloc>:
 80062cc:	4b02      	ldr	r3, [pc, #8]	; (80062d8 <malloc+0xc>)
 80062ce:	4601      	mov	r1, r0
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f000 bc17 	b.w	8006b04 <_malloc_r>
 80062d6:	bf00      	nop
 80062d8:	20000020 	.word	0x20000020

080062dc <memcpy>:
 80062dc:	440a      	add	r2, r1
 80062de:	4291      	cmp	r1, r2
 80062e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062e4:	d100      	bne.n	80062e8 <memcpy+0xc>
 80062e6:	4770      	bx	lr
 80062e8:	b510      	push	{r4, lr}
 80062ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062f2:	4291      	cmp	r1, r2
 80062f4:	d1f9      	bne.n	80062ea <memcpy+0xe>
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <_Balloc>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062fc:	4604      	mov	r4, r0
 80062fe:	460d      	mov	r5, r1
 8006300:	b976      	cbnz	r6, 8006320 <_Balloc+0x28>
 8006302:	2010      	movs	r0, #16
 8006304:	f7ff ffe2 	bl	80062cc <malloc>
 8006308:	4602      	mov	r2, r0
 800630a:	6260      	str	r0, [r4, #36]	; 0x24
 800630c:	b920      	cbnz	r0, 8006318 <_Balloc+0x20>
 800630e:	4b18      	ldr	r3, [pc, #96]	; (8006370 <_Balloc+0x78>)
 8006310:	4818      	ldr	r0, [pc, #96]	; (8006374 <_Balloc+0x7c>)
 8006312:	2166      	movs	r1, #102	; 0x66
 8006314:	f000 fe2a 	bl	8006f6c <__assert_func>
 8006318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800631c:	6006      	str	r6, [r0, #0]
 800631e:	60c6      	str	r6, [r0, #12]
 8006320:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006322:	68f3      	ldr	r3, [r6, #12]
 8006324:	b183      	cbz	r3, 8006348 <_Balloc+0x50>
 8006326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800632e:	b9b8      	cbnz	r0, 8006360 <_Balloc+0x68>
 8006330:	2101      	movs	r1, #1
 8006332:	fa01 f605 	lsl.w	r6, r1, r5
 8006336:	1d72      	adds	r2, r6, #5
 8006338:	0092      	lsls	r2, r2, #2
 800633a:	4620      	mov	r0, r4
 800633c:	f000 fb60 	bl	8006a00 <_calloc_r>
 8006340:	b160      	cbz	r0, 800635c <_Balloc+0x64>
 8006342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006346:	e00e      	b.n	8006366 <_Balloc+0x6e>
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	2104      	movs	r1, #4
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fb57 	bl	8006a00 <_calloc_r>
 8006352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006354:	60f0      	str	r0, [r6, #12]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e4      	bne.n	8006326 <_Balloc+0x2e>
 800635c:	2000      	movs	r0, #0
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	6802      	ldr	r2, [r0, #0]
 8006362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006366:	2300      	movs	r3, #0
 8006368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800636c:	e7f7      	b.n	800635e <_Balloc+0x66>
 800636e:	bf00      	nop
 8006370:	080073e5 	.word	0x080073e5
 8006374:	080074c8 	.word	0x080074c8

08006378 <_Bfree>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800637c:	4605      	mov	r5, r0
 800637e:	460c      	mov	r4, r1
 8006380:	b976      	cbnz	r6, 80063a0 <_Bfree+0x28>
 8006382:	2010      	movs	r0, #16
 8006384:	f7ff ffa2 	bl	80062cc <malloc>
 8006388:	4602      	mov	r2, r0
 800638a:	6268      	str	r0, [r5, #36]	; 0x24
 800638c:	b920      	cbnz	r0, 8006398 <_Bfree+0x20>
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <_Bfree+0x3c>)
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <_Bfree+0x40>)
 8006392:	218a      	movs	r1, #138	; 0x8a
 8006394:	f000 fdea 	bl	8006f6c <__assert_func>
 8006398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800639c:	6006      	str	r6, [r0, #0]
 800639e:	60c6      	str	r6, [r0, #12]
 80063a0:	b13c      	cbz	r4, 80063b2 <_Bfree+0x3a>
 80063a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063a4:	6862      	ldr	r2, [r4, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063ac:	6021      	str	r1, [r4, #0]
 80063ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	080073e5 	.word	0x080073e5
 80063b8:	080074c8 	.word	0x080074c8

080063bc <__multadd>:
 80063bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c0:	690d      	ldr	r5, [r1, #16]
 80063c2:	4607      	mov	r7, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	461e      	mov	r6, r3
 80063c8:	f101 0c14 	add.w	ip, r1, #20
 80063cc:	2000      	movs	r0, #0
 80063ce:	f8dc 3000 	ldr.w	r3, [ip]
 80063d2:	b299      	uxth	r1, r3
 80063d4:	fb02 6101 	mla	r1, r2, r1, r6
 80063d8:	0c1e      	lsrs	r6, r3, #16
 80063da:	0c0b      	lsrs	r3, r1, #16
 80063dc:	fb02 3306 	mla	r3, r2, r6, r3
 80063e0:	b289      	uxth	r1, r1
 80063e2:	3001      	adds	r0, #1
 80063e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063e8:	4285      	cmp	r5, r0
 80063ea:	f84c 1b04 	str.w	r1, [ip], #4
 80063ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063f2:	dcec      	bgt.n	80063ce <__multadd+0x12>
 80063f4:	b30e      	cbz	r6, 800643a <__multadd+0x7e>
 80063f6:	68a3      	ldr	r3, [r4, #8]
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc19      	bgt.n	8006430 <__multadd+0x74>
 80063fc:	6861      	ldr	r1, [r4, #4]
 80063fe:	4638      	mov	r0, r7
 8006400:	3101      	adds	r1, #1
 8006402:	f7ff ff79 	bl	80062f8 <_Balloc>
 8006406:	4680      	mov	r8, r0
 8006408:	b928      	cbnz	r0, 8006416 <__multadd+0x5a>
 800640a:	4602      	mov	r2, r0
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <__multadd+0x84>)
 800640e:	480d      	ldr	r0, [pc, #52]	; (8006444 <__multadd+0x88>)
 8006410:	21b5      	movs	r1, #181	; 0xb5
 8006412:	f000 fdab 	bl	8006f6c <__assert_func>
 8006416:	6922      	ldr	r2, [r4, #16]
 8006418:	3202      	adds	r2, #2
 800641a:	f104 010c 	add.w	r1, r4, #12
 800641e:	0092      	lsls	r2, r2, #2
 8006420:	300c      	adds	r0, #12
 8006422:	f7ff ff5b 	bl	80062dc <memcpy>
 8006426:	4621      	mov	r1, r4
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ffa5 	bl	8006378 <_Bfree>
 800642e:	4644      	mov	r4, r8
 8006430:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006434:	3501      	adds	r5, #1
 8006436:	615e      	str	r6, [r3, #20]
 8006438:	6125      	str	r5, [r4, #16]
 800643a:	4620      	mov	r0, r4
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006440:	08007457 	.word	0x08007457
 8006444:	080074c8 	.word	0x080074c8

08006448 <__hi0bits>:
 8006448:	0c03      	lsrs	r3, r0, #16
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	b9d3      	cbnz	r3, 8006484 <__hi0bits+0x3c>
 800644e:	0400      	lsls	r0, r0, #16
 8006450:	2310      	movs	r3, #16
 8006452:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006456:	bf04      	itt	eq
 8006458:	0200      	lsleq	r0, r0, #8
 800645a:	3308      	addeq	r3, #8
 800645c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006460:	bf04      	itt	eq
 8006462:	0100      	lsleq	r0, r0, #4
 8006464:	3304      	addeq	r3, #4
 8006466:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800646a:	bf04      	itt	eq
 800646c:	0080      	lsleq	r0, r0, #2
 800646e:	3302      	addeq	r3, #2
 8006470:	2800      	cmp	r0, #0
 8006472:	db05      	blt.n	8006480 <__hi0bits+0x38>
 8006474:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006478:	f103 0301 	add.w	r3, r3, #1
 800647c:	bf08      	it	eq
 800647e:	2320      	moveq	r3, #32
 8006480:	4618      	mov	r0, r3
 8006482:	4770      	bx	lr
 8006484:	2300      	movs	r3, #0
 8006486:	e7e4      	b.n	8006452 <__hi0bits+0xa>

08006488 <__lo0bits>:
 8006488:	6803      	ldr	r3, [r0, #0]
 800648a:	f013 0207 	ands.w	r2, r3, #7
 800648e:	4601      	mov	r1, r0
 8006490:	d00b      	beq.n	80064aa <__lo0bits+0x22>
 8006492:	07da      	lsls	r2, r3, #31
 8006494:	d423      	bmi.n	80064de <__lo0bits+0x56>
 8006496:	0798      	lsls	r0, r3, #30
 8006498:	bf49      	itett	mi
 800649a:	085b      	lsrmi	r3, r3, #1
 800649c:	089b      	lsrpl	r3, r3, #2
 800649e:	2001      	movmi	r0, #1
 80064a0:	600b      	strmi	r3, [r1, #0]
 80064a2:	bf5c      	itt	pl
 80064a4:	600b      	strpl	r3, [r1, #0]
 80064a6:	2002      	movpl	r0, #2
 80064a8:	4770      	bx	lr
 80064aa:	b298      	uxth	r0, r3
 80064ac:	b9a8      	cbnz	r0, 80064da <__lo0bits+0x52>
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	2010      	movs	r0, #16
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	b90a      	cbnz	r2, 80064ba <__lo0bits+0x32>
 80064b6:	3008      	adds	r0, #8
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	071a      	lsls	r2, r3, #28
 80064bc:	bf04      	itt	eq
 80064be:	091b      	lsreq	r3, r3, #4
 80064c0:	3004      	addeq	r0, #4
 80064c2:	079a      	lsls	r2, r3, #30
 80064c4:	bf04      	itt	eq
 80064c6:	089b      	lsreq	r3, r3, #2
 80064c8:	3002      	addeq	r0, #2
 80064ca:	07da      	lsls	r2, r3, #31
 80064cc:	d403      	bmi.n	80064d6 <__lo0bits+0x4e>
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	f100 0001 	add.w	r0, r0, #1
 80064d4:	d005      	beq.n	80064e2 <__lo0bits+0x5a>
 80064d6:	600b      	str	r3, [r1, #0]
 80064d8:	4770      	bx	lr
 80064da:	4610      	mov	r0, r2
 80064dc:	e7e9      	b.n	80064b2 <__lo0bits+0x2a>
 80064de:	2000      	movs	r0, #0
 80064e0:	4770      	bx	lr
 80064e2:	2020      	movs	r0, #32
 80064e4:	4770      	bx	lr
	...

080064e8 <__i2b>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	460c      	mov	r4, r1
 80064ec:	2101      	movs	r1, #1
 80064ee:	f7ff ff03 	bl	80062f8 <_Balloc>
 80064f2:	4602      	mov	r2, r0
 80064f4:	b928      	cbnz	r0, 8006502 <__i2b+0x1a>
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <__i2b+0x24>)
 80064f8:	4805      	ldr	r0, [pc, #20]	; (8006510 <__i2b+0x28>)
 80064fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064fe:	f000 fd35 	bl	8006f6c <__assert_func>
 8006502:	2301      	movs	r3, #1
 8006504:	6144      	str	r4, [r0, #20]
 8006506:	6103      	str	r3, [r0, #16]
 8006508:	bd10      	pop	{r4, pc}
 800650a:	bf00      	nop
 800650c:	08007457 	.word	0x08007457
 8006510:	080074c8 	.word	0x080074c8

08006514 <__multiply>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	4691      	mov	r9, r2
 800651a:	690a      	ldr	r2, [r1, #16]
 800651c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	bfb8      	it	lt
 8006524:	460b      	movlt	r3, r1
 8006526:	460c      	mov	r4, r1
 8006528:	bfbc      	itt	lt
 800652a:	464c      	movlt	r4, r9
 800652c:	4699      	movlt	r9, r3
 800652e:	6927      	ldr	r7, [r4, #16]
 8006530:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006534:	68a3      	ldr	r3, [r4, #8]
 8006536:	6861      	ldr	r1, [r4, #4]
 8006538:	eb07 060a 	add.w	r6, r7, sl
 800653c:	42b3      	cmp	r3, r6
 800653e:	b085      	sub	sp, #20
 8006540:	bfb8      	it	lt
 8006542:	3101      	addlt	r1, #1
 8006544:	f7ff fed8 	bl	80062f8 <_Balloc>
 8006548:	b930      	cbnz	r0, 8006558 <__multiply+0x44>
 800654a:	4602      	mov	r2, r0
 800654c:	4b44      	ldr	r3, [pc, #272]	; (8006660 <__multiply+0x14c>)
 800654e:	4845      	ldr	r0, [pc, #276]	; (8006664 <__multiply+0x150>)
 8006550:	f240 115d 	movw	r1, #349	; 0x15d
 8006554:	f000 fd0a 	bl	8006f6c <__assert_func>
 8006558:	f100 0514 	add.w	r5, r0, #20
 800655c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006560:	462b      	mov	r3, r5
 8006562:	2200      	movs	r2, #0
 8006564:	4543      	cmp	r3, r8
 8006566:	d321      	bcc.n	80065ac <__multiply+0x98>
 8006568:	f104 0314 	add.w	r3, r4, #20
 800656c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006570:	f109 0314 	add.w	r3, r9, #20
 8006574:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006578:	9202      	str	r2, [sp, #8]
 800657a:	1b3a      	subs	r2, r7, r4
 800657c:	3a15      	subs	r2, #21
 800657e:	f022 0203 	bic.w	r2, r2, #3
 8006582:	3204      	adds	r2, #4
 8006584:	f104 0115 	add.w	r1, r4, #21
 8006588:	428f      	cmp	r7, r1
 800658a:	bf38      	it	cc
 800658c:	2204      	movcc	r2, #4
 800658e:	9201      	str	r2, [sp, #4]
 8006590:	9a02      	ldr	r2, [sp, #8]
 8006592:	9303      	str	r3, [sp, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d80c      	bhi.n	80065b2 <__multiply+0x9e>
 8006598:	2e00      	cmp	r6, #0
 800659a:	dd03      	ble.n	80065a4 <__multiply+0x90>
 800659c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d05a      	beq.n	800665a <__multiply+0x146>
 80065a4:	6106      	str	r6, [r0, #16]
 80065a6:	b005      	add	sp, #20
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	f843 2b04 	str.w	r2, [r3], #4
 80065b0:	e7d8      	b.n	8006564 <__multiply+0x50>
 80065b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80065b6:	f1ba 0f00 	cmp.w	sl, #0
 80065ba:	d024      	beq.n	8006606 <__multiply+0xf2>
 80065bc:	f104 0e14 	add.w	lr, r4, #20
 80065c0:	46a9      	mov	r9, r5
 80065c2:	f04f 0c00 	mov.w	ip, #0
 80065c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065ca:	f8d9 1000 	ldr.w	r1, [r9]
 80065ce:	fa1f fb82 	uxth.w	fp, r2
 80065d2:	b289      	uxth	r1, r1
 80065d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80065d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80065dc:	f8d9 2000 	ldr.w	r2, [r9]
 80065e0:	4461      	add	r1, ip
 80065e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80065ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065ee:	b289      	uxth	r1, r1
 80065f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065f4:	4577      	cmp	r7, lr
 80065f6:	f849 1b04 	str.w	r1, [r9], #4
 80065fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065fe:	d8e2      	bhi.n	80065c6 <__multiply+0xb2>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	f845 c002 	str.w	ip, [r5, r2]
 8006606:	9a03      	ldr	r2, [sp, #12]
 8006608:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800660c:	3304      	adds	r3, #4
 800660e:	f1b9 0f00 	cmp.w	r9, #0
 8006612:	d020      	beq.n	8006656 <__multiply+0x142>
 8006614:	6829      	ldr	r1, [r5, #0]
 8006616:	f104 0c14 	add.w	ip, r4, #20
 800661a:	46ae      	mov	lr, r5
 800661c:	f04f 0a00 	mov.w	sl, #0
 8006620:	f8bc b000 	ldrh.w	fp, [ip]
 8006624:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006628:	fb09 220b 	mla	r2, r9, fp, r2
 800662c:	4492      	add	sl, r2
 800662e:	b289      	uxth	r1, r1
 8006630:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006634:	f84e 1b04 	str.w	r1, [lr], #4
 8006638:	f85c 2b04 	ldr.w	r2, [ip], #4
 800663c:	f8be 1000 	ldrh.w	r1, [lr]
 8006640:	0c12      	lsrs	r2, r2, #16
 8006642:	fb09 1102 	mla	r1, r9, r2, r1
 8006646:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800664a:	4567      	cmp	r7, ip
 800664c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006650:	d8e6      	bhi.n	8006620 <__multiply+0x10c>
 8006652:	9a01      	ldr	r2, [sp, #4]
 8006654:	50a9      	str	r1, [r5, r2]
 8006656:	3504      	adds	r5, #4
 8006658:	e79a      	b.n	8006590 <__multiply+0x7c>
 800665a:	3e01      	subs	r6, #1
 800665c:	e79c      	b.n	8006598 <__multiply+0x84>
 800665e:	bf00      	nop
 8006660:	08007457 	.word	0x08007457
 8006664:	080074c8 	.word	0x080074c8

08006668 <__pow5mult>:
 8006668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800666c:	4615      	mov	r5, r2
 800666e:	f012 0203 	ands.w	r2, r2, #3
 8006672:	4606      	mov	r6, r0
 8006674:	460f      	mov	r7, r1
 8006676:	d007      	beq.n	8006688 <__pow5mult+0x20>
 8006678:	4c25      	ldr	r4, [pc, #148]	; (8006710 <__pow5mult+0xa8>)
 800667a:	3a01      	subs	r2, #1
 800667c:	2300      	movs	r3, #0
 800667e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006682:	f7ff fe9b 	bl	80063bc <__multadd>
 8006686:	4607      	mov	r7, r0
 8006688:	10ad      	asrs	r5, r5, #2
 800668a:	d03d      	beq.n	8006708 <__pow5mult+0xa0>
 800668c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800668e:	b97c      	cbnz	r4, 80066b0 <__pow5mult+0x48>
 8006690:	2010      	movs	r0, #16
 8006692:	f7ff fe1b 	bl	80062cc <malloc>
 8006696:	4602      	mov	r2, r0
 8006698:	6270      	str	r0, [r6, #36]	; 0x24
 800669a:	b928      	cbnz	r0, 80066a8 <__pow5mult+0x40>
 800669c:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <__pow5mult+0xac>)
 800669e:	481e      	ldr	r0, [pc, #120]	; (8006718 <__pow5mult+0xb0>)
 80066a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066a4:	f000 fc62 	bl	8006f6c <__assert_func>
 80066a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066ac:	6004      	str	r4, [r0, #0]
 80066ae:	60c4      	str	r4, [r0, #12]
 80066b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066b8:	b94c      	cbnz	r4, 80066ce <__pow5mult+0x66>
 80066ba:	f240 2171 	movw	r1, #625	; 0x271
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff ff12 	bl	80064e8 <__i2b>
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80066ca:	4604      	mov	r4, r0
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	f04f 0900 	mov.w	r9, #0
 80066d2:	07eb      	lsls	r3, r5, #31
 80066d4:	d50a      	bpl.n	80066ec <__pow5mult+0x84>
 80066d6:	4639      	mov	r1, r7
 80066d8:	4622      	mov	r2, r4
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff ff1a 	bl	8006514 <__multiply>
 80066e0:	4639      	mov	r1, r7
 80066e2:	4680      	mov	r8, r0
 80066e4:	4630      	mov	r0, r6
 80066e6:	f7ff fe47 	bl	8006378 <_Bfree>
 80066ea:	4647      	mov	r7, r8
 80066ec:	106d      	asrs	r5, r5, #1
 80066ee:	d00b      	beq.n	8006708 <__pow5mult+0xa0>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	b938      	cbnz	r0, 8006704 <__pow5mult+0x9c>
 80066f4:	4622      	mov	r2, r4
 80066f6:	4621      	mov	r1, r4
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff ff0b 	bl	8006514 <__multiply>
 80066fe:	6020      	str	r0, [r4, #0]
 8006700:	f8c0 9000 	str.w	r9, [r0]
 8006704:	4604      	mov	r4, r0
 8006706:	e7e4      	b.n	80066d2 <__pow5mult+0x6a>
 8006708:	4638      	mov	r0, r7
 800670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670e:	bf00      	nop
 8006710:	08007618 	.word	0x08007618
 8006714:	080073e5 	.word	0x080073e5
 8006718:	080074c8 	.word	0x080074c8

0800671c <__lshift>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	6849      	ldr	r1, [r1, #4]
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	4607      	mov	r7, r0
 800672e:	4691      	mov	r9, r2
 8006730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006734:	f108 0601 	add.w	r6, r8, #1
 8006738:	42b3      	cmp	r3, r6
 800673a:	db0b      	blt.n	8006754 <__lshift+0x38>
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff fddb 	bl	80062f8 <_Balloc>
 8006742:	4605      	mov	r5, r0
 8006744:	b948      	cbnz	r0, 800675a <__lshift+0x3e>
 8006746:	4602      	mov	r2, r0
 8006748:	4b2a      	ldr	r3, [pc, #168]	; (80067f4 <__lshift+0xd8>)
 800674a:	482b      	ldr	r0, [pc, #172]	; (80067f8 <__lshift+0xdc>)
 800674c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006750:	f000 fc0c 	bl	8006f6c <__assert_func>
 8006754:	3101      	adds	r1, #1
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	e7ee      	b.n	8006738 <__lshift+0x1c>
 800675a:	2300      	movs	r3, #0
 800675c:	f100 0114 	add.w	r1, r0, #20
 8006760:	f100 0210 	add.w	r2, r0, #16
 8006764:	4618      	mov	r0, r3
 8006766:	4553      	cmp	r3, sl
 8006768:	db37      	blt.n	80067da <__lshift+0xbe>
 800676a:	6920      	ldr	r0, [r4, #16]
 800676c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006770:	f104 0314 	add.w	r3, r4, #20
 8006774:	f019 091f 	ands.w	r9, r9, #31
 8006778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800677c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006780:	d02f      	beq.n	80067e2 <__lshift+0xc6>
 8006782:	f1c9 0e20 	rsb	lr, r9, #32
 8006786:	468a      	mov	sl, r1
 8006788:	f04f 0c00 	mov.w	ip, #0
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	fa02 f209 	lsl.w	r2, r2, r9
 8006792:	ea42 020c 	orr.w	r2, r2, ip
 8006796:	f84a 2b04 	str.w	r2, [sl], #4
 800679a:	f853 2b04 	ldr.w	r2, [r3], #4
 800679e:	4298      	cmp	r0, r3
 80067a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067a4:	d8f2      	bhi.n	800678c <__lshift+0x70>
 80067a6:	1b03      	subs	r3, r0, r4
 80067a8:	3b15      	subs	r3, #21
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	3304      	adds	r3, #4
 80067b0:	f104 0215 	add.w	r2, r4, #21
 80067b4:	4290      	cmp	r0, r2
 80067b6:	bf38      	it	cc
 80067b8:	2304      	movcc	r3, #4
 80067ba:	f841 c003 	str.w	ip, [r1, r3]
 80067be:	f1bc 0f00 	cmp.w	ip, #0
 80067c2:	d001      	beq.n	80067c8 <__lshift+0xac>
 80067c4:	f108 0602 	add.w	r6, r8, #2
 80067c8:	3e01      	subs	r6, #1
 80067ca:	4638      	mov	r0, r7
 80067cc:	612e      	str	r6, [r5, #16]
 80067ce:	4621      	mov	r1, r4
 80067d0:	f7ff fdd2 	bl	8006378 <_Bfree>
 80067d4:	4628      	mov	r0, r5
 80067d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067da:	f842 0f04 	str.w	r0, [r2, #4]!
 80067de:	3301      	adds	r3, #1
 80067e0:	e7c1      	b.n	8006766 <__lshift+0x4a>
 80067e2:	3904      	subs	r1, #4
 80067e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80067ec:	4298      	cmp	r0, r3
 80067ee:	d8f9      	bhi.n	80067e4 <__lshift+0xc8>
 80067f0:	e7ea      	b.n	80067c8 <__lshift+0xac>
 80067f2:	bf00      	nop
 80067f4:	08007457 	.word	0x08007457
 80067f8:	080074c8 	.word	0x080074c8

080067fc <__mcmp>:
 80067fc:	b530      	push	{r4, r5, lr}
 80067fe:	6902      	ldr	r2, [r0, #16]
 8006800:	690c      	ldr	r4, [r1, #16]
 8006802:	1b12      	subs	r2, r2, r4
 8006804:	d10e      	bne.n	8006824 <__mcmp+0x28>
 8006806:	f100 0314 	add.w	r3, r0, #20
 800680a:	3114      	adds	r1, #20
 800680c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006810:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006814:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006818:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800681c:	42a5      	cmp	r5, r4
 800681e:	d003      	beq.n	8006828 <__mcmp+0x2c>
 8006820:	d305      	bcc.n	800682e <__mcmp+0x32>
 8006822:	2201      	movs	r2, #1
 8006824:	4610      	mov	r0, r2
 8006826:	bd30      	pop	{r4, r5, pc}
 8006828:	4283      	cmp	r3, r0
 800682a:	d3f3      	bcc.n	8006814 <__mcmp+0x18>
 800682c:	e7fa      	b.n	8006824 <__mcmp+0x28>
 800682e:	f04f 32ff 	mov.w	r2, #4294967295
 8006832:	e7f7      	b.n	8006824 <__mcmp+0x28>

08006834 <__mdiff>:
 8006834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	4606      	mov	r6, r0
 800683c:	4611      	mov	r1, r2
 800683e:	4620      	mov	r0, r4
 8006840:	4690      	mov	r8, r2
 8006842:	f7ff ffdb 	bl	80067fc <__mcmp>
 8006846:	1e05      	subs	r5, r0, #0
 8006848:	d110      	bne.n	800686c <__mdiff+0x38>
 800684a:	4629      	mov	r1, r5
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff fd53 	bl	80062f8 <_Balloc>
 8006852:	b930      	cbnz	r0, 8006862 <__mdiff+0x2e>
 8006854:	4b3a      	ldr	r3, [pc, #232]	; (8006940 <__mdiff+0x10c>)
 8006856:	4602      	mov	r2, r0
 8006858:	f240 2132 	movw	r1, #562	; 0x232
 800685c:	4839      	ldr	r0, [pc, #228]	; (8006944 <__mdiff+0x110>)
 800685e:	f000 fb85 	bl	8006f6c <__assert_func>
 8006862:	2301      	movs	r3, #1
 8006864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	bfa4      	itt	ge
 800686e:	4643      	movge	r3, r8
 8006870:	46a0      	movge	r8, r4
 8006872:	4630      	mov	r0, r6
 8006874:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006878:	bfa6      	itte	ge
 800687a:	461c      	movge	r4, r3
 800687c:	2500      	movge	r5, #0
 800687e:	2501      	movlt	r5, #1
 8006880:	f7ff fd3a 	bl	80062f8 <_Balloc>
 8006884:	b920      	cbnz	r0, 8006890 <__mdiff+0x5c>
 8006886:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <__mdiff+0x10c>)
 8006888:	4602      	mov	r2, r0
 800688a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800688e:	e7e5      	b.n	800685c <__mdiff+0x28>
 8006890:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006894:	6926      	ldr	r6, [r4, #16]
 8006896:	60c5      	str	r5, [r0, #12]
 8006898:	f104 0914 	add.w	r9, r4, #20
 800689c:	f108 0514 	add.w	r5, r8, #20
 80068a0:	f100 0e14 	add.w	lr, r0, #20
 80068a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80068a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068ac:	f108 0210 	add.w	r2, r8, #16
 80068b0:	46f2      	mov	sl, lr
 80068b2:	2100      	movs	r1, #0
 80068b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80068b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80068bc:	fa1f f883 	uxth.w	r8, r3
 80068c0:	fa11 f18b 	uxtah	r1, r1, fp
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	eba1 0808 	sub.w	r8, r1, r8
 80068ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80068d2:	fa1f f888 	uxth.w	r8, r8
 80068d6:	1419      	asrs	r1, r3, #16
 80068d8:	454e      	cmp	r6, r9
 80068da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80068de:	f84a 3b04 	str.w	r3, [sl], #4
 80068e2:	d8e7      	bhi.n	80068b4 <__mdiff+0x80>
 80068e4:	1b33      	subs	r3, r6, r4
 80068e6:	3b15      	subs	r3, #21
 80068e8:	f023 0303 	bic.w	r3, r3, #3
 80068ec:	3304      	adds	r3, #4
 80068ee:	3415      	adds	r4, #21
 80068f0:	42a6      	cmp	r6, r4
 80068f2:	bf38      	it	cc
 80068f4:	2304      	movcc	r3, #4
 80068f6:	441d      	add	r5, r3
 80068f8:	4473      	add	r3, lr
 80068fa:	469e      	mov	lr, r3
 80068fc:	462e      	mov	r6, r5
 80068fe:	4566      	cmp	r6, ip
 8006900:	d30e      	bcc.n	8006920 <__mdiff+0xec>
 8006902:	f10c 0203 	add.w	r2, ip, #3
 8006906:	1b52      	subs	r2, r2, r5
 8006908:	f022 0203 	bic.w	r2, r2, #3
 800690c:	3d03      	subs	r5, #3
 800690e:	45ac      	cmp	ip, r5
 8006910:	bf38      	it	cc
 8006912:	2200      	movcc	r2, #0
 8006914:	441a      	add	r2, r3
 8006916:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800691a:	b17b      	cbz	r3, 800693c <__mdiff+0x108>
 800691c:	6107      	str	r7, [r0, #16]
 800691e:	e7a3      	b.n	8006868 <__mdiff+0x34>
 8006920:	f856 8b04 	ldr.w	r8, [r6], #4
 8006924:	fa11 f288 	uxtah	r2, r1, r8
 8006928:	1414      	asrs	r4, r2, #16
 800692a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800692e:	b292      	uxth	r2, r2
 8006930:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006934:	f84e 2b04 	str.w	r2, [lr], #4
 8006938:	1421      	asrs	r1, r4, #16
 800693a:	e7e0      	b.n	80068fe <__mdiff+0xca>
 800693c:	3f01      	subs	r7, #1
 800693e:	e7ea      	b.n	8006916 <__mdiff+0xe2>
 8006940:	08007457 	.word	0x08007457
 8006944:	080074c8 	.word	0x080074c8

08006948 <__d2b>:
 8006948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4689      	mov	r9, r1
 800694e:	2101      	movs	r1, #1
 8006950:	ec57 6b10 	vmov	r6, r7, d0
 8006954:	4690      	mov	r8, r2
 8006956:	f7ff fccf 	bl	80062f8 <_Balloc>
 800695a:	4604      	mov	r4, r0
 800695c:	b930      	cbnz	r0, 800696c <__d2b+0x24>
 800695e:	4602      	mov	r2, r0
 8006960:	4b25      	ldr	r3, [pc, #148]	; (80069f8 <__d2b+0xb0>)
 8006962:	4826      	ldr	r0, [pc, #152]	; (80069fc <__d2b+0xb4>)
 8006964:	f240 310a 	movw	r1, #778	; 0x30a
 8006968:	f000 fb00 	bl	8006f6c <__assert_func>
 800696c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006974:	bb35      	cbnz	r5, 80069c4 <__d2b+0x7c>
 8006976:	2e00      	cmp	r6, #0
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	d028      	beq.n	80069ce <__d2b+0x86>
 800697c:	4668      	mov	r0, sp
 800697e:	9600      	str	r6, [sp, #0]
 8006980:	f7ff fd82 	bl	8006488 <__lo0bits>
 8006984:	9900      	ldr	r1, [sp, #0]
 8006986:	b300      	cbz	r0, 80069ca <__d2b+0x82>
 8006988:	9a01      	ldr	r2, [sp, #4]
 800698a:	f1c0 0320 	rsb	r3, r0, #32
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	430b      	orrs	r3, r1
 8006994:	40c2      	lsrs	r2, r0
 8006996:	6163      	str	r3, [r4, #20]
 8006998:	9201      	str	r2, [sp, #4]
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	61a3      	str	r3, [r4, #24]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2202      	movne	r2, #2
 80069a4:	2201      	moveq	r2, #1
 80069a6:	6122      	str	r2, [r4, #16]
 80069a8:	b1d5      	cbz	r5, 80069e0 <__d2b+0x98>
 80069aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069ae:	4405      	add	r5, r0
 80069b0:	f8c9 5000 	str.w	r5, [r9]
 80069b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069b8:	f8c8 0000 	str.w	r0, [r8]
 80069bc:	4620      	mov	r0, r4
 80069be:	b003      	add	sp, #12
 80069c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c8:	e7d5      	b.n	8006976 <__d2b+0x2e>
 80069ca:	6161      	str	r1, [r4, #20]
 80069cc:	e7e5      	b.n	800699a <__d2b+0x52>
 80069ce:	a801      	add	r0, sp, #4
 80069d0:	f7ff fd5a 	bl	8006488 <__lo0bits>
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	6163      	str	r3, [r4, #20]
 80069d8:	2201      	movs	r2, #1
 80069da:	6122      	str	r2, [r4, #16]
 80069dc:	3020      	adds	r0, #32
 80069de:	e7e3      	b.n	80069a8 <__d2b+0x60>
 80069e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069e8:	f8c9 0000 	str.w	r0, [r9]
 80069ec:	6918      	ldr	r0, [r3, #16]
 80069ee:	f7ff fd2b 	bl	8006448 <__hi0bits>
 80069f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069f6:	e7df      	b.n	80069b8 <__d2b+0x70>
 80069f8:	08007457 	.word	0x08007457
 80069fc:	080074c8 	.word	0x080074c8

08006a00 <_calloc_r>:
 8006a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a02:	fba1 2402 	umull	r2, r4, r1, r2
 8006a06:	b94c      	cbnz	r4, 8006a1c <_calloc_r+0x1c>
 8006a08:	4611      	mov	r1, r2
 8006a0a:	9201      	str	r2, [sp, #4]
 8006a0c:	f000 f87a 	bl	8006b04 <_malloc_r>
 8006a10:	9a01      	ldr	r2, [sp, #4]
 8006a12:	4605      	mov	r5, r0
 8006a14:	b930      	cbnz	r0, 8006a24 <_calloc_r+0x24>
 8006a16:	4628      	mov	r0, r5
 8006a18:	b003      	add	sp, #12
 8006a1a:	bd30      	pop	{r4, r5, pc}
 8006a1c:	220c      	movs	r2, #12
 8006a1e:	6002      	str	r2, [r0, #0]
 8006a20:	2500      	movs	r5, #0
 8006a22:	e7f8      	b.n	8006a16 <_calloc_r+0x16>
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7fd fdf3 	bl	8004610 <memset>
 8006a2a:	e7f4      	b.n	8006a16 <_calloc_r+0x16>

08006a2c <_free_r>:
 8006a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	d044      	beq.n	8006abc <_free_r+0x90>
 8006a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a36:	9001      	str	r0, [sp, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a3e:	bfb8      	it	lt
 8006a40:	18e4      	addlt	r4, r4, r3
 8006a42:	f000 fb19 	bl	8007078 <__malloc_lock>
 8006a46:	4a1e      	ldr	r2, [pc, #120]	; (8006ac0 <_free_r+0x94>)
 8006a48:	9801      	ldr	r0, [sp, #4]
 8006a4a:	6813      	ldr	r3, [r2, #0]
 8006a4c:	b933      	cbnz	r3, 8006a5c <_free_r+0x30>
 8006a4e:	6063      	str	r3, [r4, #4]
 8006a50:	6014      	str	r4, [r2, #0]
 8006a52:	b003      	add	sp, #12
 8006a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a58:	f000 bb14 	b.w	8007084 <__malloc_unlock>
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d908      	bls.n	8006a72 <_free_r+0x46>
 8006a60:	6825      	ldr	r5, [r4, #0]
 8006a62:	1961      	adds	r1, r4, r5
 8006a64:	428b      	cmp	r3, r1
 8006a66:	bf01      	itttt	eq
 8006a68:	6819      	ldreq	r1, [r3, #0]
 8006a6a:	685b      	ldreq	r3, [r3, #4]
 8006a6c:	1949      	addeq	r1, r1, r5
 8006a6e:	6021      	streq	r1, [r4, #0]
 8006a70:	e7ed      	b.n	8006a4e <_free_r+0x22>
 8006a72:	461a      	mov	r2, r3
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	b10b      	cbz	r3, 8006a7c <_free_r+0x50>
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d9fa      	bls.n	8006a72 <_free_r+0x46>
 8006a7c:	6811      	ldr	r1, [r2, #0]
 8006a7e:	1855      	adds	r5, r2, r1
 8006a80:	42a5      	cmp	r5, r4
 8006a82:	d10b      	bne.n	8006a9c <_free_r+0x70>
 8006a84:	6824      	ldr	r4, [r4, #0]
 8006a86:	4421      	add	r1, r4
 8006a88:	1854      	adds	r4, r2, r1
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	d1e0      	bne.n	8006a52 <_free_r+0x26>
 8006a90:	681c      	ldr	r4, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	6053      	str	r3, [r2, #4]
 8006a96:	4421      	add	r1, r4
 8006a98:	6011      	str	r1, [r2, #0]
 8006a9a:	e7da      	b.n	8006a52 <_free_r+0x26>
 8006a9c:	d902      	bls.n	8006aa4 <_free_r+0x78>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	6003      	str	r3, [r0, #0]
 8006aa2:	e7d6      	b.n	8006a52 <_free_r+0x26>
 8006aa4:	6825      	ldr	r5, [r4, #0]
 8006aa6:	1961      	adds	r1, r4, r5
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	bf04      	itt	eq
 8006aac:	6819      	ldreq	r1, [r3, #0]
 8006aae:	685b      	ldreq	r3, [r3, #4]
 8006ab0:	6063      	str	r3, [r4, #4]
 8006ab2:	bf04      	itt	eq
 8006ab4:	1949      	addeq	r1, r1, r5
 8006ab6:	6021      	streq	r1, [r4, #0]
 8006ab8:	6054      	str	r4, [r2, #4]
 8006aba:	e7ca      	b.n	8006a52 <_free_r+0x26>
 8006abc:	b003      	add	sp, #12
 8006abe:	bd30      	pop	{r4, r5, pc}
 8006ac0:	20000338 	.word	0x20000338

08006ac4 <sbrk_aligned>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4e0e      	ldr	r6, [pc, #56]	; (8006b00 <sbrk_aligned+0x3c>)
 8006ac8:	460c      	mov	r4, r1
 8006aca:	6831      	ldr	r1, [r6, #0]
 8006acc:	4605      	mov	r5, r0
 8006ace:	b911      	cbnz	r1, 8006ad6 <sbrk_aligned+0x12>
 8006ad0:	f000 f9e6 	bl	8006ea0 <_sbrk_r>
 8006ad4:	6030      	str	r0, [r6, #0]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f9e1 	bl	8006ea0 <_sbrk_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	d00a      	beq.n	8006af8 <sbrk_aligned+0x34>
 8006ae2:	1cc4      	adds	r4, r0, #3
 8006ae4:	f024 0403 	bic.w	r4, r4, #3
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d007      	beq.n	8006afc <sbrk_aligned+0x38>
 8006aec:	1a21      	subs	r1, r4, r0
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 f9d6 	bl	8006ea0 <_sbrk_r>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d101      	bne.n	8006afc <sbrk_aligned+0x38>
 8006af8:	f04f 34ff 	mov.w	r4, #4294967295
 8006afc:	4620      	mov	r0, r4
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	2000033c 	.word	0x2000033c

08006b04 <_malloc_r>:
 8006b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b08:	1ccd      	adds	r5, r1, #3
 8006b0a:	f025 0503 	bic.w	r5, r5, #3
 8006b0e:	3508      	adds	r5, #8
 8006b10:	2d0c      	cmp	r5, #12
 8006b12:	bf38      	it	cc
 8006b14:	250c      	movcc	r5, #12
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	4607      	mov	r7, r0
 8006b1a:	db01      	blt.n	8006b20 <_malloc_r+0x1c>
 8006b1c:	42a9      	cmp	r1, r5
 8006b1e:	d905      	bls.n	8006b2c <_malloc_r+0x28>
 8006b20:	230c      	movs	r3, #12
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	2600      	movs	r6, #0
 8006b26:	4630      	mov	r0, r6
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	4e2e      	ldr	r6, [pc, #184]	; (8006be8 <_malloc_r+0xe4>)
 8006b2e:	f000 faa3 	bl	8007078 <__malloc_lock>
 8006b32:	6833      	ldr	r3, [r6, #0]
 8006b34:	461c      	mov	r4, r3
 8006b36:	bb34      	cbnz	r4, 8006b86 <_malloc_r+0x82>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f7ff ffc2 	bl	8006ac4 <sbrk_aligned>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	4604      	mov	r4, r0
 8006b44:	d14d      	bne.n	8006be2 <_malloc_r+0xde>
 8006b46:	6834      	ldr	r4, [r6, #0]
 8006b48:	4626      	mov	r6, r4
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d140      	bne.n	8006bd0 <_malloc_r+0xcc>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	4631      	mov	r1, r6
 8006b52:	4638      	mov	r0, r7
 8006b54:	eb04 0803 	add.w	r8, r4, r3
 8006b58:	f000 f9a2 	bl	8006ea0 <_sbrk_r>
 8006b5c:	4580      	cmp	r8, r0
 8006b5e:	d13a      	bne.n	8006bd6 <_malloc_r+0xd2>
 8006b60:	6821      	ldr	r1, [r4, #0]
 8006b62:	3503      	adds	r5, #3
 8006b64:	1a6d      	subs	r5, r5, r1
 8006b66:	f025 0503 	bic.w	r5, r5, #3
 8006b6a:	3508      	adds	r5, #8
 8006b6c:	2d0c      	cmp	r5, #12
 8006b6e:	bf38      	it	cc
 8006b70:	250c      	movcc	r5, #12
 8006b72:	4629      	mov	r1, r5
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff ffa5 	bl	8006ac4 <sbrk_aligned>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d02b      	beq.n	8006bd6 <_malloc_r+0xd2>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	442b      	add	r3, r5
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	e00e      	b.n	8006ba4 <_malloc_r+0xa0>
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	1b52      	subs	r2, r2, r5
 8006b8a:	d41e      	bmi.n	8006bca <_malloc_r+0xc6>
 8006b8c:	2a0b      	cmp	r2, #11
 8006b8e:	d916      	bls.n	8006bbe <_malloc_r+0xba>
 8006b90:	1961      	adds	r1, r4, r5
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	6025      	str	r5, [r4, #0]
 8006b96:	bf18      	it	ne
 8006b98:	6059      	strne	r1, [r3, #4]
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	bf08      	it	eq
 8006b9e:	6031      	streq	r1, [r6, #0]
 8006ba0:	5162      	str	r2, [r4, r5]
 8006ba2:	604b      	str	r3, [r1, #4]
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f104 060b 	add.w	r6, r4, #11
 8006baa:	f000 fa6b 	bl	8007084 <__malloc_unlock>
 8006bae:	f026 0607 	bic.w	r6, r6, #7
 8006bb2:	1d23      	adds	r3, r4, #4
 8006bb4:	1af2      	subs	r2, r6, r3
 8006bb6:	d0b6      	beq.n	8006b26 <_malloc_r+0x22>
 8006bb8:	1b9b      	subs	r3, r3, r6
 8006bba:	50a3      	str	r3, [r4, r2]
 8006bbc:	e7b3      	b.n	8006b26 <_malloc_r+0x22>
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	bf0c      	ite	eq
 8006bc4:	6032      	streq	r2, [r6, #0]
 8006bc6:	605a      	strne	r2, [r3, #4]
 8006bc8:	e7ec      	b.n	8006ba4 <_malloc_r+0xa0>
 8006bca:	4623      	mov	r3, r4
 8006bcc:	6864      	ldr	r4, [r4, #4]
 8006bce:	e7b2      	b.n	8006b36 <_malloc_r+0x32>
 8006bd0:	4634      	mov	r4, r6
 8006bd2:	6876      	ldr	r6, [r6, #4]
 8006bd4:	e7b9      	b.n	8006b4a <_malloc_r+0x46>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f000 fa52 	bl	8007084 <__malloc_unlock>
 8006be0:	e7a1      	b.n	8006b26 <_malloc_r+0x22>
 8006be2:	6025      	str	r5, [r4, #0]
 8006be4:	e7de      	b.n	8006ba4 <_malloc_r+0xa0>
 8006be6:	bf00      	nop
 8006be8:	20000338 	.word	0x20000338

08006bec <__sfputc_r>:
 8006bec:	6893      	ldr	r3, [r2, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	b410      	push	{r4}
 8006bf4:	6093      	str	r3, [r2, #8]
 8006bf6:	da08      	bge.n	8006c0a <__sfputc_r+0x1e>
 8006bf8:	6994      	ldr	r4, [r2, #24]
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	db01      	blt.n	8006c02 <__sfputc_r+0x16>
 8006bfe:	290a      	cmp	r1, #10
 8006c00:	d103      	bne.n	8006c0a <__sfputc_r+0x1e>
 8006c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c06:	f7fe ba03 	b.w	8005010 <__swbuf_r>
 8006c0a:	6813      	ldr	r3, [r2, #0]
 8006c0c:	1c58      	adds	r0, r3, #1
 8006c0e:	6010      	str	r0, [r2, #0]
 8006c10:	7019      	strb	r1, [r3, #0]
 8006c12:	4608      	mov	r0, r1
 8006c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <__sfputs_r>:
 8006c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	460f      	mov	r7, r1
 8006c20:	4614      	mov	r4, r2
 8006c22:	18d5      	adds	r5, r2, r3
 8006c24:	42ac      	cmp	r4, r5
 8006c26:	d101      	bne.n	8006c2c <__sfputs_r+0x12>
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e007      	b.n	8006c3c <__sfputs_r+0x22>
 8006c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c30:	463a      	mov	r2, r7
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff ffda 	bl	8006bec <__sfputc_r>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d1f3      	bne.n	8006c24 <__sfputs_r+0xa>
 8006c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c40 <_vfiprintf_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	460d      	mov	r5, r1
 8006c46:	b09d      	sub	sp, #116	; 0x74
 8006c48:	4614      	mov	r4, r2
 8006c4a:	4698      	mov	r8, r3
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	b118      	cbz	r0, 8006c58 <_vfiprintf_r+0x18>
 8006c50:	6983      	ldr	r3, [r0, #24]
 8006c52:	b90b      	cbnz	r3, 8006c58 <_vfiprintf_r+0x18>
 8006c54:	f7ff fa30 	bl	80060b8 <__sinit>
 8006c58:	4b89      	ldr	r3, [pc, #548]	; (8006e80 <_vfiprintf_r+0x240>)
 8006c5a:	429d      	cmp	r5, r3
 8006c5c:	d11b      	bne.n	8006c96 <_vfiprintf_r+0x56>
 8006c5e:	6875      	ldr	r5, [r6, #4]
 8006c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c62:	07d9      	lsls	r1, r3, #31
 8006c64:	d405      	bmi.n	8006c72 <_vfiprintf_r+0x32>
 8006c66:	89ab      	ldrh	r3, [r5, #12]
 8006c68:	059a      	lsls	r2, r3, #22
 8006c6a:	d402      	bmi.n	8006c72 <_vfiprintf_r+0x32>
 8006c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c6e:	f7ff fac6 	bl	80061fe <__retarget_lock_acquire_recursive>
 8006c72:	89ab      	ldrh	r3, [r5, #12]
 8006c74:	071b      	lsls	r3, r3, #28
 8006c76:	d501      	bpl.n	8006c7c <_vfiprintf_r+0x3c>
 8006c78:	692b      	ldr	r3, [r5, #16]
 8006c7a:	b9eb      	cbnz	r3, 8006cb8 <_vfiprintf_r+0x78>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7fe fa18 	bl	80050b4 <__swsetup_r>
 8006c84:	b1c0      	cbz	r0, 8006cb8 <_vfiprintf_r+0x78>
 8006c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c88:	07dc      	lsls	r4, r3, #31
 8006c8a:	d50e      	bpl.n	8006caa <_vfiprintf_r+0x6a>
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	b01d      	add	sp, #116	; 0x74
 8006c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c96:	4b7b      	ldr	r3, [pc, #492]	; (8006e84 <_vfiprintf_r+0x244>)
 8006c98:	429d      	cmp	r5, r3
 8006c9a:	d101      	bne.n	8006ca0 <_vfiprintf_r+0x60>
 8006c9c:	68b5      	ldr	r5, [r6, #8]
 8006c9e:	e7df      	b.n	8006c60 <_vfiprintf_r+0x20>
 8006ca0:	4b79      	ldr	r3, [pc, #484]	; (8006e88 <_vfiprintf_r+0x248>)
 8006ca2:	429d      	cmp	r5, r3
 8006ca4:	bf08      	it	eq
 8006ca6:	68f5      	ldreq	r5, [r6, #12]
 8006ca8:	e7da      	b.n	8006c60 <_vfiprintf_r+0x20>
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	0598      	lsls	r0, r3, #22
 8006cae:	d4ed      	bmi.n	8006c8c <_vfiprintf_r+0x4c>
 8006cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cb2:	f7ff faa5 	bl	8006200 <__retarget_lock_release_recursive>
 8006cb6:	e7e9      	b.n	8006c8c <_vfiprintf_r+0x4c>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9309      	str	r3, [sp, #36]	; 0x24
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cc6:	2330      	movs	r3, #48	; 0x30
 8006cc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e8c <_vfiprintf_r+0x24c>
 8006ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cd0:	f04f 0901 	mov.w	r9, #1
 8006cd4:	4623      	mov	r3, r4
 8006cd6:	469a      	mov	sl, r3
 8006cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cdc:	b10a      	cbz	r2, 8006ce2 <_vfiprintf_r+0xa2>
 8006cde:	2a25      	cmp	r2, #37	; 0x25
 8006ce0:	d1f9      	bne.n	8006cd6 <_vfiprintf_r+0x96>
 8006ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ce6:	d00b      	beq.n	8006d00 <_vfiprintf_r+0xc0>
 8006ce8:	465b      	mov	r3, fp
 8006cea:	4622      	mov	r2, r4
 8006cec:	4629      	mov	r1, r5
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ff93 	bl	8006c1a <__sfputs_r>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f000 80aa 	beq.w	8006e4e <_vfiprintf_r+0x20e>
 8006cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cfc:	445a      	add	r2, fp
 8006cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8006d00:	f89a 3000 	ldrb.w	r3, [sl]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80a2 	beq.w	8006e4e <_vfiprintf_r+0x20e>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d14:	f10a 0a01 	add.w	sl, sl, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	9307      	str	r3, [sp, #28]
 8006d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d20:	931a      	str	r3, [sp, #104]	; 0x68
 8006d22:	4654      	mov	r4, sl
 8006d24:	2205      	movs	r2, #5
 8006d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d2a:	4858      	ldr	r0, [pc, #352]	; (8006e8c <_vfiprintf_r+0x24c>)
 8006d2c:	f7f9 fa68 	bl	8000200 <memchr>
 8006d30:	9a04      	ldr	r2, [sp, #16]
 8006d32:	b9d8      	cbnz	r0, 8006d6c <_vfiprintf_r+0x12c>
 8006d34:	06d1      	lsls	r1, r2, #27
 8006d36:	bf44      	itt	mi
 8006d38:	2320      	movmi	r3, #32
 8006d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d3e:	0713      	lsls	r3, r2, #28
 8006d40:	bf44      	itt	mi
 8006d42:	232b      	movmi	r3, #43	; 0x2b
 8006d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d48:	f89a 3000 	ldrb.w	r3, [sl]
 8006d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4e:	d015      	beq.n	8006d7c <_vfiprintf_r+0x13c>
 8006d50:	9a07      	ldr	r2, [sp, #28]
 8006d52:	4654      	mov	r4, sl
 8006d54:	2000      	movs	r0, #0
 8006d56:	f04f 0c0a 	mov.w	ip, #10
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d60:	3b30      	subs	r3, #48	; 0x30
 8006d62:	2b09      	cmp	r3, #9
 8006d64:	d94e      	bls.n	8006e04 <_vfiprintf_r+0x1c4>
 8006d66:	b1b0      	cbz	r0, 8006d96 <_vfiprintf_r+0x156>
 8006d68:	9207      	str	r2, [sp, #28]
 8006d6a:	e014      	b.n	8006d96 <_vfiprintf_r+0x156>
 8006d6c:	eba0 0308 	sub.w	r3, r0, r8
 8006d70:	fa09 f303 	lsl.w	r3, r9, r3
 8006d74:	4313      	orrs	r3, r2
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	46a2      	mov	sl, r4
 8006d7a:	e7d2      	b.n	8006d22 <_vfiprintf_r+0xe2>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	1d19      	adds	r1, r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	9103      	str	r1, [sp, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bfbb      	ittet	lt
 8006d88:	425b      	neglt	r3, r3
 8006d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d8e:	9307      	strge	r3, [sp, #28]
 8006d90:	9307      	strlt	r3, [sp, #28]
 8006d92:	bfb8      	it	lt
 8006d94:	9204      	strlt	r2, [sp, #16]
 8006d96:	7823      	ldrb	r3, [r4, #0]
 8006d98:	2b2e      	cmp	r3, #46	; 0x2e
 8006d9a:	d10c      	bne.n	8006db6 <_vfiprintf_r+0x176>
 8006d9c:	7863      	ldrb	r3, [r4, #1]
 8006d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8006da0:	d135      	bne.n	8006e0e <_vfiprintf_r+0x1ce>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	1d1a      	adds	r2, r3, #4
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	9203      	str	r2, [sp, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bfb8      	it	lt
 8006dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8006db2:	3402      	adds	r4, #2
 8006db4:	9305      	str	r3, [sp, #20]
 8006db6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e9c <_vfiprintf_r+0x25c>
 8006dba:	7821      	ldrb	r1, [r4, #0]
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	4650      	mov	r0, sl
 8006dc0:	f7f9 fa1e 	bl	8000200 <memchr>
 8006dc4:	b140      	cbz	r0, 8006dd8 <_vfiprintf_r+0x198>
 8006dc6:	2340      	movs	r3, #64	; 0x40
 8006dc8:	eba0 000a 	sub.w	r0, r0, sl
 8006dcc:	fa03 f000 	lsl.w	r0, r3, r0
 8006dd0:	9b04      	ldr	r3, [sp, #16]
 8006dd2:	4303      	orrs	r3, r0
 8006dd4:	3401      	adds	r4, #1
 8006dd6:	9304      	str	r3, [sp, #16]
 8006dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ddc:	482c      	ldr	r0, [pc, #176]	; (8006e90 <_vfiprintf_r+0x250>)
 8006dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006de2:	2206      	movs	r2, #6
 8006de4:	f7f9 fa0c 	bl	8000200 <memchr>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d03f      	beq.n	8006e6c <_vfiprintf_r+0x22c>
 8006dec:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <_vfiprintf_r+0x254>)
 8006dee:	bb1b      	cbnz	r3, 8006e38 <_vfiprintf_r+0x1f8>
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	3307      	adds	r3, #7
 8006df4:	f023 0307 	bic.w	r3, r3, #7
 8006df8:	3308      	adds	r3, #8
 8006dfa:	9303      	str	r3, [sp, #12]
 8006dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfe:	443b      	add	r3, r7
 8006e00:	9309      	str	r3, [sp, #36]	; 0x24
 8006e02:	e767      	b.n	8006cd4 <_vfiprintf_r+0x94>
 8006e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e08:	460c      	mov	r4, r1
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	e7a5      	b.n	8006d5a <_vfiprintf_r+0x11a>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	3401      	adds	r4, #1
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	4619      	mov	r1, r3
 8006e16:	f04f 0c0a 	mov.w	ip, #10
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e20:	3a30      	subs	r2, #48	; 0x30
 8006e22:	2a09      	cmp	r2, #9
 8006e24:	d903      	bls.n	8006e2e <_vfiprintf_r+0x1ee>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0c5      	beq.n	8006db6 <_vfiprintf_r+0x176>
 8006e2a:	9105      	str	r1, [sp, #20]
 8006e2c:	e7c3      	b.n	8006db6 <_vfiprintf_r+0x176>
 8006e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e32:	4604      	mov	r4, r0
 8006e34:	2301      	movs	r3, #1
 8006e36:	e7f0      	b.n	8006e1a <_vfiprintf_r+0x1da>
 8006e38:	ab03      	add	r3, sp, #12
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <_vfiprintf_r+0x258>)
 8006e40:	a904      	add	r1, sp, #16
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7fd fc8c 	bl	8004760 <_printf_float>
 8006e48:	4607      	mov	r7, r0
 8006e4a:	1c78      	adds	r0, r7, #1
 8006e4c:	d1d6      	bne.n	8006dfc <_vfiprintf_r+0x1bc>
 8006e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e50:	07d9      	lsls	r1, r3, #31
 8006e52:	d405      	bmi.n	8006e60 <_vfiprintf_r+0x220>
 8006e54:	89ab      	ldrh	r3, [r5, #12]
 8006e56:	059a      	lsls	r2, r3, #22
 8006e58:	d402      	bmi.n	8006e60 <_vfiprintf_r+0x220>
 8006e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e5c:	f7ff f9d0 	bl	8006200 <__retarget_lock_release_recursive>
 8006e60:	89ab      	ldrh	r3, [r5, #12]
 8006e62:	065b      	lsls	r3, r3, #25
 8006e64:	f53f af12 	bmi.w	8006c8c <_vfiprintf_r+0x4c>
 8006e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e6a:	e711      	b.n	8006c90 <_vfiprintf_r+0x50>
 8006e6c:	ab03      	add	r3, sp, #12
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	462a      	mov	r2, r5
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <_vfiprintf_r+0x258>)
 8006e74:	a904      	add	r1, sp, #16
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7fd ff16 	bl	8004ca8 <_printf_i>
 8006e7c:	e7e4      	b.n	8006e48 <_vfiprintf_r+0x208>
 8006e7e:	bf00      	nop
 8006e80:	08007488 	.word	0x08007488
 8006e84:	080074a8 	.word	0x080074a8
 8006e88:	08007468 	.word	0x08007468
 8006e8c:	08007624 	.word	0x08007624
 8006e90:	0800762e 	.word	0x0800762e
 8006e94:	08004761 	.word	0x08004761
 8006e98:	08006c1b 	.word	0x08006c1b
 8006e9c:	0800762a 	.word	0x0800762a

08006ea0 <_sbrk_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d06      	ldr	r5, [pc, #24]	; (8006ebc <_sbrk_r+0x1c>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	f7fa fea6 	bl	8001bfc <_sbrk>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_sbrk_r+0x1a>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_sbrk_r+0x1a>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20000340 	.word	0x20000340

08006ec0 <__sread>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec8:	f000 f8e2 	bl	8007090 <_read_r>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	bfab      	itete	ge
 8006ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ed4:	181b      	addge	r3, r3, r0
 8006ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eda:	bfac      	ite	ge
 8006edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ede:	81a3      	strhlt	r3, [r4, #12]
 8006ee0:	bd10      	pop	{r4, pc}

08006ee2 <__swrite>:
 8006ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee6:	461f      	mov	r7, r3
 8006ee8:	898b      	ldrh	r3, [r1, #12]
 8006eea:	05db      	lsls	r3, r3, #23
 8006eec:	4605      	mov	r5, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	d505      	bpl.n	8006f00 <__swrite+0x1e>
 8006ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef8:	2302      	movs	r3, #2
 8006efa:	2200      	movs	r2, #0
 8006efc:	f000 f898 	bl	8007030 <_lseek_r>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	463b      	mov	r3, r7
 8006f10:	4628      	mov	r0, r5
 8006f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f16:	f000 b817 	b.w	8006f48 <_write_r>

08006f1a <__sseek>:
 8006f1a:	b510      	push	{r4, lr}
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f22:	f000 f885 	bl	8007030 <_lseek_r>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	bf15      	itete	ne
 8006f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f36:	81a3      	strheq	r3, [r4, #12]
 8006f38:	bf18      	it	ne
 8006f3a:	81a3      	strhne	r3, [r4, #12]
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <__sclose>:
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 b831 	b.w	8006fa8 <_close_r>
	...

08006f48 <_write_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d07      	ldr	r5, [pc, #28]	; (8006f68 <_write_r+0x20>)
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7fa fdff 	bl	8001b5a <_write>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_write_r+0x1e>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_write_r+0x1e>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20000340 	.word	0x20000340

08006f6c <__assert_func>:
 8006f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f6e:	4614      	mov	r4, r2
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <__assert_func+0x2c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4605      	mov	r5, r0
 8006f78:	68d8      	ldr	r0, [r3, #12]
 8006f7a:	b14c      	cbz	r4, 8006f90 <__assert_func+0x24>
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <__assert_func+0x30>)
 8006f7e:	9100      	str	r1, [sp, #0]
 8006f80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f84:	4906      	ldr	r1, [pc, #24]	; (8006fa0 <__assert_func+0x34>)
 8006f86:	462b      	mov	r3, r5
 8006f88:	f000 f81e 	bl	8006fc8 <fiprintf>
 8006f8c:	f000 f89f 	bl	80070ce <abort>
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <__assert_func+0x38>)
 8006f92:	461c      	mov	r4, r3
 8006f94:	e7f3      	b.n	8006f7e <__assert_func+0x12>
 8006f96:	bf00      	nop
 8006f98:	20000020 	.word	0x20000020
 8006f9c:	08007635 	.word	0x08007635
 8006fa0:	08007642 	.word	0x08007642
 8006fa4:	08007670 	.word	0x08007670

08006fa8 <_close_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_close_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7fa fded 	bl	8001b92 <_close>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_close_r+0x1a>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_close_r+0x1a>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20000340 	.word	0x20000340

08006fc8 <fiprintf>:
 8006fc8:	b40e      	push	{r1, r2, r3}
 8006fca:	b503      	push	{r0, r1, lr}
 8006fcc:	4601      	mov	r1, r0
 8006fce:	ab03      	add	r3, sp, #12
 8006fd0:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <fiprintf+0x20>)
 8006fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd6:	6800      	ldr	r0, [r0, #0]
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	f7ff fe31 	bl	8006c40 <_vfiprintf_r>
 8006fde:	b002      	add	sp, #8
 8006fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fe4:	b003      	add	sp, #12
 8006fe6:	4770      	bx	lr
 8006fe8:	20000020 	.word	0x20000020

08006fec <_fstat_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	; (800700c <_fstat_r+0x20>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	f7fa fdd6 	bl	8001baa <_fstat>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d102      	bne.n	8007008 <_fstat_r+0x1c>
 8007002:	682b      	ldr	r3, [r5, #0]
 8007004:	b103      	cbz	r3, 8007008 <_fstat_r+0x1c>
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	bd38      	pop	{r3, r4, r5, pc}
 800700a:	bf00      	nop
 800700c:	20000340 	.word	0x20000340

08007010 <_isatty_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d06      	ldr	r5, [pc, #24]	; (800702c <_isatty_r+0x1c>)
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fa fdd5 	bl	8001bca <_isatty>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_isatty_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_isatty_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20000340 	.word	0x20000340

08007030 <_lseek_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d07      	ldr	r5, [pc, #28]	; (8007050 <_lseek_r+0x20>)
 8007034:	4604      	mov	r4, r0
 8007036:	4608      	mov	r0, r1
 8007038:	4611      	mov	r1, r2
 800703a:	2200      	movs	r2, #0
 800703c:	602a      	str	r2, [r5, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f7fa fdce 	bl	8001be0 <_lseek>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_lseek_r+0x1e>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_lseek_r+0x1e>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	20000340 	.word	0x20000340

08007054 <__ascii_mbtowc>:
 8007054:	b082      	sub	sp, #8
 8007056:	b901      	cbnz	r1, 800705a <__ascii_mbtowc+0x6>
 8007058:	a901      	add	r1, sp, #4
 800705a:	b142      	cbz	r2, 800706e <__ascii_mbtowc+0x1a>
 800705c:	b14b      	cbz	r3, 8007072 <__ascii_mbtowc+0x1e>
 800705e:	7813      	ldrb	r3, [r2, #0]
 8007060:	600b      	str	r3, [r1, #0]
 8007062:	7812      	ldrb	r2, [r2, #0]
 8007064:	1e10      	subs	r0, r2, #0
 8007066:	bf18      	it	ne
 8007068:	2001      	movne	r0, #1
 800706a:	b002      	add	sp, #8
 800706c:	4770      	bx	lr
 800706e:	4610      	mov	r0, r2
 8007070:	e7fb      	b.n	800706a <__ascii_mbtowc+0x16>
 8007072:	f06f 0001 	mvn.w	r0, #1
 8007076:	e7f8      	b.n	800706a <__ascii_mbtowc+0x16>

08007078 <__malloc_lock>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__malloc_lock+0x8>)
 800707a:	f7ff b8c0 	b.w	80061fe <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20000334 	.word	0x20000334

08007084 <__malloc_unlock>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__malloc_unlock+0x8>)
 8007086:	f7ff b8bb 	b.w	8006200 <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20000334 	.word	0x20000334

08007090 <_read_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d07      	ldr	r5, [pc, #28]	; (80070b0 <_read_r+0x20>)
 8007094:	4604      	mov	r4, r0
 8007096:	4608      	mov	r0, r1
 8007098:	4611      	mov	r1, r2
 800709a:	2200      	movs	r2, #0
 800709c:	602a      	str	r2, [r5, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	f7fa fd3e 	bl	8001b20 <_read>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_read_r+0x1e>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_read_r+0x1e>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20000340 	.word	0x20000340

080070b4 <__ascii_wctomb>:
 80070b4:	b149      	cbz	r1, 80070ca <__ascii_wctomb+0x16>
 80070b6:	2aff      	cmp	r2, #255	; 0xff
 80070b8:	bf85      	ittet	hi
 80070ba:	238a      	movhi	r3, #138	; 0x8a
 80070bc:	6003      	strhi	r3, [r0, #0]
 80070be:	700a      	strbls	r2, [r1, #0]
 80070c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80070c4:	bf98      	it	ls
 80070c6:	2001      	movls	r0, #1
 80070c8:	4770      	bx	lr
 80070ca:	4608      	mov	r0, r1
 80070cc:	4770      	bx	lr

080070ce <abort>:
 80070ce:	b508      	push	{r3, lr}
 80070d0:	2006      	movs	r0, #6
 80070d2:	f000 f82b 	bl	800712c <raise>
 80070d6:	2001      	movs	r0, #1
 80070d8:	f7fa fd18 	bl	8001b0c <_exit>

080070dc <_raise_r>:
 80070dc:	291f      	cmp	r1, #31
 80070de:	b538      	push	{r3, r4, r5, lr}
 80070e0:	4604      	mov	r4, r0
 80070e2:	460d      	mov	r5, r1
 80070e4:	d904      	bls.n	80070f0 <_raise_r+0x14>
 80070e6:	2316      	movs	r3, #22
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070f2:	b112      	cbz	r2, 80070fa <_raise_r+0x1e>
 80070f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070f8:	b94b      	cbnz	r3, 800710e <_raise_r+0x32>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f830 	bl	8007160 <_getpid_r>
 8007100:	462a      	mov	r2, r5
 8007102:	4601      	mov	r1, r0
 8007104:	4620      	mov	r0, r4
 8007106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800710a:	f000 b817 	b.w	800713c <_kill_r>
 800710e:	2b01      	cmp	r3, #1
 8007110:	d00a      	beq.n	8007128 <_raise_r+0x4c>
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	d103      	bne.n	800711e <_raise_r+0x42>
 8007116:	2316      	movs	r3, #22
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	2001      	movs	r0, #1
 800711c:	e7e7      	b.n	80070ee <_raise_r+0x12>
 800711e:	2400      	movs	r4, #0
 8007120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007124:	4628      	mov	r0, r5
 8007126:	4798      	blx	r3
 8007128:	2000      	movs	r0, #0
 800712a:	e7e0      	b.n	80070ee <_raise_r+0x12>

0800712c <raise>:
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <raise+0xc>)
 800712e:	4601      	mov	r1, r0
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	f7ff bfd3 	b.w	80070dc <_raise_r>
 8007136:	bf00      	nop
 8007138:	20000020 	.word	0x20000020

0800713c <_kill_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d07      	ldr	r5, [pc, #28]	; (800715c <_kill_r+0x20>)
 8007140:	2300      	movs	r3, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	f7fa fccf 	bl	8001aec <_kill>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d102      	bne.n	8007158 <_kill_r+0x1c>
 8007152:	682b      	ldr	r3, [r5, #0]
 8007154:	b103      	cbz	r3, 8007158 <_kill_r+0x1c>
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop
 800715c:	20000340 	.word	0x20000340

08007160 <_getpid_r>:
 8007160:	f7fa bcbc 	b.w	8001adc <_getpid>

08007164 <_init>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr

08007170 <_fini>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	bf00      	nop
 8007174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007176:	bc08      	pop	{r3}
 8007178:	469e      	mov	lr, r3
 800717a:	4770      	bx	lr
